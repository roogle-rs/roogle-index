{"root":"0:0:2219","crate_version":"0.4.34","includes_private":false,"index":{"0:485":{"id":"0:485","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1311,0],"end":[1318,1]},"visibility":"default","docs":"Add-assign `std::time::Duration` to `DateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`DateTime<Tz>::checked_add_signed`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_add_signed`":"0:354:2760"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33052:2333","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:487:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:509:1570":{"id":"0:509:1570","crate_id":0,"name":"sub_assign","span":{"filename":"src/datetime/mod.rs","begin":[1433,4],"end":[1437,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:2164:2134":{"id":"a:2:3058:246-0:2164:2134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3058:246-0:2171:2139":{"id":"a:2:3058:246-0:2171:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2411:3419":{"id":"0:2411:3419","crate_id":0,"name":"Internal","span":{"filename":"src/format/mod.rs","begin":[251,4],"end":[251,27]},"visibility":"default","docs":"Internal uses only.\n\nThis item exists so that one can add additional internal-only formatting\nwithout breaking major compatibility (as enum variants cannot be selectively private).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2413:1767"]},"discriminant":null}}},"b:2:2839-0:2654:5260":{"id":"b:2:2839-0:2654:5260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2563-0:2479:3495":{"id":"b:2:2563-0:2479:3495","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1100:2170":{"id":"0:1100:2170","crate_id":0,"name":"weekday","span":{"filename":"src/naive/date.rs","begin":[1673,4],"end":[1675,5]},"visibility":"default","docs":"Returns the day of week.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike, Weekday};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().weekday(), Weekday::Tue);\nassert_eq!(NaiveDate::from_ymd_opt(-308, 3, 14).unwrap().weekday(), Weekday::Fri);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1254:2382":{"id":"0:1254:2382","crate_id":0,"name":"MIN","span":{"filename":"src/naive/datetime/mod.rs","begin":[1097,4],"end":[1097,78]},"visibility":"public","docs":"The minimum possible `NaiveDateTime`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"b:2:2563-0:2746:2164":{"id":"b:2:2563-0:2746:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1963:3279":{"id":"0:1963:3279","crate_id":0,"name":"timestamp_millis_opt","span":{"filename":"src/offset/mod.rs","begin":[416,4],"end":[421,5]},"visibility":"default","docs":"Makes a new `DateTime` from the number of non-leap milliseconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").\n\n\nReturns `LocalResult::None` on out-of-range number of milliseconds\nand/or invalid nanosecond, otherwise always returns\n`LocalResult::Single`.\n\n# Example\n\n```\nuse chrono::{Utc, TimeZone, LocalResult};\nmatch Utc.timestamp_millis_opt(1431648000) {\n    LocalResult::Single(dt) => assert_eq!(dt.timestamp(), 1431648),\n    _ => panic!(\"Incorrect timestamp_millis\"),\n};\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["millis",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1965:2918":{"id":"0:1965:2918","crate_id":0,"name":"timestamp_micros","span":{"filename":"src/offset/mod.rs","begin":[454,4],"end":[459,5]},"visibility":"default","docs":"Makes a new `DateTime` from the number of non-leap microseconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").\n\n# Example\n\n```\nuse chrono::{Utc, TimeZone};\n\nassert_eq!(Utc.timestamp_micros(1431648000000).unwrap().timestamp(), 1431648);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["micros",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3194:3614":{"id":"0:3194:3614","crate_id":0,"name":"September","span":{"filename":"src/month.rs","begin":[59,4],"end":[59,17]},"visibility":"default","docs":"September","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"8","value":"8"}}}},"0:2025:2525":{"id":"0:2025:2525","crate_id":0,"name":"description","span":{"filename":"src/round.rs","begin":[280,4],"end":[282,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1040:3132":{"id":"0:1040:3132","crate_id":0,"name":"parse_from_str","span":{"filename":"src/naive/date.rs","begin":[585,4],"end":[589,5]},"visibility":"public","docs":"Parses a string with the specified format string and returns a new `NaiveDate`.\nSee the [`format::strftime` module](crate::format::strftime)\non the supported escape sequences.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet parse_from_str = NaiveDate::parse_from_str;\n\nassert_eq!(parse_from_str(\"2015-09-05\", \"%Y-%m-%d\"),\n           Ok(NaiveDate::from_ymd_opt(2015, 9, 5).unwrap()));\nassert_eq!(parse_from_str(\"5sep2015\", \"%d%b%Y\"),\n           Ok(NaiveDate::from_ymd_opt(2015, 9, 5).unwrap()));\n```\n\nTime and offset is ignored for the purpose of parsing.\n\n```\n# use chrono::NaiveDate;\n# let parse_from_str = NaiveDate::parse_from_str;\nassert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),\n           Ok(NaiveDate::from_ymd_opt(2014, 5, 17).unwrap()));\n```\n\nOut-of-bound dates or insufficient fields are errors.\n\n```\n# use chrono::NaiveDate;\n# let parse_from_str = NaiveDate::parse_from_str;\nassert!(parse_from_str(\"2015/9\", \"%Y/%m\").is_err());\nassert!(parse_from_str(\"2015/9/31\", \"%Y/%m/%d\").is_err());\n```\n\nAll parsed fields should be consistent to each other, otherwise it's an error.\n\n```\n# use chrono::NaiveDate;\n# let parse_from_str = NaiveDate::parse_from_str;\nassert!(parse_from_str(\"Sat, 09 Aug 2013\", \"%a, %d %b %Y\").is_err());\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2684":{"id":"0:2684","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2135,35],"end":[2135,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2685:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5597:9554":{"id":"5:5597:9554","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7633:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:2409":{"id":"0:39:2409","crate_id":0,"name":"try_hours","span":{"filename":"src/time_delta.rs","begin":[170,4],"end":[172,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of hours.\n\nEquivalent to `TimeDelta::seconds(hours * 60 * 60)` with overflow checks.\n\n# Errors\n\nReturns `None` when the `TimeDelta` would be out of bounds.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hours",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41605:9275-0:2461:3492":{"id":"a:2:41605:9275-0:2461:3492","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3671-0:2284:3355":{"id":"b:2:3671-0:2284:3355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:79:1570":{"id":"0:79:1570","crate_id":0,"name":"sub_assign","span":{"filename":"src/time_delta.rs","begin":[482,4],"end":[485,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:242":{"id":"0:242","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[484,0],"end":[488,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2646:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:244:465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2776":{"id":"0:2776","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[204,42],"end":[204,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2646:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2777:465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2774":{"id":"0:2774","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[204,30],"end":[204,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","ge","gt","le"],"trait":{"name":"PartialOrd","id":"2:2652:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2775:1151"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2071":{"id":"0:2071","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[231,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2072:1053","0:2073:8550"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1053:2705":{"id":"0:1053:2705","crate_id":0,"name":"and_hms_opt","span":{"filename":"src/naive/date.rs","begin":[866,4],"end":[869,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date, hour, minute and second.\n\nNo [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;\nuse `NaiveDate::and_hms_*_opt` methods with a subsecond parameter instead.\n\n# Errors\n\nReturns `None` on invalid hour, minute and/or second.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet d = NaiveDate::from_ymd_opt(2015, 6, 3).unwrap();\nassert!(d.and_hms_opt(12, 34, 56).is_some());\nassert!(d.and_hms_opt(12, 34, 60).is_none()); // use `and_hms_milli_opt` instead\nassert!(d.and_hms_opt(12, 60, 56).is_none());\nassert!(d.and_hms_opt(24, 34, 56).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1159:137":{"id":"0:1159:137","crate_id":0,"name":"Err","span":{"filename":"src/naive/date.rs","begin":[2255,4],"end":[2255,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:354:2760":{"id":"0:354:2760","crate_id":0,"name":"checked_add_signed","span":{"filename":"src/datetime/mod.rs","begin":[373,4],"end":[377,5]},"visibility":"public","docs":"Adds given `TimeDelta` to the current date and time.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:938:726":{"id":"0:938:726","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[162,4],"end":[164,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:2151:2130":{"id":"a:2:3058:246-0:2151:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:112-0:2187:2140":{"id":"0:112-0:2187:2140","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[483,30],"end":[483,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::SecondsFormat","name":"SecondsFormat","id":"0:2187:2140","glob":false}}},"b:2:2850-0:2284:3355":{"id":"b:2:2850-0:2284:3355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:937":{"id":"0:937","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[161,0],"end":[165,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:938:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2620":{"id":"0:2620","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[132,9],"end":[132,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2621:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1612:7436":{"id":"0:1612:7436","crate_id":0,"name":"offset_from_local_datetime","span":{"filename":"src/offset/fixed.rs","begin":[139,4],"end":[141,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5869-0:2151:2130":{"id":"b:5:5869-0:2151:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2347:1767":{"id":"0:2347:1767","crate_id":0,"name":"0","span":{"filename":"src/format/mod.rs","begin":[152,13],"end":[152,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:1941:2705":{"id":"0:1941:2705","crate_id":0,"name":"and_hms_opt","span":{"filename":"src/offset/mod.rs","begin":[115,4],"end":[122,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.\n\nPropagates any error. Ambiguous result would be discarded.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2656":{"id":"0:2656","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2099,9],"end":[2099,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2657:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2188:3688":{"id":"0:2188:3688","crate_id":0,"name":"Secs","span":{"filename":"src/format/formatting.rs","begin":[513,4],"end":[513,8]},"visibility":"default","docs":"Format whole seconds only, with no decimal point nor subseconds.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13068:3120":{"id":"2:13068:3120","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1611:7434":{"id":"0:1611:7434","crate_id":0,"name":"offset_from_local_date","span":{"filename":"src/offset/fixed.rs","begin":[136,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[72,0],"end":[319,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:159:2688","0:160:2692","0:161:2701","0:162:2705","0:164:2713","0:165:2715","0:167:2722","0:168:2724","0:170:2731","0:171:2733","0:173:2739","0:174:2740","0:176:2746","0:177:2747","0:179:1104","0:180:2695","0:181:2754","0:183:2760","0:184:2762","0:185:2767","0:187:2769","0:188:2694","0:189:2775","0:190:2682","0:191:2685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2546:138":{"id":"0:2546:138","crate_id":0,"name":"Error","span":{"filename":"src/format/mod.rs","begin":[343,4],"end":[343,9]},"visibility":"default","docs":"Issues a formatting error. Used to signal an invalid format string.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1230:2940":{"id":"0:1230:2940","crate_id":0,"name":"timestamp_nanos_opt","span":{"filename":"src/naive/datetime/mod.rs","begin":[547,4],"end":[568,5]},"visibility":"public","docs":"Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.\n\nNote that this does *not* account for the timezone!\nThe true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.\n\n# Errors\n\nAn `i64` with nanosecond precision can span a range of ~584 years. This function returns\n`None` on an out of range `NaiveDateTime`.\n\nThe dates that can be represented as nanoseconds are between 1677-09-21T00:12:43.145224192\nand 2262-04-11T23:47:16.854775807.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime};\n\nlet dt = NaiveDate::from_ymd_opt(1970, 1, 1).unwrap().and_hms_nano_opt(0, 0, 1, 444).unwrap();\nassert_eq!(dt.timestamp_nanos_opt(), Some(1_000_000_444));\n\nlet dt = NaiveDate::from_ymd_opt(2001, 9, 9).unwrap().and_hms_nano_opt(1, 46, 40, 555).unwrap();\n\nconst A_BILLION: i64 = 1_000_000_000;\nlet nanos = dt.timestamp_nanos_opt().unwrap();\nassert_eq!(nanos, 1_000_000_000_000_000_555);\nassert_eq!(\n    Some(dt),\n    NaiveDateTime::from_timestamp_opt(nanos / A_BILLION, (nanos % A_BILLION) as u32)\n);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:1053":{"id":"0:33:1053","crate_id":0,"name":"new","span":{"filename":"src/time_delta.rs","begin":[83,4],"end":[93,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with given number of seconds and nanoseconds.\n\n# Errors\n\nReturns `None` when the duration is out of bounds, or if `nanos` ≥ 1,000,000,000.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"i64"}],["nanos",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:445:3183":{"id":"0:445:3183","crate_id":0,"name":"with_hour","span":{"filename":"src/datetime/mod.rs","begin":[1143,4],"end":[1145,5]},"visibility":"default","docs":"Makes a new `DateTime` with the hour number changed.\n\nSee also the [`NaiveTime::with_hour`] method.\n\n# Errors\n\nReturns `None` if:\n- The value for `hour` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveTime::with_hour`":"0:1498:3183"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2383:3441":{"id":"0:2383:3441","crate_id":0,"name":"UpperAmPm","span":{"filename":"src/format/mod.rs","begin":[196,4],"end":[196,13]},"visibility":"default","docs":"AM/PM.\n\nPrints in upper case, reads in any case.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2462:3494":{"id":"0:2462:3494","crate_id":0,"name":"precision","span":{"filename":"src/format/mod.rs","begin":[283,4],"end":[283,34]},"visibility":"public","docs":"See `OffsetPrecision`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:1096:2798":{"id":"0:1096:2798","crate_id":0,"name":"day","span":{"filename":"src/naive/date.rs","begin":[1585,4],"end":[1587,5]},"visibility":"default","docs":"Returns the day of month starting from 1.\n\nThe return value ranges from 1 to 31. (The last day of month differs by months.)\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().day(), 8);\nassert_eq!(NaiveDate::from_ymd_opt(-308, 3, 14).unwrap().day(), 14);\n```\n\nCombined with [`NaiveDate::pred_opt`](#method.pred_opt),\none can determine the number of days in a particular month.\n(Note that this panics when `year` is out of range.)\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nfn ndays_in_month(year: i32, month: u32) -> u32 {\n    // the first day of the next month...\n    let (y, m) = if month == 12 { (year + 1, 1) } else { (year, month + 1) };\n    let d = NaiveDate::from_ymd_opt(y, m, 1).unwrap();\n\n    // ...is preceded by the last day of the original month\n    d.pred_opt().unwrap().day()\n}\n\nassert_eq!(ndays_in_month(2015, 8), 31);\nassert_eq!(ndays_in_month(2015, 9), 30);\nassert_eq!(ndays_in_month(2015, 12), 31);\nassert_eq!(ndays_in_month(2016, 2), 29);\nassert_eq!(ndays_in_month(2017, 2), 28);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[578,0],"end":[582,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:98:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2606":{"id":"0:2606","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[395,34],"end":[395,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2608":{"id":"0:2608","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[395,38],"end":[395,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2839-0:2763:2149":{"id":"b:2:2839-0:2763:2149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1614:4079":{"id":"0:1614:4079","crate_id":0,"name":"offset_from_utc_datetime","span":{"filename":"src/offset/fixed.rs","begin":[146,4],"end":[148,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3248":{"id":"0:3248","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[245,16],"end":[245,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3249:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1119:199":{"id":"0:1119:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/date.rs","begin":[1969,4],"end":[1969,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2421":{"id":"0:2421","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[171,31],"end":[171,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2422:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:275-0:156:2153":{"id":"0:275-0:156:2153","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[495,15],"end":[495,23]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"date::MAX_DATE","name":"MAX_DATE","id":"0:156:2153","glob":false}}},"0:2108:3654":{"id":"0:2108:3654","crate_id":0,"name":"hour12","span":{"filename":"src/traits.rs","begin":[274,4],"end":[281,5]},"visibility":"default","docs":"Returns the hour number from 1 to 12 with a boolean flag,\nwhich is false for AM and true for PM.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"bool"},{"primitive":"u32"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1088:2382":{"id":"0:1088:2382","crate_id":0,"name":"MIN","span":{"filename":"src/naive/date.rs","begin":[1487,4],"end":[1487,92]},"visibility":"public","docs":"The minimum possible `NaiveDate` (January 1, 262144 BCE).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:3068:458":{"id":"0:3068:458","crate_id":0,"name":"clone","span":{"filename":"src/offset/utc.rs","begin":[43,15],"end":[43,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13166:7727":{"id":"2:13166:7727","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:8930"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12783:8945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:3223:2174":{"id":"a:2:3058:246-0:3223:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:212:2801":{"id":"0:212:2801","crate_id":0,"name":"ordinal0","span":{"filename":"src/date.rs","begin":[418,4],"end":[420,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:2129:2131":{"id":"a:2:3058:246-0:2129:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3148":{"id":"0:3148","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[32,9],"end":[32,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3149:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:559:739":{"id":"0:559:739","crate_id":0,"name":"format","span":{"filename":"src/format/mod.rs","begin":[4,0],"end":[552,1]},"visibility":"public","docs":"Formatting (and parsing) utilities for date and time.\n\nThis module provides the common types and routines to implement,\nfor example, [`DateTime::format`](../struct.DateTime.html#method.format) or\n[`DateTime::parse_from_str`](../struct.DateTime.html#method.parse_from_str) methods.\nFor most cases you should use these high-level interfaces.\n\nInternally the formatting and parsing shares the same abstract **formatting items**,\nwhich are just an [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) of\nthe [`Item`](./enum.Item.html) type.\nThey are generated from more readable **format strings**;\ncurrently Chrono supports a built-in syntax closely resembling\nC's `strftime` format. The available options can be found [here](./strftime/index.html).\n\n# Example\n```rust\nuse chrono::{NaiveDateTime, TimeZone, Utc};\n\nlet date_time = Utc.with_ymd_and_hms(2020, 11, 10, 0, 1, 32).unwrap();\n\nlet formatted = format!(\"{}\", date_time.format(\"%Y-%m-%d %H:%M:%S\"));\nassert_eq!(formatted, \"2020-11-10 00:01:32\");\n\nlet parsed = NaiveDateTime::parse_from_str(&formatted, \"%Y-%m-%d %H:%M:%S\")?.and_utc();\nassert_eq!(parsed, date_time);\n# Ok::<(), chrono::ParseError>(())\n```","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:866:3347","0:926-0:2187:2140","0:928-0:609:739","0:929-0:613:3351","0:930-0:2178:2653","0:933-0:779:2839","0:934-0:783:2840","0:935-0:2213:2843","0:936-0:2251:2654","0:2284:3355","0:2304:3372","0:2360:3420","0:2372:2842","0:2426:3477","0:2461:3492","0:2479:3495","0:2505:3498","0:2525:174","0:2566:2160","0:2582:3548","0:949:2161"],"is_stripped":false}}},"b:5:5869-0:2692:2148":{"id":"b:5:5869-0:2692:2148","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13083:35727":{"id":"2:13083:35727","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:2184":{"id":"0:2184","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[35,9],"end":[35,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["0:2186:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2379:3436":{"id":"0:2379:3436","crate_id":0,"name":"LongWeekdayName","span":{"filename":"src/format/mod.rs","begin":[188,4],"end":[188,19]},"visibility":"default","docs":"Full day of the week names.\n\nPrints a full name in the title case, reads either a short or full name in any case.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2845-0:2617:2163":{"id":"b:2:2845-0:2617:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2845-0:3125:2144":{"id":"b:2:2845-0:3125:2144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2158":{"id":"0:2158","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[575,23],"end":[575,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3074":{"id":"0:3074","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[43,37],"end":[43,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3075:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3058:246-0:3064:2146":{"id":"a:2:3058:246-0:3064:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1220:2840":{"id":"0:1220:2840","crate_id":0,"name":"parse_and_remainder","span":{"filename":"src/naive/datetime/mod.rs","begin":[376,4],"end":[380,5]},"visibility":"public","docs":"Parses a string with the specified format string and returns a new `NaiveDateTime`, and a\nslice with the remaining portion of the string.\nSee the [`format::strftime` module](crate::format::strftime)\non the supported escape sequences.\n\nSimilar to [`parse_from_str`](#method.parse_from_str).\n\n# Example\n\n```rust\n# use chrono::{NaiveDate, NaiveDateTime};\nlet (datetime, remainder) = NaiveDateTime::parse_and_remainder(\n    \"2015-02-18 23:16:09 trailing text\", \"%Y-%m-%d %H:%M:%S\").unwrap();\nassert_eq!(\n    datetime,\n    NaiveDate::from_ymd_opt(2015, 2, 18).unwrap().and_hms_opt(23, 16, 9).unwrap()\n);\nassert_eq!(remainder, \" trailing text\");\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2090:2172":{"id":"0:2090:2172","crate_id":0,"name":"month","span":{"filename":"src/traits.rs","begin":[50,4],"end":[50,27]},"visibility":"default","docs":"Returns the month number starting from 1.\n\nThe return value ranges from 1 to 12.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2560-0:2612:2165":{"id":"b:2:2560-0:2612:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2612:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41605:9275-0:3252:2209":{"id":"a:2:41605:9275-0:3252:2209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41604:9276-0:2673:5261":{"id":"a:2:41604:9276-0:2673:5261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2839-0:2617:2163":{"id":"b:2:2839-0:2617:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3118:458":{"id":"0:3118:458","crate_id":0,"name":"clone","span":{"filename":"src/round.rs","begin":[230,16],"end":[230,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:420:2799":{"id":"0:420:2799","crate_id":0,"name":"day0","span":{"filename":"src/datetime/mod.rs","begin":[981,4],"end":[983,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:3125:2144":{"id":"b:2:2839-0:3125:2144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1503":{"id":"0:1503","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1135,0],"end":[1142,1]},"visibility":"default","docs":"Add `TimeDelta` to `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the addition ignores integral number of days.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveTime` itself represents a leap second in which case the\nassumption becomes that **there is exactly a single leap second ever**.\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveTime};\n\nlet from_hmsm = |h, m, s, milli| { NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap() };\n\nassert_eq!(from_hmsm(3, 5, 7, 0) + TimeDelta::zero(),                  from_hmsm(3, 5, 7, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) + TimeDelta::seconds(1),              from_hmsm(3, 5, 8, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) + TimeDelta::seconds(-1),             from_hmsm(3, 5, 6, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) + TimeDelta::seconds(60 + 4),         from_hmsm(3, 6, 11, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) + TimeDelta::seconds(7*60*60 - 6*60), from_hmsm(9, 59, 7, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) + TimeDelta::milliseconds(80),        from_hmsm(3, 5, 7, 80));\nassert_eq!(from_hmsm(3, 5, 7, 950) + TimeDelta::milliseconds(280),     from_hmsm(3, 5, 8, 230));\nassert_eq!(from_hmsm(3, 5, 7, 950) + TimeDelta::milliseconds(-980),    from_hmsm(3, 5, 6, 970));\n```\n\nThe addition wraps around.\n\n```\n# use chrono::{TimeDelta, NaiveTime};\n# let from_hmsm = |h, m, s, milli| { NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap() };\nassert_eq!(from_hmsm(3, 5, 7, 0) + TimeDelta::seconds(22*60*60), from_hmsm(1, 5, 7, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) + TimeDelta::seconds(-8*60*60), from_hmsm(19, 5, 7, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) + TimeDelta::days(800),         from_hmsm(3, 5, 7, 0));\n```\n\nLeap seconds are handled, but the addition assumes that it is the only leap second happened.\n\n```\n# use chrono::{TimeDelta, NaiveTime};\n# let from_hmsm = |h, m, s, milli| { NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap() };\nlet leap = from_hmsm(3, 5, 59, 1_300);\nassert_eq!(leap + TimeDelta::zero(),             from_hmsm(3, 5, 59, 1_300));\nassert_eq!(leap + TimeDelta::milliseconds(-500), from_hmsm(3, 5, 59, 800));\nassert_eq!(leap + TimeDelta::milliseconds(500),  from_hmsm(3, 5, 59, 1_800));\nassert_eq!(leap + TimeDelta::milliseconds(800),  from_hmsm(3, 6, 0, 100));\nassert_eq!(leap + TimeDelta::seconds(10),        from_hmsm(3, 6, 9, 300));\nassert_eq!(leap + TimeDelta::seconds(-10),       from_hmsm(3, 5, 50, 300));\nassert_eq!(leap + TimeDelta::days(1),            from_hmsm(3, 5, 59, 300));\n```\n\n[leap second handling]: crate::NaiveTime#leap-second-handling","links":{"crate::NaiveTime#leap-second-handling":"0:2763:2149"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1504:199","0:1505:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:332":{"id":"0:332","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[71,0],"end":[595,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:334:2870","0:335:2688","0:336:2878","0:337:2152","0:338:2895","0:339:2197","0:340:2905","0:341:2912","0:342:2918","0:343:2926","0:344:2940","0:345:2943","0:346:2946","0:347:2949","0:348:1104","0:349:2695","0:350:2754","0:352:2955","0:353:2958","0:354:2760","0:355:2968","0:356:2762","0:357:2973","0:358:2975","0:359:2977","0:360:2767","0:362:2769","0:363:2694","0:365:2775","0:366:2999","0:367:3003","0:368:3023","0:369:2682","0:370:2685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41605:9275-0:2673:5261":{"id":"a:2:41605:9275-0:2673:5261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:936-0:2251:2654":{"id":"0:936-0:2251:2654","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[70,0],"end":[70,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"strftime::StrftimeItems","name":"StrftimeItems","id":"0:2251:2654","glob":false}}},"0:2067":{"id":"0:2067","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[189,0],"end":[224,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["from_i128","from_i8","from_f64","from_f32","from_u8","from_i16","from_u16","from_i32","from_isize","from_usize","from_u32","from_u128"],"trait":{"name":"FromPrimitive","id":"21:164:8458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2068:8460","0:2069:8459","0:2070:8546"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:542:3264":{"id":"0:542:3264","crate_id":0,"name":"from_str","span":{"filename":"src/datetime/mod.rs","begin":[1590,4],"end":[1592,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1601:7500":{"id":"0:1601:7500","crate_id":0,"name":"west","span":{"filename":"src/offset/fixed.rs","begin":[77,4],"end":[79,5]},"visibility":"public","docs":"Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.\n\nPanics on the out-of-bound `secs`.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `west_opt()` instead\")]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `west_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1984:2167":{"id":"0:1984:2167","crate_id":0,"name":"round","span":{"filename":"src/round.rs","begin":[4,0],"end":[797,1]},"visibility":"public","docs":"Functionality for rounding or truncating a `DateTime` by a `TimeDelta`.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1997:2138","0:2005:2168","0:3108:2169"],"is_stripped":false}}},"0:2668:1151":{"id":"0:2668:1151","crate_id":0,"name":"partial_cmp","span":{"filename":"src/naive/date.rs","begin":[2099,46],"end":[2099,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2134":{"id":"0:2134","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,16],"end":[52,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:54:2459":{"id":"0:54:2459","crate_id":0,"name":"num_milliseconds","span":{"filename":"src/time_delta.rs","begin":[322,4],"end":[329,5]},"visibility":"public","docs":"Returns the total number of whole milliseconds in the `TimeDelta`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:3077:2166":{"id":"b:2:2563-0:3077:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2845-0:2360:3420":{"id":"b:2:2845-0:2360:3420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2748":{"id":"0:2748","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[19,9],"end":[19,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3079:191":{"id":"0:3079:191","crate_id":0,"name":"None","span":{"filename":"src/offset/mod.rs","begin":[45,4],"end":[45,8]},"visibility":"default","docs":"Given local time representation is invalid.\nThis can occur when, for example, the positive timezone transition.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2835-0:2505:3498":{"id":"b:2:2835-0:2505:3498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3111:8311":{"id":"0:3111:8311","crate_id":0,"name":"DurationExceedsLimit","span":{"filename":"src/round.rs","begin":[248,4],"end":[248,24]},"visibility":"default","docs":"Error when `TimeDelta.num_nanoseconds` exceeds the limit.\n\n``` rust\n# use chrono::{DurationRound, TimeDelta, RoundingError, Utc, NaiveDate};\nlet dt = NaiveDate::from_ymd_opt(2260, 12, 31).unwrap().and_hms_nano_opt(23, 59, 59, 1_75_500_000).unwrap().and_local_timezone(Utc).unwrap();\n\nassert_eq!(\n    dt.duration_round(TimeDelta::days(300 * 365)),\n    Err(RoundingError::DurationExceedsLimit)\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13089:35751":{"id":"2:13089:35751","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13091:35755","str::split_at_mut":"2:13090:35752"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2518":{"id":"0:2518","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[314,29],"end":[314,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2519:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3671-0:2582:3548":{"id":"b:2:3671-0:2582:3548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:2692:2148":{"id":"b:5:725-0:2692:2148","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:3160:2171":{"id":"b:5:725-0:3160:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2560-0:3169:2142":{"id":"b:2:2560-0:3169:2142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:167:2722":{"id":"0:167:2722","crate_id":0,"name":"and_hms_micro","span":{"filename":"src/date.rs","begin":[150,4],"end":[152,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nPanics on invalid hour, minute, second and/or microsecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"Use and_hms_micro_opt() instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"Use and_hms_micro_opt() instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["micro",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1558-0:1210:2158":{"id":"0:1558-0:1210:2158","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[20,54],"end":[20,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"self::datetime::MIN_DATETIME","name":"MIN_DATETIME","id":"0:1210:2158","glob":false}}},"0:723:4008":{"id":"0:723:4008","crate_id":0,"name":"set_offset","span":{"filename":"src/format/parsed.rs","begin":[280,4],"end":[282,5]},"visibility":"public","docs":"Tries to set the [`offset`](#structfield.offset) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13149:41646":{"id":"2:13149:41646","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12757:8930","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::matches":"2:13146:7835"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43585:8968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:8946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2435":{"id":"0:2435","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[255,34],"end":[255,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2672:465":{"id":"0:2672:465","crate_id":0,"name":"cmp","span":{"filename":"src/naive/date.rs","begin":[2099,62],"end":[2099,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117-0:3125:2144":{"id":"0:117-0:3125:2144","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[484,47],"end":[484,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Weekday","name":"Weekday","id":"0:3125:2144","glob":false}}},"b:2:2839-0:3064:2146":{"id":"b:2:2839-0:3064:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2560-0:2763:2149":{"id":"b:2:2560-0:2763:2149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:123-0:2692:2148":{"id":"0:123-0:2692:2148","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[486,31],"end":[486,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::NaiveDateTime","name":"NaiveDateTime","id":"0:2692:2148","glob":false}}},"b:2:2835-0:2284:3355":{"id":"b:2:2835-0:2284:3355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2574":{"id":"0:2574","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[383,23],"end":[383,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2575:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1509:199":{"id":"0:1509:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/time/mod.rs","begin":[1160,4],"end":[1160,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:3090:458":{"id":"0:3090:458","crate_id":0,"name":"clone","span":{"filename":"src/offset/mod.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2053:726":{"id":"0:2053:726","crate_id":0,"name":"fmt","span":{"filename":"src/weekday.rs","begin":[245,4],"end":[247,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31969:237-0:2654:5260":{"id":"a:2:31969:237-0:2654:5260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3249:667":{"id":"0:3249:667","crate_id":0,"name":"eq","span":{"filename":"src/month.rs","begin":[245,16],"end":[245,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2845-0:2284:3355":{"id":"b:2:2845-0:2284:3355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2479:3495":{"id":"0:2479:3495","crate_id":0,"name":"OffsetPrecision","span":{"filename":"src/format/mod.rs","begin":[294,0],"end":[311,1]},"visibility":"public","docs":"The precision of an offset from UTC formatting item.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:2480:3507","0:2482:3510","0:2484:3512","0:2486:3514","0:2488:3516","0:2490:3518"],"impls":["a:2:41605:9275-0:2479:3495","a:2:3058:246-0:2479:3495","a:2:31969:237-0:2479:3495","a:2:41604:9276-0:2479:3495","a:2:32026:9229-0:2479:3495","b:2:2563-0:2479:3495","b:2:3671-0:2479:3495","b:2:2835-0:2479:3495","b:2:2839-0:2479:3495","b:2:2850-0:2479:3495","b:2:2560-0:2479:3495","b:2:2845-0:2479:3495","b:5:725-0:2479:3495","0:2502","0:2498","0:2495","0:2500","0:2492","0:2497","0:2494"]}}},"0:1529":{"id":"0:1529","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1352,0],"end":[1359,1]},"visibility":"default","docs":"Subtracts another `NaiveTime` from the current time.\nReturns a `TimeDelta` within +/- 1 day.\nThis does not overflow or underflow at all.\n\nAs a part of Chrono's [leap second handling](#leap-second-handling),\nthe subtraction assumes that **there is no leap second ever**,\nexcept when any of the `NaiveTime`s themselves represents a leap second\nin which case the assumption becomes that\n**there are exactly one (or two) leap second(s) ever**.\n\nThe implementation is a wrapper around\n[`NaiveTime::signed_duration_since`](#method.signed_duration_since).\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveTime};\n\nlet from_hmsm = |h, m, s, milli| { NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap() };\n\nassert_eq!(from_hmsm(3, 5, 7, 900) - from_hmsm(3, 5, 7, 900), TimeDelta::zero());\nassert_eq!(from_hmsm(3, 5, 7, 900) - from_hmsm(3, 5, 7, 875), TimeDelta::milliseconds(25));\nassert_eq!(from_hmsm(3, 5, 7, 900) - from_hmsm(3, 5, 6, 925), TimeDelta::milliseconds(975));\nassert_eq!(from_hmsm(3, 5, 7, 900) - from_hmsm(3, 5, 0, 900), TimeDelta::seconds(7));\nassert_eq!(from_hmsm(3, 5, 7, 900) - from_hmsm(3, 0, 7, 900), TimeDelta::seconds(5 * 60));\nassert_eq!(from_hmsm(3, 5, 7, 900) - from_hmsm(0, 5, 7, 900), TimeDelta::seconds(3 * 3600));\nassert_eq!(from_hmsm(3, 5, 7, 900) - from_hmsm(4, 5, 7, 900), TimeDelta::seconds(-3600));\nassert_eq!(from_hmsm(3, 5, 7, 900) - from_hmsm(2, 4, 6, 800),\n           TimeDelta::seconds(3600 + 60 + 1) + TimeDelta::milliseconds(100));\n```\n\nLeap seconds are handled, but the subtraction assumes that\nthere were no other leap seconds happened.\n\n```\n# use chrono::{TimeDelta, NaiveTime};\n# let from_hmsm = |h, m, s, milli| { NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap() };\nassert_eq!(from_hmsm(3, 0, 59, 1_000) - from_hmsm(3, 0, 59, 0), TimeDelta::seconds(1));\nassert_eq!(from_hmsm(3, 0, 59, 1_500) - from_hmsm(3, 0, 59, 0),\n           TimeDelta::milliseconds(1500));\nassert_eq!(from_hmsm(3, 0, 59, 1_000) - from_hmsm(3, 0, 0, 0), TimeDelta::seconds(60));\nassert_eq!(from_hmsm(3, 0, 0, 0) - from_hmsm(2, 59, 59, 1_000), TimeDelta::seconds(1));\nassert_eq!(from_hmsm(3, 0, 59, 1_000) - from_hmsm(2, 59, 59, 1_000),\n           TimeDelta::seconds(61));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1530:199","0:1531:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2560-0:2178:2653":{"id":"b:2:2560-0:2178:2653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1327:1569":{"id":"0:1327:1569","crate_id":0,"name":"sub","span":{"filename":"src/naive/datetime/mod.rs","begin":[1969,4],"end":[1971,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3109:2337","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1549-0:2654:5260":{"id":"0:1549-0:2654:5260","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[13,38],"end":[13,59]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::date::NaiveDateDaysIterator","name":"NaiveDateDaysIterator","id":"0:2654:5260","glob":false}}},"0:2464:3500":{"id":"0:2464:3500","crate_id":0,"name":"allow_zulu","span":{"filename":"src/format/mod.rs","begin":[287,4],"end":[287,24]},"visibility":"public","docs":"Represent `+00:00` as `Z`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"bool"}}},"0:510":{"id":"0:510","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1445,0],"end":[1454,1]},"visibility":"default","docs":"Subtract `FixedOffset` from the datetime value of `DateTime` (offset remains unchanged).\n\n# Panics\n\nPanics if the resulting date would be out of range.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:512:199","0:513:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:36:2403":{"id":"0:36:2403","crate_id":0,"name":"days","span":{"filename":"src/time_delta.rs","begin":[132,4],"end":[134,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of days.\n\nEquivalent to `TimeDelta::seconds(days * 24 * 60 * 60)` with overflow\nchecks.\n\n# Panics\n\nPanics when the `TimeDelta` would be out of bounds.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["days",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:3057:2135":{"id":"a:2:32026:9229-0:3057:2135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41605:9275-0:2213:2843":{"id":"a:2:41605:9275-0:2213:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1889":{"id":"0:1889","crate_id":0,"name":null,"span":{"filename":"src/offset/local/mod.rs","begin":[161,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["timestamp_millis","isoywd","ymd","yo","timestamp_nanos","isoywd_opt","yo_opt","from_local_datetime","from_utc_date","from_local_date","timestamp","from_utc_datetime","timestamp_opt","datetime_from_str","with_ymd_and_hms","timestamp_millis_opt","timestamp_micros","ymd_opt"],"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1890:2150","0:1891:2751","0:1892:7434","0:1893:7436","0:1894:7443","0:1895:4079"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3207":{"id":"0:3207","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,9],"end":[31,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3208:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1232:2946":{"id":"0:1232:2946","crate_id":0,"name":"timestamp_subsec_micros","span":{"filename":"src/naive/datetime/mod.rs","begin":[610,4],"end":[612,5]},"visibility":"public","docs":"Returns the number of microseconds since the last whole non-leap second.\n\nThe return value ranges from 0 to 999,999,\nor for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet dt = NaiveDate::from_ymd_opt(2016, 7, 8).unwrap().and_hms_nano_opt(9, 10, 11, 123_456_789).unwrap();\nassert_eq!(dt.timestamp_subsec_micros(), 123_456);\n\nlet dt = NaiveDate::from_ymd_opt(2015, 7, 1).unwrap().and_hms_nano_opt(8, 59, 59, 1_234_567_890).unwrap();\nassert_eq!(dt.timestamp_subsec_micros(), 1_234_567);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:8109:851":{"id":"2:8109:851","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3220:1151":{"id":"0:3220:1151","crate_id":0,"name":"partial_cmp","span":{"filename":"src/month.rs","begin":[31,50],"end":[31,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2072:1053":{"id":"0:2072:1053","crate_id":0,"name":"new","span":{"filename":"src/month.rs","begin":[233,4],"end":[235,5]},"visibility":"public","docs":"Construct a new `Months` from a number of months","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["num",{"primitive":"u32"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1562-0:2617:2163":{"id":"0:1562-0:2617:2163","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[513,16],"end":[513,20]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"naive::Days","name":"Days","id":"0:2617:2163","glob":false}}},"0:2309:3379":{"id":"0:2309:3379","crate_id":0,"name":"YearMod100","span":{"filename":"src/format/mod.rs","begin":[108,4],"end":[108,14]},"visibility":"default","docs":"Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:5:5869-0:2637:2147":{"id":"b:5:5869-0:2637:2147","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1337":{"id":"0:1337","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[2077,0],"end":[2083,1]},"visibility":"default","docs":"The `Debug` output of the naive date and time `dt` is the same as\n[`dt.format(\"%Y-%m-%dT%H:%M:%S%.f\")`](crate::format::strftime).\n\nThe string printed can be readily parsed via the `parse` method on `str`.\n\nIt should be noted that, for leap seconds not on the minute boundary,\nit may print a representation not distinguishable from non-leap seconds.\nThis doesn't matter in practice, since such leap seconds never happened.\n(By the time of the first leap second on 1972-06-30,\nevery time zone offset around the world has standardized to the 5-minute alignment.)\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet dt = NaiveDate::from_ymd_opt(2016, 11, 15).unwrap().and_hms_opt(7, 39, 24).unwrap();\nassert_eq!(format!(\"{:?}\", dt), \"2016-11-15T07:39:24\");\n```\n\nLeap seconds may also be used.\n\n```\n# use chrono::NaiveDate;\nlet dt = NaiveDate::from_ymd_opt(2015, 6, 30).unwrap().and_hms_milli_opt(23, 59, 59, 1_500).unwrap();\nassert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:59:60.500\");\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1338:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2541:1767":{"id":"0:2541:1767","crate_id":0,"name":"0","span":{"filename":"src/format/mod.rs","begin":[339,12],"end":[339,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:3252:2209":{"id":"0:3252:2209","crate_id":0,"name":"OutOfRange","span":{"filename":"src/lib.rs","begin":[582,0],"end":[584,1]},"visibility":"public","docs":"Out of range error type used in various converting APIs","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:41605:9275-0:3252:2209","a:2:3058:246-0:3252:2209","a:2:31969:237-0:3252:2209","a:2:41604:9276-0:3252:2209","a:2:32026:9229-0:3252:2209","b:2:2563-0:3252:2209","b:2:3671-0:3252:2209","b:2:2835-0:3252:2209","b:2:2839-0:3252:2209","b:2:2850-0:3252:2209","b:2:2560-0:3252:2209","b:2:2845-0:3252:2209","b:5:725-0:3252:2209","b:5:5869-0:3252:2209","0:2122","0:3256","0:3260","0:3261","0:3263","0:2126","0:3254","0:2124","0:3257"]}}},"0:241:1151":{"id":"0:241:1151","crate_id":0,"name":"partial_cmp","span":{"filename":"src/date.rs","begin":[479,4],"end":[481,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2464":{"id":"0:55:2464","crate_id":0,"name":"num_microseconds","span":{"filename":"src/time_delta.rs","begin":[333,4],"end":[337,5]},"visibility":"public","docs":"Returns the total number of whole microseconds in the `TimeDelta`,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:461":{"id":"0:461","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1206,0],"end":[1206,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32026:9229-0:3064:2146":{"id":"a:2:32026:9229-0:3064:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:500":{"id":"0:500","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1388,0],"end":[1397,1]},"visibility":"default","docs":"Subtract `std::time::Duration` from `DateTime`.\n\nAs a part of Chrono's [leap second handling] the subtraction assumes that **there is no leap\nsecond ever**, except when the `DateTime` itself represents a leap second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`DateTime<Tz>::checked_sub_signed`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_sub_signed`":"0:356:2762"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:502:199","0:503:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2477:793":{"id":"0:2477:793","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[280,44],"end":[280,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2164:2134":{"id":"0:2164:2134","crate_id":0,"name":"Date","span":{"filename":"src/date.rs","begin":[58,0],"end":[61,1]},"visibility":"public","docs":"ISO 8601 calendar date with time zone.\n\nYou almost certainly want to be using a [`NaiveDate`] instead of this type.\n\nThis type primarily exists to aid in the construction of DateTimes that\nhave a timezone by way of the [`TimeZone`] datelike constructors (e.g.\n[`TimeZone::ymd`]).\n\nThis type should be considered ambiguous at best, due to the inherent lack\nof precision required for the time zone resolution.\n\nThere are some guarantees on the usage of `Date<Tz>`:\n\n- If properly constructed via [`TimeZone::ymd`] and others without an error,\n  the corresponding local date should exist for at least a moment.\n  (It may still have a gap from the offset changes.)\n\n- The `TimeZone` is free to assign *any* [`Offset`](crate::offset::Offset) to the\n  local date, as long as that offset did occur in given day.\n\n  For example, if `2015-03-08T01:59-08:00` is followed by `2015-03-08T03:00-07:00`,\n  it may produce either `2015-03-08-08:00` or `2015-03-08-07:00`\n  but *not* `2015-03-08+00:00` and others.\n\n- Once constructed as a full `DateTime`, [`DateTime::date`] and other associated\n  methods should return those for the original `Date`. For example, if `dt =\n  tz.ymd_opt(y,m,d).unwrap().hms(h,n,s)` were valid, `dt.date() == tz.ymd_opt(y,m,d).unwrap()`.\n\n- The date is timezone-agnostic up to one day (i.e. practically always),\n  so the local date and UTC date should be equal for most cases\n  even though the raw calculation between `NaiveDate` and `TimeDelta` may not.","links":{"crate::offset::Offset":"0:1948:2150","`DateTime::date`":"0:337:2152","`TimeZone`":"0:1950:2151","`NaiveDate`":"0:2637:2147","`TimeZone::ymd`":"0:1954:3811"},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"Use `NaiveDate` or `DateTime<Tz>` instead\")]"],"deprecation":{"since":"0.4.23","note":"Use `NaiveDate` or `DateTime<Tz>` instead"},"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:157","0:196","a:2:41605:9275-0:2164:2134","a:2:3058:246-0:2164:2134","a:2:41604:9276-0:2164:2134","a:2:32026:9229-0:2164:2134","b:2:2563-0:2164:2134","b:2:3671-0:2164:2134","b:2:2835-0:2164:2134","b:2:2839-0:2164:2134","b:2:2850-0:2164:2134","b:2:2560-0:2164:2134","b:2:2845-0:2164:2134","b:5:725-0:2164:2134","b:5:5869-0:2164:2134","0:229","0:249","0:267","0:231","0:270","0:242","0:260","0:204","0:239","0:263","0:245","0:237","0:2168","0:253","0:233","0:256"]}}},"0:2530:3529":{"id":"0:2530:3529","crate_id":0,"name":"OwnedLiteral","span":{"filename":"src/format/mod.rs","begin":[331,4],"end":[331,26]},"visibility":"default","docs":"Same as `Literal` but with the string owned by the item.","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2532:1767"]},"discriminant":null}}},"0:490:199":{"id":"0:490:199","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1326,4],"end":[1326,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:1089:2383":{"id":"0:1089:2383","crate_id":0,"name":"MAX","span":{"filename":"src/naive/date.rs","begin":[1489,4],"end":[1489,94]},"visibility":"public","docs":"The maximum possible `NaiveDate` (December 31, 262142 CE).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"b:2:2839-0:2673:5261":{"id":"b:2:2839-0:2673:5261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32026:9229-0:2692:2148":{"id":"a:2:32026:9229-0:2692:2148","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41604:9276-0:2746:2164":{"id":"a:2:41604:9276-0:2746:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1536:726":{"id":"0:1536:726","crate_id":0,"name":"fmt","span":{"filename":"src/naive/time/mod.rs","begin":[1446,4],"end":[1448,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:2178:2653":{"id":"a:2:3058:246-0:2178:2653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1315":{"id":"0:1315","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1876,0],"end":[1885,1]},"visibility":"default","docs":"Subtract `std::time::Duration` from `NaiveDateTime`.\n\nAs a part of Chrono's [leap second handling] the subtraction assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_sub_signed`] to get an `Option` instead.","links":{"`NaiveDateTime::checked_sub_signed`":"0:1240:2762"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1316:199","0:1317:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1064:2739":{"id":"0:1064:2739","crate_id":0,"name":"succ","span":{"filename":"src/naive/date.rs","begin":[1072,4],"end":[1074,5]},"visibility":"public","docs":"Makes a new `NaiveDate` for the next calendar date.\n\n# Panics\n\nPanics when `self` is the last representable date.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `succ_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `succ_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1600:2828":{"id":"0:1600:2828","crate_id":0,"name":"east_opt","span":{"filename":"src/offset/fixed.rs","begin":[63,4],"end":[69,5]},"visibility":"public","docs":"Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.\n\nReturns `None` on the out-of-bound `secs`.\n\n# Example\n\n```\nuse chrono::{FixedOffset, TimeZone};\nlet hour = 3600;\nlet datetime = FixedOffset::east_opt(5 * hour)\n    .unwrap()\n    .with_ymd_and_hms(2016, 11, 08, 0, 0, 0)\n    .unwrap();\nassert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00+05:00\")\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2783":{"id":"0:2783","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[22,9],"end":[22,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32026:9229-0:3108:2169":{"id":"a:2:32026:9229-0:3108:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3213:458":{"id":"0:3213:458","crate_id":0,"name":"clone","span":{"filename":"src/month.rs","begin":[31,30],"end":[31,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2037:8439":{"id":"0:2037:8439","crate_id":0,"name":"number_from_sunday","span":{"filename":"src/weekday.rs","begin":[114,4],"end":[116,5]},"visibility":"public","docs":"Returns a day-of-week number starting from Sunday = 1.\n\n`w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`\n------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----\n`w.number_from_sunday()`: | 2     | 3     | 4     | 5     | 6     | 7     | 1","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:3125:2144":{"id":"a:2:3058:246-0:3125:2144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:463":{"id":"0:463","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1208,0],"end":[1227,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"Tz2","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["lt","ge","gt","le"],"trait":{"name":"PartialOrd","id":"2:2652:202","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:466:1151"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:356:2762":{"id":"0:356:2762","crate_id":0,"name":"checked_sub_signed","span":{"filename":"src/datetime/mod.rs","begin":[406,4],"end":[410,5]},"visibility":"public","docs":"Subtracts given `TimeDelta` from the current date and time.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2356:726":{"id":"0:2356:726","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[100,31],"end":[100,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:2612:2165":{"id":"b:2:2839-0:2612:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2612:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2835-0:2617:2163":{"id":"b:2:2835-0:2617:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:453":{"id":"0:453","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1197,0],"end":[1197,80]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:728:3543":{"id":"5:728:3543","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:2692:2148":{"id":"b:2:2563-0:2692:2148","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1284:2702":{"id":"0:1284:2702","crate_id":0,"name":"hour","span":{"filename":"src/naive/datetime/mod.rs","begin":[1467,4],"end":[1469,5]},"visibility":"default","docs":"Returns the hour number from 0 to 23.\n\nSee also the [`NaiveTime::hour`] method.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Timelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 34, 56, 789).unwrap();\nassert_eq!(dt.hour(), 12);\n```","links":{"`NaiveTime::hour`":"0:1494:2702"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1273:2805":{"id":"0:1273:2805","crate_id":0,"name":"with_month0","span":{"filename":"src/naive/datetime/mod.rs","begin":[1344,4],"end":[1346,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the month number (starting from 0) changed.\n\nSee also the [`NaiveDate::with_month0`] method.\n\n# Errors\n\nReturns `None` if the resulting date does not exist, or if the value for `month0` is\ninvalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Datelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 30).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.with_month0(9), Some(NaiveDate::from_ymd_opt(2015, 10, 30).unwrap().and_hms_opt(12, 34, 56).unwrap()));\nassert_eq!(dt.with_month0(12), None); // no month 13\nassert_eq!(dt.with_month0(1), None); // no February 30\n```","links":{"`NaiveDate::with_month0`":"0:1104:2805"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:3252:2209":{"id":"b:2:2560-0:3252:2209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:716:4000":{"id":"0:716:4000","crate_id":0,"name":"set_minute","span":{"filename":"src/format/parsed.rs","begin":[256,4],"end":[258,5]},"visibility":"public","docs":"Tries to set the [`minute`](#structfield.minute) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3671-0:2372:2842":{"id":"b:2:3671-0:2372:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2685:667":{"id":"0:2685:667","crate_id":0,"name":"eq","span":{"filename":"src/naive/date.rs","begin":[2135,35],"end":[2135,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2683":{"id":"0:2683","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2135,35],"end":[2135,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1138:174":{"id":"0:1138:174","crate_id":0,"name":"Item","span":{"filename":"src/naive/date.rs","begin":[2105,4],"end":[2105,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:3058:246-0:2692:2148":{"id":"a:2:3058:246-0:2692:2148","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3241":{"id":"0:3241","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,62],"end":[227,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2646:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3242:465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13189:35010":{"id":"2:13189:35010","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2293:458":{"id":"0:2293:458","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[77,15],"end":[77,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:199":{"id":"0:68:199","crate_id":0,"name":"Output","span":{"filename":"src/time_delta.rs","begin":[446,4],"end":[446,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2519:667":{"id":"0:2519:667","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[314,29],"end":[314,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41604:9276-0:2284:3355":{"id":"a:2:41604:9276-0:2284:3355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:455":{"id":"0:455","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1198,0],"end":[1198,87]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1957:5989":{"id":"0:1957:5989","crate_id":0,"name":"yo_opt","span":{"filename":"src/offset/mod.rs","begin":[299,4],"end":[304,5]},"visibility":"default","docs":"Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n\nThe time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),\nbut it will propagate to the `DateTime` values constructed via this date.\n\nReturns `None` on the out-of-range date and/or invalid DOY.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"use `from_local_datetime()` with a `NaiveDateTime` instead\")]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.23","note":"use `from_local_datetime()` with a `NaiveDateTime` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1109:2809":{"id":"0:1109:2809","crate_id":0,"name":"with_ordinal0","span":{"filename":"src/naive/date.rs","begin":[1856,4],"end":[1859,5]},"visibility":"default","docs":"Makes a new `NaiveDate` with the day of year (starting from 0) changed.\n\n# Errors\n\nReturns `None` if the resulting date does not exist, or if the value for `ordinal0` is\ninvalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 1, 1).unwrap().with_ordinal0(59),\n           Some(NaiveDate::from_ymd_opt(2015, 3, 1).unwrap()));\nassert_eq!(NaiveDate::from_ymd_opt(2015, 1, 1).unwrap().with_ordinal0(365),\n           None); // 2015 had only 365 days\n\nassert_eq!(NaiveDate::from_ymd_opt(2016, 1, 1).unwrap().with_ordinal0(59),\n           Some(NaiveDate::from_ymd_opt(2016, 2, 29).unwrap()));\nassert_eq!(NaiveDate::from_ymd_opt(2016, 1, 1).unwrap().with_ordinal0(365),\n           Some(NaiveDate::from_ymd_opt(2016, 12, 31).unwrap()));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3671-0:2637:2147":{"id":"b:2:3671-0:2637:2147","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1099:2801":{"id":"0:1099:2801","crate_id":0,"name":"ordinal0","span":{"filename":"src/naive/date.rs","begin":[1658,4],"end":[1660,5]},"visibility":"default","docs":"Returns the day of year starting from 0.\n\nThe return value ranges from 0 to 365. (The last day of year differs by years.)\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().ordinal0(), 250);\nassert_eq!(NaiveDate::from_ymd_opt(-308, 3, 14).unwrap().ordinal0(), 73);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2641:667":{"id":"0:2641:667","crate_id":0,"name":"eq","span":{"filename":"src/naive/date.rs","begin":[190,9],"end":[190,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2008:8309":{"id":"0:2008:8309","crate_id":0,"name":"duration_trunc","span":{"filename":"src/round.rs","begin":[140,4],"end":[140,76]},"visibility":"default","docs":"Return a copy truncated by TimeDelta.\n\n# Example\n``` rust\n# use chrono::{DurationRound, TimeDelta, Utc, NaiveDate};\nlet dt = NaiveDate::from_ymd_opt(2018, 1, 11).unwrap().and_hms_milli_opt(12, 0, 0, 154).unwrap().and_local_timezone(Utc).unwrap();\nassert_eq!(\n    dt.duration_trunc(TimeDelta::milliseconds(10)).unwrap().to_string(),\n    \"2018-01-11 12:00:00.150 UTC\"\n);\nassert_eq!(\n    dt.duration_trunc(TimeDelta::days(1)).unwrap().to_string(),\n    \"2018-01-11 00:00:00 UTC\"\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["duration",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:2005:2168","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:2082-0:3223:2174":{"id":"0:2082-0:3223:2174","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[535,23],"end":[535,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"month::Months","name":"Months","id":"0:3223:2174","glob":false}}},"0:3240:1151":{"id":"0:3240:1151","crate_id":0,"name":"partial_cmp","span":{"filename":"src/month.rs","begin":[227,50],"end":[227,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:544":{"id":"0:544","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1609,0],"end":[1615,1]},"visibility":"default","docs":"Accepts a relaxed form of RFC3339.\nA space or a 'T' are accepted as the separator between the date and time\nparts.\n\nAll of these examples are equivalent:\n```\n# use chrono::{DateTime, Local};\n\"2012-12-12T12:12:12Z\".parse::<DateTime<Local>>()?;\n\"2012-12-12 12:12:12Z\".parse::<DateTime<Local>>()?;\n\"2012-12-12 12:12:12+0000\".parse::<DateTime<Local>>()?;\n\"2012-12-12 12:12:12+00:00\".parse::<DateTime<Local>>()?;\n# Ok::<(), chrono::ParseError>(())\n```","links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12717:3263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:545:137","0:546:3264"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2835-0:3160:2171":{"id":"b:2:2835-0:3160:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1288:3183":{"id":"0:1288:3183","crate_id":0,"name":"with_hour","span":{"filename":"src/naive/datetime/mod.rs","begin":[1543,4],"end":[1545,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the hour number changed.\n\nSee also the [`NaiveTime::with_hour`] method.\n\n# Errors\n\nReturns `None` if the value for `hour` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Timelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 34, 56, 789).unwrap();\nassert_eq!(dt.with_hour(7),\n           Some(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(7, 34, 56, 789).unwrap()));\nassert_eq!(dt.with_hour(24), None);\n```","links":{"`NaiveTime::with_hour`":"0:1498:3183"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3671-0:3077:2166":{"id":"b:2:3671-0:3077:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2076:726":{"id":"0:2076:726","crate_id":0,"name":"fmt","span":{"filename":"src/month.rs","begin":[254,4],"end":[256,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:554:755":{"id":"0:554:755","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[1646,4],"end":[1655,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dt",{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SystemTime","id":"1:9197:2837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1081:5685":{"id":"0:1081:5685","crate_id":0,"name":"leap_year","span":{"filename":"src/naive/date.rs","begin":[1435,4],"end":[1437,5]},"visibility":"public","docs":"Returns `true` if this is a leap year.\n\n```\n# use chrono::NaiveDate;\nassert_eq!(NaiveDate::from_ymd_opt(2000, 1, 1).unwrap().leap_year(), true);\nassert_eq!(NaiveDate::from_ymd_opt(2001, 1, 1).unwrap().leap_year(), false);\nassert_eq!(NaiveDate::from_ymd_opt(2002, 1, 1).unwrap().leap_year(), false);\nassert_eq!(NaiveDate::from_ymd_opt(2003, 1, 1).unwrap().leap_year(), false);\nassert_eq!(NaiveDate::from_ymd_opt(2004, 1, 1).unwrap().leap_year(), true);\nassert_eq!(NaiveDate::from_ymd_opt(2100, 1, 1).unwrap().leap_year(), false);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:2304:3372":{"id":"a:2:32026:9229-0:2304:3372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1124":{"id":"0:1124","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[1996,0],"end":[2002,1]},"visibility":"default","docs":"Subtract `Days` from `NaiveDate`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `NaiveDate::checked_sub_days` to get an `Option` instead.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1125:199","0:1126:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2707":{"id":"0:2707","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[76,47],"end":[76,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2000":{"id":"0:2000","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[45,0],"end":[73,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Timelike","id":"0:2106:2143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"SubsecRound","id":"0:1997:2138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"T"},"items":["0:2002:8281","0:2003:8286"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1129:1569":{"id":"0:1129:1569","crate_id":0,"name":"sub","span":{"filename":"src/naive/date.rs","begin":[2037,4],"end":[2039,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2307:3377":{"id":"0:2307:3377","crate_id":0,"name":"YearDiv100","span":{"filename":"src/format/mod.rs","begin":[106,4],"end":[106,14]},"visibility":"default","docs":"Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:3671-0:2781:2145":{"id":"b:2:3671-0:2781:2145","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13197:41656":{"id":"2:13197:41656","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4855:41656"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43662:8972","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217:2804":{"id":"0:217:2804","crate_id":0,"name":"with_month","span":{"filename":"src/date.rs","begin":[436,4],"end":[438,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:2654:5260":{"id":"b:5:725-0:2654:5260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:187:2769":{"id":"0:187:2769","crate_id":0,"name":"naive_utc","span":{"filename":"src/date.rs","begin":[294,4],"end":[296,5]},"visibility":"public","docs":"Returns a view to the naive UTC date.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2209:667":{"id":"0:2209:667","crate_id":0,"name":"eq","span":{"filename":"src/format/formatting.rs","begin":[509,33],"end":[509,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:416:2796":{"id":"0:416:2796","crate_id":0,"name":"year","span":{"filename":"src/datetime/mod.rs","begin":[965,4],"end":[967,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2060:2739":{"id":"0:2060:2739","crate_id":0,"name":"succ","span":{"filename":"src/month.rs","begin":[76,4],"end":[91,5]},"visibility":"public","docs":"The next month.\n\n`m`:        | `January`  | `February` | `...` | `December`\n----------- | ---------  | ---------- | --- | ---------\n`m.succ()`: | `February` | `March`    | `...` | `January`","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:481:295":{"id":"0:481:295","crate_id":0,"name":"add","span":{"filename":"src/datetime/mod.rs","begin":[1274,4],"end":[1278,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2845-0:2673:5261":{"id":"b:2:2845-0:2673:5261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3243:2173":{"id":"0:3243:2173","crate_id":0,"name":"ParseMonthError","span":{"filename":"src/month.rs","begin":[246,0],"end":[248,1]},"visibility":"public","docs":"An error resulting from reading `<Month>` value with `FromStr`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:41605:9275-0:3243:2173","a:2:3058:246-0:3243:2173","a:2:31969:237-0:3243:2173","a:2:41604:9276-0:3243:2173","a:2:32026:9229-0:3243:2173","b:2:2563-0:3243:2173","b:2:3671-0:3243:2173","b:2:2835-0:3243:2173","b:2:2839-0:3243:2173","b:2:2850-0:3243:2173","b:2:2560-0:3243:2173","b:2:2845-0:3243:2173","b:5:725-0:3243:2173","b:5:5869-0:3243:2173","0:3248","0:2077","0:2075","0:3245","0:3247","0:3250","0:2074"]}}},"b:2:2563-0:2637:2147":{"id":"b:2:2563-0:2637:2147","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2637:2147":{"id":"0:2637:2147","crate_id":0,"name":"NaiveDate","span":{"filename":"src/naive/date.rs","begin":[198,0],"end":[200,1]},"visibility":"public","docs":"ISO 8601 calendar date without timezone.\nAllows for every [proleptic Gregorian date] from Jan 1, 262145 BCE to Dec 31, 262143 CE.\nAlso supports the conversion from ISO 8601 ordinal and week date.\n\n# Calendar Date\n\nThe ISO 8601 **calendar date** follows the proleptic Gregorian calendar.\nIt is like a normal civil calendar but note some slight differences:\n\n* Dates before the Gregorian calendar's inception in 1582 are defined via the extrapolation.\n  Be careful, as historical dates are often noted in the Julian calendar and others\n  and the transition to Gregorian may differ across countries (as late as early 20C).\n\n  (Some example: Both Shakespeare from Britain and Cervantes from Spain seemingly died\n  on the same calendar date---April 23, 1616---but in the different calendar.\n  Britain used the Julian calendar at that time, so Shakespeare's death is later.)\n\n* ISO 8601 calendars has the year 0, which is 1 BCE (a year before 1 CE).\n  If you need a typical BCE/BC and CE/AD notation for year numbers,\n  use the [`Datelike::year_ce`] method.\n\n# Week Date\n\nThe ISO 8601 **week date** is a triple of year number, week number\nand [day of the week](Weekday) with the following rules:\n\n* A week consists of Monday through Sunday, and is always numbered within some year.\n  The week number ranges from 1 to 52 or 53 depending on the year.\n\n* The week 1 of given year is defined as the first week containing January 4 of that year,\n  or equivalently, the first week containing four or more days in that year.\n\n* The year number in the week date may *not* correspond to the actual Gregorian year.\n  For example, January 3, 2016 (Sunday) was on the last (53rd) week of 2015.\n\nChrono's date types default to the ISO 8601 [calendar date](#calendar-date), but\n[`Datelike::iso_week`] and [`Datelike::weekday`] methods can be used to get the corresponding\nweek date.\n\n# Ordinal Date\n\nThe ISO 8601 **ordinal date** is a pair of year number and day of the year (\"ordinal\").\nThe ordinal number ranges from 1 to 365 or 366 depending on the year.\nThe year number is the same as that of the [calendar date](#calendar-date).\n\nThis is currently the internal format of Chrono's date types.\n\n[proleptic Gregorian date]: crate::NaiveDate#calendar-date","links":{"`Datelike::iso_week`":"0:2097:2802","crate::NaiveDate#calendar-date":"0:2637:2147","`Datelike::weekday`":"0:2096:2170","`Datelike::year_ce`":"0:2089:8618","Weekday":"0:3125:2144"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1026","a:2:41605:9275-0:2637:2147","a:2:3058:246-0:2637:2147","a:2:31969:237-0:2637:2147","a:2:41604:9276-0:2637:2147","a:2:32026:9229-0:2637:2147","b:2:2563-0:2637:2147","b:2:3671-0:2637:2147","b:2:2835-0:2637:2147","b:2:2839-0:2637:2147","b:2:2850-0:2637:2147","b:2:2560-0:2637:2147","b:2:2845-0:2637:2147","b:5:725-0:2637:2147","b:5:5869-0:2637:2147","0:1124","0:1130","0:1153","0:1110","0:2647","0:1156","0:1115","0:1132","0:1092","0:1257","0:2651","0:2639","0:1158","0:2652","0:1135","0:1113","0:2649","0:2642","0:1162","0:1127","0:1118","0:2644","0:1121","0:2640"]}}},"0:2079-0:3243:2173":{"id":"0:2079-0:3243:2173","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[534,0],"end":[534,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"month::ParseMonthError","name":"ParseMonthError","id":"0:3243:2173","glob":false}}},"0:2709:458":{"id":"0:2709:458","crate_id":0,"name":"clone","span":{"filename":"src/naive/datetime/mod.rs","begin":[76,53],"end":[76,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3141:4042":{"id":"0:3141:4042","crate_id":0,"name":"Sat","span":{"filename":"src/weekday.rs","begin":[54,4],"end":[54,11]},"visibility":"default","docs":"Saturday.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"5","value":"5"}}}},"0:256":{"id":"0:256","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[512,0],"end":[519,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:258:199","0:259:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2516:458":{"id":"0:2516:458","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[314,22],"end":[314,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:2692:2148":{"id":"b:2:2850-0:2692:2148","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41604:9276-0:2654:5260":{"id":"a:2:41604:9276-0:2654:5260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3087:1768":{"id":"0:3087:1768","crate_id":0,"name":"1","span":{"filename":"src/offset/mod.rs","begin":[50,25],"end":[50,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"T"}}},"0:1309":{"id":"0:1309","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1797,0],"end":[1803,1]},"visibility":"default","docs":"Add `Months` to `NaiveDateTime`.\n\nThe result will be clamped to valid days in the resulting month, see `checked_add_months` for\ndetails.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `checked_add_months` to get an `Option` instead.\n\n# Example\n\n```\nuse chrono::{Months, NaiveDate};\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1).unwrap().and_hms_opt(1, 0, 0).unwrap() + Months::new(1),\n    NaiveDate::from_ymd_opt(2014, 2, 1).unwrap().and_hms_opt(1, 0, 0).unwrap()\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1).unwrap().and_hms_opt(0, 2, 0).unwrap() + Months::new(11),\n    NaiveDate::from_ymd_opt(2014, 12, 1).unwrap().and_hms_opt(0, 2, 0).unwrap()\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1).unwrap().and_hms_opt(0, 0, 3).unwrap() + Months::new(12),\n    NaiveDate::from_ymd_opt(2015, 1, 1).unwrap().and_hms_opt(0, 0, 3).unwrap()\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1).unwrap().and_hms_opt(0, 0, 4).unwrap() + Months::new(13),\n    NaiveDate::from_ymd_opt(2015, 2, 1).unwrap().and_hms_opt(0, 0, 4).unwrap()\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 31).unwrap().and_hms_opt(0, 5, 0).unwrap() + Months::new(1),\n    NaiveDate::from_ymd_opt(2014, 2, 28).unwrap().and_hms_opt(0, 5, 0).unwrap()\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2020, 1, 31).unwrap().and_hms_opt(6, 0, 0).unwrap() + Months::new(1),\n    NaiveDate::from_ymd_opt(2020, 2, 29).unwrap().and_hms_opt(6, 0, 0).unwrap()\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1310:199","0:1311:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:492":{"id":"0:492","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1349,0],"end":[1355,1]},"visibility":"default","docs":"Add `Months` to `DateTime`.\n\nThe result will be clamped to valid days in the resulting month, see `checked_add_months` for\ndetails.\n\n# Panics\n\nPanics if:\n- The resulting date would be out of range.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.\n\nStrongly consider using [`DateTime<Tz>::checked_add_months`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_add_months`":"0:355:2968"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:494:199","0:495:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2223:2195":{"id":"0:2223:2195","crate_id":0,"name":"isoweek","span":{"filename":"src/format/parsed.rs","begin":[69,4],"end":[69,28]},"visibility":"public","docs":"[ISO week number](../naive/struct.NaiveDate.html#week-date)\n(1--52 or 1--53 depending on the year).","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}}}},"a:2:3058:246-0:3108:2169":{"id":"a:2:3058:246-0:3108:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2405:3473":{"id":"0:2405:3473","crate_id":0,"name":"TimezoneOffsetZ","span":{"filename":"src/format/mod.rs","begin":[241,4],"end":[241,19]},"visibility":"default","docs":"Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\nParsing allows an optional colon.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13067:887":{"id":"2:13067:887","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12067:454"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156:2153":{"id":"0:156:2153","crate_id":0,"name":"MAX_DATE","span":{"filename":"src/date.rs","begin":[70,0],"end":[70,53]},"visibility":"public","docs":"The maximum possible `Date`.","links":{},"attrs":["#[allow(deprecated)]","#[deprecated(since = \"0.4.20\", note = \"Use Date::MAX_UTC instead\")]"],"deprecation":{"since":"0.4.20","note":"Use Date::MAX_UTC instead"},"inner":{"constant":{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"expr":"Date<Utc>::MAX_UTC","value":null,"is_literal":false}}},"0:1332:199":{"id":"0:1332:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[2029,4],"end":[2029,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2661":{"id":"0:2661","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2099,29],"end":[2099,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2662:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5603:3674":{"id":"5:5603:3674","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7633:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:686:1053":{"id":"0:686:1053","crate_id":0,"name":"new","span":{"filename":"src/format/parsed.rs","begin":[127,4],"end":[129,5]},"visibility":"public","docs":"Returns the initial value of parsed parts.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:708:3987":{"id":"0:708:3987","crate_id":0,"name":"set_ordinal","span":{"filename":"src/format/parsed.rs","begin":[217,4],"end":[219,5]},"visibility":"public","docs":"Tries to set the [`ordinal`](#structfield.ordinal) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:713:3995":{"id":"0:713:3995","crate_id":0,"name":"set_hour12","span":{"filename":"src/format/parsed.rs","begin":[237,4],"end":[242,5]},"visibility":"public","docs":"Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\ngiven hour number in 12-hour clocks.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41605:9275-0:2654:5260":{"id":"a:2:41605:9275-0:2654:5260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1469:7036":{"id":"0:1469:7036","crate_id":0,"name":"from_hms_nano","span":{"filename":"src/naive/time/mod.rs","begin":[390,4],"end":[392,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from hour, minute, second and nanosecond.\n\nThe nanosecond part is allowed to exceed 1,000,000,000 in order to represent a\n[leap second](#leap-second-handling), but only when `sec == 59`.\n\n# Panics\n\nPanics on invalid hour, minute, second and/or nanosecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `from_hms_nano_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_hms_nano_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1621-0:2781:2145":{"id":"0:1621-0:2781:2145","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[30,0],"end":[30,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fixed::FixedOffset","name":"FixedOffset","id":"0:2781:2145","glob":false}}},"2:13134:35762":{"id":"2:13134:35762","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:8930","str::rsplitn":"2:13137:35764"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43467:8966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1616:2880":{"id":"0:1616:2880","crate_id":0,"name":"fix","span":{"filename":"src/offset/fixed.rs","begin":[152,4],"end":[154,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:2637:2147":{"id":"b:5:725-0:2637:2147","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:258:199":{"id":"0:258:199","crate_id":0,"name":"Output","span":{"filename":"src/date.rs","begin":[513,4],"end":[513,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:2769":{"id":"0:2769","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[204,20],"end":[204,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:8105-0:2654:5260":{"id":"b:2:8105-0:2654:5260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8101:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:8107:174","2:8108:9013","2:8109:851"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1047:2975":{"id":"0:1047:2975","crate_id":0,"name":"checked_add_days","span":{"filename":"src/naive/date.rs","begin":[752,4],"end":[757,5]},"visibility":"public","docs":"Add a duration in [`Days`] to the date\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\n# use chrono::{NaiveDate, Days};\nassert_eq!(\n    NaiveDate::from_ymd_opt(2022, 2, 20).unwrap().checked_add_days(Days::new(9)),\n    Some(NaiveDate::from_ymd_opt(2022, 3, 1).unwrap())\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2022, 7, 31).unwrap().checked_add_days(Days::new(2)),\n    Some(NaiveDate::from_ymd_opt(2022, 8, 2).unwrap())\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2022, 7, 31).unwrap().checked_add_days(Days::new(1000000000000)),\n    None\n);\n```","links":{"`Days`":"0:2617:2163"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:2479:3495":{"id":"b:2:2560-0:2479:3495","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:52:2448":{"id":"0:52:2448","crate_id":0,"name":"num_seconds","span":{"filename":"src/time_delta.rs","begin":[301,4],"end":[308,5]},"visibility":"public","docs":"Returns the total number of whole seconds in the `TimeDelta`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1112:295":{"id":"0:1112:295","crate_id":0,"name":"add","span":{"filename":"src/naive/date.rs","begin":[1894,4],"end":[1896,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:2461:3492":{"id":"a:2:32026:9229-0:2461:3492","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2633":{"id":"0:2633","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[132,50],"end":[132,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","ge","gt","le"],"trait":{"name":"PartialOrd","id":"2:2652:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2634:1151"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2841:755":{"id":"2:2841:755","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1092":{"id":"0:1092","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[1499,0],"end":[1860,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["num_days_from_ce","year_ce"],"trait":{"name":"Datelike","id":"0:2087:2141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1093:2796","0:1094:2172","0:1095:2797","0:1096:2798","0:1097:2799","0:1098:2800","0:1099:2801","0:1100:2170","0:1101:2802","0:1102:2803","0:1103:2804","0:1104:2805","0:1105:2806","0:1106:2807","0:1107:2808","0:1109:2809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2650:465":{"id":"0:2650:465","crate_id":0,"name":"cmp","span":{"filename":"src/naive/date.rs","begin":[190,42],"end":[190,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3155":{"id":"0:3155","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[32,37],"end":[32,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3156:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3058:246-0:3169:2142":{"id":"a:2:3058:246-0:3169:2142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41604:9276-0:2763:2149":{"id":"a:2:41604:9276-0:2763:2149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3058:246-0:2582:3548":{"id":"a:2:3058:246-0:2582:3548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2669":{"id":"0:2669","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2099,58],"end":[2099,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32026:9229-0:2566:2160":{"id":"a:2:32026:9229-0:2566:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3144:3646":{"id":"0:3144:3646","crate_id":0,"name":"Sun","span":{"filename":"src/weekday.rs","begin":[56,4],"end":[56,11]},"visibility":"default","docs":"Sunday.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"6","value":"6"}}}},"0:2096:2170":{"id":"0:2096:2170","crate_id":0,"name":"weekday","span":{"filename":"src/traits.rs","begin":[78,4],"end":[78,33]},"visibility":"default","docs":"Returns the day of week.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1983-0:3064:2146":{"id":"0:1983-0:3064:2146","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[522,48],"end":[522,51]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"offset::Utc","name":"Utc","id":"0:3064:2146","glob":false}}},"b:2:2839-0:2461:3492":{"id":"b:2:2839-0:2461:3492","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:687:3964":{"id":"0:687:3964","crate_id":0,"name":"set_year","span":{"filename":"src/format/parsed.rs","begin":[133,4],"end":[135,5]},"visibility":"public","docs":"Tries to set the [`year`](#structfield.year) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2296:667":{"id":"0:2296:667","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[77,22],"end":[77,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13087:41641":{"id":"2:13087:41641","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12073:1552","str::slice_mut_unchecked":"2:13088:41642","crate::ops::Index":"2:39099:8860"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:951":{"id":"0:951","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[433,0],"end":[446,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:952:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1514:199":{"id":"0:1514:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/time/mod.rs","begin":[1189,4],"end":[1189,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13105:4168":{"id":"2:13105:4168","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:8930"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:3057:2135":{"id":"b:5:725-0:3057:2135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:441:2702":{"id":"0:441:2702","crate_id":0,"name":"hour","span":{"filename":"src/datetime/mod.rs","begin":[1116,4],"end":[1118,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2845-0:2426:3477":{"id":"b:2:2845-0:2426:3477","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:262:1570":{"id":"0:262:1570","crate_id":0,"name":"sub_assign","span":{"filename":"src/date.rs","begin":[523,4],"end":[525,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2553":{"id":"0:2553","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[325,16],"end":[325,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2555:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:522":{"id":"0:522","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1486,0],"end":[1493,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:524:199","0:525:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1506":{"id":"0:1506","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1148,0],"end":[1153,1]},"visibility":"default","docs":"Add-assign `TimeDelta` to `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the addition ignores integral number of days.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33052:2333","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1507:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2430":{"id":"0:2430","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[255,16],"end":[255,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2431:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2432":{"id":"0:2432","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[255,23],"end":[255,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2569":{"id":"0:2569","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[383,9],"end":[383,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2570:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2660:458":{"id":"0:2660:458","crate_id":0,"name":"clone","span":{"filename":"src/naive/date.rs","begin":[2099,22],"end":[2099,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1602:2829":{"id":"0:1602:2829","crate_id":0,"name":"west_opt","span":{"filename":"src/offset/fixed.rs","begin":[99,4],"end":[105,5]},"visibility":"public","docs":"Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.\n\nReturns `None` on the out-of-bound `secs`.\n\n# Example\n\n```\nuse chrono::{FixedOffset, TimeZone};\nlet hour = 3600;\nlet datetime = FixedOffset::west_opt(5 * hour)\n    .unwrap()\n    .with_ymd_and_hms(2016, 11, 08, 0, 0, 0)\n    .unwrap();\nassert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00-05:00\")\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:2500":{"id":"0:88:2500","crate_id":0,"name":"sum","span":{"filename":"src/time_delta.rs","begin":[521,4],"end":[523,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2466":{"id":"0:2466","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[280,9],"end":[280,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2467:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2468":{"id":"0:2468","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[280,16],"end":[280,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2850-0:3160:2171":{"id":"b:2:2850-0:3160:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1262:2797":{"id":"0:1262:2797","crate_id":0,"name":"month0","span":{"filename":"src/naive/datetime/mod.rs","begin":[1175,4],"end":[1177,5]},"visibility":"default","docs":"Returns the month number starting from 0.\n\nThe return value ranges from 0 to 11.\n\nSee also the [`NaiveDate::month0`] method.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Datelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.month0(), 8);\n```","links":{"`NaiveDate::month0`":"0:1095:2797"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:2151:2130":{"id":"b:2:2560-0:2151:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:537":{"id":"0:537","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1563,0],"end":[1572,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1950:2151","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:539:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2662:793":{"id":"0:2662:793","crate_id":0,"name":"hash","span":{"filename":"src/naive/date.rs","begin":[2099,29],"end":[2099,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1143:5879":{"id":"0:1143:5879","crate_id":0,"name":"next_back","span":{"filename":"src/naive/date.rs","begin":[2124,4],"end":[2129,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8248:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3098:726":{"id":"0:3098:726","crate_id":0,"name":"fmt","span":{"filename":"src/offset/mod.rs","begin":[41,27],"end":[41,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:3223:2174":{"id":"b:2:2563-0:3223:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41604:9276-0:2781:2145":{"id":"a:2:41604:9276-0:2781:2145","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3091":{"id":"0:3091","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[41,16],"end":[41,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:374:2838":{"id":"0:374:2838","crate_id":0,"name":"UNIX_EPOCH","span":{"filename":"src/datetime/mod.rs","begin":[665,4],"end":[665,91]},"visibility":"public","docs":"The Unix Epoch, 1970-01-01 00:00:00 UTC.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"b:2:2839-0:2426:3477":{"id":"b:2:2839-0:2426:3477","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1949:2880":{"id":"0:1949:2880","crate_id":0,"name":"fix","span":{"filename":"src/offset/mod.rs","begin":[209,4],"end":[209,33]},"visibility":"default","docs":"Returns the fixed offset from UTC to the local time stored.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1619":{"id":"0:1619","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[173,0],"end":[177,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1620:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3067":{"id":"0:3067","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[43,15],"end":[43,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3068:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:46:2439":{"id":"0:46:2439","crate_id":0,"name":"microseconds","span":{"filename":"src/time_delta.rs","begin":[259,4],"end":[263,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of microseconds.\n\nThe number of microseconds acceptable by this constructor is less than\nthe total number that can actually be stored in a `TimeDelta`, so it is\nnot possible to specify a value that would be out of bounds. This\nfunction is therefore infallible.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["microseconds",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2100:2805":{"id":"0:2100:2805","crate_id":0,"name":"with_month0","span":{"filename":"src/traits.rs","begin":[178,4],"end":[178,55]},"visibility":"default","docs":"Makes a new value with the month number (starting from 0) changed.\n\n# Errors\n\nReturns `None` when:\n\n- The resulting date does not exist (for example `month0(3)` when day of the month is 31).\n- In case of [`DateTime<Tz>`] if the resulting date and time fall within a timezone\n  transition such as from DST to standard time.\n- The value for `month0` is out of range.\n\n[`DateTime<Tz>`]: crate::DateTime","links":{"crate::DateTime":"0:2171:2139"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:2393:3453":{"id":"0:2393:3453","crate_id":0,"name":"TimezoneName","span":{"filename":"src/format/mod.rs","begin":[210,4],"end":[210,16]},"visibility":"default","docs":"Timezone name.\n\nIt does not support parsing, its use in the parser is an immediate failure.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[445,0],"end":[456,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Neg","id":"2:3119:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:199","0:69:1044"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2610:793":{"id":"0:2610:793","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[395,44],"end":[395,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:3064:2146":{"id":"b:2:2563-0:3064:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:358:2975":{"id":"0:358:2975","crate_id":0,"name":"checked_add_days","span":{"filename":"src/datetime/mod.rs","begin":[441,4],"end":[446,5]},"visibility":"public","docs":"Add a duration in [`Days`] to the date part of the `DateTime`.\n\n# Errors\n\nReturns `None` if:\n- The resulting date would be out of range.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`Days`":"0:2617:2163"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2094:2800":{"id":"0:2094:2800","crate_id":0,"name":"ordinal","span":{"filename":"src/traits.rs","begin":[70,4],"end":[70,29]},"visibility":"default","docs":"Returns the day of year starting from 1.\n\nThe return value ranges from 1 to 366. (The last day of year differs by years.)","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1618:726":{"id":"0:1618:726","crate_id":0,"name":"fmt","span":{"filename":"src/offset/fixed.rs","begin":[158,4],"end":[170,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:3160:2171":{"id":"b:2:2839-0:3160:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3254":{"id":"0:3254","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[581,9],"end":[581,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3255:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41605:9275-0:3125:2144":{"id":"a:2:41605:9275-0:3125:2144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:111-0:2171:2139":{"id":"0:111-0:2171:2139","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[483,20],"end":[483,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::DateTime","name":"DateTime","id":"0:2171:2139","glob":false}}},"0:1219:3132":{"id":"0:1219:3132","crate_id":0,"name":"parse_from_str","span":{"filename":"src/naive/datetime/mod.rs","begin":[351,4],"end":[355,5]},"visibility":"public","docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](crate::format::strftime)\n on the supported escape sequences.\n\n # Example\n\n ```\n use chrono::{NaiveDateTime, NaiveDate};\n\n let parse_from_str = NaiveDateTime::parse_from_str;\n\n assert_eq!(parse_from_str(\"2015-09-05 23:56:04\", \"%Y-%m-%d %H:%M:%S\"),\n            Ok(NaiveDate::from_ymd_opt(2015, 9, 5).unwrap().and_hms_opt(23, 56, 4).unwrap()));\n assert_eq!(parse_from_str(\"5sep2015pm012345.6789\", \"%d%b%Y%p%I%M%S%.f\"),\n            Ok(NaiveDate::from_ymd_opt(2015, 9, 5).unwrap().and_hms_micro_opt(13, 23, 45, 678_900).unwrap()));\n ```\n\n Offset is ignored for the purpose of parsing.\n\n ```\n # use chrono::{NaiveDateTime, NaiveDate};\n # let parse_from_str = NaiveDateTime::parse_from_str;\n assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),\n            Ok(NaiveDate::from_ymd_opt(2014, 5, 17).unwrap().and_hms_opt(12, 34, 56).unwrap()));\n ```\n\n [Leap seconds](./struct.NaiveTime.html#leap-second-handling) are correctly handled by\n treating any time of the form `hh:mm:60` as a leap second.\n (This equally applies to the formatting, so the round trip is possible.)\n\n ```\n # use chrono::{NaiveDateTime, NaiveDate};\n # let parse_from_str = NaiveDateTime::parse_from_str;\n assert_eq!(parse_from_str(\"2015-07-01 08:59:60.123\", \"%Y-%m-%d %H:%M:%S%.f\"),\n            Ok(NaiveDate::from_ymd_opt(2015, 7, 1).unwrap().and_hms_milli_opt(8, 59, 59, 1_123).unwrap()));\n ```\n\n Missing seconds are assumed to be zero,\n but out-of-bound times or insufficient fields are errors otherwise.\n\n ```\n # use chrono::{NaiveDateTime, NaiveDate};\n # let parse_from_str = NaiveDateTime::parse_from_str;\n assert_eq!(parse_from_str(\"94/9/4 7:15\", \"%y/%m/%d %H:%M\"),\n            Ok(NaiveDate::from_ymd_opt(1994, 9, 4).unwrap().and_hms_opt(7, 15, 0).unwrap()));\n\n assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());\n assert!(parse_from_str(\"94/9/4 12\", \"%y/%m/%d %H\").is_err());\n assert!(parse_from_str(\"94/9/4 17:60\", \"%y/%m/%d %H:%M\").is_err());\n assert!(parse_from_str(\"94/9/4 24:00:00\", \"%y/%m/%d %H:%M:%S\").is_err());\n ```\n\n All parsed fields should be consistent to each other, otherwise it's an error.\n\n ```\n # use chrono::NaiveDateTime;\n # let parse_from_str = NaiveDateTime::parse_from_str;\n let fmt = \"%Y-%m-%d %H:%M:%S = UNIX timestamp %s\";\n assert!(parse_from_str(\"2001-09-09 01:46:39 = UNIX timestamp 999999999\", fmt).is_ok());\n assert!(parse_from_str(\"1970-01-01 00:00:00 = UNIX timestamp 1\", fmt).is_err());\n ```\n\n Years before 1 BCE or after 9999 CE, require an initial sign\n\n```\n # use chrono::NaiveDateTime;\n # let parse_from_str = NaiveDateTime::parse_from_str;\n let fmt = \"%Y-%m-%d %H:%M:%S\";\n assert!(parse_from_str(\"10000-09-09 01:46:39\", fmt).is_err());\n assert!(parse_from_str(\"+10000-09-09 01:46:39\", fmt).is_ok());\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1510:295":{"id":"0:1510:295","crate_id":0,"name":"add","span":{"filename":"src/naive/time/mod.rs","begin":[1163,4],"end":[1170,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:390:755":{"id":"0:390:755","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[739,4],"end":[741,5]},"visibility":"default","docs":"Convert this `DateTime<Local>` instance into a `DateTime<Utc>` instance.\n\nConversion is performed via [`DateTime::with_timezone`], accounting for the difference in\ntimezones.","links":{"`DateTime::with_timezone`":"0:350:2754"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:470":{"id":"0:470","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1235,0],"end":[1239,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:472:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2850-0:2304:3372":{"id":"b:2:2850-0:2304:3372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1235:2968":{"id":"0:1235:2968","crate_id":0,"name":"checked_add_months","span":{"filename":"src/naive/datetime/mod.rs","begin":[742,4],"end":[744,5]},"visibility":"public","docs":"Adds given `Months` to the current date and time.\n\nUses the last day of the month if the day does not exist in the resulting month.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\nuse chrono::{Months, NaiveDate};\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1).unwrap().and_hms_opt(1, 0, 0).unwrap()\n        .checked_add_months(Months::new(1)),\n    Some(NaiveDate::from_ymd_opt(2014, 2, 1).unwrap().and_hms_opt(1, 0, 0).unwrap())\n);\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1).unwrap().and_hms_opt(1, 0, 0).unwrap()\n        .checked_add_months(Months::new(core::i32::MAX as u32 + 1)),\n    None\n);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:689:3967":{"id":"0:689:3967","crate_id":0,"name":"set_year_div_100","span":{"filename":"src/format/parsed.rs","begin":[139,4],"end":[144,5]},"visibility":"public","docs":"Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1314:1569":{"id":"0:1314:1569","crate_id":0,"name":"sub","span":{"filename":"src/naive/datetime/mod.rs","begin":[1861,4],"end":[1863,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41605:9275-0:3169:2142":{"id":"a:2:41605:9275-0:3169:2142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:357:2973":{"id":"0:357:2973","crate_id":0,"name":"checked_sub_months","span":{"filename":"src/datetime/mod.rs","begin":[425,4],"end":[430,5]},"visibility":"public","docs":"Subtracts given `Months` from the current date and time.\n\nUses the last day of the month if the day does not exist in the resulting month.\n\nSee [`NaiveDate::checked_sub_months`] for more details on behavior.\n\n# Errors\n\nReturns `None` if:\n- The resulting date would be out of range.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveDate::checked_sub_months`":"0:1045:2973"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:2304:3372":{"id":"b:2:2839-0:2304:3372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2372:2842":{"id":"0:2372:2842","crate_id":0,"name":"Fixed","span":{"filename":"src/format/mod.rs","begin":[172,0],"end":[252,1]},"visibility":"public","docs":"Fixed-format item types.\n\nThey have their own rules of formatting and parsing.\nOtherwise noted, they print in the specified cases but parse case-insensitively.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:2373:3429","0:2375:3432","0:2377:3434","0:2379:3436","0:2381:3439","0:2383:3441","0:2385:3412","0:2387:3446","0:2389:3448","0:2391:3450","0:2393:3453","0:2395:3458","0:2397:3461","0:2399:3464","0:2401:3468","0:2403:3471","0:2405:3473","0:2407:3105","0:2409:3476","0:2411:3419"],"impls":["a:2:41605:9275-0:2372:2842","a:2:3058:246-0:2372:2842","a:2:31969:237-0:2372:2842","a:2:41604:9276-0:2372:2842","a:2:32026:9229-0:2372:2842","b:2:2563-0:2372:2842","b:2:3671-0:2372:2842","b:2:2835-0:2372:2842","b:2:2839-0:2372:2842","b:2:2850-0:2372:2842","b:2:2560-0:2372:2842","b:2:2845-0:2372:2842","b:5:725-0:2372:2842","0:2414","0:2421","0:2423","0:2419","0:2417","0:2416"]}}},"0:1951:2150":{"id":"0:1951:2150","crate_id":0,"name":"Offset","span":{"filename":"src/offset/mod.rs","begin":[219,4],"end":[219,24]},"visibility":"default","docs":"An associated offset type.\nThis type is used to store the actual offset in date and time types.\nThe original `TimeZone` value can be recovered via `TimeZone::from_offset`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Offset","id":"0:1948:2150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}}},"5:5595":{"id":"5:5595","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5596:42351","5:5597:9554","5:5600:42352","5:5603:3674","5:5611:42353","5:5612:42354","5:5613:7957","5:5614:35012","5:5615:35013"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3099":{"id":"0:3099","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[41,34],"end":[41,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1069:2762":{"id":"0:1069:2762","crate_id":0,"name":"checked_sub_signed","span":{"filename":"src/naive/date.rs","begin":[1186,4],"end":[1192,5]},"visibility":"public","docs":"Subtracts the number of whole days in the given `TimeDelta` from the current date.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveDate};\n\nlet d = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap();\nassert_eq!(d.checked_sub_signed(TimeDelta::days(40)),\n           Some(NaiveDate::from_ymd_opt(2015, 7, 27).unwrap()));\nassert_eq!(d.checked_sub_signed(TimeDelta::days(-40)),\n           Some(NaiveDate::from_ymd_opt(2015, 10, 15).unwrap()));\nassert_eq!(d.checked_sub_signed(TimeDelta::days(1_000_000_000)), None);\nassert_eq!(d.checked_sub_signed(TimeDelta::days(-1_000_000_000)), None);\nassert_eq!(NaiveDate::MIN.checked_sub_signed(TimeDelta::days(1)), None);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2426:3477":{"id":"0:2426:3477","crate_id":0,"name":"InternalFixed","span":{"filename":"src/format/mod.rs","begin":[256,0],"end":[258,1]},"visibility":"public","docs":"An opaque type representing fixed-format item types for internal uses only.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:41605:9275-0:2426:3477","a:2:3058:246-0:2426:3477","a:2:31969:237-0:2426:3477","a:2:41604:9276-0:2426:3477","a:2:32026:9229-0:2426:3477","b:2:2563-0:2426:3477","b:2:3671-0:2426:3477","b:2:2835-0:2426:3477","b:2:2839-0:2426:3477","b:2:2850-0:2426:3477","b:2:2560-0:2426:3477","b:2:2845-0:2426:3477","b:5:725-0:2426:3477","0:2430","0:2437","0:2433","0:2428","0:2435","0:2432"]}}},"a:2:3058:246-0:2654:5260":{"id":"a:2:3058:246-0:2654:5260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41605:9275-0:2129:2131":{"id":"a:2:41605:9275-0:2129:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2070:8546":{"id":"0:2070:8546","crate_id":0,"name":"from_u32","span":{"filename":"src/month.rs","begin":[207,4],"end":[223,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["n",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:889:4957":{"id":"0:889:4957","crate_id":0,"name":"parse_to_owned","span":{"filename":"src/format/strftime.rs","begin":[376,4],"end":[383,5]},"visibility":"public","docs":"Parse format string into a `Vec` of [`Item`]'s that contain no references to slices of the\nformat string.\n\nA `Vec` created with [`StrftimeItems::parse`] contains references to the format string,\nbinding the lifetime of the `Vec` to that string. [`StrftimeItems::parse_to_owned`] will\nconvert the references to owned types.\n\n# Errors\n\nReturns an error if the format string contains an invalid or unrecognized formatting\nspecifier.\n\n# Example\n\n```\nuse chrono::format::{Item, ParseError, StrftimeItems};\nuse chrono::NaiveDate;\n\nfn format_items(date_fmt: &str, time_fmt: &str) -> Result<Vec<Item<'static>>, ParseError> {\n    // `fmt_string` is dropped at the end of this function.\n    let fmt_string = format!(\"{} {}\", date_fmt, time_fmt);\n    StrftimeItems::new(&fmt_string).parse_to_owned()\n}\n\nlet fmt_items = format_items(\"%e %b %Y\", \"%k.%M\")?;\nlet datetime = NaiveDate::from_ymd_opt(2023, 7, 11).unwrap().and_hms_opt(9, 0, 0).unwrap();\n\nassert_eq!(\n    datetime.format_with_items(fmt_items.as_slice().iter()).to_string(),\n    \"11 Jul 2023  9.00\"\n);\n# Ok::<(), ParseError>(())\n```","links":{"`Item`":"0:2525:174","`StrftimeItems::parse`":"0:887:2839","`StrftimeItems::parse_to_owned`":"0:889:4957"},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7056:263","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:933-0:779:2839":{"id":"0:933-0:779:2839","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[68,16],"end":[68,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"parse::parse","name":"parse","id":"0:779:2839","glob":false}}},"a:2:41604:9276-0:2187:2140":{"id":"a:2:41604:9276-0:2187:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2654:5260":{"id":"0:2654:5260","crate_id":0,"name":"NaiveDateDaysIterator","span":{"filename":"src/naive/date.rs","begin":[2100,0],"end":[2102,1]},"visibility":"public","docs":"Iterator over `NaiveDate` with a step size of one day.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:41605:9275-0:2654:5260","a:2:3058:246-0:2654:5260","a:2:31969:237-0:2654:5260","a:2:41604:9276-0:2654:5260","a:2:32026:9229-0:2654:5260","b:2:2563-0:2654:5260","b:2:8105-0:2654:5260","b:2:3671-0:2654:5260","b:2:2835-0:2654:5260","b:2:2839-0:2654:5260","b:2:2850-0:2654:5260","b:2:2560-0:2654:5260","b:2:2845-0:2654:5260","b:5:725-0:2654:5260","0:2669","0:2658","0:2664","0:1137","0:2665","0:2671","0:2659","0:2661","0:2656","0:1141","0:1144","0:1142","0:2667"]}}},"b:2:3671-0:2673:5261":{"id":"b:2:3671-0:2673:5261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1326:199":{"id":"0:1326:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[1967,4],"end":[1967,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"5:5614:35012":{"id":"5:5614:35012","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13192:35014"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:443:3178":{"id":"0:443:3178","crate_id":0,"name":"second","span":{"filename":"src/datetime/mod.rs","begin":[1124,4],"end":[1126,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2244":{"id":"0:2244","crate_id":0,"name":null,"span":{"filename":"src/format/parsed.rs","begin":[20,38],"end":[20,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2887:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2245:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[722,0],"end":[730,1]},"visibility":"default","docs":"Convert a `DateTime<FixedOffset>` instance into a `DateTime<Local>` instance.","links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:388:755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2012:8304":{"id":"0:2012:8304","crate_id":0,"name":"duration_round","span":{"filename":"src/round.rs","begin":[146,4],"end":[148,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["duration",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:2005:2168","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:259:1569":{"id":"0:259:1569","crate_id":0,"name":"sub","span":{"filename":"src/date.rs","begin":[516,4],"end":[518,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:707:3985":{"id":"0:707:3985","crate_id":0,"name":"set_weekday","span":{"filename":"src/format/parsed.rs","begin":[211,4],"end":[213,5]},"visibility":"public","docs":"Tries to set the [`weekday`](#structfield.weekday) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2242":{"id":"0:2242","crate_id":0,"name":null,"span":{"filename":"src/format/parsed.rs","begin":[20,31],"end":[20,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2243:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2564:793":{"id":"0:2564:793","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[325,38],"end":[325,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1921:7443":{"id":"0:1921:7443","crate_id":0,"name":"offset_from_utc_date","span":{"filename":"src/offset/utc.rs","begin":[130,4],"end":[132,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:3125:2144":{"id":"b:2:2563-0:3125:2144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2219":{"id":"0:0:2219","crate_id":0,"name":"chrono","span":{"filename":"src/lib.rs","begin":[1,0],"end":[629,1]},"visibility":"public","docs":"# Chrono: Date and Time for Rust\n\nChrono aims to provide all functionality needed to do correct operations on dates and times in the\n[proleptic Gregorian calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar):\n\n* The [`DateTime`](https://docs.rs/chrono/latest/chrono/struct.DateTime.html) type is timezone-aware\n  by default, with separate timezone-naive types.\n* Operations that may produce an invalid or ambiguous date and time return `Option` or\n  [`LocalResult`](https://docs.rs/chrono/latest/chrono/offset/enum.LocalResult.html).\n* Configurable parsing and formatting with a `strftime` inspired date and time formatting syntax.\n* The [`Local`](https://docs.rs/chrono/latest/chrono/offset/struct.Local.html) timezone works with\n  the current timezone of the OS.\n* Types and operations are implemented to be reasonably efficient.\n\nTimezone data is not shipped with chrono by default to limit binary sizes. Use the companion crate\n[Chrono-TZ](https://crates.io/crates/chrono-tz) or [`tzfile`](https://crates.io/crates/tzfile) for\nfull timezone support.\n\n### Features\n\nChrono supports various runtime environments and operating systems, and has\nseveral features that may be enabled or disabled.\n\nDefault features:\n\n- `alloc`: Enable features that depend on allocation (primarily string formatting)\n- `std`: Enables functionality that depends on the standard library. This\n  is a superset of `alloc` and adds interoperation with standard library types\n  and traits.\n- `clock`: Enables reading the system time (`now`) that depends on the standard library for\nUNIX-like operating systems and the Windows API (`winapi`) for Windows.\n- `wasmbind`: Interface with the JS Date API for the `wasm32` target.\n\nOptional features:\n\n- [`serde`][]: Enable serialization/deserialization via serde.\n- `rkyv`: Enable serialization/deserialization via rkyv.\n- `arbitrary`: construct arbitrary instances of a type with the Arbitrary crate.\n- `unstable-locales`: Enable localization. This adds various methods with a\n  `_localized` suffix. The implementation and API may change or even be\n  removed in a patch release. Feedback welcome.\n- `oldtime`: this feature no langer has a function, but once offered compatibility with the\n  `time` 0.1 crate.\n\n[`serde`]: https://github.com/serde-rs/serde\n[wasm-bindgen]: https://github.com/rustwasm/wasm-bindgen\n\nSee the [cargo docs][] for examples of specifying features.\n\n[cargo docs]: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choosing-features\n\n## Overview\n\n### Time delta / Duration\n\nChrono has a [`TimeDelta`] type to represent the magnitude of a time span. This is an\n\"accurate\" duration represented as seconds and nanoseconds, and does not represent \"nominal\"\ncomponents such as days or months.\n\nThe [`TimeDelta`] type was previously named `Duration` (and is still available as a type alias\nwith that name). A notable difference with the similar [`core::time::Duration`] is that it is a\nsigned value instead of unsigned.\n\nChrono currently only supports a small number of operations with [`core::time::Duration`] .\nYou can convert between both types with the [`TimeDelta::from_std`] and [`TimeDelta::to_std`]\nmethods.\n\n### Date and Time\n\nChrono provides a\n[**`DateTime`**](./struct.DateTime.html)\ntype to represent a date and a time in a timezone.\n\nFor more abstract moment-in-time tracking such as internal timekeeping\nthat is unconcerned with timezones, consider\n[`time::SystemTime`](https://doc.rust-lang.org/std/time/struct.SystemTime.html),\nwhich tracks your system clock, or\n[`time::Instant`](https://doc.rust-lang.org/std/time/struct.Instant.html), which\nis an opaque but monotonically-increasing representation of a moment in time.\n\n`DateTime` is timezone-aware and must be constructed from\nthe [**`TimeZone`**](./offset/trait.TimeZone.html) object,\nwhich defines how the local date is converted to and back from the UTC date.\nThere are three well-known `TimeZone` implementations:\n\n* [**`Utc`**](./offset/struct.Utc.html) specifies the UTC time zone. It is most efficient.\n\n* [**`Local`**](./offset/struct.Local.html) specifies the system local time zone.\n\n* [**`FixedOffset`**](./offset/struct.FixedOffset.html) specifies\n  an arbitrary, fixed time zone such as UTC+09:00 or UTC-10:30.\n  This often results from the parsed textual date and time.\n  Since it stores the most information and does not depend on the system environment,\n  you would want to normalize other `TimeZone`s into this type.\n\n`DateTime`s with different `TimeZone` types are distinct and do not mix,\nbut can be converted to each other using\nthe [`DateTime::with_timezone`](./struct.DateTime.html#method.with_timezone) method.\n\nYou can get the current date and time in the UTC time zone\n([`Utc::now()`](./offset/struct.Utc.html#method.now))\nor in the local time zone\n([`Local::now()`](./offset/struct.Local.html#method.now)).\n\n```rust\nuse chrono::prelude::*;\n\nlet utc: DateTime<Utc> = Utc::now();       // e.g. `2014-11-28T12:45:59.324310806Z`\n# let _ = utc;\n```\n\n```rust\nuse chrono::prelude::*;\n\nlet local: DateTime<Local> = Local::now(); // e.g. `2014-11-28T21:45:59.324310806+09:00`\n# let _ = local;\n```\n\nAlternatively, you can create your own date and time.\nThis is a bit verbose due to Rust's lack of function and method overloading,\nbut in turn we get a rich combination of initialization methods.\n\n```rust\nuse chrono::prelude::*;\nuse chrono::offset::LocalResult;\n\n# fn doctest() -> Option<()> {\n\nlet dt = Utc.with_ymd_and_hms(2014, 7, 8, 9, 10, 11).unwrap(); // `2014-07-08T09:10:11Z`\nassert_eq!(dt, NaiveDate::from_ymd_opt(2014, 7, 8)?.and_hms_opt(9, 10, 11)?.and_local_timezone(Utc).unwrap());\n\n// July 8 is 188th day of the year 2014 (`o` for \"ordinal\")\nassert_eq!(dt, NaiveDate::from_yo_opt(2014, 189)?.and_hms_opt(9, 10, 11)?.and_utc());\n// July 8 is Tuesday in ISO week 28 of the year 2014.\nassert_eq!(dt, NaiveDate::from_isoywd_opt(2014, 28, Weekday::Tue)?.and_hms_opt(9, 10, 11)?.and_utc());\n\nlet dt = NaiveDate::from_ymd_opt(2014, 7, 8)?.and_hms_milli_opt(9, 10, 11, 12)?.and_local_timezone(Utc).unwrap(); // `2014-07-08T09:10:11.012Z`\nassert_eq!(dt, NaiveDate::from_ymd_opt(2014, 7, 8)?.and_hms_micro_opt(9, 10, 11, 12_000)?.and_local_timezone(Utc).unwrap());\nassert_eq!(dt, NaiveDate::from_ymd_opt(2014, 7, 8)?.and_hms_nano_opt(9, 10, 11, 12_000_000)?.and_local_timezone(Utc).unwrap());\n\n// dynamic verification\nassert_eq!(Utc.with_ymd_and_hms(2014, 7, 8, 21, 15, 33),\n           LocalResult::Single(NaiveDate::from_ymd_opt(2014, 7, 8)?.and_hms_opt(21, 15, 33)?.and_utc()));\nassert_eq!(Utc.with_ymd_and_hms(2014, 7, 8, 80, 15, 33), LocalResult::None);\nassert_eq!(Utc.with_ymd_and_hms(2014, 7, 38, 21, 15, 33), LocalResult::None);\n\n# #[cfg(feature = \"clock\")] {\n// other time zone objects can be used to construct a local datetime.\n// obviously, `local_dt` is normally different from `dt`, but `fixed_dt` should be identical.\nlet local_dt = Local.from_local_datetime(&NaiveDate::from_ymd_opt(2014, 7, 8).unwrap().and_hms_milli_opt(9, 10, 11, 12).unwrap()).unwrap();\nlet fixed_dt = FixedOffset::east_opt(9 * 3600).unwrap().from_local_datetime(&NaiveDate::from_ymd_opt(2014, 7, 8).unwrap().and_hms_milli_opt(18, 10, 11, 12).unwrap()).unwrap();\nassert_eq!(dt, fixed_dt);\n# let _ = local_dt;\n# }\n# Some(())\n# }\n# doctest().unwrap();\n```\n\nVarious properties are available to the date and time, and can be altered individually.\nMost of them are defined in the traits [`Datelike`](./trait.Datelike.html) and\n[`Timelike`](./trait.Timelike.html) which you should `use` before.\nAddition and subtraction is also supported.\nThe following illustrates most supported operations to the date and time:\n\n```rust\nuse chrono::prelude::*;\nuse chrono::TimeDelta;\n\n// assume this returned `2014-11-28T21:45:59.324310806+09:00`:\nlet dt = FixedOffset::east_opt(9*3600).unwrap().from_local_datetime(&NaiveDate::from_ymd_opt(2014, 11, 28).unwrap().and_hms_nano_opt(21, 45, 59, 324310806).unwrap()).unwrap();\n\n// property accessors\nassert_eq!((dt.year(), dt.month(), dt.day()), (2014, 11, 28));\nassert_eq!((dt.month0(), dt.day0()), (10, 27)); // for unfortunate souls\nassert_eq!((dt.hour(), dt.minute(), dt.second()), (21, 45, 59));\nassert_eq!(dt.weekday(), Weekday::Fri);\nassert_eq!(dt.weekday().number_from_monday(), 5); // Mon=1, ..., Sun=7\nassert_eq!(dt.ordinal(), 332); // the day of year\nassert_eq!(dt.num_days_from_ce(), 735565); // the number of days from and including Jan 1, 1\n\n// time zone accessor and manipulation\nassert_eq!(dt.offset().fix().local_minus_utc(), 9 * 3600);\nassert_eq!(dt.timezone(), FixedOffset::east_opt(9 * 3600).unwrap());\nassert_eq!(dt.with_timezone(&Utc), NaiveDate::from_ymd_opt(2014, 11, 28).unwrap().and_hms_nano_opt(12, 45, 59, 324310806).unwrap().and_local_timezone(Utc).unwrap());\n\n// a sample of property manipulations (validates dynamically)\nassert_eq!(dt.with_day(29).unwrap().weekday(), Weekday::Sat); // 2014-11-29 is Saturday\nassert_eq!(dt.with_day(32), None);\nassert_eq!(dt.with_year(-300).unwrap().num_days_from_ce(), -109606); // November 29, 301 BCE\n\n// arithmetic operations\nlet dt1 = Utc.with_ymd_and_hms(2014, 11, 14, 8, 9, 10).unwrap();\nlet dt2 = Utc.with_ymd_and_hms(2014, 11, 14, 10, 9, 8).unwrap();\nassert_eq!(dt1.signed_duration_since(dt2), TimeDelta::seconds(-2 * 3600 + 2));\nassert_eq!(dt2.signed_duration_since(dt1), TimeDelta::seconds(2 * 3600 - 2));\nassert_eq!(Utc.with_ymd_and_hms(1970, 1, 1, 0, 0, 0).unwrap() + TimeDelta::seconds(1_000_000_000),\n           Utc.with_ymd_and_hms(2001, 9, 9, 1, 46, 40).unwrap());\nassert_eq!(Utc.with_ymd_and_hms(1970, 1, 1, 0, 0, 0).unwrap() - TimeDelta::seconds(1_000_000_000),\n           Utc.with_ymd_and_hms(1938, 4, 24, 22, 13, 20).unwrap());\n```\n\n### Formatting and Parsing\n\nFormatting is done via the [`format`](./struct.DateTime.html#method.format) method,\nwhich format is equivalent to the familiar `strftime` format.\n\nSee [`format::strftime`](./format/strftime/index.html#specifiers)\ndocumentation for full syntax and list of specifiers.\n\nThe default `to_string` method and `{:?}` specifier also give a reasonable representation.\nChrono also provides [`to_rfc2822`](./struct.DateTime.html#method.to_rfc2822) and\n[`to_rfc3339`](./struct.DateTime.html#method.to_rfc3339) methods\nfor well-known formats.\n\nChrono now also provides date formatting in almost any language without the\nhelp of an additional C library. This functionality is under the feature\n`unstable-locales`:\n\n```toml\nchrono = { version = \"0.4\", features = [\"unstable-locales\"] }\n```\n\nThe `unstable-locales` feature requires and implies at least the `alloc` feature.\n\n```rust\n# #[allow(unused_imports)]\nuse chrono::prelude::*;\n\n# #[cfg(all(feature = \"unstable-locales\", feature = \"alloc\"))]\n# fn test() {\nlet dt = Utc.with_ymd_and_hms(2014, 11, 28, 12, 0, 9).unwrap();\nassert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2014-11-28 12:00:09\");\nassert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), \"Fri Nov 28 12:00:09 2014\");\nassert_eq!(dt.format_localized(\"%A %e %B %Y, %T\", Locale::fr_BE).to_string(), \"vendredi 28 novembre 2014, 12:00:09\");\n\nassert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), dt.format(\"%c\").to_string());\nassert_eq!(dt.to_string(), \"2014-11-28 12:00:09 UTC\");\nassert_eq!(dt.to_rfc2822(), \"Fri, 28 Nov 2014 12:00:09 +0000\");\nassert_eq!(dt.to_rfc3339(), \"2014-11-28T12:00:09+00:00\");\nassert_eq!(format!(\"{:?}\", dt), \"2014-11-28T12:00:09Z\");\n\n// Note that milli/nanoseconds are only printed if they are non-zero\nlet dt_nano = NaiveDate::from_ymd_opt(2014, 11, 28).unwrap().and_hms_nano_opt(12, 0, 9, 1).unwrap().and_local_timezone(Utc).unwrap();\nassert_eq!(format!(\"{:?}\", dt_nano), \"2014-11-28T12:00:09.000000001Z\");\n# }\n# #[cfg(not(all(feature = \"unstable-locales\", feature = \"alloc\")))]\n# fn test() {}\n# if cfg!(all(feature = \"unstable-locales\", feature = \"alloc\")) {\n#    test();\n# }\n```\n\nParsing can be done with two methods:\n\n1. The standard [`FromStr`](https://doc.rust-lang.org/std/str/trait.FromStr.html) trait\n   (and [`parse`](https://doc.rust-lang.org/std/primitive.str.html#method.parse) method\n   on a string) can be used for parsing `DateTime<FixedOffset>`, `DateTime<Utc>` and\n   `DateTime<Local>` values. This parses what the `{:?}`\n   ([`std::fmt::Debug`](https://doc.rust-lang.org/std/fmt/trait.Debug.html))\n   format specifier prints, and requires the offset to be present.\n\n2. [`DateTime::parse_from_str`](./struct.DateTime.html#method.parse_from_str) parses\n   a date and time with offsets and returns `DateTime<FixedOffset>`.\n   This should be used when the offset is a part of input and the caller cannot guess that.\n   It *cannot* be used when the offset can be missing.\n   [`DateTime::parse_from_rfc2822`](./struct.DateTime.html#method.parse_from_rfc2822)\n   and\n   [`DateTime::parse_from_rfc3339`](./struct.DateTime.html#method.parse_from_rfc3339)\n   are similar but for well-known formats.\n\nMore detailed control over the parsing process is available via\n[`format`](./format/index.html) module.\n\n```rust\nuse chrono::prelude::*;\n\nlet dt = Utc.with_ymd_and_hms(2014, 11, 28, 12, 0, 9).unwrap();\nlet fixed_dt = dt.with_timezone(&FixedOffset::east_opt(9*3600).unwrap());\n\n// method 1\nassert_eq!(\"2014-11-28T12:00:09Z\".parse::<DateTime<Utc>>(), Ok(dt.clone()));\nassert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<Utc>>(), Ok(dt.clone()));\nassert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<FixedOffset>>(), Ok(fixed_dt.clone()));\n\n// method 2\nassert_eq!(DateTime::parse_from_str(\"2014-11-28 21:00:09 +09:00\", \"%Y-%m-%d %H:%M:%S %z\"),\n           Ok(fixed_dt.clone()));\nassert_eq!(DateTime::parse_from_rfc2822(\"Fri, 28 Nov 2014 21:00:09 +0900\"),\n           Ok(fixed_dt.clone()));\nassert_eq!(DateTime::parse_from_rfc3339(\"2014-11-28T21:00:09+09:00\"), Ok(fixed_dt.clone()));\n\n// oops, the year is missing!\nassert!(DateTime::parse_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T %Y\").is_err());\n// oops, the format string does not include the year at all!\nassert!(DateTime::parse_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T\").is_err());\n// oops, the weekday is incorrect!\nassert!(DateTime::parse_from_str(\"Sat Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\").is_err());\n```\n\nAgain : See [`format::strftime`](./format/strftime/index.html#specifiers)\ndocumentation for full syntax and list of specifiers.\n\n### Conversion from and to EPOCH timestamps\n\nUse [`DateTime::from_timestamp(seconds, nanoseconds)`](DateTime::from_timestamp)\nto construct a [`DateTime<Utc>`] from a UNIX timestamp\n(seconds, nanoseconds that passed since January 1st 1970).\n\nUse [`DateTime.timestamp`](DateTime::timestamp) to get the timestamp (in seconds)\nfrom a [`DateTime`]. Additionally, you can use\n[`DateTime.timestamp_subsec_nanos`](DateTime::timestamp_subsec_nanos)\nto get the number of additional number of nanoseconds.\n\n```rust\n// We need the trait in scope to use Utc::timestamp().\nuse chrono::{DateTime, Utc};\n\n// Construct a datetime from epoch:\nlet dt: DateTime<Utc> = DateTime::from_timestamp(1_500_000_000, 0).unwrap();\nassert_eq!(dt.to_rfc2822(), \"Fri, 14 Jul 2017 02:40:00 +0000\");\n\n// Get epoch value from a datetime:\nlet dt = DateTime::parse_from_rfc2822(\"Fri, 14 Jul 2017 02:40:00 +0000\").unwrap();\nassert_eq!(dt.timestamp(), 1_500_000_000);\n```\n\n### Naive date and time\n\nChrono provides naive counterparts to `Date`, (non-existent) `Time` and `DateTime`\nas [**`NaiveDate`**](./naive/struct.NaiveDate.html),\n[**`NaiveTime`**](./naive/struct.NaiveTime.html) and\n[**`NaiveDateTime`**](./naive/struct.NaiveDateTime.html) respectively.\n\nThey have almost equivalent interfaces as their timezone-aware twins,\nbut are not associated to time zones obviously and can be quite low-level.\nThey are mostly useful for building blocks for higher-level types.\n\nTimezone-aware `DateTime` and `Date` types have two methods returning naive versions:\n[`naive_local`](./struct.DateTime.html#method.naive_local) returns\na view to the naive local time,\nand [`naive_utc`](./struct.DateTime.html#method.naive_utc) returns\na view to the naive UTC time.\n\n## Limitations\n\n* Only the proleptic Gregorian calendar (i.e. extended to support older dates) is supported.\n* Date types are limited to about +/- 262,000 years from the common epoch.\n* Time types are limited to nanosecond accuracy.\n* Leap seconds can be represented, but Chrono does not fully support them.\n  See [Leap Second Handling](https://docs.rs/chrono/latest/chrono/naive/struct.NaiveTime.html#leap-second-handling).\n\n## Rust version requirements\n\nThe Minimum Supported Rust Version (MSRV) is currently **Rust 1.61.0**.\n\nThe MSRV is explicitly tested in CI. It may be bumped in minor releases, but this is not done\nlightly.\n\n## Relation between chrono and time 0.1\n\nRust first had a `time` module added to `std` in its 0.7 release. It later moved to\n`libextra`, and then to a `libtime` library shipped alongside the standard library. In 2014\nwork on chrono started in order to provide a full-featured date and time library in Rust.\nSome improvements from chrono made it into the standard library; notably, `chrono::Duration`\nwas included as `std::time::Duration` ([rust#15934]) in 2014.\n\nIn preparation of Rust 1.0 at the end of 2014 `libtime` was moved out of the Rust distro and\ninto the `time` crate to eventually be redesigned ([rust#18832], [rust#18858]), like the\n`num` and `rand` crates. Of course chrono kept its dependency on this `time` crate. `time`\nstarted re-exporting `std::time::Duration` during this period. Later, the standard library was\nchanged to have a more limited unsigned `Duration` type ([rust#24920], [RFC 1040]), while the\n`time` crate kept the full functionality with `time::Duration`. `time::Duration` had been a\npart of chrono's public API.\n\nBy 2016 `time` 0.1 lived under the `rust-lang-deprecated` organisation and was not actively\nmaintained ([time#136]). chrono absorbed the platform functionality and `Duration` type of the\n`time` crate in [chrono#478] (the work started in [chrono#286]). In order to preserve\ncompatibility with downstream crates depending on `time` and `chrono` sharing a `Duration`\ntype, chrono kept depending on time 0.1. chrono offered the option to opt out of the `time`\ndependency by disabling the `oldtime` feature (swapping it out for an effectively similar\nchrono type). In 2019, @jhpratt took over maintenance on the `time` crate and released what\namounts to a new crate as `time` 0.2.\n\n[rust#15934]: https://github.com/rust-lang/rust/pull/15934\n[rust#18832]: https://github.com/rust-lang/rust/pull/18832#issuecomment-62448221\n[rust#18858]: https://github.com/rust-lang/rust/pull/18858\n[rust#24920]: https://github.com/rust-lang/rust/pull/24920\n[RFC 1040]: https://rust-lang.github.io/rfcs/1040-duration-reform.html\n[time#136]: https://github.com/time-rs/time/issues/136\n[chrono#286]: https://github.com/chronotope/chrono/pull/286\n[chrono#478]: https://github.com/chronotope/chrono/pull/478\n\n## Security advisories\n\nIn November of 2020 [CVE-2020-26235] and [RUSTSEC-2020-0071] were opened against the `time` crate.\n@quininer had found that calls to `localtime_r` may be unsound ([chrono#499]). Eventually, almost\na year later, this was also made into a security advisory against chrono as [RUSTSEC-2020-0159],\nwhich had platform code similar to `time`.\n\nOn Unix-like systems a process is given a timezone id or description via the `TZ` environment\nvariable. We need this timezone data to calculate the current local time from a value that is\nin UTC, such as the time from the system clock. `time` 0.1 and chrono used the POSIX function\n`localtime_r` to do the conversion to local time, which reads the `TZ` variable.\n\nRust assumes the environment to be writable and uses locks to access it from multiple threads.\nSome other programming languages and libraries use similar locking strategies, but these are\ntypically not shared across languages. More importantly, POSIX declares modifying the\nenvironment in a multi-threaded process as unsafe, and `getenv` in libc can't be changed to\ntake a lock because it returns a pointer to the data (see [rust#27970] for more discussion).\n\nSince version 4.20 chrono no longer uses `localtime_r`, instead using Rust code to query the\ntimezone (from the `TZ` variable or via `iana-time-zone` as a fallback) and work with data\nfrom the system timezone database directly. The code for this was forked from the [tz-rs crate]\nby @x-hgg-x. As such, chrono now respects the Rust lock when reading the `TZ` environment\nvariable. In general, code should avoid modifying the environment.\n\n[CVE-2020-26235]: https://nvd.nist.gov/vuln/detail/CVE-2020-26235\n[RUSTSEC-2020-0071]: https://rustsec.org/advisories/RUSTSEC-2020-0071\n[chrono#499]: https://github.com/chronotope/chrono/pull/499\n[RUSTSEC-2020-0159]: https://rustsec.org/advisories/RUSTSEC-2020-0159.html\n[rust#27970]: https://github.com/rust-lang/rust/issues/27970\n[chrono#677]: https://github.com/chronotope/chrono/pull/677\n[tz-rs crate]: https://crates.io/crates/tz-rs\n\n## Removing time 0.1\n\nBecause time 0.1 has been unmaintained for years, however, the security advisory mentioned\nabove has not been addressed. While chrono maintainers were careful not to break backwards\ncompatibility with the `time::Duration` type, there has been a long stream of issues from\nusers inquiring about the time 0.1 dependency with the vulnerability. We investigated the\npotential breakage of removing the time 0.1 dependency in [chrono#1095] using a crater-like\nexperiment and determined that the potential for breaking (public) dependencies is very low.\nWe reached out to those few crates that did still depend on compatibility with time 0.1.\n\nAs such, for chrono 0.4.30 we have decided to swap out the time 0.1 `Duration` implementation\nfor a local one that will offer a strict superset of the existing API going forward. This\nwill prevent most downstream users from being affected by the security vulnerability in time\n0.1 while minimizing the ecosystem impact of semver-incompatible version churn.\n\n[chrono#1095]: https://github.com/chronotope/chrono/pull/1095","links":{"`TimeDelta`":"0:2129:2131","`core::time::Duration`":"2:44129:132","`TimeDelta::from_std`":"0:64:2483","`TimeDelta::to_std`":"0:65:2489","DateTime::from_timestamp":"0:372:3041","DateTime::timestamp_subsec_nanos":"0:347:2949","`DateTime`":"0:2171:2139","`DateTime<Utc>`":"0:2171:2139","DateTime::timestamp":"0:340:2905"},"attrs":["#![doc(html_root_url = \"https://docs.rs/chrono/latest/\",\ntest(attr(deny(warnings))))]","#![deny(missing_docs)]","#![deny(missing_debug_implementations)]","#![warn(unreachable_pub)]","#![deny(clippy::tests_outside_test_module)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:106:1185","0:559:739","0:972:2162","0:1569:1104","0:1984:2167","0:102-0:2151:2130","0:103-0:2129:2131","0:104:132","0:273-0:2164:2134","0:275-0:156:2153","0:276-0:155:2154","0:555-0:2171:2139","0:557-0:331:2157","0:558-0:330:2158","0:969-0:2566:2160","0:970-0:949:2161","0:971-0:2187:2140","0:1562-0:2617:2163","0:1563-0:2637:2147","0:1564-0:2692:2148","0:1565-0:2763:2149","0:1567-0:2746:2164","0:1568-0:2612:2165","0:1977-0:3057:2135","0:1978-0:3077:2166","0:1980-0:2781:2145","0:1981-0:1948:2150","0:1982-0:1950:2151","0:1983-0:3064:2146","0:2027-0:2005:2168","0:2028-0:3108:2169","0:2029-0:1997:2138","0:2054-0:3160:2171","0:2055-0:3125:2144","0:2079-0:3243:2173","0:2081-0:3169:2142","0:2082-0:3223:2174","0:2118-0:2087:2141","0:2119-0:2106:2143","0:3252:2209"],"is_stripped":false}}},"0:2200":{"id":"0:2200","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[509,9],"end":[509,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2201:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1101:2802":{"id":"0:1101:2802","crate_id":0,"name":"iso_week","span":{"filename":"src/naive/date.rs","begin":[1678,4],"end":[1680,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:693:3971":{"id":"0:693:3971","crate_id":0,"name":"set_isoyear","span":{"filename":"src/format/parsed.rs","begin":[157,4],"end":[159,5]},"visibility":"public","docs":"Tries to set the [`isoyear`](#structfield.isoyear) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2657:726":{"id":"0:2657:726","crate_id":0,"name":"fmt","span":{"filename":"src/naive/date.rs","begin":[2099,9],"end":[2099,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2227:3948":{"id":"0:2227:3948","crate_id":0,"name":"hour_div_12","span":{"filename":"src/format/parsed.rs","begin":[81,4],"end":[81,32]},"visibility":"public","docs":"Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}}}},"0:1290:3187":{"id":"0:1290:3187","crate_id":0,"name":"with_minute","span":{"filename":"src/naive/datetime/mod.rs","begin":[1566,4],"end":[1568,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the minute number changed.\n\nSee also the [`NaiveTime::with_minute`] method.\n\n# Errors\n\nReturns `None` if the value for `minute` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Timelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 34, 56, 789).unwrap();\nassert_eq!(dt.with_minute(45),\n           Some(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 45, 56, 789).unwrap()));\nassert_eq!(dt.with_minute(60), None);\n```","links":{"`NaiveTime::with_minute`":"0:1499:3187"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["min",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:225:2808":{"id":"0:225:2808","crate_id":0,"name":"with_ordinal","span":{"filename":"src/date.rs","begin":[456,4],"end":[458,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1567-0:2746:2164":{"id":"0:1567-0:2746:2164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[514,16],"end":[514,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"naive::IsoWeek","name":"IsoWeek","id":"0:2746:2164","glob":false}}},"0:1887:2817":{"id":"0:1887:2817","crate_id":0,"name":"today","span":{"filename":"src/offset/local/mod.rs","begin":[125,4],"end":[127,5]},"visibility":"public","docs":"Returns a `Date` which corresponds to the current date.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `Local::now()` instead\")]","#[allow(deprecated)]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `Local::now()` instead"},"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41604:9276-0:2637:2147":{"id":"a:2:41604:9276-0:2637:2147","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2563-0:2284:3355":{"id":"b:2:2563-0:2284:3355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2853:138":{"id":"2:2853:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:31897:12156","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:401:3119":{"id":"0:401:3119","crate_id":0,"name":"parse_from_rfc3339","span":{"filename":"src/datetime/mod.rs","begin":[818,4],"end":[825,5]},"visibility":"public","docs":"Parses an RFC 3339 date-and-time string into a `DateTime<FixedOffset>` value.\n\nParses all valid RFC 3339 values (as well as the subset of valid ISO 8601 values that are\nalso valid RFC 3339 date-and-time values) and returns a new [`DateTime`] with a\n[`FixedOffset`] corresponding to the parsed timezone. While RFC 3339 values come in a wide\nvariety of shapes and sizes, `1996-12-19T16:39:57-08:00` is an example of the most commonly\nencountered variety of RFC 3339 formats.\n\nWhy isn't this named `parse_from_iso8601`? That's because ISO 8601 allows representing\nvalues in a wide range of formats, only some of which represent actual date-and-time\ninstances (rather than periods, ranges, dates, or times). Some valid ISO 8601 values are\nalso simultaneously valid RFC 3339 values, but not all RFC 3339 values are valid ISO 8601\nvalues (or the other way around).","links":{"`DateTime`":"0:2171:2139","`FixedOffset`":"0:2781:2145"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:385":{"id":"0:385","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[710,0],"end":[718,1]},"visibility":"default","docs":"Convert a `DateTime<FixedOffset>` instance into a `DateTime<Utc>` instance.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:386:755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:608:726":{"id":"0:608:726","crate_id":0,"name":"fmt","span":{"filename":"src/format/formatting.rs","begin":[121,4],"end":[139,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3106:793":{"id":"0:3106:793","crate_id":0,"name":"hash","span":{"filename":"src/offset/mod.rs","begin":[41,44],"end":[41,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2119-0:2106:2143":{"id":"0:2119-0:2106:2143","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[538,27],"end":[538,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"traits::Timelike","name":"Timelike","id":"0:2106:2143","glob":false}}},"0:3109:8318":{"id":"0:3109:8318","crate_id":0,"name":"DurationExceedsTimestamp","span":{"filename":"src/round.rs","begin":[235,4],"end":[235,28]},"visibility":"default","docs":"Error when the TimeDelta exceeds the TimeDelta from or until the Unix epoch.\n\nNote: this error is not produced anymore.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2850-0:2617:2163":{"id":"b:2:2850-0:2617:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3260":{"id":"0:3260","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[581,28],"end":[581,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13181:41654":{"id":"2:13181:41654","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:8930"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:3077:2166":{"id":"b:5:725-0:3077:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3236":{"id":"0:3236","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,39],"end":[227,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1918:2751":{"id":"0:1918:2751","crate_id":0,"name":"from_offset","span":{"filename":"src/offset/utc.rs","begin":[119,4],"end":[121,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_state",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41604:9276-0:2479:3495":{"id":"a:2:41604:9276-0:2479:3495","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2560-0:3077:2166":{"id":"b:2:2560-0:3077:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3164":{"id":"0:3164","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[230,16],"end":[230,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13178:41653":{"id":"2:13178:41653","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:8930"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:8946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:3057:2135":{"id":"b:2:2835-0:3057:2135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:336:2878":{"id":"0:336:2878","crate_id":0,"name":"from_local","span":{"filename":"src/datetime/mod.rs","begin":[128,4],"end":[132,5]},"visibility":"public","docs":"Makes a new `DateTime` from a `NaiveDateTime` in *local* time and an `Offset`.\n\n# Panics\n\nPanics if the local datetime can't be converted to UTC because it would be out of range.\n\nThis can happen if `datetime` is near the end of the representable range of `NaiveDateTime`,\nand the offset from UTC pushes it beyond that.","links":{},"attrs":["#[inline]","#[must_use]","#[deprecated(since = \"0.4.27\", note =\n\"Use TimeZone::from_local_datetime() or NaiveDateTime::and_local_timezone instead\")]"],"deprecation":{"since":"0.4.27","note":"Use TimeZone::from_local_datetime() or NaiveDateTime::and_local_timezone instead"},"inner":{"function":{"decl":{"inputs":[["datetime",{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["offset",{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1950:2151","args":null}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2780:458":{"id":"0:2780:458","crate_id":0,"name":"clone","span":{"filename":"src/naive/time/mod.rs","begin":[204,53],"end":[204,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:2372:2842":{"id":"a:2:3058:246-0:2372:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2839-0:2284:3355":{"id":"b:2:2839-0:2284:3355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3120":{"id":"0:3120","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[230,23],"end":[230,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3121:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5869-0:2178:2653":{"id":"b:5:5869-0:2178:2653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1148:5876":{"id":"0:1148:5876","crate_id":0,"name":"size_hint","span":{"filename":"src/naive/date.rs","begin":[2149,4],"end":[2152,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1244:2767":{"id":"0:1244:2767","crate_id":0,"name":"signed_duration_since","span":{"filename":"src/naive/datetime/mod.rs","begin":[971,4],"end":[978,5]},"visibility":"public","docs":"Subtracts another `NaiveDateTime` from the current date and time.\nThis does not overflow or underflow at all.\n\nAs a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),\nthe subtraction assumes that **there is no leap second ever**,\nexcept when any of the `NaiveDateTime`s themselves represents a leap second\nin which case the assumption becomes that\n**there are exactly one (or two) leap second(s) ever**.\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveDate};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nlet d = from_ymd(2016, 7, 8);\nassert_eq!(d.and_hms_opt(3, 5, 7).unwrap().signed_duration_since(d.and_hms_opt(2, 4, 6).unwrap()),\n           TimeDelta::seconds(3600 + 60 + 1));\n\n// July 8 is 190th day in the year 2016\nlet d0 = from_ymd(2016, 1, 1);\nassert_eq!(d.and_hms_milli_opt(0, 7, 6, 500).unwrap().signed_duration_since(d0.and_hms_opt(0, 0, 0).unwrap()),\n           TimeDelta::seconds(189 * 86_400 + 7 * 60 + 6) + TimeDelta::milliseconds(500));\n```\n\nLeap seconds are handled, but the subtraction assumes that\nthere were no other leap seconds happened.\n\n```\n# use chrono::{TimeDelta, NaiveDate};\n# let from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\nlet leap = from_ymd(2015, 6, 30).and_hms_milli_opt(23, 59, 59, 1_500).unwrap();\nassert_eq!(leap.signed_duration_since(from_ymd(2015, 6, 30).and_hms_opt(23, 0, 0).unwrap()),\n           TimeDelta::seconds(3600) + TimeDelta::milliseconds(500));\nassert_eq!(from_ymd(2015, 7, 1).and_hms_opt(1, 0, 0).unwrap().signed_duration_since(leap),\n           TimeDelta::seconds(3600) - TimeDelta::milliseconds(500));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:892":{"id":"0:892","crate_id":0,"name":null,"span":{"filename":"src/format/strftime.rs","begin":[388,0],"end":[411,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["min_by","size_hint","copied","partial_cmp_by","count","try_find","is_partitioned","inspect","skip_while","step_by","sum","min_by_key","take","all","skip","cloned","eq_by","rposition","try_fold","by_ref","chain","take_while","intersperse","cmp","filter","any","ne","max_by","enumerate","le","is_sorted","unzip","try_for_each","try_collect","eq","map_while","lt","min","rev","intersperse_with","fold","max_by_key","max","is_sorted_by","array_chunks","reduce","collect_into","flat_map","flatten","gt","for_each","next_chunk","is_sorted_by_key","product","try_reduce","partition","last","map_windows","filter_map","advance_by","ge","find","partial_cmp","position","zip","__iterator_get_unchecked","map","cmp_by","find_map","partition_in_place","fuse","peekable","scan","nth","collect","cycle"],"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:894:174","0:895:1067"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1115":{"id":"0:1115","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[1939,0],"end":[1945,1]},"visibility":"default","docs":"Add `Months` to `NaiveDate`.\n\nThe result will be clamped to valid days in the resulting month, see `checked_add_months` for\ndetails.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `NaiveDate::checked_add_months` to get an `Option` instead.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Months};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nassert_eq!(from_ymd(2014, 1, 1) + Months::new(1), from_ymd(2014, 2, 1));\nassert_eq!(from_ymd(2014, 1, 1) + Months::new(11), from_ymd(2014, 12, 1));\nassert_eq!(from_ymd(2014, 1, 1) + Months::new(12), from_ymd(2015, 1, 1));\nassert_eq!(from_ymd(2014, 1, 1) + Months::new(13), from_ymd(2015, 2, 1));\nassert_eq!(from_ymd(2014, 1, 31) + Months::new(1), from_ymd(2014, 2, 28));\nassert_eq!(from_ymd(2020, 1, 31) + Months::new(1), from_ymd(2020, 2, 29));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1116:199","0:1117:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13143:35767":{"id":"2:13143:35767","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:8946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:3223:2174":{"id":"b:2:2850-0:3223:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2107:2702":{"id":"0:2107:2702","crate_id":0,"name":"hour","span":{"filename":"src/traits.rs","begin":[269,4],"end":[269,26]},"visibility":"default","docs":"Returns the hour number from 0 to 23.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1468:2726":{"id":"0:1468:2726","crate_id":0,"name":"from_hms_micro_opt","span":{"filename":"src/naive/time/mod.rs","begin":[369,4],"end":[377,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from hour, minute, second and microsecond.\n\nThe microsecond part is allowed to exceed 1,000,000,000 in order to represent a\n[leap second](#leap-second-handling), but only when `sec == 59`.\n\n# Errors\n\nReturns `None` on invalid hour, minute, second and/or microsecond.\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nlet from_hmsu_opt = NaiveTime::from_hms_micro_opt;\n\nassert!(from_hmsu_opt(0, 0, 0, 0).is_some());\nassert!(from_hmsu_opt(23, 59, 59, 999_999).is_some());\nassert!(from_hmsu_opt(23, 59, 59, 1_999_999).is_some()); // a leap second after 23:59:59\nassert!(from_hmsu_opt(24, 0, 0, 0).is_none());\nassert!(from_hmsu_opt(23, 60, 0, 0).is_none());\nassert!(from_hmsu_opt(23, 59, 60, 0).is_none());\nassert!(from_hmsu_opt(23, 59, 59, 2_000_000).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["micro",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:739:4067":{"id":"0:739:4067","crate_id":0,"name":"to_fixed_offset","span":{"filename":"src/format/parsed.rs","begin":[616,4],"end":[618,5]},"visibility":"public","docs":"Returns a parsed fixed time zone offset out of given fields.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1306":{"id":"0:1306","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1748,0],"end":[1755,1]},"visibility":"default","docs":"Add `FixedOffset` to `NaiveDateTime`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `checked_add_offset` to get an `Option` instead.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1307:199","0:1308:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2013:8309":{"id":"0:2013:8309","crate_id":0,"name":"duration_trunc","span":{"filename":"src/round.rs","begin":[150,4],"end":[152,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["duration",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:2005:2168","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2708":{"id":"0:2708","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[76,53],"end":[76,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2709:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1304":{"id":"0:1304","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1735,0],"end":[1740,1]},"visibility":"default","docs":"Add-assign `std::time::Duration` to `NaiveDateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_add_signed`] to get an `Option` instead.","links":{"`NaiveDateTime::checked_add_signed`":"0:1234:2760"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33052:2333","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1305:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2563-0:2151:2130":{"id":"b:2:2563-0:2151:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1525:1570":{"id":"0:1525:1570","crate_id":0,"name":"sub_assign","span":{"filename":"src/naive/time/mod.rs","begin":[1289,4],"end":[1291,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:159:2688":{"id":"0:159:2688","crate_id":0,"name":"from_utc","span":{"filename":"src/date.rs","begin":[77,4],"end":[79,5]},"visibility":"public","docs":"Makes a new `Date` with given *UTC* date and offset.\nThe local date should be constructed via the `TimeZone` trait.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["offset",{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1950:2151","args":null}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2015:137":{"id":"0:2015:137","crate_id":0,"name":"Err","span":{"filename":"src/round.rs","begin":[156,4],"end":[156,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:249":{"id":"0:249","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[496,0],"end":[503,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:251:199","0:252:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2418:667":{"id":"0:2418:667","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[171,16],"end":[171,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:2525:174":{"id":"a:2:3058:246-0:2525:174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3671-0:3169:2142":{"id":"b:2:3671-0:3169:2142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13184:41655":{"id":"2:13184:41655","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:8930"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:8946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31969:237-0:2372:2842":{"id":"a:2:31969:237-0:2372:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:536:726":{"id":"0:536:726","crate_id":0,"name":"fmt","span":{"filename":"src/datetime/mod.rs","begin":[1532,4],"end":[1535,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:3223:2174":{"id":"b:2:2839-0:3223:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31969:237-0:3108:2169":{"id":"a:2:31969:237-0:3108:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:69:1044":{"id":"0:69:1044","crate_id":0,"name":"neg","span":{"filename":"src/time_delta.rs","begin":[449,4],"end":[455,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:2582:3548":{"id":"b:2:2839-0:2582:3548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1535":{"id":"0:1535","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1445,0],"end":[1449,1]},"visibility":"default","docs":"The `Display` output of the naive time `t` is the same as\n[`t.format(\"%H:%M:%S%.f\")`](crate::format::strftime).\n\nThe string printed can be readily parsed via the `parse` method on `str`.\n\nIt should be noted that, for leap seconds not on the minute boundary,\nit may print a representation not distinguishable from non-leap seconds.\nThis doesn't matter in practice, since such leap seconds never happened.\n(By the time of the first leap second on 1972-06-30,\nevery time zone offset around the world has standardized to the 5-minute alignment.)\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nassert_eq!(format!(\"{}\", NaiveTime::from_hms_opt(23, 56, 4).unwrap()),              \"23:56:04\");\nassert_eq!(format!(\"{}\", NaiveTime::from_hms_milli_opt(23, 56, 4, 12).unwrap()),    \"23:56:04.012\");\nassert_eq!(format!(\"{}\", NaiveTime::from_hms_micro_opt(23, 56, 4, 1234).unwrap()),  \"23:56:04.001234\");\nassert_eq!(format!(\"{}\", NaiveTime::from_hms_nano_opt(23, 56, 4, 123456).unwrap()), \"23:56:04.000123456\");\n```\n\nLeap seconds may also be used.\n\n```\n# use chrono::NaiveTime;\nassert_eq!(format!(\"{}\", NaiveTime::from_hms_milli_opt(6, 59, 59, 1_500).unwrap()), \"06:59:60.500\");\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1536:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3671-0:3064:2146":{"id":"b:2:3671-0:3064:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2059":{"id":"0:2059","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[68,0],"end":[165,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2060:2739","0:2061:2746","0:2062:8539","0:2063:1030"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3081:4071":{"id":"0:3081:4071","crate_id":0,"name":"Single","span":{"filename":"src/offset/mod.rs","begin":[47,4],"end":[47,13]},"visibility":"default","docs":"Given local time representation has a single unique result.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:3083:1767"]},"discriminant":null}}},"2:13195:36912":{"id":"2:13195:36912","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:7728"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2258":{"id":"0:2258","crate_id":0,"name":null,"span":{"filename":"src/format/strftime.rs","begin":[188,16],"end":[188,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2260:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1310:199":{"id":"0:1310:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[1798,4],"end":[1798,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1538:137":{"id":"0:1538:137","crate_id":0,"name":"Err","span":{"filename":"src/naive/time/mod.rs","begin":[1475,4],"end":[1475,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2042:726":{"id":"0:2042:726","crate_id":0,"name":"fmt","span":{"filename":"src/weekday.rs","begin":[163,4],"end":[173,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1317:1569":{"id":"0:1317:1569","crate_id":0,"name":"sub","span":{"filename":"src/naive/datetime/mod.rs","begin":[1880,4],"end":[1884,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1998:8281":{"id":"0:1998:8281","crate_id":0,"name":"round_subsecs","span":{"filename":"src/round.rs","begin":[30,4],"end":[30,48]},"visibility":"default","docs":"Return a copy rounded to the specified number of subsecond digits. With\n9 or more digits, self is returned unmodified. Halfway values are\nrounded up (away from zero).\n\n# Example\n``` rust\n# use chrono::{SubsecRound, Timelike, Utc, NaiveDate};\nlet dt = NaiveDate::from_ymd_opt(2018, 1, 11).unwrap().and_hms_milli_opt(12, 0, 0, 154).unwrap().and_local_timezone(Utc).unwrap();\nassert_eq!(dt.round_subsecs(2).nanosecond(), 150_000_000);\nassert_eq!(dt.round_subsecs(1).nanosecond(), 200_000_000);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["digits",{"primitive":"u16"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1967:2751":{"id":"0:1967:2751","crate_id":0,"name":"from_offset","span":{"filename":"src/offset/mod.rs","begin":[487,4],"end":[487,50]},"visibility":"default","docs":"Reconstructs the time zone from the offset.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["offset",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:1950:2151","args":null}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2839-0:3252:2209":{"id":"b:2:2839-0:3252:2209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2126":{"id":"0:2126","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[605,0],"end":[605,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","source","type_id","cause","provide"],"trait":{"name":"Error","id":"2:2898:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5612:42354":{"id":"5:5612:42354","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:294:3344","`String`":"5:7633:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:3344","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:2151:2130":{"id":"a:2:32026:9229-0:2151:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2260:726":{"id":"0:2260:726","crate_id":0,"name":"fmt","span":{"filename":"src/format/strftime.rs","begin":[188,16],"end":[188,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:233":{"id":"0:233","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[470,0],"end":[474,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"Tz2","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:236:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:3252:2209":{"id":"b:5:725-0:3252:2209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2161:667":{"id":"0:2161:667","crate_id":0,"name":"eq","span":{"filename":"src/time_delta.rs","begin":[575,29],"end":[575,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:431:2806":{"id":"0:431:2806","crate_id":0,"name":"with_day","span":{"filename":"src/datetime/mod.rs","begin":[1061,4],"end":[1063,5]},"visibility":"default","docs":"Makes a new `DateTime` with the day of month (starting from 1) changed.\n\nSee also the [`NaiveDate::with_day`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist.\n- The value for `day` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveDate::with_day`":"0:1105:2806"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3121:667":{"id":"0:3121:667","crate_id":0,"name":"eq","span":{"filename":"src/round.rs","begin":[230,23],"end":[230,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3150":{"id":"0:3150","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[32,20],"end":[32,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3152":{"id":"0:3152","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[32,24],"end":[32,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3671-0:2178:2653":{"id":"b:2:3671-0:2178:2653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3176:3608":{"id":"0:3176:3608","crate_id":0,"name":"March","span":{"filename":"src/month.rs","begin":[47,4],"end":[47,13]},"visibility":"default","docs":"March","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"0:2664":{"id":"0:2664","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2099,35],"end":[2099,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2114:3193":{"id":"0:2114:3193","crate_id":0,"name":"with_second","span":{"filename":"src/traits.rs","begin":[309,4],"end":[309,52]},"visibility":"default","docs":"Makes a new value with the second number changed.\n\nReturns `None` when the resulting value would be invalid.\nAs with the [`second`](#tymethod.second) method,\nthe input range is restricted to 0 through 59.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:41604:9276-0:3125:2144":{"id":"a:2:41604:9276-0:3125:2144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:229":{"id":"0:229","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[467,0],"end":[467,76]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2231:3179":{"id":"0:2231:3179","crate_id":0,"name":"nanosecond","span":{"filename":"src/format/parsed.rs","begin":[93,4],"end":[93,31]},"visibility":"public","docs":"The number of nanoseconds since the whole second (0--999,999,999).","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}}}},"0:2140":{"id":"0:2140","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,42],"end":[52,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2142":{"id":"0:2142","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,46],"end":[52,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","ge","gt","le"],"trait":{"name":"PartialOrd","id":"2:2652:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2143:1151"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5869-0:2781:2145":{"id":"b:5:5869-0:2781:2145","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13100:41643":{"id":"2:13100:41643","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43627:8960","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:2446":{"id":"0:49:2446","crate_id":0,"name":"num_days","span":{"filename":"src/time_delta.rs","begin":[284,4],"end":[286,5]},"visibility":"public","docs":"Returns the total number of whole days in the `TimeDelta`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:335:2688":{"id":"0:335:2688","crate_id":0,"name":"from_utc","span":{"filename":"src/datetime/mod.rs","begin":[110,4],"end":[112,5]},"visibility":"public","docs":"Makes a new `DateTime` from its components: a `NaiveDateTime` in UTC and an `Offset`.","links":{},"attrs":["#[inline]","#[must_use]","#[deprecated(since = \"0.4.27\", note =\n\"Use TimeZone::from_utc_datetime() or DateTime::from_naive_utc_and_offset instead\")]"],"deprecation":{"since":"0.4.27","note":"Use TimeZone::from_utc_datetime() or DateTime::from_naive_utc_and_offset instead"},"inner":{"function":{"decl":{"inputs":[["datetime",{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["offset",{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1950:2151","args":null}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:2582:3548":{"id":"b:2:2563-0:2582:3548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2327:3396":{"id":"0:2327:3396","crate_id":0,"name":"NumDaysFromSun","span":{"filename":"src/format/mod.rs","begin":[127,4],"end":[127,18]},"visibility":"default","docs":"Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2089:8618":{"id":"0:2089:8618","crate_id":0,"name":"year_ce","span":{"filename":"src/traits.rs","begin":[38,4],"end":[45,5]},"visibility":"default","docs":"Returns the absolute year number starting from 1 with a boolean flag,\nwhich is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"bool"},{"primitive":"u32"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2632:667":{"id":"0:2632:667","crate_id":0,"name":"eq","span":{"filename":"src/naive/date.rs","begin":[132,39],"end":[132,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:341:2912":{"id":"0:341:2912","crate_id":0,"name":"timestamp_millis","span":{"filename":"src/datetime/mod.rs","begin":[221,4],"end":[223,5]},"visibility":"public","docs":"Returns the number of non-leap-milliseconds since January 1, 1970 UTC.\n\n# Example\n\n```\nuse chrono::{Utc, NaiveDate};\n\nlet dt = NaiveDate::from_ymd_opt(1970, 1, 1).unwrap().and_hms_milli_opt(0, 0, 1, 444).unwrap().and_local_timezone(Utc).unwrap();\nassert_eq!(dt.timestamp_millis(), 1_444);\n\nlet dt = NaiveDate::from_ymd_opt(2001, 9, 9).unwrap().and_hms_milli_opt(1, 46, 40, 555).unwrap().and_local_timezone(Utc).unwrap();\nassert_eq!(dt.timestamp_millis(), 1_000_000_000_555);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:494:199":{"id":"0:494:199","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1350,4],"end":[1350,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:1264:2799":{"id":"0:1264:2799","crate_id":0,"name":"day0","span":{"filename":"src/naive/datetime/mod.rs","begin":[1213,4],"end":[1215,5]},"visibility":"default","docs":"Returns the day of month starting from 0.\n\nThe return value ranges from 0 to 30. (The last day of month differs by months.)\n\nSee also the [`NaiveDate::day0`] method.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Datelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.day0(), 24);\n```","links":{"`NaiveDate::day0`":"0:1097:2799"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41605:9275-0:3057:2135":{"id":"a:2:41605:9275-0:3057:2135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13108:7963":{"id":"2:13108:7963","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:8930"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:8946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1323:199":{"id":"0:1323:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[1930,4],"end":[1930,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:41605:9275-0:2479:3495":{"id":"a:2:41605:9275-0:2479:3495","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3064:2146":{"id":"0:3064:2146","crate_id":0,"name":"Utc","span":{"filename":"src/offset/utc.rs","begin":[52,0],"end":[52,15]},"visibility":"public","docs":"The UTC time zone. This is the most efficient time zone when you don't need the local time.\nIt is also used as an offset (which is also a dummy type).\n\nUsing the [`TimeZone`](./trait.TimeZone.html) methods\non the UTC struct is the preferred way to construct `DateTime<Utc>`\ninstances.\n\n# Example\n\n```\nuse chrono::{TimeZone, NaiveDateTime, Utc};\n\nlet dt = Utc.from_utc_datetime(&NaiveDateTime::from_timestamp_opt(61, 0).unwrap());\n\nassert_eq!(Utc.timestamp_opt(61, 0).unwrap(), dt);\nassert_eq!(Utc.with_ymd_and_hms(1970, 1, 1, 0, 1, 1).unwrap(), dt);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["0:1913","a:2:41605:9275-0:3064:2146","a:2:3058:246-0:3064:2146","a:2:31969:237-0:3064:2146","a:2:41604:9276-0:3064:2146","a:2:32026:9229-0:3064:2146","b:2:2563-0:3064:2146","b:2:3671-0:3064:2146","b:2:2835-0:3064:2146","b:2:2839-0:3064:2146","b:2:2850-0:3064:2146","b:2:2560-0:3064:2146","b:2:2845-0:3064:2146","b:5:725-0:3064:2146","b:5:5869-0:3064:2146","0:1925","0:1927","0:1923","0:3070","0:3069","0:3074","0:3067","0:3072","0:3066","0:1916"]}}},"b:2:2845-0:2781:2145":{"id":"b:2:2845-0:2781:2145","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:926-0:2187:2140":{"id":"0:926-0:2187:2140","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[61,0],"end":[61,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"formatting::SecondsFormat","name":"SecondsFormat","id":"0:2187:2140","glob":false}}},"0:884":{"id":"0:884","crate_id":0,"name":null,"span":{"filename":"src/format/strftime.rs","begin":[201,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:886:1053","0:887:2839","0:889:4957"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2291":{"id":"0:2291","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[77,9],"end":[77,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1948:2150":{"id":"0:1948:2150","crate_id":0,"name":"Offset","span":{"filename":"src/offset/mod.rs","begin":[207,0],"end":[210,1]},"visibility":"public","docs":"The offset from the local time to UTC.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:1949:2880"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:1923","0:1615"]}}},"a:2:3058:246-0:2637:2147":{"id":"a:2:3058:246-0:2637:2147","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:725-0:2426:3477":{"id":"b:5:725-0:2426:3477","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32026:9229-0:2582:3548":{"id":"a:2:32026:9229-0:2582:3548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1233:2949":{"id":"0:1233:2949","crate_id":0,"name":"timestamp_subsec_nanos","span":{"filename":"src/naive/datetime/mod.rs","begin":[632,4],"end":[634,5]},"visibility":"public","docs":"Returns the number of nanoseconds since the last whole non-leap second.\n\nThe return value ranges from 0 to 999,999,999,\nor for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999,999.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet dt = NaiveDate::from_ymd_opt(2016, 7, 8).unwrap().and_hms_nano_opt(9, 10, 11, 123_456_789).unwrap();\nassert_eq!(dt.timestamp_subsec_nanos(), 123_456_789);\n\nlet dt = NaiveDate::from_ymd_opt(2015, 7, 1).unwrap().and_hms_nano_opt(8, 59, 59, 1_234_567_890).unwrap();\nassert_eq!(dt.timestamp_subsec_nanos(), 1_234_567_890);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1245:2782":{"id":"0:1245:2782","crate_id":0,"name":"format_with_items","span":{"filename":"src/naive/datetime/mod.rs","begin":[1010,4],"end":[1016,5]},"visibility":"public","docs":"Formats the combined date and time with the specified formatting items.\nOtherwise it is the same as the ordinary [`format`](#method.format) method.\n\nThe `Iterator` of items should be `Clone`able,\nsince the resulting `DelayedFormat` value may be formatted multiple times.\n\n# Example\n\n```\nuse chrono::NaiveDate;\nuse chrono::format::strftime::StrftimeItems;\n\nlet fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\");\nlet dt = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap().and_hms_opt(23, 56, 4).unwrap();\nassert_eq!(dt.format_with_items(fmt.clone()).to_string(), \"2015-09-05 23:56:04\");\nassert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(),    \"2015-09-05 23:56:04\");\n```\n\nThe resulting `DelayedFormat` can be formatted directly via the `Display` trait.\n\n```\n# use chrono::NaiveDate;\n# use chrono::format::strftime::StrftimeItems;\n# let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\").clone();\n# let dt = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap().and_hms_opt(23, 56, 4).unwrap();\nassert_eq!(format!(\"{}\", dt.format_with_items(fmt)), \"2015-09-05 23:56:04\");\n```","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1122:199":{"id":"0:1122:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/date.rs","begin":[1983,4],"end":[1983,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1472:6195":{"id":"0:1472:6195","crate_id":0,"name":"from_num_seconds_from_midnight_opt","span":{"filename":"src/naive/time/mod.rs","begin":[470,4],"end":[475,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.\n\nThe nanosecond part is allowed to exceed 1,000,000,000 in order to represent a\n[leap second](#leap-second-handling), but only when `secs % 60 == 59`.\n\n# Errors\n\nReturns `None` on invalid number of seconds and/or nanosecond.\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nlet from_nsecs_opt = NaiveTime::from_num_seconds_from_midnight_opt;\n\nassert!(from_nsecs_opt(0, 0).is_some());\nassert!(from_nsecs_opt(86399, 999_999_999).is_some());\nassert!(from_nsecs_opt(86399, 1_999_999_999).is_some()); // a leap second after 23:59:59\nassert!(from_nsecs_opt(86_400, 0).is_none());\nassert!(from_nsecs_opt(86399, 2_000_000_000).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:2187:2140":{"id":"b:2:2835-0:2187:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:2284:3355":{"id":"b:5:725-0:2284:3355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1428:6844":{"id":"0:1428:6844","crate_id":0,"name":"week0","span":{"filename":"src/naive/isoweek.rs","begin":[115,4],"end":[117,5]},"visibility":"public","docs":"Returns the ISO week number starting from 0.\n\nThe return value ranges from 0 to 52. (The last week of year differs by years.)\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike, Weekday};\n\nlet d = NaiveDate::from_isoywd_opt(2015, 15, Weekday::Mon).unwrap();\nassert_eq!(d.iso_week().week0(), 14);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5869-0:2164:2134":{"id":"b:5:5869-0:2164:2134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:507":{"id":"0:507","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1431,0],"end":[1438,1]},"visibility":"default","docs":"Subtract-assign `std::time::Duration` from `DateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `DateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`DateTime<Tz>::checked_sub_signed`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_sub_signed`":"0:356:2762"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33111:2338","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:509:1570"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:886:1053":{"id":"0:886:1053","crate_id":0,"name":"new","span":{"filename":"src/format/strftime.rs","begin":[227,4],"end":[236,5]},"visibility":"public","docs":"Creates a new parsing iterator from a `strftime`-like format string.\n\n# Errors\n\nWhile iterating [`Item::Error`] will be returned if the format string contains an invalid\nor unrecognized formatting specifier.\n\n# Example\n\n```rust\nuse chrono::format::*;\n\nlet strftime_parser = StrftimeItems::new(\"%F\"); // %F: year-month-day (ISO 8601)\n\nconst ISO8601_YMD_ITEMS: &[Item<'static>] = &[\n    Item::Numeric(Numeric::Year, Pad::Zero),\n    Item::Literal(\"-\"),\n    Item::Numeric(Numeric::Month, Pad::Zero),\n    Item::Literal(\"-\"),\n    Item::Numeric(Numeric::Day, Pad::Zero),\n];\nassert!(strftime_parser.eq(ISO8601_YMD_ITEMS.iter().cloned()));\n```","links":{"`Item::Error`":"0:2546:138"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41605:9275-0:2360:3420":{"id":"a:2:41605:9275-0:2360:3420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2532:1767":{"id":"0:2532:1767","crate_id":0,"name":"0","span":{"filename":"src/format/mod.rs","begin":[331,17],"end":[331,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Box","id":"5:294:3344","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}},"0:1215:3052":{"id":"0:1215:3052","crate_id":0,"name":"from_timestamp_millis","span":{"filename":"src/naive/datetime/mod.rs","begin":[162,4],"end":[166,5]},"visibility":"public","docs":"Creates a new [NaiveDateTime] from milliseconds since the UNIX epoch.\n\nThe UNIX epoch starts on midnight, January 1, 1970, UTC.\n\n# Errors\n\nReturns `None` if the number of milliseconds would be out of range for a `NaiveDateTime`\n(more than ca. 262,000 years away from common era)\n\n# Example\n\n```\nuse chrono::NaiveDateTime;\nlet timestamp_millis: i64 = 1662921288000; //Sunday, September 11, 2022 6:34:48 PM\nlet naive_datetime = NaiveDateTime::from_timestamp_millis(timestamp_millis);\nassert!(naive_datetime.is_some());\nassert_eq!(timestamp_millis, naive_datetime.unwrap().timestamp_millis());\n\n// Negative timestamps (before the UNIX epoch) are supported as well.\nlet timestamp_millis: i64 = -2208936075000; //Mon Jan 01 1900 14:38:45 GMT+0000\nlet naive_datetime = NaiveDateTime::from_timestamp_millis(timestamp_millis);\nassert!(naive_datetime.is_some());\nassert_eq!(timestamp_millis, naive_datetime.unwrap().timestamp_millis());\n```","links":{"NaiveDateTime":"0:2692:2148"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["millis",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41605:9275-0:2763:2149":{"id":"a:2:41605:9275-0:2763:2149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2055-0:3125:2144":{"id":"0:2055-0:3125:2144","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[530,0],"end":[530,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"weekday::Weekday","name":"Weekday","id":"0:3125:2144","glob":false}}},"b:2:2845-0:2525:174":{"id":"b:2:2845-0:2525:174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2759:458":{"id":"0:2759:458","crate_id":0,"name":"clone","span":{"filename":"src/naive/isoweek.rs","begin":[19,47],"end":[19,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1342:137":{"id":"0:1342:137","crate_id":0,"name":"Err","span":{"filename":"src/naive/datetime/mod.rs","begin":[2135,4],"end":[2135,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1267:2170":{"id":"0:1267:2170","crate_id":0,"name":"weekday","span":{"filename":"src/naive/datetime/mod.rs","begin":[1268,4],"end":[1270,5]},"visibility":"default","docs":"Returns the day of week.\n\nSee also the [`NaiveDate::weekday`](./struct.NaiveDate.html#method.weekday) method.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Datelike, Weekday};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.weekday(), Weekday::Fri);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2048:8460":{"id":"0:2048:8460","crate_id":0,"name":"from_u64","span":{"filename":"src/weekday.rs","begin":[215,4],"end":[226,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["n",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2218:3935":{"id":"0:2218:3935","crate_id":0,"name":"isoyear_div_100","span":{"filename":"src/format/parsed.rs","begin":[50,4],"end":[50,36]},"visibility":"public","docs":"Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.\nImplies that the year is >= 1 BCE when set.\n\nDue to the common usage, if this field is missing but\n[`isoyear_mod_100`](#structfield.isoyear_mod_100) is present,\nit is inferred to 19 when `isoyear_mod_100 >= 70` and 20 otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}}}},"0:2299":{"id":"0:2299","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[77,37],"end":[77,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2300:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2839-0:2746:2164":{"id":"b:2:2839-0:2746:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1515:295":{"id":"0:1515:295","crate_id":0,"name":"add","span":{"filename":"src/naive/time/mod.rs","begin":[1192,4],"end":[1194,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2355":{"id":"0:2355","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[100,31],"end":[100,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2356:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2353":{"id":"0:2353","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[100,27],"end":[100,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31969:237-0:3243:2173":{"id":"a:2:31969:237-0:3243:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13193:35015":{"id":"2:13193:35015","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2147:726":{"id":"0:2147:726","crate_id":0,"name":"fmt","span":{"filename":"src/time_delta.rs","begin":[52,63],"end":[52,68]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41604:9276-0:3243:2173":{"id":"a:2:41604:9276-0:3243:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1287:3179":{"id":"0:1287:3179","crate_id":0,"name":"nanosecond","span":{"filename":"src/naive/datetime/mod.rs","begin":[1520,4],"end":[1522,5]},"visibility":"default","docs":"Returns the number of nanoseconds since the whole non-leap second.\nThe range from 1,000,000,000 to 1,999,999,999 represents\nthe [leap second](./struct.NaiveTime.html#leap-second-handling).\n\nSee also the [`NaiveTime#method.nanosecond`] method.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Timelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 34, 56, 789).unwrap();\nassert_eq!(dt.nanosecond(), 789_000_000);\n```","links":{"`NaiveTime#method.nanosecond`":"0:2763:2149"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1505:295":{"id":"0:1505:295","crate_id":0,"name":"add","span":{"filename":"src/naive/time/mod.rs","begin":[1139,4],"end":[1141,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5869-0:2129:2131":{"id":"b:5:5869-0:2129:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:176:2746":{"id":"0:176:2746","crate_id":0,"name":"pred","span":{"filename":"src/date.rs","begin":[225,4],"end":[227,5]},"visibility":"public","docs":"Makes a new `Date` for the prior date.\n\nPanics when `self` is the first representable date.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"Use pred_opt() instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"Use pred_opt() instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:701:3979":{"id":"0:701:3979","crate_id":0,"name":"set_week_from_sun","span":{"filename":"src/format/parsed.rs","begin":[193,4],"end":[195,5]},"visibility":"public","docs":"Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:2654:5260":{"id":"a:2:32026:9229-0:2654:5260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3058:246-0:2426:3477":{"id":"a:2:3058:246-0:2426:3477","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2235":{"id":"0:2235","crate_id":0,"name":null,"span":{"filename":"src/format/parsed.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2236:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1977-0:3057:2135":{"id":"0:1977-0:3057:2135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[519,0],"end":[519,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"clock\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"offset::Local","name":"Local","id":"0:3057:2135","glob":false}}},"b:2:2835-0:2525:174":{"id":"b:2:2835-0:2525:174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:421:2800":{"id":"0:421:2800","crate_id":0,"name":"ordinal","span":{"filename":"src/datetime/mod.rs","begin":[985,4],"end":[987,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2602:458":{"id":"0:2602:458","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[395,16],"end":[395,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1104:2805":{"id":"0:1104:2805","crate_id":0,"name":"with_month0","span":{"filename":"src/naive/date.rs","begin":[1758,4],"end":[1761,5]},"visibility":"default","docs":"Makes a new `NaiveDate` with the month number (starting from 0) changed.\n\n# Errors\n\nReturns `None` if the resulting date does not exist, or if the value for `month0` is\ninvalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_month0(9),\n           Some(NaiveDate::from_ymd_opt(2015, 10, 8).unwrap()));\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_month0(12), None); // no month 13\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 30).unwrap().with_month0(1), None); // no February 30\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1152":{"id":"0:1152","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2165,0],"end":[2165,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:8557:5270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2112:3183":{"id":"0:2112:3183","crate_id":0,"name":"with_hour","span":{"filename":"src/traits.rs","begin":[297,4],"end":[297,51]},"visibility":"default","docs":"Makes a new value with the hour number changed.\n\nReturns `None` when the resulting value would be invalid.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1160:3264":{"id":"0:1160:3264","crate_id":0,"name":"from_str","span":{"filename":"src/naive/date.rs","begin":[2257,4],"end":[2272,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2093:2799":{"id":"0:2093:2799","crate_id":0,"name":"day0","span":{"filename":"src/traits.rs","begin":[65,4],"end":[65,26]},"visibility":"default","docs":"Returns the day of month starting from 0.\n\nThe return value ranges from 0 to 30. (The last day of month differs by months.)","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2845-0:3077:2166":{"id":"b:2:2845-0:3077:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2850-0:2129:2131":{"id":"b:2:2850-0:2129:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41604:9276-0:2171:2139":{"id":"a:2:41604:9276-0:2171:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1106:2807":{"id":"0:1106:2807","crate_id":0,"name":"with_day0","span":{"filename":"src/naive/date.rs","begin":[1801,4],"end":[1804,5]},"visibility":"default","docs":"Makes a new `NaiveDate` with the day of month (starting from 0) changed.\n\n# Errors\n\nReturns `None` if the resulting date does not exist, or if the value for `day0` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_day0(29),\n           Some(NaiveDate::from_ymd_opt(2015, 9, 30).unwrap()));\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_day0(30),\n           None); // no September 31\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3261":{"id":"0:3261","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[581,28],"end":[581,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3262:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2313:3384":{"id":"0:2313:3384","crate_id":0,"name":"IsoYearDiv100","span":{"filename":"src/format/mod.rs","begin":[113,4],"end":[113,17]},"visibility":"default","docs":"Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13137:35764":{"id":"2:13137:35764","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12067:454","str::splitn":"2:13134:35762","self::pattern":"2:12757:8930"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43485:8965","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:8946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2220:2172":{"id":"0:2220:2172","crate_id":0,"name":"month","span":{"filename":"src/format/parsed.rs","begin":[57,4],"end":[57,26]},"visibility":"public","docs":"Month (1--12).","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}}}},"0:2257:458":{"id":"0:2257:458","crate_id":0,"name":"clone","span":{"filename":"src/format/strftime.rs","begin":[188,9],"end":[188,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41604:9276-0:3223:2174":{"id":"a:2:41604:9276-0:3223:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3671-0:2171:2139":{"id":"b:2:3671-0:2171:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1522:199":{"id":"0:1522:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/time/mod.rs","begin":[1270,4],"end":[1270,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:42:2419":{"id":"0:42:2419","crate_id":0,"name":"seconds","span":{"filename":"src/time_delta.rs","begin":[207,4],"end":[209,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of seconds.\n\n# Panics\n\nPanics when `seconds` is more than `i64::MAX / 1_000` or less than `-i64::MAX / 1_000`\n(in this context, this is the same as `i64::MIN / 1_000` due to rounding).","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seconds",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:516:199":{"id":"0:516:199","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1470,4],"end":[1470,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:712:3992":{"id":"0:712:3992","crate_id":0,"name":"set_ampm","span":{"filename":"src/format/parsed.rs","begin":[230,4],"end":[232,5]},"visibility":"public","docs":"Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n(`false` for AM, `true` for PM)","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2753":{"id":"0:2753","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[19,24],"end":[19,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","ge","gt","le"],"trait":{"name":"PartialOrd","id":"2:2652:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2754:1151"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2045:1632":{"id":"0:2045:1632","crate_id":0,"name":"try_from","span":{"filename":"src/weekday.rs","begin":[182,4],"end":[193,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:2819:256","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1319:1570":{"id":"0:1319:1570","crate_id":0,"name":"sub_assign","span":{"filename":"src/naive/datetime/mod.rs","begin":[1901,4],"end":[1903,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2016:8304":{"id":"0:2016:8304","crate_id":0,"name":"duration_round","span":{"filename":"src/round.rs","begin":[158,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["duration",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:2005:2168","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3237":{"id":"0:3237","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,39],"end":[227,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3238:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3255:458":{"id":"0:3255:458","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[581,9],"end":[581,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1325":{"id":"0:1325","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1966,0],"end":[1972,1]},"visibility":"default","docs":"Subtract `Months` from `NaiveDateTime`.\n\nThe result will be clamped to valid days in the resulting month, see\n[`NaiveDateTime::checked_sub_months`] for details.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_sub_months`] to get an `Option` instead.\n\n# Example\n\n```\nuse chrono::{Months, NaiveDate};\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 01, 01).unwrap().and_hms_opt(01, 00, 00).unwrap() - Months::new(11),\n    NaiveDate::from_ymd_opt(2013, 02, 01).unwrap().and_hms_opt(01, 00, 00).unwrap()\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 01, 01).unwrap().and_hms_opt(00, 02, 00).unwrap() - Months::new(12),\n    NaiveDate::from_ymd_opt(2013, 01, 01).unwrap().and_hms_opt(00, 02, 00).unwrap()\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 01, 01).unwrap().and_hms_opt(00, 00, 03).unwrap() - Months::new(13),\n    NaiveDate::from_ymd_opt(2012, 12, 01).unwrap().and_hms_opt(00, 00, 03).unwrap()\n);\n```","links":{"`NaiveDateTime::checked_sub_months`":"0:1241:2973"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1326:199","0:1327:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2789:793":{"id":"0:2789:793","crate_id":0,"name":"hash","span":{"filename":"src/offset/fixed.rs","begin":[22,24],"end":[22,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:2129:2131":{"id":"b:2:2839-0:2129:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2022":{"id":"0:2022","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[261,0],"end":[275,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2023:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:0:2000-0:2171:2139":{"id":"b:0:2000-0:2171:2139","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[45,0],"end":[73,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Timelike","id":"0:2106:2143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"SubsecRound","id":"0:1997:2138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:2002:8281","0:2003:8286"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:466:1151":{"id":"0:466:1151","crate_id":0,"name":"partial_cmp","span":{"filename":"src/datetime/mod.rs","begin":[1224,4],"end":[1226,5]},"visibility":"default","docs":"Compare two DateTimes based on their true time, ignoring time zones\n\n# Example\n\n```\nuse chrono::prelude::*;\n\nlet earlier = Utc.with_ymd_and_hms(2015, 5, 15, 2, 0, 0).unwrap().with_timezone(&FixedOffset::west_opt(1 * 3600).unwrap());\nlet later   = Utc.with_ymd_and_hms(2015, 5, 15, 3, 0, 0).unwrap().with_timezone(&FixedOffset::west_opt(5 * 3600).unwrap());\n\nassert_eq!(earlier.to_string(), \"2015-05-15 01:00:00 -01:00\");\nassert_eq!(later.to_string(), \"2015-05-14 22:00:00 -05:00\");\n\nassert!(later > earlier);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2205":{"id":"0:2205","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[509,29],"end":[509,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2207":{"id":"0:2207","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[509,33],"end":[509,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2845-0:2612:2165":{"id":"b:2:2845-0:2612:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2612:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:48:2445":{"id":"0:48:2445","crate_id":0,"name":"num_weeks","span":{"filename":"src/time_delta.rs","begin":[279,4],"end":[281,5]},"visibility":"public","docs":"Returns the total number of whole weeks in the `TimeDelta`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:3057:2135":{"id":"b:2:2839-0:3057:2135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41605:9275-0:3108:2169":{"id":"a:2:41605:9275-0:3108:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2848:138":{"id":"2:2848:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:2068:8460":{"id":"0:2068:8460","crate_id":0,"name":"from_u64","span":{"filename":"src/month.rs","begin":[197,4],"end":[199,5]},"visibility":"default","docs":"Returns an `Option<Month>` from a i64, assuming a 1-index, January = 1.\n\n`Month::from_i64(n: i64)`: | `1`                  | `2`                   | ... | `12`\n---------------------------| -------------------- | --------------------- | ... | -----\n``:                        | Some(Month::January) | Some(Month::February) | ... | Some(Month::December)","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["n",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3247":{"id":"0:3247","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[245,16],"end":[245,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:419:2798":{"id":"0:419:2798","crate_id":0,"name":"day","span":{"filename":"src/datetime/mod.rs","begin":[977,4],"end":[979,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1531:1569":{"id":"0:1531:1569","crate_id":0,"name":"sub","span":{"filename":"src/naive/time/mod.rs","begin":[1356,4],"end":[1358,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3117":{"id":"0:3117","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[230,16],"end":[230,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3118:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2850-0:2251:2654":{"id":"b:2:2850-0:2251:2654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2845-0:2304:3372":{"id":"b:2:2845-0:2304:3372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2074":{"id":"0:2074","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[251,0],"end":[251,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","source","type_id","cause","provide"],"trait":{"name":"Error","id":"2:2898:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2111:3179":{"id":"0:2111:3179","crate_id":0,"name":"nanosecond","span":{"filename":"src/traits.rs","begin":[292,4],"end":[292,32]},"visibility":"default","docs":"Returns the number of nanoseconds since the whole non-leap second.\nThe range from 1,000,000,000 to 1,999,999,999 represents\nthe [leap second](./naive/struct.NaiveTime.html#leap-second-handling).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2850-0:3252:2209":{"id":"b:2:2850-0:3252:2209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1292:3193":{"id":"0:1292:3193","crate_id":0,"name":"with_second","span":{"filename":"src/naive/datetime/mod.rs","begin":[1592,4],"end":[1594,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the second number changed.\n\nAs with the [`second`](#method.second) method,\nthe input range is restricted to 0 through 59.\n\nSee also the [`NaiveTime::with_second`] method.\n\n# Errors\n\nReturns `None` if the value for `second` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Timelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 34, 56, 789).unwrap();\nassert_eq!(dt.with_second(17),\n           Some(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 34, 17, 789).unwrap()));\nassert_eq!(dt.with_second(60), None);\n```","links":{"`NaiveTime::with_second`":"0:1500:3193"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3230:726":{"id":"0:3230:726","crate_id":0,"name":"fmt","span":{"filename":"src/month.rs","begin":[227,22],"end":[227,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2229:3177":{"id":"0:2229:3177","crate_id":0,"name":"minute","span":{"filename":"src/format/parsed.rs","begin":[87,4],"end":[87,27]},"visibility":"public","docs":"Minute number (0--59).","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}}}},"0:2625":{"id":"0:2625","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[132,29],"end":[132,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2627":{"id":"0:2627","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[132,33],"end":[132,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2628:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2838:3300":{"id":"2:2838:3300","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2812:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31969:237-0:2637:2147":{"id":"a:2:31969:237-0:2637:2147","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1223:2152":{"id":"0:1223:2152","crate_id":0,"name":"date","span":{"filename":"src/naive/datetime/mod.rs","begin":[393,4],"end":[395,5]},"visibility":"public","docs":"Retrieves a date component.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet dt = NaiveDate::from_ymd_opt(2016, 7, 8).unwrap().and_hms_opt(9, 10, 11).unwrap();\nassert_eq!(dt.date(), NaiveDate::from_ymd_opt(2016, 7, 8).unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:447:3187":{"id":"0:447:3187","crate_id":0,"name":"with_minute","span":{"filename":"src/datetime/mod.rs","begin":[1157,4],"end":[1159,5]},"visibility":"default","docs":"Makes a new `DateTime` with the minute number changed.\n\nSee also the [`NaiveTime::with_minute`] method.\n\n# Errors\n\n- The value for `minute` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveTime::with_minute`":"0:1499:3187"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["min",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1532":{"id":"0:1532","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1389,0],"end":[1415,1]},"visibility":"default","docs":"The `Debug` output of the naive time `t` is the same as\n[`t.format(\"%H:%M:%S%.f\")`](crate::format::strftime).\n\nThe string printed can be readily parsed via the `parse` method on `str`.\n\nIt should be noted that, for leap seconds not on the minute boundary,\nit may print a representation not distinguishable from non-leap seconds.\nThis doesn't matter in practice, since such leap seconds never happened.\n(By the time of the first leap second on 1972-06-30,\nevery time zone offset around the world has standardized to the 5-minute alignment.)\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nassert_eq!(format!(\"{:?}\", NaiveTime::from_hms_opt(23, 56, 4).unwrap()),              \"23:56:04\");\nassert_eq!(format!(\"{:?}\", NaiveTime::from_hms_milli_opt(23, 56, 4, 12).unwrap()),    \"23:56:04.012\");\nassert_eq!(format!(\"{:?}\", NaiveTime::from_hms_micro_opt(23, 56, 4, 1234).unwrap()),  \"23:56:04.001234\");\nassert_eq!(format!(\"{:?}\", NaiveTime::from_hms_nano_opt(23, 56, 4, 123456).unwrap()), \"23:56:04.000123456\");\n```\n\nLeap seconds may also be used.\n\n```\n# use chrono::NaiveTime;\nassert_eq!(format!(\"{:?}\", NaiveTime::from_hms_milli_opt(6, 59, 59, 1_500).unwrap()), \"06:59:60.500\");\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1533:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2756:465":{"id":"0:2756:465","crate_id":0,"name":"cmp","span":{"filename":"src/naive/isoweek.rs","begin":[19,36],"end":[19,39]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:442:3177":{"id":"0:442:3177","crate_id":0,"name":"minute","span":{"filename":"src/datetime/mod.rs","begin":[1120,4],"end":[1122,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1299":{"id":"0:1299","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1697,0],"end":[1706,1]},"visibility":"default","docs":"Add `std::time::Duration` to `NaiveDateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_add_signed`] to get an `Option` instead.","links":{"`NaiveDateTime::checked_add_signed`":"0:1234:2760"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1300:199","0:1301:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3156:726":{"id":"0:3156:726","crate_id":0,"name":"fmt","span":{"filename":"src/weekday.rs","begin":[32,37],"end":[32,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2044:138":{"id":"0:2044:138","crate_id":0,"name":"Error","span":{"filename":"src/weekday.rs","begin":[180,4],"end":[180,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:3671-0:2654:5260":{"id":"b:2:3671-0:2654:5260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1539:3264":{"id":"0:1539:3264","crate_id":0,"name":"from_str","span":{"filename":"src/naive/time/mod.rs","begin":[1477,4],"end":[1499,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:2151:2130":{"id":"b:2:2839-0:2151:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2371:667":{"id":"0:2371:667","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[156,26],"end":[156,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2287:3358":{"id":"0:2287:3358","crate_id":0,"name":"Zero","span":{"filename":"src/format/mod.rs","begin":[82,4],"end":[82,8]},"visibility":"default","docs":"Zero (`0`) padding.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2159":{"id":"0:2159","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[575,29],"end":[575,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2472":{"id":"0:2472","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[280,29],"end":[280,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2473:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2484:3512":{"id":"0:2484:3512","crate_id":0,"name":"Seconds","span":{"filename":"src/format/mod.rs","begin":[303,4],"end":[303,11]},"visibility":"default","docs":"Format offset from UTC as hours, minutes and seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:5:725-0:2505:3498":{"id":"b:5:725-0:2505:3498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1305:296":{"id":"0:1305:296","crate_id":0,"name":"add_assign","span":{"filename":"src/naive/datetime/mod.rs","begin":[1737,4],"end":[1739,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:2479:3495":{"id":"b:2:2835-0:2479:3495","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1605":{"id":"0:1605","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[121,0],"end":[127,1]},"visibility":"default","docs":"Parsing a `str` into a `FixedOffset` uses the format [`%z`](crate::format::strftime).","links":{"crate::format::strftime":"0:866:3347"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12717:3263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1606:137","0:1607:3264"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5615:35013":{"id":"5:5615:35013","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13193:35015"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31969:237-0:3125:2144":{"id":"a:2:31969:237-0:3125:2144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1067:2747":{"id":"0:1067:2747","crate_id":0,"name":"pred_opt","span":{"filename":"src/naive/date.rs","begin":[1129,4],"end":[1134,5]},"visibility":"public","docs":"Makes a new `NaiveDate` for the previous calendar date.\n\n# Errors\n\nReturns `None` when `self` is the first representable date.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 6, 3).unwrap().pred_opt(),\n           Some(NaiveDate::from_ymd_opt(2015, 6, 2).unwrap()));\nassert_eq!(NaiveDate::MIN.pred_opt(), None);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2845-0:2164:2134":{"id":"b:2:2845-0:2164:2134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32026:9229-0:2746:2164":{"id":"a:2:32026:9229-0:2746:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:359:2977":{"id":"0:359:2977","crate_id":0,"name":"checked_sub_days","span":{"filename":"src/datetime/mod.rs","begin":[457,4],"end":[462,5]},"visibility":"public","docs":"Subtract a duration in [`Days`] from the date part of the `DateTime`.\n\n# Errors\n\nReturns `None` if:\n- The resulting date would be out of range.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`Days`":"0:2617:2163"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13099:15797":{"id":"2:13099:15797","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43617:8958","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1426:2796":{"id":"0:1426:2796","crate_id":0,"name":"year","span":{"filename":"src/naive/isoweek.rs","begin":[81,4],"end":[83,5]},"visibility":"public","docs":"Returns the year number for this ISO week.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike, Weekday};\n\nlet d = NaiveDate::from_isoywd_opt(2015, 1, Weekday::Mon).unwrap();\nassert_eq!(d.iso_week().year(), 2015);\n```\n\nThis year number might not match the calendar year number.\nContinuing the example...\n\n```\n# use chrono::{NaiveDate, Datelike, Weekday};\n# let d = NaiveDate::from_isoywd_opt(2015, 1, Weekday::Mon).unwrap();\nassert_eq!(d.year(), 2014);\nassert_eq!(d, NaiveDate::from_ymd_opt(2014, 12, 29).unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31969:237-0:2781:2145":{"id":"a:2:31969:237-0:2781:2145","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:223:2807":{"id":"0:223:2807","crate_id":0,"name":"with_day0","span":{"filename":"src/date.rs","begin":[451,4],"end":[453,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114-0:2087:2141":{"id":"0:114-0:2087:2141","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[484,20],"end":[484,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Datelike","name":"Datelike","id":"0:2087:2141","glob":false}}},"b:2:2845-0:2187:2140":{"id":"b:2:2845-0:2187:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41604:9276-0:2525:174":{"id":"a:2:41604:9276-0:2525:174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1072:2782":{"id":"0:1072:2782","crate_id":0,"name":"format_with_items","span":{"filename":"src/naive/date.rs","begin":[1277,4],"end":[1283,5]},"visibility":"public","docs":"Formats the date with the specified formatting items.\nOtherwise it is the same as the ordinary `format` method.\n\nThe `Iterator` of items should be `Clone`able,\nsince the resulting `DelayedFormat` value may be formatted multiple times.\n\n# Example\n\n```\nuse chrono::NaiveDate;\nuse chrono::format::strftime::StrftimeItems;\n\nlet fmt = StrftimeItems::new(\"%Y-%m-%d\");\nlet d = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap();\nassert_eq!(d.format_with_items(fmt.clone()).to_string(), \"2015-09-05\");\nassert_eq!(d.format(\"%Y-%m-%d\").to_string(),             \"2015-09-05\");\n```\n\nThe resulting `DelayedFormat` can be formatted directly via the `Display` trait.\n\n```\n# use chrono::NaiveDate;\n# use chrono::format::strftime::StrftimeItems;\n# let fmt = StrftimeItems::new(\"%Y-%m-%d\").clone();\n# let d = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap();\nassert_eq!(format!(\"{}\", d.format_with_items(fmt)), \"2015-09-05\");\n```","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1294:3200":{"id":"0:1294:3200","crate_id":0,"name":"with_nanosecond","span":{"filename":"src/naive/datetime/mod.rs","begin":[1621,4],"end":[1623,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.\n\nReturns `None` when the resulting `NaiveDateTime` would be invalid.\nAs with the [`NaiveDateTime::nanosecond`] method,\nthe input range can exceed 1,000,000,000 for leap seconds.\n\nSee also the [`NaiveTime::with_nanosecond`] method.\n\n# Errors\n\nReturns `None` if `nanosecond >= 2,000,000,000`.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Timelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 34, 59, 789).unwrap();\nassert_eq!(dt.with_nanosecond(333_333_333),\n           Some(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_nano_opt(12, 34, 59, 333_333_333).unwrap()));\nassert_eq!(dt.with_nanosecond(1_333_333_333), // leap second\n           Some(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_nano_opt(12, 34, 59, 1_333_333_333).unwrap()));\nassert_eq!(dt.with_nanosecond(2_000_000_000), None);\n```","links":{"`NaiveTime::with_nanosecond`":"0:1501:3200","`NaiveDateTime::nanosecond`":"0:1287:3179"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1950:2151":{"id":"0:1950:2151","crate_id":0,"name":"TimeZone","span":{"filename":"src/offset/mod.rs","begin":[215,0],"end":[550,1]},"visibility":"public","docs":"The time zone.\n\nThe methods here are the primary constructors for the [`DateTime`] type.","links":{"`DateTime`":"0:2171:2139"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:1951:2150","0:1952:3294","0:1954:3811","0:1955:5987","0:1956:7383","0:1957:5989","0:1958:7389","0:1959:5992","0:1960:2905","0:1961:3274","0:1962:2912","0:1963:3279","0:1964:2926","0:1965:2918","0:1966:7431","0:1967:2751","0:1968:7434","0:1969:7436","0:1970:2780","0:1972:2696","0:1973:7443","0:1974:4079","0:1975:2757","0:1976:2952"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:1889","0:1608","0:1916"]}}},"0:179:1104":{"id":"0:179:1104","crate_id":0,"name":"offset","span":{"filename":"src/date.rs","begin":[241,4],"end":[243,5]},"visibility":"public","docs":"Retrieves an associated offset from UTC.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1950:2151","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1603:3655":{"id":"0:1603:3655","crate_id":0,"name":"local_minus_utc","span":{"filename":"src/offset/fixed.rs","begin":[109,4],"end":[111,5]},"visibility":"public","docs":"Returns the number of seconds to add to convert from UTC to the local time.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2749":{"id":"0:2749","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[19,9],"end":[19,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2750:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2434:667":{"id":"0:2434:667","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[255,23],"end":[255,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:2637:2147":{"id":"a:2:32026:9229-0:2637:2147","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3671-0:2304:3372":{"id":"b:2:3671-0:2304:3372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:398":{"id":"0:398","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[765,0],"end":[885,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:399:3103","0:401:3119","0:402:3132","0:403:2840"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2517":{"id":"0:2517","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[314,29],"end":[314,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2563-0:2654:5260":{"id":"b:2:2563-0:2654:5260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1340:726":{"id":"0:1340:726","crate_id":0,"name":"fmt","span":{"filename":"src/naive/datetime/mod.rs","begin":[2111,4],"end":[2115,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1932:2697":{"id":"0:1932:2697","crate_id":0,"name":"single","span":{"filename":"src/offset/mod.rs","begin":[56,4],"end":[61,5]},"visibility":"public","docs":"Returns `Some` only when the conversion result is unique, or `None` otherwise.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2535:1767":{"id":"0:2535:1767","crate_id":0,"name":"0","span":{"filename":"src/format/mod.rs","begin":[333,10],"end":[333,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"0:1021:2403":{"id":"0:1021:2403","crate_id":0,"name":"days","span":{"filename":"src/naive/date.rs","begin":[121,4],"end":[123,5]},"visibility":"public","docs":"Returns a [`RangeInclusive<T>`] representing the whole week bounded by\n[first_day](NaiveWeek::first_day) and [last_day](NaiveWeek::last_day) functions.\n\n# Panics\n\nPanics if the either the first or last day of the week happens to fall just out of range of\n`NaiveDate` (more than ca. 262,000 years away from common era).\n\n# Examples\n\n```\nuse chrono::{NaiveDate, Weekday};\n\nlet date = NaiveDate::from_ymd_opt(2022, 4, 18).unwrap();\nlet week = date.week(Weekday::Mon);\nlet days = week.days();\nassert!(days.contains(&date));\n```","links":{"NaiveWeek::first_day":"0:1019:5285","`RangeInclusive<T>`":"2:39190:214","NaiveWeek::last_day":"0:1020:5292"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RangeInclusive","id":"2:39190:214","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:2178:2653":{"id":"b:2:2850-0:2178:2653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[746,0],"end":[753,1]},"visibility":"default","docs":"Convert a `DateTime<Local>` instance into a `DateTime<FixedOffset>` instance.","links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:392:755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:520:199":{"id":"0:520:199","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1478,4],"end":[1478,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:382:755":{"id":"0:382:755","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[693,4],"end":[695,5]},"visibility":"default","docs":"Convert this `DateTime<Utc>` instance into a `DateTime<FixedOffset>` instance.\n\nConversion is done via [`DateTime::with_timezone`]. Note that the converted value returned by\nthis will be created with a fixed timezone offset of 0.","links":{"`DateTime::with_timezone`":"0:350:2754"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1026":{"id":"0:1026","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[219,0],"end":[1497,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1030:5362","0:1031:2825","0:1032:5379","0:1033:4035","0:1034:5396","0:1035:4046","0:1036:5436","0:1037:5437","0:1038:5461","0:1039:5462","0:1040:3132","0:1041:2840","0:1044:2968","0:1045:2973","0:1047:2975","0:1048:2977","0:1051:2692","0:1052:2701","0:1053:2705","0:1054:2713","0:1055:2715","0:1056:2722","0:1057:2724","0:1058:2731","0:1059:2733","0:1064:2739","0:1065:2740","0:1066:2746","0:1067:2747","0:1068:2760","0:1069:2762","0:1070:2767","0:1071:2775","0:1072:2782","0:1076:739","0:1078:5668","0:1079:5675","0:1080:3651","0:1081:5685","0:1088:2382","0:1089:2383"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2387:3446":{"id":"0:2387:3446","crate_id":0,"name":"Nanosecond3","span":{"filename":"src/format/mod.rs","begin":[202,4],"end":[202,15]},"visibility":"default","docs":"Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2673:5261":{"id":"0:2673:5261","crate_id":0,"name":"NaiveDateWeeksIterator","span":{"filename":"src/naive/date.rs","begin":[2136,0],"end":[2138,1]},"visibility":"public","docs":"Iterator over `NaiveDate` with a step size of one week.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:41605:9275-0:2673:5261","a:2:3058:246-0:2673:5261","a:2:31969:237-0:2673:5261","a:2:41604:9276-0:2673:5261","a:2:32026:9229-0:2673:5261","b:2:2563-0:2673:5261","b:2:8105-0:2673:5261","b:2:3671-0:2673:5261","b:2:2835-0:2673:5261","b:2:2839-0:2673:5261","b:2:2850-0:2673:5261","b:2:2560-0:2673:5261","b:2:2845-0:2673:5261","b:5:725-0:2673:5261","0:2680","0:1145","0:1149","0:1152","0:2690","0:2684","0:2686","0:2678","0:2683","0:2688","0:2675","0:1150","0:2677"]}}},"0:1070:2767":{"id":"0:1070:2767","crate_id":0,"name":"signed_duration_since","span":{"filename":"src/naive/date.rs","begin":[1217,4],"end":[1225,5]},"visibility":"public","docs":"Subtracts another `NaiveDate` from the current date.\nReturns a `TimeDelta` of integral numbers.\n\nThis does not overflow or underflow at all,\nas all possible output fits in the range of `TimeDelta`.\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveDate};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\nlet since = NaiveDate::signed_duration_since;\n\nassert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 1)), TimeDelta::zero());\nassert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 12, 31)), TimeDelta::days(1));\nassert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 2)), TimeDelta::days(-1));\nassert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 9, 23)), TimeDelta::days(100));\nassert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 1, 1)), TimeDelta::days(365));\nassert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2010, 1, 1)), TimeDelta::days(365*4 + 1));\nassert_eq!(since(from_ymd(2014, 1, 1), from_ymd(1614, 1, 1)), TimeDelta::days(365*400 + 97));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3059":{"id":"0:3059","crate_id":0,"name":null,"span":{"filename":"src/offset/local/mod.rs","begin":[109,9],"end":[109,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2123:726":{"id":"0:2123:726","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[593,4],"end":[595,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:948:874":{"id":"0:948:874","crate_id":0,"name":"kind","span":{"filename":"src/format/mod.rs","begin":[388,4],"end":[390,5]},"visibility":"public","docs":"The category of parse error","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:2251:2654":{"id":"b:2:2560-0:2251:2654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1976:2952":{"id":"0:1976:2952","crate_id":0,"name":"from_utc_datetime","span":{"filename":"src/offset/mod.rs","begin":[547,4],"end":[549,5]},"visibility":"default","docs":"Converts the UTC `NaiveDateTime` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:2479":{"id":"0:63:2479","crate_id":0,"name":"is_zero","span":{"filename":"src/time_delta.rs","begin":[405,4],"end":[407,5]},"visibility":"public","docs":"Returns `true` if the `TimeDelta` equals `TimeDelta::zero()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:449:3193":{"id":"0:449:3193","crate_id":0,"name":"with_second","span":{"filename":"src/datetime/mod.rs","begin":[1175,4],"end":[1177,5]},"visibility":"default","docs":"Makes a new `DateTime` with the second number changed.\n\nAs with the [`second`](#method.second) method,\nthe input range is restricted to 0 through 59.\n\nSee also the [`NaiveTime::with_second`] method.\n\n# Errors\n\nReturns `None` if:\n- The value for `second` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveTime::with_second`":"0:1500:3193"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:2360:3420":{"id":"b:2:2835-0:2360:3420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:40:2413":{"id":"0:40:2413","crate_id":0,"name":"minutes","span":{"filename":"src/time_delta.rs","begin":[183,4],"end":[185,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of minutes.\n\nEquivalent to `TimeDelta::seconds(minutes * 60)` with overflow checks.\n\n# Panics\n\nPanics when the `TimeDelta` would be out of bounds.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["minutes",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2494":{"id":"0:2494","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[293,16],"end":[293,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:43:2397":{"id":"0:43:2397","crate_id":0,"name":"try_seconds","span":{"filename":"src/time_delta.rs","begin":[219,4],"end":[221,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of seconds.\n\n# Errors\n\nReturns `None` when `seconds` is more than `i64::MAX / 1_000` or less than\n`-i64::MAX / 1_000` (in this context, this is the same as `i64::MIN / 1_000` due to\nrounding).","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seconds",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:2500":{"id":"0:92:2500","crate_id":0,"name":"sum","span":{"filename":"src/time_delta.rs","begin":[527,4],"end":[529,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2573":{"id":"0:2573","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[383,23],"end":[383,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2706:465":{"id":"0:2706:465","crate_id":0,"name":"cmp","span":{"filename":"src/naive/datetime/mod.rs","begin":[76,42],"end":[76,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1324:1569":{"id":"0:1324:1569","crate_id":0,"name":"sub","span":{"filename":"src/naive/datetime/mod.rs","begin":[1933,4],"end":[1935,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1890:2150":{"id":"0:1890:2150","crate_id":0,"name":"Offset","span":{"filename":"src/offset/local/mod.rs","begin":[162,4],"end":[162,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:32026:9229-0:2763:2149":{"id":"a:2:32026:9229-0:2763:2149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:31969:237-0:2566:2160":{"id":"a:2:31969:237-0:2566:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13066":{"id":"2:13066","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13067:887","2:13068:3120","2:13069:41637","2:13070:41638","2:13072:41639","2:13075:4180","2:13076:41640","2:13077:334","2:13078:35729","2:13079:8009","2:13081:35726","2:13083:35727","2:13085:35728","2:13087:41641","2:13088:41642","2:13089:35751","2:13090:35752","2:13091:35755","2:13092:35756","2:13094:3672","2:13095:13671","2:13096:2648","2:13097:39370","2:13098:39373","2:13099:15797","2:13100:41643","2:13101:39728","2:13102:3658","2:13105:4168","2:13108:7963","2:13111:4991","2:13115:9734","2:13119:34330","2:13122:35758","2:13125:35760","2:13128:41644","2:13131:41645","2:13134:35762","2:13137:35764","2:13140:35766","2:13143:35767","2:13146:7835","2:13149:41646","2:13152:41647","2:13155:41648","2:13158:41649","2:13160:4166","2:13162:41650","2:13164:41651","2:13165:41652","2:13166:7727","2:13169:4209","2:13172:34163","2:13175:35768","2:13178:41653","2:13181:41654","2:13184:41655","2:13187:2839","2:13189:35010","2:13190:36908","2:13191:4229","2:13192:35014","2:13193:35015","2:13194:36911","2:13195:36912","2:13196:36913","2:13197:41656","2:13199:16510","2:13200:41657"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:2360:3420":{"id":"b:5:725-0:2360:3420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1526":{"id":"0:1526","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1298,0],"end":[1305,1]},"visibility":"default","docs":"Subtract `FixedOffset` from `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the subtraction ignores integral number of days.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1527:199","0:1528:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3671-0:2746:2164":{"id":"b:2:3671-0:2746:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:727:9777":{"id":"5:727:9777","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:2017:8309":{"id":"0:2017:8309","crate_id":0,"name":"duration_trunc","span":{"filename":"src/round.rs","begin":[162,4],"end":[164,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["duration",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:2005:2168","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13196:36913":{"id":"2:13196:36913","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:7728"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1894:7443":{"id":"0:1894:7443","crate_id":0,"name":"offset_from_utc_date","span":{"filename":"src/offset/local/mod.rs","begin":[179,4],"end":[182,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2317:2142":{"id":"0:2317:2142","crate_id":0,"name":"Month","span":{"filename":"src/format/mod.rs","begin":[117,4],"end":[117,9]},"visibility":"default","docs":"Month (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1599:7491":{"id":"0:1599:7491","crate_id":0,"name":"east","span":{"filename":"src/offset/fixed.rs","begin":[41,4],"end":[43,5]},"visibility":"public","docs":"Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.\n\nPanics on the out-of-bound `secs`.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `east_opt()` instead\")]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `east_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3671-0:2692:2148":{"id":"b:2:3671-0:2692:2148","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:104:132":{"id":"0:104:132","crate_id":0,"name":"Duration","span":{"filename":"src/lib.rs","begin":[470,0],"end":[470,30]},"visibility":"public","docs":"Alias of [`TimeDelta`].","links":{"`TimeDelta`":"0:2129:2131"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:1933:7353":{"id":"0:1933:7353","crate_id":0,"name":"earliest","span":{"filename":"src/offset/mod.rs","begin":[65,4],"end":[70,5]},"visibility":"public","docs":"Returns `Some` for the earliest possible conversion result, or `None` if none.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2226:2798":{"id":"0:2226:2798","crate_id":0,"name":"day","span":{"filename":"src/format/parsed.rs","begin":[78,4],"end":[78,24]},"visibility":"public","docs":"Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}}}},"0:2098:2803":{"id":"0:2098:2803","crate_id":0,"name":"with_year","span":{"filename":"src/traits.rs","begin":[119,4],"end":[119,51]},"visibility":"default","docs":"Makes a new value with the year number changed, while keeping the same month and day.\n\nThis method assumes you want to work on the date as a year-month-day value. Don't use it if\nyou want the ordinal to stay the same after changing the year, of if you want the week and\nweekday values to stay the same.\n\n# Errors\n\nReturns `None` when:\n\n- The resulting date does not exist (February 29 in a non-leap year).\n- The year is out of range for [`NaiveDate`].\n- In case of [`DateTime<Tz>`] if the resulting date and time fall within a timezone\n  transition such as from DST to standard time.\n\n[`NaiveDate`]: crate::NaiveDate\n[`DateTime<Tz>`]: crate::DateTime\n\n# Examples\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2020, 5, 13).unwrap().with_year(2023).unwrap(),\n    NaiveDate::from_ymd_opt(2023, 5, 13).unwrap()\n);\n// Resulting date 2023-02-29 does not exist:\nassert!(NaiveDate::from_ymd_opt(2020, 2, 29).unwrap().with_year(2023).is_none());\n\n// Don't use `with_year` if you want the ordinal date to stay the same:\nassert_ne!(\n    NaiveDate::from_yo_opt(2020, 100).unwrap().with_year(2023).unwrap(),\n    NaiveDate::from_yo_opt(2023, 100).unwrap() // result is 2023-101\n);\n```","links":{"crate::NaiveDate":"0:2637:2147","crate::DateTime":"0:2171:2139"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13111:4991":{"id":"2:13111:4991","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41482:191","prim@char":"1:12067:454","self::pattern":"2:12757:8930"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:2372:2842":{"id":"b:5:725-0:2372:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3057:2135":{"id":"0:3057:2135","crate_id":0,"name":"Local","span":{"filename":"src/offset/local/mod.rs","begin":[118,0],"end":[118,17]},"visibility":"public","docs":"The local timescale.\n\nUsing the [`TimeZone`](./trait.TimeZone.html) methods\non the Local struct is the preferred way to construct `DateTime<Local>`\ninstances.\n\n# Example\n\n```\nuse chrono::{Local, DateTime, TimeZone};\n\nlet dt1: DateTime<Local> = Local::now();\nlet dt2: DateTime<Local> = Local.timestamp_opt(0, 0).unwrap();\nassert!(dt1 >= dt2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["0:1886","a:2:41605:9275-0:3057:2135","a:2:3058:246-0:3057:2135","a:2:31969:237-0:3057:2135","a:2:41604:9276-0:3057:2135","a:2:32026:9229-0:3057:2135","b:2:2563-0:3057:2135","b:2:3671-0:3057:2135","b:2:2835-0:3057:2135","b:2:2839-0:3057:2135","b:2:2850-0:3057:2135","b:2:2560-0:3057:2135","b:2:2845-0:3057:2135","b:5:725-0:3057:2135","0:1889","0:3059","0:3062","0:3060"]}}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[688,0],"end":[696,1]},"visibility":"default","docs":"Convert a `DateTime<Utc>` instance into a `DateTime<FixedOffset>` instance.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:382:755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2370":{"id":"0:2370","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[156,26],"end":[156,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2371:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:196":{"id":"0:196","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[329,0],"end":[390,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1950:2151","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:198:2782","0:202:739"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:208:2797":{"id":"0:208:2797","crate_id":0,"name":"month0","span":{"filename":"src/date.rs","begin":[402,4],"end":[404,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2088:2796":{"id":"0:2088:2796","crate_id":0,"name":"year","span":{"filename":"src/traits.rs","begin":[33,4],"end":[33,26]},"visibility":"default","docs":"Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:41604:9276-0:2426:3477":{"id":"a:2:41604:9276-0:2426:3477","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41605:9275-0:2617:2163":{"id":"a:2:41605:9275-0:2617:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2401:3468":{"id":"0:2401:3468","crate_id":0,"name":"TimezoneOffsetColonZ","span":{"filename":"src/format/mod.rs","begin":[235,4],"end":[235,24]},"visibility":"default","docs":"Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).\n\nIn the parser, the colon can be omitted and/or surrounded with any amount of whitespace,\nand `Z` can be either in upper case or in lower case.\nThe offset is limited from `-24:00` to `+24:00`,\nwhich is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2579":{"id":"0:2579","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[383,44],"end":[383,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2580:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:720:4004":{"id":"0:720:4004","crate_id":0,"name":"set_nanosecond","span":{"filename":"src/format/parsed.rs","begin":[268,4],"end":[270,5]},"visibility":"public","docs":"Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31969:237-0:3160:2171":{"id":"a:2:31969:237-0:3160:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2560-0:2525:174":{"id":"b:2:2560-0:2525:174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2350":{"id":"0:2350","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[100,16],"end":[100,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32026:9229-0:3125:2144":{"id":"a:2:32026:9229-0:3125:2144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1225:2905":{"id":"0:1225:2905","crate_id":0,"name":"timestamp","span":{"filename":"src/naive/datetime/mod.rs","begin":[436,4],"end":[441,5]},"visibility":"public","docs":"Returns the number of non-leap seconds since the midnight on January 1, 1970.\n\nNote that this does *not* account for the timezone!\nThe true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet dt = NaiveDate::from_ymd_opt(1970, 1, 1).unwrap().and_hms_milli_opt(0, 0, 1, 980).unwrap();\nassert_eq!(dt.timestamp(), 1);\n\nlet dt = NaiveDate::from_ymd_opt(2001, 9, 9).unwrap().and_hms_opt(1, 46, 40).unwrap();\nassert_eq!(dt.timestamp(), 1_000_000_000);\n\nlet dt = NaiveDate::from_ymd_opt(1969, 12, 31).unwrap().and_hms_opt(23, 59, 59).unwrap();\nassert_eq!(dt.timestamp(), -1);\n\nlet dt = NaiveDate::from_ymd_opt(-1, 1, 1).unwrap().and_hms_opt(0, 0, 0).unwrap();\nassert_eq!(dt.timestamp(), -62198755200);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2118-0:2087:2141":{"id":"0:2118-0:2087:2141","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[538,17],"end":[538,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"traits::Datelike","name":"Datelike","id":"0:2087:2141","glob":false}}},"0:2210":{"id":"0:2210","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[509,44],"end":[509,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2211:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:412:739":{"id":"0:412:739","crate_id":0,"name":"format","span":{"filename":"src/datetime/mod.rs","begin":[919,4],"end":[921,5]},"visibility":"public","docs":"Formats the combined date and time per the specified format string.\n\nSee the [`crate::format::strftime`] module for the supported escape sequences.\n\n# Example\n```rust\nuse chrono::prelude::*;\n\nlet date_time: DateTime<Utc> = Utc.with_ymd_and_hms(2017, 04, 02, 12, 50, 32).unwrap();\nlet formatted = format!(\"{}\", date_time.format(\"%d/%m/%Y %H:%M\"));\nassert_eq!(formatted, \"02/04/2017 12:50\");\n```","links":{"`crate::format::strftime`":"0:866:3347"},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:703:3981":{"id":"0:703:3981","crate_id":0,"name":"set_week_from_mon","span":{"filename":"src/format/parsed.rs","begin":[199,4],"end":[201,5]},"visibility":"public","docs":"Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1919:7434":{"id":"0:1919:7434","crate_id":0,"name":"offset_from_local_date","span":{"filename":"src/offset/utc.rs","begin":[123,4],"end":[125,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1974:4079":{"id":"0:1974:4079","crate_id":0,"name":"offset_from_utc_datetime","span":{"filename":"src/offset/mod.rs","begin":[533,4],"end":[533,76]},"visibility":"default","docs":"Creates the offset for given UTC `NaiveDateTime`. This cannot fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:1950:2151","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1926:726":{"id":"0:1926:726","crate_id":0,"name":"fmt","span":{"filename":"src/offset/utc.rs","begin":[145,4],"end":[147,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3191:3613":{"id":"0:3191:3613","crate_id":0,"name":"August","span":{"filename":"src/month.rs","begin":[57,4],"end":[57,14]},"visibility":"default","docs":"August","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"7","value":"7"}}}},"2:13200:41657":{"id":"2:13200:41657","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4853:41657"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43680:8974","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31969:237-0:2187:2140":{"id":"a:2:31969:237-0:2187:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2170:458":{"id":"0:2170:458","crate_id":0,"name":"clone","span":{"filename":"src/date.rs","begin":[56,9],"end":[56,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1080:3651":{"id":"0:1080:3651","crate_id":0,"name":"week","span":{"filename":"src/naive/date.rs","begin":[1420,4],"end":[1422,5]},"visibility":"public","docs":"Returns the [`NaiveWeek`] that the date belongs to, starting with the [`Weekday`]\nspecified.","links":{"`NaiveWeek`":"0:2612:2165","`Weekday`":"0:3125:2144"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveWeek","id":"0:2612:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:3108:2169":{"id":"b:2:2560-0:3108:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41604:9276-0:3077:2166":{"id":"a:2:41604:9276-0:3077:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2104:2809":{"id":"0:2104:2809","crate_id":0,"name":"with_ordinal0","span":{"filename":"src/traits.rs","begin":[234,4],"end":[234,59]},"visibility":"default","docs":"Makes a new value with the day of year (starting from 0) changed.\n\n# Errors\n\nReturns `None` when:\n\n- The resulting date does not exist (`with_ordinal0(365)` in a non-leap year).\n- In case of [`DateTime<Tz>`] if the resulting date and time fall within a timezone\n  transition such as from DST to standard time.\n- The value for `ordinal0` is out of range.\n\n[`DateTime<Tz>`]: crate::DateTime","links":{"crate::DateTime":"0:2171:2139"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1057:2724":{"id":"0:1057:2724","crate_id":0,"name":"and_hms_micro_opt","span":{"filename":"src/naive/date.rs","begin":[974,4],"end":[983,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.\n\nThe microsecond part is allowed to exceed 1,000,000,000 in order to represent a [leap second](\n./struct.NaiveTime.html#leap-second-handling), but only when `sec == 59`.\n\n# Errors\n\nReturns `None` on invalid hour, minute, second and/or microsecond.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet d = NaiveDate::from_ymd_opt(2015, 6, 3).unwrap();\nassert!(d.and_hms_micro_opt(12, 34, 56,   789_012).is_some());\nassert!(d.and_hms_micro_opt(12, 34, 59, 1_789_012).is_some()); // leap second\nassert!(d.and_hms_micro_opt(12, 34, 59, 2_789_012).is_none());\nassert!(d.and_hms_micro_opt(12, 34, 60,   789_012).is_none());\nassert!(d.and_hms_micro_opt(12, 60, 56,   789_012).is_none());\nassert!(d.and_hms_micro_opt(24, 34, 56,   789_012).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["micro",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:2566:2160":{"id":"b:5:725-0:2566:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1895:4079":{"id":"0:1895:4079","crate_id":0,"name":"offset_from_utc_datetime","span":{"filename":"src/offset/local/mod.rs","begin":[184,4],"end":[186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2315:3386":{"id":"0:2315:3386","crate_id":0,"name":"IsoYearMod100","span":{"filename":"src/format/mod.rs","begin":[115,4],"end":[115,17]},"visibility":"default","docs":"Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1486:739":{"id":"0:1486:739","crate_id":0,"name":"format","span":{"filename":"src/naive/time/mod.rs","begin":[829,4],"end":[831,5]},"visibility":"public","docs":"Formats the time with the specified format string.\nSee the [`format::strftime` module](crate::format::strftime)\non the supported escape sequences.\n\nThis returns a `DelayedFormat`,\nwhich gets converted to a string only when actual formatting happens.\nYou may use the `to_string` method to get a `String`,\nor just feed it into `print!` and other formatting macros.\n(In this way it avoids the redundant memory allocation.)\n\nA wrong format string does *not* issue an error immediately.\nRather, converting or formatting the `DelayedFormat` fails.\nYou are recommended to immediately use `DelayedFormat` for this reason.\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nlet t = NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap();\nassert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");\nassert_eq!(t.format(\"%H:%M:%S%.6f\").to_string(), \"23:56:04.012345\");\nassert_eq!(t.format(\"%-I:%M %p\").to_string(), \"11:56 PM\");\n```\n\nThe resulting `DelayedFormat` can be formatted directly via the `Display` trait.\n\n```\n# use chrono::NaiveTime;\n# let t = NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap();\nassert_eq!(format!(\"{}\", t.format(\"%H:%M:%S\")), \"23:56:04\");\nassert_eq!(format!(\"{}\", t.format(\"%H:%M:%S%.6f\")), \"23:56:04.012345\");\nassert_eq!(format!(\"{}\", t.format(\"%-I:%M %p\")), \"11:56 PM\");\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2186:726":{"id":"0:2186:726","crate_id":0,"name":"fmt","span":{"filename":"src/format/formatting.rs","begin":[35,9],"end":[35,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1153":{"id":"0:1153","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2189,0],"end":[2208,1]},"visibility":"default","docs":"The `Debug` output of the naive date `d` is the same as\n[`d.format(\"%Y-%m-%d\")`](crate::format::strftime).\n\nThe string printed can be readily parsed via the `parse` method on `str`.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nassert_eq!(format!(\"{:?}\", NaiveDate::from_ymd_opt(2015,  9,  5).unwrap()), \"2015-09-05\");\nassert_eq!(format!(\"{:?}\", NaiveDate::from_ymd_opt(   0,  1,  1).unwrap()), \"0000-01-01\");\nassert_eq!(format!(\"{:?}\", NaiveDate::from_ymd_opt(9999, 12, 31).unwrap()), \"9999-12-31\");\n```\n\nISO 8601 requires an explicit sign for years before 1 BCE or after 9999 CE.\n\n```\n# use chrono::NaiveDate;\nassert_eq!(format!(\"{:?}\", NaiveDate::from_ymd_opt(   -1,  1,  1).unwrap()),  \"-0001-01-01\");\nassert_eq!(format!(\"{:?}\", NaiveDate::from_ymd_opt(10000, 12, 31).unwrap()), \"+10000-12-31\");\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1154:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32026:9229-0:3160:2171":{"id":"a:2:32026:9229-0:3160:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3212":{"id":"0:3212","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,30],"end":[31,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3213:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:526":{"id":"0:526","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1505,0],"end":[1511,1]},"visibility":"default","docs":"Add `Days` to `NaiveDateTime`.\n\n# Panics\n\nPanics if:\n- The resulting date would be out of range.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.\n\nStrongly consider using `DateTime<Tz>::checked_sub_days` to get an `Option` instead.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:528:199","0:529:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:532:199":{"id":"0:532:199","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1524,4],"end":[1524,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:2377:3434":{"id":"0:2377:3434","crate_id":0,"name":"ShortWeekdayName","span":{"filename":"src/format/mod.rs","begin":[184,4],"end":[184,20]},"visibility":"default","docs":"Abbreviated day of the week names.\n\nPrints a three-letter-long name in the title case, reads the same name in any case.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2786":{"id":"0:2786","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[22,20],"end":[22,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3063:726":{"id":"0:3063:726","crate_id":0,"name":"fmt","span":{"filename":"src/offset/local/mod.rs","begin":[109,22],"end":[109,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3228":{"id":"0:3228","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,16],"end":[227,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13146:7835":{"id":"2:13146:7835","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12757:8930","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::rmatches":"2:13149:41646"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43567:8967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:2000-0:2692:2148":{"id":"b:0:2000-0:2692:2148","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[45,0],"end":[73,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Timelike","id":"0:2106:2143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"SubsecRound","id":"0:1997:2138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2002:8281","0:2003:8286"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2397:3461":{"id":"0:2397:3461","crate_id":0,"name":"TimezoneOffsetDoubleColon","span":{"filename":"src/format/mod.rs","begin":[222,4],"end":[222,29]},"visibility":"default","docs":"Offset from the local time to UTC with seconds (`+09:00:00` or `-04:00:00` or `+00:00:00`).\n\nIn the parser, the colon can be omitted and/or surrounded with any amount of whitespace.\nThe offset is limited from `-24:00:00` to `+24:00:00`,\nwhich is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1258:755":{"id":"0:1258:755","crate_id":0,"name":"from","span":{"filename":"src/naive/datetime/mod.rs","begin":[1118,4],"end":[1120,5]},"visibility":"default","docs":"Converts a `NaiveDate` to a `NaiveDateTime` of the same date but at midnight.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime};\n\nlet nd = NaiveDate::from_ymd_opt(2016, 5, 28).unwrap();\nlet ndt = NaiveDate::from_ymd_opt(2016, 5, 28).unwrap().and_hms_opt(0, 0, 0).unwrap();\nassert_eq!(ndt, NaiveDateTime::from(nd));","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2066:1632":{"id":"0:2066:1632","crate_id":0,"name":"try_from","span":{"filename":"src/month.rs","begin":[170,4],"end":[186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:2819:256","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1318":{"id":"0:1318","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1899,0],"end":[1904,1]},"visibility":"default","docs":"Subtract-assign `TimeDelta` from `NaiveDateTime`.\n\nThis is the same as the addition with a negated `TimeDelta`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_sub_signed`] to get an `Option` instead.","links":{"`NaiveDateTime::checked_sub_signed`":"0:1240:2762"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33111:2338","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1319:1570"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:2479:3495":{"id":"b:5:725-0:2479:3495","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2676:726":{"id":"0:2676:726","crate_id":0,"name":"fmt","span":{"filename":"src/naive/date.rs","begin":[2135,9],"end":[2135,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:3243:2173":{"id":"a:2:3058:246-0:3243:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:725-0:3169:2142":{"id":"b:5:725-0:3169:2142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1920:7436":{"id":"0:1920:7436","crate_id":0,"name":"offset_from_local_datetime","span":{"filename":"src/offset/utc.rs","begin":[126,4],"end":[128,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:741:4077":{"id":"0:741:4077","crate_id":0,"name":"to_datetime_with_timezone","span":{"filename":"src/format/parsed.rs","begin":[652,4],"end":[695,5]},"visibility":"public","docs":"Returns a parsed timezone-aware date and time out of given fields,\nwith an additional `TimeZone` used to interpret and validate the local date.\n\nThis method is able to determine the combined date and time\nfrom date and time fields or a single [`timestamp`](#structfield.timestamp) field,\nplus a time zone offset.\nEither way those fields have to be consistent to each other.\nIf parsed fields include an UTC offset, it also has to be consistent to\n[`offset`](#structfield.offset).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tz",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Tz"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:402:3132":{"id":"0:402:3132","crate_id":0,"name":"parse_from_str","span":{"filename":"src/datetime/mod.rs","begin":[846,4],"end":[850,5]},"visibility":"public","docs":"Parses a string from a user-specified format into a `DateTime<FixedOffset>` value.\n\nNote that this method *requires a timezone* in the input string. See\n[`NaiveDateTime::parse_from_str`](./naive/struct.NaiveDateTime.html#method.parse_from_str)\nfor a version that does not require a timezone in the to-be-parsed str. The returned\n[`DateTime`] value will have a [`FixedOffset`] reflecting the parsed timezone.\n\nSee the [`format::strftime` module](./format/strftime/index.html) for supported format\nsequences.\n\n# Example\n\n```rust\nuse chrono::{DateTime, FixedOffset, TimeZone, NaiveDate};\n\nlet dt = DateTime::parse_from_str(\n    \"1983 Apr 13 12:09:14.274 +0000\", \"%Y %b %d %H:%M:%S%.3f %z\");\nassert_eq!(dt, Ok(FixedOffset::east_opt(0).unwrap().from_local_datetime(&NaiveDate::from_ymd_opt(1983, 4, 13).unwrap().and_hms_milli_opt(12, 9, 14, 274).unwrap()).unwrap()));\n```","links":{"`DateTime`":"0:2171:2139","`FixedOffset`":"0:2781:2145"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1551-0:2612:2165":{"id":"0:1551-0:2612:2165","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[13,85],"end":[13,94]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::date::NaiveWeek","name":"NaiveWeek","id":"0:2612:2165","glob":false}}},"0:2539:3372":{"id":"0:2539:3372","crate_id":0,"name":"Numeric","span":{"filename":"src/format/mod.rs","begin":[339,4],"end":[339,25]},"visibility":"default","docs":"Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\nthe parser simply ignores any padded whitespace and zeroes.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2541:1767","0:2542:1768"]},"discriminant":null}}},"0:2686":{"id":"0:2686","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2135,46],"end":[2135,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","ge","gt","le"],"trait":{"name":"PartialOrd","id":"2:2652:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2687:1151"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2563-0:2505:3498":{"id":"b:2:2563-0:2505:3498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2536:3532":{"id":"0:2536:3532","crate_id":0,"name":"OwnedSpace","span":{"filename":"src/format/mod.rs","begin":[336,4],"end":[336,24]},"visibility":"default","docs":"Same as `Space` but with the string owned by the item.","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2538:1767"]},"discriminant":null}}},"a:2:3058:246-0:2213:2843":{"id":"a:2:3058:246-0:2213:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41605:9275-0:3077:2166":{"id":"a:2:41605:9275-0:3077:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1256:2838":{"id":"0:1256:2838","crate_id":0,"name":"UNIX_EPOCH","span":{"filename":"src/naive/datetime/mod.rs","begin":[1103,4],"end":[1104,82]},"visibility":"public","docs":"The Unix Epoch, 1970-01-01 00:00:00.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:3077:2166":{"id":"0:3077:2166","crate_id":0,"name":"LocalResult","span":{"filename":"src/offset/mod.rs","begin":[42,0],"end":[51,1]},"visibility":"public","docs":"The conversion result from the local time to the timezone-aware datetime types.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:3079:191","0:3081:4071","0:3084:4072"],"impls":["0:1930","0:1938","0:1945","a:2:41605:9275-0:3077:2166","a:2:3058:246-0:3077:2166","a:2:31969:237-0:3077:2166","a:2:41604:9276-0:3077:2166","a:2:32026:9229-0:3077:2166","b:2:2563-0:3077:2166","b:2:3671-0:3077:2166","b:2:2835-0:3077:2166","b:2:2839-0:3077:2166","b:2:2850-0:3077:2166","b:2:2560-0:3077:2166","b:2:2845-0:3077:2166","b:5:725-0:3077:2166","0:3099","0:3101","0:3096","0:3104","0:3088","0:3093","0:3091"]}}},"0:2778":{"id":"0:2778","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[204,47],"end":[204,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2845-0:2251:2654":{"id":"b:2:2845-0:2251:2654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1511":{"id":"0:1511","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1177,0],"end":[1182,1]},"visibility":"default","docs":"Add-assign `std::time::Duration` to `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the addition ignores integral number of days.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33052:2333","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1512:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1094:2172":{"id":"0:1094:2172","crate_id":0,"name":"month","span":{"filename":"src/naive/date.rs","begin":[1528,4],"end":[1530,5]},"visibility":"default","docs":"Returns the month number starting from 1.\n\nThe return value ranges from 1 to 12.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().month(), 9);\nassert_eq!(NaiveDate::from_ymd_opt(-308, 3, 14).unwrap().month(), 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2075":{"id":"0:2075","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[253,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2076:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2194:3694":{"id":"0:2194:3694","crate_id":0,"name":"Nanos","span":{"filename":"src/format/formatting.rs","begin":[522,4],"end":[522,9]},"visibility":"default","docs":"Use fixed 9 subsecond digits. This corresponds to [Fixed::Nanosecond9].","links":{"Fixed::Nanosecond9":"0:2391:3450"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:3671-0:2251:2654":{"id":"b:2:3671-0:2251:2654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1915:1782":{"id":"0:1915:1782","crate_id":0,"name":"now","span":{"filename":"src/offset/utc.rs","begin":[95,4],"end":[101,5]},"visibility":"public","docs":"Returns a `DateTime<Utc>` which corresponds to the current date and time in UTC.\n\nSee also the similar [`Local::now()`] which returns `DateTime<Local>`, i.e. the local date\nand time including offset from UTC.\n\n[`Local::now()`]: crate::Local::now\n\n# Example\n\n```\n# #![allow(unused_variables)]\n# use chrono::{FixedOffset, Utc};\n// Current time in UTC\nlet now_utc = Utc::now();\n\n// Current date in UTC\nlet today_utc = now_utc.date_naive();\n\n// Current time in some timezone (let's use +05:00)\nlet offset = FixedOffset::east_opt(5 * 60 * 60).unwrap();\nlet now_with_offset = Utc::now().with_timezone(&offset);\n```","links":{"crate::Local::now":"0:1888:1782"},"attrs":["#[cfg(not(all(target_arch = \"wasm32\", feature = \"wasmbind\",\nnot(any(target_os = \"emscripten\", target_os = \"wasi\")))))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:423:2170":{"id":"0:423:2170","crate_id":0,"name":"weekday","span":{"filename":"src/datetime/mod.rs","begin":[993,4],"end":[995,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:2187:2140":{"id":"b:2:2850-0:2187:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2305:3375":{"id":"0:2305:3375","crate_id":0,"name":"Year","span":{"filename":"src/format/mod.rs","begin":[104,4],"end":[104,8]},"visibility":"default","docs":"Full Gregorian year (FW=4, PW=∞).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign (+/-).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:31969:237-0:3252:2209":{"id":"a:2:31969:237-0:3252:2209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:371":{"id":"0:371","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[597,0],"end":[666,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:372:3041","0:373:3052","0:374:2838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1925":{"id":"0:1925","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[144,0],"end":[148,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1926:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2622":{"id":"0:2622","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[132,16],"end":[132,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1923":{"id":"0:1923","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[138,0],"end":[142,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Offset","id":"0:1948:2150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1924:2880"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1263:2798":{"id":"0:1263:2798","crate_id":0,"name":"day","span":{"filename":"src/naive/datetime/mod.rs","begin":[1194,4],"end":[1196,5]},"visibility":"default","docs":"Returns the day of month starting from 1.\n\nThe return value ranges from 1 to 31. (The last day of month differs by months.)\n\nSee also the [`NaiveDate::day`](./struct.NaiveDate.html#method.day) method.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Datelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.day(), 25);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2329:3398":{"id":"0:2329:3398","crate_id":0,"name":"WeekdayFromMon","span":{"filename":"src/format/mod.rs","begin":[129,4],"end":[129,18]},"visibility":"default","docs":"Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13102:3658":{"id":"2:13102:3658","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:8930"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[392,0],"end":[464,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["num_days_from_ce","year_ce"],"trait":{"name":"Datelike","id":"0:2087:2141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:206:2796","0:207:2172","0:208:2797","0:209:2798","0:210:2799","0:211:2800","0:212:2801","0:213:2170","0:214:2802","0:215:2803","0:217:2804","0:219:2805","0:221:2806","0:223:2807","0:225:2808","0:227:2809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:348:1104":{"id":"0:348:1104","crate_id":0,"name":"offset","span":{"filename":"src/datetime/mod.rs","begin":[330,4],"end":[332,5]},"visibility":"public","docs":"Retrieves an associated offset from UTC.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1950:2151","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2658":{"id":"0:2658","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2099,16],"end":[2099,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1997:2138":{"id":"0:1997:2138","crate_id":0,"name":"SubsecRound","span":{"filename":"src/round.rs","begin":[18,0],"end":[43,1]},"visibility":"public","docs":"Extension trait for subsecond rounding or truncation to a maximum number\nof digits. Rounding can be used to decrease the error variance when\nserializing/persisting to lower precision. Truncation is the default\nbehavior in Chrono display formatting.  Either can be used to guarantee\nequality (e.g. for testing) when round-tripping through a lower precision\nformat.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:1998:8281","0:1999:8286"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:2000"]}}},"b:2:3671-0:3223:2174":{"id":"b:2:3671-0:3223:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2545:1767":{"id":"0:2545:1767","crate_id":0,"name":"0","span":{"filename":"src/format/mod.rs","begin":[341,10],"end":[341,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:1255:2383":{"id":"0:1255:2383","crate_id":0,"name":"MAX","span":{"filename":"src/naive/datetime/mod.rs","begin":[1100,4],"end":[1100,78]},"visibility":"public","docs":"The maximum possible `NaiveDateTime`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"b:2:2850-0:3125:2144":{"id":"b:2:2850-0:3125:2144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1135":{"id":"0:1135","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2092,0],"end":[2096,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1136:755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2154":{"id":"0:2154","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[575,9],"end":[575,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2155:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1975:2757":{"id":"0:1975:2757","crate_id":0,"name":"from_utc_date","span":{"filename":"src/offset/mod.rs","begin":[540,4],"end":[542,5]},"visibility":"default","docs":"Converts the UTC `NaiveDate` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]","#[deprecated(since = \"0.4.23\", note = \"use `from_utc_datetime()` instead\")]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.23","note":"use `from_utc_datetime()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1530:199":{"id":"0:1530:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/time/mod.rs","begin":[1353,4],"end":[1353,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:41604:9276-0:2692:2148":{"id":"a:2:41604:9276-0:2692:2148","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1139:1067":{"id":"0:1139:1067","crate_id":0,"name":"next","span":{"filename":"src/naive/date.rs","begin":[2107,4],"end":[2113,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8248:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:199":{"id":"0:84:199","crate_id":0,"name":"Output","span":{"filename":"src/time_delta.rs","begin":[501,4],"end":[501,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:109-0:1997:2138":{"id":"0:109-0:1997:2138","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[482,4],"end":[482,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::SubsecRound","name":"SubsecRound","id":"0:1997:2138","glob":false}}},"0:44:2427":{"id":"0:44:2427","crate_id":0,"name":"milliseconds","span":{"filename":"src/time_delta.rs","begin":[230,4],"end":[232,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of milliseconds.\n\n# Panics\n\nPanics when the `TimeDelta` would be out of bounds, i.e. when `milliseconds` is more than\n`i64::MAX` or less than `-i64::MAX`. Notably, this is not the same as `i64::MIN`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["milliseconds",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1519":{"id":"0:1519","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1258,0],"end":[1263,1]},"visibility":"default","docs":"Subtract-assign `TimeDelta` from `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the subtraction ignores integral number of days.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33111:2338","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1520:1570"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2423":{"id":"0:2423","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[171,38],"end":[171,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2424:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2845-0:2582:3548":{"id":"b:2:2845-0:2582:3548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1978-0:3077:2166":{"id":"0:1978-0:3077:2166","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[520,0],"end":[520,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"offset::LocalResult","name":"LocalResult","id":"0:3077:2166","glob":false}}},"0:171:2733":{"id":"0:171:2733","crate_id":0,"name":"and_hms_nano_opt","span":{"filename":"src/date.rs","begin":[190,4],"end":[198,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nReturns `None` on invalid hour, minute, second and/or nanosecond.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:340:2905":{"id":"0:340:2905","crate_id":0,"name":"timestamp","span":{"filename":"src/datetime/mod.rs","begin":[202,4],"end":[204,5]},"visibility":"public","docs":"Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n(aka \"UNIX timestamp\").\n\nThe reverse operation of creating a [`DateTime`] from a timestamp can be performed\nusing [`from_timestamp`](DateTime::from_timestamp) or [`TimeZone::timestamp_opt`].\n\n```\nuse chrono::{DateTime, TimeZone, Utc};\n\nlet dt: DateTime<Utc> = Utc.with_ymd_and_hms(2015, 5, 15, 0, 0, 0).unwrap();\nassert_eq!(dt.timestamp(), 1431648000);\n\nassert_eq!(DateTime::from_timestamp(dt.timestamp(), dt.timestamp_subsec_nanos()).unwrap(), dt);\n```","links":{"DateTime::from_timestamp":"0:372:3041","`DateTime`":"0:2171:2139","`TimeZone::timestamp_opt`":"0:1961:3274"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1922:4079":{"id":"0:1922:4079","crate_id":0,"name":"offset_from_utc_datetime","span":{"filename":"src/offset/utc.rs","begin":[133,4],"end":[135,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2214:2796":{"id":"0:2214:2796","crate_id":0,"name":"year","span":{"filename":"src/format/parsed.rs","begin":[26,4],"end":[26,25]},"visibility":"public","docs":"Year.\n\nThis can be negative unlike [`year_div_100`](#structfield.year_div_100)\nand [`year_mod_100`](#structfield.year_mod_100) fields.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}}}},"0:2011:137":{"id":"0:2011:137","crate_id":0,"name":"Err","span":{"filename":"src/round.rs","begin":[144,4],"end":[144,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2343:3415":{"id":"0:2343:3415","crate_id":0,"name":"Timestamp","span":{"filename":"src/format/mod.rs","begin":[146,4],"end":[146,13]},"visibility":"default","docs":"The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\nFor formatting, it assumes UTC upon the absence of time zone offset.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2363:458":{"id":"0:2363:458","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[156,9],"end":[156,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2029-0:1997:2138":{"id":"0:2029-0:1997:2138","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[525,46],"end":[525,57]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"round::SubsecRound","name":"SubsecRound","id":"0:1997:2138","glob":false}}},"0:2503:793":{"id":"0:2503:793","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[293,44],"end":[293,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:437:2809":{"id":"0:437:2809","crate_id":0,"name":"with_ordinal0","span":{"filename":"src/datetime/mod.rs","begin":[1109,4],"end":[1111,5]},"visibility":"default","docs":"Makes a new `DateTime` with the day of year (starting from 0) changed.\n\nSee also the [`NaiveDate::with_ordinal0`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist.\n- The value for `ordinal0` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveDate::with_ordinal0`":"0:1109:2809"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:2673:5261":{"id":"b:2:2560-0:2673:5261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1279:2808":{"id":"0:1279:2808","crate_id":0,"name":"with_ordinal","span":{"filename":"src/naive/datetime/mod.rs","begin":[1418,4],"end":[1420,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.\n\nSee also the [`NaiveDate::with_ordinal`] method.\n\n# Errors\n\nReturns `None` if the resulting date does not exist, or if the value for `ordinal` is\ninvalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Datelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.with_ordinal(60),\n           Some(NaiveDate::from_ymd_opt(2015, 3, 1).unwrap().and_hms_opt(12, 34, 56).unwrap()));\nassert_eq!(dt.with_ordinal(366), None); // 2015 had only 365 days\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2016, 9, 8).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.with_ordinal(60),\n           Some(NaiveDate::from_ymd_opt(2016, 2, 29).unwrap().and_hms_opt(12, 34, 56).unwrap()));\nassert_eq!(dt.with_ordinal(366),\n           Some(NaiveDate::from_ymd_opt(2016, 12, 31).unwrap().and_hms_opt(12, 34, 56).unwrap()));\n```","links":{"`NaiveDate::with_ordinal`":"0:1107:2808"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2407:3105":{"id":"0:2407:3105","crate_id":0,"name":"RFC2822","span":{"filename":"src/format/mod.rs","begin":[243,4],"end":[243,11]},"visibility":"default","docs":"RFC 2822 date and time syntax. Commonly used for email and MIME date and time.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:231":{"id":"0:231","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[468,0],"end":[468,83]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2041":{"id":"0:2041","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[162,0],"end":[174,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2042:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2845-0:3223:2174":{"id":"b:2:2845-0:3223:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:202:739":{"id":"0:202:739","crate_id":0,"name":"format","span":{"filename":"src/date.rs","begin":[351,4],"end":[353,5]},"visibility":"public","docs":"Formats the date with the specified format string.\nSee the [`crate::format::strftime`] module\non the supported escape sequences.","links":{"`crate::format::strftime`":"0:866:3347"},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:403:2840":{"id":"0:403:2840","crate_id":0,"name":"parse_and_remainder","span":{"filename":"src/datetime/mod.rs","begin":[877,4],"end":[884,5]},"visibility":"public","docs":"Parses a string from a user-specified format into a `DateTime<FixedOffset>` value, and a\nslice with the remaining portion of the string.\n\nNote that this method *requires a timezone* in the input string. See\n[`NaiveDateTime::parse_and_remainder`] for a version that does not\nrequire a timezone in `s`. The returned [`DateTime`] value will have a [`FixedOffset`]\nreflecting the parsed timezone.\n\nSee the [`format::strftime` module](./format/strftime/index.html) for supported format\nsequences.\n\nSimilar to [`parse_from_str`](#method.parse_from_str).\n\n# Example\n\n```rust\n# use chrono::{DateTime, FixedOffset, TimeZone};\nlet (datetime, remainder) = DateTime::parse_and_remainder(\n    \"2015-02-18 23:16:09 +0200 trailing text\", \"%Y-%m-%d %H:%M:%S %z\").unwrap();\nassert_eq!(\n    datetime,\n    FixedOffset::east_opt(2*3600).unwrap().with_ymd_and_hms(2015, 2, 18, 23, 16, 9).unwrap()\n);\nassert_eq!(remainder, \" trailing text\");\n```","links":{"`NaiveDateTime::parse_and_remainder`":"0:1220:2840","`DateTime`":"0:2171:2139","`FixedOffset`":"0:2781:2145"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2512":{"id":"0:2512","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[314,9],"end":[314,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2513:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2514":{"id":"0:2514","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[314,16],"end":[314,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2513:726":{"id":"0:2513:726","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[314,9],"end":[314,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2624:726":{"id":"0:2624:726","crate_id":0,"name":"fmt","span":{"filename":"src/naive/date.rs","begin":[132,22],"end":[132,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1608":{"id":"0:1608","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[129,0],"end":[149,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["timestamp_millis","isoywd","ymd","yo","timestamp_nanos","isoywd_opt","yo_opt","from_local_datetime","from_utc_date","from_local_date","timestamp","from_utc_datetime","timestamp_opt","datetime_from_str","with_ymd_and_hms","timestamp_millis_opt","timestamp_micros","ymd_opt"],"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1609:2150","0:1610:2751","0:1611:7434","0:1612:7436","0:1613:7443","0:1614:4079"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13091:35755":{"id":"2:13091:35755","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13092:35756"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3113:8313":{"id":"0:3113:8313","crate_id":0,"name":"TimestampExceedsLimit","span":{"filename":"src/round.rs","begin":[258,4],"end":[258,25]},"visibility":"default","docs":"Error when `DateTime.timestamp_nanos` exceeds the limit.\n\n``` rust\n# use chrono::{DurationRound, TimeDelta, RoundingError, TimeZone, Utc};\nlet dt = Utc.with_ymd_and_hms(2300, 12, 12, 0, 0, 0).unwrap();\n\nassert_eq!(dt.duration_round(TimeDelta::days(1)), Err(RoundingError::TimestampExceedsLimit),);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:3129:4038":{"id":"0:3129:4038","crate_id":0,"name":"Tue","span":{"filename":"src/weekday.rs","begin":[46,4],"end":[46,11]},"visibility":"default","docs":"Tuesday.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"0:71:199":{"id":"0:71:199","crate_id":0,"name":"Output","span":{"filename":"src/time_delta.rs","begin":[459,4],"end":[459,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:418:2797":{"id":"0:418:2797","crate_id":0,"name":"month0","span":{"filename":"src/datetime/mod.rs","begin":[973,4],"end":[975,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1034:5396":{"id":"0:1034:5396","crate_id":0,"name":"from_isoywd","span":{"filename":"src/naive/date.rs","begin":[355,4],"end":[357,5]},"visibility":"public","docs":"Makes a new `NaiveDate` from the [ISO week date](#week-date)\n(year, week number and day of the week).\nThe resulting `NaiveDate` may have a different year from the input year.\n\n# Panics\n\nPanics if the specified week does not exist in that year, on invalid values for `week`, or\nif the resulting date is out of range for `NaiveDate`.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `from_isoywd_opt()` instead\")]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_isoywd_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"i32"}],["week",{"primitive":"u32"}],["weekday",{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:237":{"id":"0:237","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[476,0],"end":[476,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:813:3264":{"id":"0:813:3264","crate_id":0,"name":"from_str","span":{"filename":"src/format/parse.rs","begin":[526,4],"end":[533,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2679:458":{"id":"0:2679:458","crate_id":0,"name":"clone","span":{"filename":"src/naive/date.rs","begin":[2135,22],"end":[2135,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:2505:3498":{"id":"a:2:32026:9229-0:2505:3498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2160":{"id":"0:2160","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[575,29],"end":[575,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2161:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:545:137":{"id":"0:545:137","crate_id":0,"name":"Err","span":{"filename":"src/datetime/mod.rs","begin":[1610,4],"end":[1610,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:251:199":{"id":"0:251:199","crate_id":0,"name":"Output","span":{"filename":"src/date.rs","begin":[497,4],"end":[497,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:541:137":{"id":"0:541:137","crate_id":0,"name":"Err","span":{"filename":"src/datetime/mod.rs","begin":[1588,4],"end":[1588,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2575:667":{"id":"0:2575:667","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[383,23],"end":[383,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1066:2746":{"id":"0:1066:2746","crate_id":0,"name":"pred","span":{"filename":"src/naive/date.rs","begin":[1108,4],"end":[1110,5]},"visibility":"public","docs":"Makes a new `NaiveDate` for the previous calendar date.\n\n# Panics\n\nPanics when `self` is the first representable date.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `pred_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `pred_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:467":{"id":"0:467","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1229,0],"end":[1233,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2646:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:469:465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3058:246-0:3160:2171":{"id":"a:2:3058:246-0:3160:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2049":{"id":"0:2049","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[236,0],"end":[236,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","source","type_id","cause","provide"],"trait":{"name":"Error","id":"2:2898:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:165:2715":{"id":"0:165:2715","crate_id":0,"name":"and_hms_milli_opt","span":{"filename":"src/date.rs","begin":[132,4],"end":[140,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nReturns `None` on invalid hour, minute, second and/or millisecond.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["milli",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2777:465":{"id":"0:2777:465","crate_id":0,"name":"cmp","span":{"filename":"src/naive/time/mod.rs","begin":[204,42],"end":[204,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:8105-0:2673:5261":{"id":"b:2:8105-0:2673:5261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8101:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:8107:174","2:8108:9013","2:8109:851"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1117:295":{"id":"0:1117:295","crate_id":0,"name":"add","span":{"filename":"src/naive/date.rs","begin":[1942,4],"end":[1944,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["months",{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3104:2332","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2092:2798":{"id":"0:2092:2798","crate_id":0,"name":"day","span":{"filename":"src/traits.rs","begin":[60,4],"end":[60,25]},"visibility":"default","docs":"Returns the day of month starting from 1.\n\nThe return value ranges from 1 to 31. (The last day of month differs by months.)","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:2148":{"id":"0:2148","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,70],"end":[52,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2149:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2500":{"id":"0:2500","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[293,40],"end":[293,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:934-0:783:2840":{"id":"0:934-0:783:2840","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[68,23],"end":[68,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"parse::parse_and_remainder","name":"parse_and_remainder","id":"0:783:2840","glob":false}}},"a:2:32026:9229-0:2617:2163":{"id":"a:2:32026:9229-0:2617:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1471:7050":{"id":"0:1471:7050","crate_id":0,"name":"from_num_seconds_from_midnight","span":{"filename":"src/naive/time/mod.rs","begin":[442,4],"end":[444,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.\n\nThe nanosecond part is allowed to exceed 1,000,000,000 in order to represent a\n[leap second](#leap-second-handling), but only when `secs % 60 == 59`.\n\n# Panics\n\nPanics on invalid number of seconds and/or nanosecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"use `from_num_seconds_from_midnight_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_num_seconds_from_midnight_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1065:2740":{"id":"0:1065:2740","crate_id":0,"name":"succ_opt","span":{"filename":"src/naive/date.rs","begin":[1093,4],"end":[1098,5]},"visibility":"public","docs":"Makes a new `NaiveDate` for the next calendar date.\n\n# Errors\n\nReturns `None` when `self` is the last representable date.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 6, 3).unwrap().succ_opt(),\n           Some(NaiveDate::from_ymd_opt(2015, 6, 4).unwrap()));\nassert_eq!(NaiveDate::MAX.succ_opt(), None);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3062":{"id":"0:3062","crate_id":0,"name":null,"span":{"filename":"src/offset/local/mod.rs","begin":[109,22],"end":[109,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3063:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2078:726":{"id":"0:2078:726","crate_id":0,"name":"fmt","span":{"filename":"src/month.rs","begin":[260,4],"end":[262,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2284:3355":{"id":"0:2284:3355","crate_id":0,"name":"Pad","span":{"filename":"src/format/mod.rs","begin":[78,0],"end":[85,1]},"visibility":"public","docs":"Padding characters for numeric items.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:2285:191","0:2287:3358","0:2289:3360"],"impls":["a:2:41605:9275-0:2284:3355","a:2:3058:246-0:2284:3355","a:2:31969:237-0:2284:3355","a:2:41604:9276-0:2284:3355","a:2:32026:9229-0:2284:3355","b:2:2563-0:2284:3355","b:2:3671-0:2284:3355","b:2:2835-0:2284:3355","b:2:2839-0:2284:3355","b:2:2850-0:2284:3355","b:2:2560-0:2284:3355","b:2:2845-0:2284:3355","b:5:725-0:2284:3355","0:2301","0:2292","0:2291","0:2295","0:2299","0:2294","0:2297"]}}},"0:2556":{"id":"0:2556","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[325,27],"end":[325,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:59:2473":{"id":"0:59:2473","crate_id":0,"name":"abs","span":{"filename":"src/time_delta.rs","begin":[377,4],"end":[383,5]},"visibility":"public","docs":"Returns the `TimeDelta` as an absolute (non-negative) value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[481,0],"end":[486,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33111:2338","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:1570"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2289:3360":{"id":"0:2289:3360","crate_id":0,"name":"Space","span":{"filename":"src/format/mod.rs","begin":[84,4],"end":[84,9]},"visibility":"default","docs":"Space padding.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1331":{"id":"0:1331","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[2028,0],"end":[2034,1]},"visibility":"default","docs":"Add `Days` to `NaiveDateTime`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `checked_add_days` to get an `Option` instead.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1332:199","0:1333:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2835-0:2763:2149":{"id":"b:2:2835-0:2763:2149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1494:2702":{"id":"0:1494:2702","crate_id":0,"name":"hour","span":{"filename":"src/naive/time/mod.rs","begin":[874,4],"end":[876,5]},"visibility":"default","docs":"Returns the hour number from 0 to 23.\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nassert_eq!(NaiveTime::from_hms_opt(0, 0, 0).unwrap().hour(), 0);\nassert_eq!(NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap().hour(), 23);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:552":{"id":"0:552","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1645,0],"end":[1656,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"std::time::SystemTime","id":"1:9197:2837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:554:755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:480:199":{"id":"0:480:199","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1271,4],"end":[1271,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:2437":{"id":"0:2437","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[255,38],"end":[255,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2438:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1097:2799":{"id":"0:1097:2799","crate_id":0,"name":"day0","span":{"filename":"src/naive/date.rs","begin":[1602,4],"end":[1604,5]},"visibility":"default","docs":"Returns the day of month starting from 0.\n\nThe return value ranges from 0 to 30. (The last day of month differs by months.)\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().day0(), 7);\nassert_eq!(NaiveDate::from_ymd_opt(-308, 3, 14).unwrap().day0(), 13);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1146:174":{"id":"0:1146:174","crate_id":0,"name":"Item","span":{"filename":"src/naive/date.rs","begin":[2141,4],"end":[2141,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:41604:9276-0:2164:2134":{"id":"a:2:41604:9276-0:2164:2134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41604:9276-0:3160:2171":{"id":"a:2:41604:9276-0:3160:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2168":{"id":"0:2168","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[56,9],"end":[56,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1950:2151","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:2170:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2520":{"id":"0:2520","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[314,40],"end":[314,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3221":{"id":"0:3221","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,62],"end":[31,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2646:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3222:465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13122:35758":{"id":"2:13122:35758","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:8930"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12573:8976","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:2151:2130":{"id":"b:5:725-0:2151:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13131:41645":{"id":"2:13131:41645","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12757:8930","str::split":"2:13119:34330","prim@char":"1:12067:454","str::split_terminator":"2:13128:41644"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43431:8962","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:8946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13164:41651":{"id":"2:13164:41651","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2576":{"id":"0:2576","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[383,34],"end":[383,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2768:667":{"id":"0:2768:667","crate_id":0,"name":"eq","span":{"filename":"src/naive/time/mod.rs","begin":[204,9],"end":[204,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3125:2144":{"id":"0:3125:2144","crate_id":0,"name":"Weekday","span":{"filename":"src/weekday.rs","begin":[42,0],"end":[57,1]},"visibility":"public","docs":"The day of week.\n\nThe order of the days of week depends on the context.\n(This is why this type does *not* implement `PartialOrd` or `Ord` traits.)\nOne should prefer `*_from_monday` or `*_from_sunday` methods to get the correct result.\n\n# Example\n```\nuse chrono::Weekday;\n\nlet monday = \"Monday\".parse::<Weekday>().unwrap();\nassert_eq!(monday, Weekday::Mon);\n\nlet sunday = Weekday::try_from(6).unwrap();\nassert_eq!(sunday, Weekday::Sun);\n\nassert_eq!(sunday.num_days_from_monday(), 6); // starts counting with Monday = 0\nassert_eq!(sunday.number_from_monday(), 7); // starts counting with Monday = 1\nassert_eq!(sunday.num_days_from_sunday(), 0); // starts counting with Sunday = 0\nassert_eq!(sunday.number_from_sunday(), 1); // starts counting with Sunday = 1\n\nassert_eq!(sunday.succ(), monday);\nassert_eq!(sunday.pred(), Weekday::Sat);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:3126:3648","0:3129:4038","0:3132:4039","0:3135:4040","0:3138:4041","0:3141:4042","0:3144:3646"],"impls":["0:2033","a:2:41605:9275-0:3125:2144","a:2:3058:246-0:3125:2144","a:2:31969:237-0:3125:2144","a:2:41604:9276-0:3125:2144","a:2:32026:9229-0:3125:2144","b:2:2563-0:3125:2144","b:2:3671-0:3125:2144","b:2:2835-0:3125:2144","b:2:2839-0:3125:2144","b:2:2850-0:3125:2144","b:2:2560-0:3125:2144","b:2:2845-0:3125:2144","b:5:725-0:3125:2144","b:5:5869-0:3125:2144","0:3150","0:3148","0:962","0:3152","0:3155","0:2046","0:2041","0:3147","0:2043","0:3153","0:3157"]}}},"0:270":{"id":"0:270","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[544,0],"end":[552,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1950:2151","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:272:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1261:2172":{"id":"0:1261:2172","crate_id":0,"name":"month","span":{"filename":"src/naive/datetime/mod.rs","begin":[1156,4],"end":[1158,5]},"visibility":"default","docs":"Returns the month number starting from 1.\n\nThe return value ranges from 1 to 12.\n\nSee also the [`NaiveDate::month`](./struct.NaiveDate.html#method.month) method.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Datelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.month(), 9);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1934:7355":{"id":"0:1934:7355","crate_id":0,"name":"latest","span":{"filename":"src/offset/mod.rs","begin":[74,4],"end":[79,5]},"visibility":"public","docs":"Returns `Some` for the latest possible conversion result, or `None` if none.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2417":{"id":"0:2417","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[171,16],"end":[171,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2418:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2145:465":{"id":"0:2145:465","crate_id":0,"name":"cmp","span":{"filename":"src/time_delta.rs","begin":[52,58],"end":[52,61]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1604:7506":{"id":"0:1604:7506","crate_id":0,"name":"utc_minus_local","span":{"filename":"src/offset/fixed.rs","begin":[115,4],"end":[117,5]},"visibility":"public","docs":"Returns the number of seconds to add to convert from the local time to UTC.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:491:295":{"id":"0:491:295","crate_id":0,"name":"add","span":{"filename":"src/datetime/mod.rs","begin":[1329,4],"end":[1333,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31969:237-0:2284:3355":{"id":"a:2:31969:237-0:2284:3355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:360:2767":{"id":"0:360:2767","crate_id":0,"name":"signed_duration_since","span":{"filename":"src/datetime/mod.rs","begin":[468,4],"end":[473,5]},"visibility":"public","docs":"Subtracts another `DateTime` from the current date and time.\nThis does not overflow or underflow at all.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"impl_trait":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Tz2","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"impl Borrow<DateTime<Tz2>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2023:726":{"id":"0:2023:726","crate_id":0,"name":"fmt","span":{"filename":"src/round.rs","begin":[262,4],"end":[274,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1236:2984":{"id":"0:1236:2984","crate_id":0,"name":"checked_add_offset","span":{"filename":"src/naive/datetime/mod.rs","begin":[752,4],"end":[760,5]},"visibility":"public","docs":"Adds given `FixedOffset` to the current datetime.\nReturns `None` if the result would be outside the valid range for [`NaiveDateTime`].\n\nThis method is similar to [`checked_add_signed`](#method.checked_add_offset), but preserves\nleap seconds.","links":{"`NaiveDateTime`":"0:2692:2148"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3671-0:3252:2209":{"id":"b:2:3671-0:3252:2209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:388:755":{"id":"0:388:755","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[727,4],"end":[729,5]},"visibility":"default","docs":"Convert this `DateTime<FixedOffset>` instance into a `DateTime<Local>` instance.\n\nConversion is performed via [`DateTime::with_timezone`]. Returns the equivalent value in local\ntime.","links":{"`DateTime::with_timezone`":"0:350:2754"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2352:667":{"id":"0:2352:667","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[100,16],"end":[100,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3671-0:3108:2169":{"id":"b:2:3671-0:3108:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2300:726":{"id":"0:2300:726","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[77,37],"end":[77,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:946:3543":{"id":"0:946:3543","crate_id":0,"name":"to_owned","span":{"filename":"src/format/mod.rs","begin":[369,4],"end":[379,5]},"visibility":"public","docs":"Convert items that contain a reference to the format string into an owned variant.","links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2580:793":{"id":"0:2580:793","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[383,44],"end":[383,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1211:2157":{"id":"0:1211:2157","crate_id":0,"name":"MAX_DATETIME","span":{"filename":"src/naive/datetime/mod.rs","begin":[50,0],"end":[50,59]},"visibility":"public","docs":"The maximum possible `NaiveDateTime`.","links":{},"attrs":["#[deprecated(since = \"0.4.20\", note = \"Use NaiveDateTime::MAX instead\")]"],"deprecation":{"since":"0.4.20","note":"Use NaiveDateTime::MAX instead"},"inner":{"constant":{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"NaiveDateTime::MAX","value":null,"is_literal":false}}},"0:3209":{"id":"0:3209","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,20],"end":[31,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1131:1570":{"id":"0:1131:1570","crate_id":0,"name":"sub_assign","span":{"filename":"src/naive/date.rs","begin":[2054,4],"end":[2056,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:2129:2131":{"id":"b:2:2563-0:2129:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1935:938":{"id":"0:1935:938","crate_id":0,"name":"map","span":{"filename":"src/offset/mod.rs","begin":[83,4],"end":[89,5]},"visibility":"public","docs":"Maps a `LocalResult<T>` into `LocalResult<U>` with given function.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3301:142","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:928-0:609:739":{"id":"0:928-0:609:739","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[64,21],"end":[64,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"formatting::format","name":"format","id":"0:609:739","glob":false}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[521,0],"end":[526,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33111:2338","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:262:1570"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3671-0:2360:3420":{"id":"b:2:3671-0:2360:3420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2563-0:2461:3492":{"id":"b:2:2563-0:2461:3492","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2616:726":{"id":"0:2616:726","crate_id":0,"name":"fmt","span":{"filename":"src/naive/date.rs","begin":[38,9],"end":[38,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1339":{"id":"0:1339","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[2110,0],"end":[2116,1]},"visibility":"default","docs":"The `Display` output of the naive date and time `dt` is the same as\n[`dt.format(\"%Y-%m-%d %H:%M:%S%.f\")`](crate::format::strftime).\n\nIt should be noted that, for leap seconds not on the minute boundary,\nit may print a representation not distinguishable from non-leap seconds.\nThis doesn't matter in practice, since such leap seconds never happened.\n(By the time of the first leap second on 1972-06-30,\nevery time zone offset around the world has standardized to the 5-minute alignment.)\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet dt = NaiveDate::from_ymd_opt(2016, 11, 15).unwrap().and_hms_opt(7, 39, 24).unwrap();\nassert_eq!(format!(\"{}\", dt), \"2016-11-15 07:39:24\");\n```\n\nLeap seconds may also be used.\n\n```\n# use chrono::NaiveDate;\nlet dt = NaiveDate::from_ymd_opt(2015, 6, 30).unwrap().and_hms_milli_opt(23, 59, 59, 1_500).unwrap();\nassert_eq!(format!(\"{}\", dt), \"2015-06-30 23:59:60.500\");\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1340:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3058:246-0:2746:2164":{"id":"a:2:3058:246-0:2746:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3211":{"id":"0:3211","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,24],"end":[31,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1563-0:2637:2147":{"id":"0:1563-0:2637:2147","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[513,22],"end":[513,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"naive::NaiveDate","name":"NaiveDate","id":"0:2637:2147","glob":false}}},"2:8108:9013":{"id":"2:8108:9013","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"0:1930":{"id":"0:1930","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[53,0],"end":[90,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1932:2697","0:1933:7353","0:1934:7355","0:1935:938"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1163:60":{"id":"0:1163:60","crate_id":0,"name":"default","span":{"filename":"src/naive/date.rs","begin":[2286,4],"end":[2288,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:120-0:3064:2146":{"id":"0:120-0:3064:2146","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[485,33],"end":[485,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Utc","name":"Utc","id":"0:3064:2146","glob":false}}},"0:2550:458":{"id":"0:2550:458","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[325,9],"end":[325,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:962":{"id":"0:962","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[491,0],"end":[501,1]},"visibility":"default","docs":"Parsing a `str` into a `Weekday` uses the format [`%A`](./format/strftime/index.html).\n\n# Example\n\n```\nuse chrono::Weekday;\n\nassert_eq!(\"Sunday\".parse::<Weekday>(), Ok(Weekday::Sun));\nassert!(\"any day\".parse::<Weekday>().is_err());\n```\n\nThe parsing is case-insensitive.\n\n```\n# use chrono::Weekday;\nassert_eq!(\"mON\".parse::<Weekday>(), Ok(Weekday::Mon));\n```\n\nOnly the shortest form (e.g. `sun`) and the longest form (e.g. `sunday`) is accepted.\n\n```\n# use chrono::Weekday;\nassert!(\"thurs\".parse::<Weekday>().is_err());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12717:3263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:963:137","0:964:3264"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2621:458":{"id":"0:2621:458","crate_id":0,"name":"clone","span":{"filename":"src/naive/date.rs","begin":[132,9],"end":[132,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3229":{"id":"0:3229","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,22],"end":[227,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3230:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41604:9276-0:2178:2653":{"id":"a:2:41604:9276-0:2178:2653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2062:8539":{"id":"0:2062:8539","crate_id":0,"name":"number_from_month","span":{"filename":"src/month.rs","begin":[124,4],"end":[139,5]},"visibility":"public","docs":"Returns a month-of-year number starting from January = 1.\n\n`m`:                     | `January` | `February` | `...` | `December`\n-------------------------| --------- | ---------- | --- | -----\n`m.number_from_month()`: | 1         | 2          | `...` | 12","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3671-0:2617:2163":{"id":"b:2:3671-0:2617:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2560-0:2654:5260":{"id":"b:2:2560-0:2654:5260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1251:2969":{"id":"0:1251:2969","crate_id":0,"name":"and_local_timezone","span":{"filename":"src/naive/datetime/mod.rs","begin":[1078,4],"end":[1080,5]},"visibility":"public","docs":"Converts the `NaiveDateTime` into the timezone-aware `DateTime<Tz>`\nwith the provided timezone, if possible.\n\nThis can fail in cases where the local time represented by the `NaiveDateTime`\nis not a valid local timestamp in the target timezone due to an offset transition\nfor example if the target timezone had a change from +00:00 to +01:00\noccuring at 2015-09-05 22:59:59, then a local time of 2015-09-05 23:56:04\ncould never occur. Similarly, if the offset transitioned in the opposite direction\nthen there would be two local times of 2015-09-05 23:56:04, one at +00:00 and one\nat +01:00.\n\n# Example\n\n```\nuse chrono::{NaiveDate, FixedOffset};\nlet hour = 3600;\nlet tz = FixedOffset::east_opt(5 * hour).unwrap();\nlet dt = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap().and_hms_opt(23, 56, 4).unwrap().and_local_timezone(tz).unwrap();\nassert_eq!(dt.timezone(), tz);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tz",{"generic":"Tz"}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:2763:2149":{"id":"b:2:2850-0:2763:2149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31969:237-0:3057:2135":{"id":"a:2:31969:237-0:3057:2135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2467:726":{"id":"0:2467:726","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[280,9],"end":[280,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:2360:3420":{"id":"b:2:2839-0:2360:3420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1493":{"id":"0:1493","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[862,0],"end":[1081,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["num_seconds_from_midnight","hour12"],"trait":{"name":"Timelike","id":"0:2106:2143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1494:2702","0:1495:3177","0:1496:3178","0:1497:3179","0:1498:3183","0:1499:3187","0:1500:3193","0:1501:3200","0:1502:6253"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2835-0:2372:2842":{"id":"b:2:2835-0:2372:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2381:3439":{"id":"0:2381:3439","crate_id":0,"name":"LowerAmPm","span":{"filename":"src/format/mod.rs","begin":[192,4],"end":[192,13]},"visibility":"default","docs":"AM/PM.\n\nPrints in lower case, reads in any case.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2002:8281":{"id":"0:2002:8281","crate_id":0,"name":"round_subsecs","span":{"filename":"src/round.rs","begin":[49,4],"end":[62,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["digits",{"primitive":"u16"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2190:3690":{"id":"0:2190:3690","crate_id":0,"name":"Millis","span":{"filename":"src/format/formatting.rs","begin":[516,4],"end":[516,10]},"visibility":"default","docs":"Use fixed 3 subsecond digits. This corresponds to [Fixed::Nanosecond3].","links":{"Fixed::Nanosecond3":"0:2387:3446"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:41:2414":{"id":"0:41:2414","crate_id":0,"name":"try_minutes","span":{"filename":"src/time_delta.rs","begin":[195,4],"end":[197,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of minutes.\n\nEquivalent to `TimeDelta::seconds(minutes * 60)` with overflow checks.\n\n# Errors\n\nReturns `None` when the `TimeDelta` would be out of bounds.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["minutes",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1313:199":{"id":"0:1313:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[1858,4],"end":[1858,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[500,0],"end":[518,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Div","id":"2:32632:2334","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:199","0:85:619"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:98:726":{"id":"0:98:726","crate_id":0,"name":"fmt","span":{"filename":"src/time_delta.rs","begin":[579,4],"end":[581,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:380:60":{"id":"0:380:60","crate_id":0,"name":"default","span":{"filename":"src/datetime/mod.rs","begin":[682,4],"end":[684,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2143:1151":{"id":"0:2143:1151","crate_id":0,"name":"partial_cmp","span":{"filename":"src/time_delta.rs","begin":[52,46],"end":[52,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2601":{"id":"0:2601","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[395,16],"end":[395,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2602:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31969:237-0:2505:3498":{"id":"a:2:31969:237-0:2505:3498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2603":{"id":"0:2603","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[395,23],"end":[395,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1058:2731":{"id":"0:1058:2731","crate_id":0,"name":"and_hms_nano","span":{"filename":"src/naive/date.rs","begin":[996,4],"end":[998,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.\n\nThe nanosecond part is allowed to exceed 1,000,000,000 in order to represent a [leap second](\n./struct.NaiveTime.html#leap-second-handling), but only when `sec == 59`.\n\n# Panics\n\nPanics on invalid hour, minute, second and/or nanosecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `and_hms_nano_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `and_hms_nano_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:352:2955":{"id":"0:352:2955","crate_id":0,"name":"fixed_offset","span":{"filename":"src/datetime/mod.rs","begin":[354,4],"end":[356,5]},"visibility":"public","docs":"Fix the offset from UTC to its current value, dropping the associated timezone information.\nThis it useful for converting a generic `DateTime<Tz: Timezone>` to `DateTime<FixedOffset>`.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3165":{"id":"0:3165","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[230,16],"end":[230,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3166:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2563-0:2213:2843":{"id":"b:2:2563-0:2213:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2061:2746":{"id":"0:2061:2746","crate_id":0,"name":"pred","span":{"filename":"src/month.rs","begin":[100,4],"end":[115,5]},"visibility":"public","docs":"The previous month.\n\n`m`:        | `January`  | `February` | `...` | `December`\n----------- | ---------  | ---------- | --- | ---------\n`m.pred()`: | `December` | `January`  | `...` | `November`","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3219":{"id":"0:3219","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,50],"end":[31,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","ge","gt","le"],"trait":{"name":"PartialOrd","id":"2:2652:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3220:1151"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2116:6253":{"id":"0:2116:6253","crate_id":0,"name":"num_seconds_from_midnight","span":{"filename":"src/traits.rs","begin":[325,4],"end":[327,5]},"visibility":"default","docs":"Returns the number of non-leap seconds past the last midnight.\n\nEvery value in 00:00:00-23:59:59 maps to an integer in 0-86399.\n\nThis method is not intended to provide the real number of seconds since midnight on a given\nday. It does not take things like DST transitions into account.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2106:2143":{"id":"0:2106:2143","crate_id":0,"name":"Timelike","span":{"filename":"src/traits.rs","begin":[267,0],"end":[328,1]},"visibility":"public","docs":"The common set of methods for time component.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:2107:2702","0:2108:3654","0:2109:3177","0:2110:3178","0:2111:3179","0:2112:3183","0:2113:3187","0:2114:3193","0:2115:3200","0:2116:6253"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:1283","0:1493","0:439"]}}},"0:1110":{"id":"0:1110","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[1890,0],"end":[1897,1]},"visibility":"default","docs":"Add `TimeDelta` to `NaiveDate`.\n\nThis discards the fractional days in `TimeDelta`, rounding to the closest integral number of\ndays towards `TimeDelta::zero()`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDate::checked_add_signed`] to get an `Option` instead.\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveDate};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nassert_eq!(from_ymd(2014, 1, 1) + TimeDelta::zero(),             from_ymd(2014, 1, 1));\nassert_eq!(from_ymd(2014, 1, 1) + TimeDelta::seconds(86399),     from_ymd(2014, 1, 1));\nassert_eq!(from_ymd(2014, 1, 1) + TimeDelta::seconds(-86399),    from_ymd(2014, 1, 1));\nassert_eq!(from_ymd(2014, 1, 1) + TimeDelta::days(1),            from_ymd(2014, 1, 2));\nassert_eq!(from_ymd(2014, 1, 1) + TimeDelta::days(-1),           from_ymd(2013, 12, 31));\nassert_eq!(from_ymd(2014, 1, 1) + TimeDelta::days(364),          from_ymd(2014, 12, 31));\nassert_eq!(from_ymd(2014, 1, 1) + TimeDelta::days(365*4 + 1),    from_ymd(2018, 1, 1));\nassert_eq!(from_ymd(2014, 1, 1) + TimeDelta::days(365*400 + 97), from_ymd(2414, 1, 1));\n```\n\n[`NaiveDate::checked_add_signed`]: crate::NaiveDate::checked_add_signed","links":{"crate::NaiveDate::checked_add_signed":"0:1068:2760"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1111:199","0:1112:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2555:667":{"id":"0:2555:667","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[325,16],"end":[325,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:2304:3372":{"id":"b:5:725-0:2304:3372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1098:2800":{"id":"0:1098:2800","crate_id":0,"name":"ordinal","span":{"filename":"src/naive/date.rs","begin":[1641,4],"end":[1643,5]},"visibility":"default","docs":"Returns the day of year starting from 1.\n\nThe return value ranges from 1 to 366. (The last day of year differs by years.)\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().ordinal(), 251);\nassert_eq!(NaiveDate::from_ymd_opt(-308, 3, 14).unwrap().ordinal(), 74);\n```\n\nCombined with [`NaiveDate::pred_opt`](#method.pred_opt),\none can determine the number of days in a particular year.\n(Note that this panics when `year` is out of range.)\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nfn ndays_in_year(year: i32) -> u32 {\n    // the first day of the next year...\n    let d = NaiveDate::from_ymd_opt(year + 1, 1, 1).unwrap();\n\n    // ...is preceded by the last day of the original year\n    d.pred_opt().unwrap().ordinal()\n}\n\nassert_eq!(ndays_in_year(2015), 365);\nassert_eq!(ndays_in_year(2016), 366);\nassert_eq!(ndays_in_year(2017), 365);\nassert_eq!(ndays_in_year(2000), 366);\nassert_eq!(ndays_in_year(2100), 365);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:417:2172":{"id":"0:417:2172","crate_id":0,"name":"month","span":{"filename":"src/datetime/mod.rs","begin":[969,4],"end":[971,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:2654:5260":{"id":"b:2:2835-0:2654:5260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2839-0:3243:2173":{"id":"b:2:2839-0:3243:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32026:9229-0:2426:3477":{"id":"a:2:32026:9229-0:2426:3477","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32026:9229-0:3169:2142":{"id":"a:2:32026:9229-0:3169:2142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:31969:237-0:3223:2174":{"id":"a:2:31969:237-0:3223:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1071:2775":{"id":"0:1071:2775","crate_id":0,"name":"years_since","span":{"filename":"src/naive/date.rs","begin":[1233,4],"end":[1245,5]},"visibility":"public","docs":"Returns the number of whole years from the given `base` until `self`.\n\n# Errors\n\nReturns `None` if `base < self`.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["base",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:386:755":{"id":"0:386:755","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[715,4],"end":[717,5]},"visibility":"default","docs":"Convert this `DateTime<FixedOffset>` instance into a `DateTime<Utc>` instance.\n\nConversion is performed via [`DateTime::with_timezone`], accounting for the timezone\ndifference.","links":{"`DateTime::with_timezone`":"0:350:2754"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[458,0],"end":[464,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:199","0:72:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:524:199":{"id":"0:524:199","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1487,4],"end":[1487,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:534":{"id":"0:534","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1531,0],"end":[1536,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:536:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2609":{"id":"0:2609","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[395,44],"end":[395,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2610:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1281:2809":{"id":"0:1281:2809","crate_id":0,"name":"with_ordinal0","span":{"filename":"src/naive/datetime/mod.rs","begin":[1448,4],"end":[1450,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.\n\nSee also the [`NaiveDate::with_ordinal0`] method.\n\n# Errors\n\nReturns `None` if the resulting date does not exist, or if the value for `ordinal0` is\ninvalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Datelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.with_ordinal0(59),\n           Some(NaiveDate::from_ymd_opt(2015, 3, 1).unwrap().and_hms_opt(12, 34, 56).unwrap()));\nassert_eq!(dt.with_ordinal0(365), None); // 2015 had only 365 days\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2016, 9, 8).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.with_ordinal0(59),\n           Some(NaiveDate::from_ymd_opt(2016, 2, 29).unwrap().and_hms_opt(12, 34, 56).unwrap()));\nassert_eq!(dt.with_ordinal0(365),\n           Some(NaiveDate::from_ymd_opt(2016, 12, 31).unwrap().and_hms_opt(12, 34, 56).unwrap()));\n```","links":{"`NaiveDate::with_ordinal0`":"0:1109:2809"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:2372:2842":{"id":"b:2:2839-0:2372:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2333:3402":{"id":"0:2333:3402","crate_id":0,"name":"Hour","span":{"filename":"src/format/mod.rs","begin":[133,4],"end":[133,8]},"visibility":"default","docs":"Hour number in the 24-hour clocks (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1142":{"id":"0:1142","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2123,0],"end":[2130,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"2:8139:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1143:5879"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41605:9275-0:2178:2653":{"id":"a:2:41605:9275-0:2178:2653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:191:2685":{"id":"0:191:2685","crate_id":0,"name":"MAX_UTC","span":{"filename":"src/date.rs","begin":[318,4],"end":[318,78]},"visibility":"public","docs":"The maximum possible `Date`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"default":"_"}}},"0:970-0:949:2161":{"id":"0:970-0:949:2161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[509,29],"end":[509,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"format::ParseResult","name":"ParseResult","id":"0:949:2161","glob":false}}},"0:1118":{"id":"0:1118","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[1968,0],"end":[1974,1]},"visibility":"default","docs":"Subtract `Months` from `NaiveDate`.\n\nThe result will be clamped to valid days in the resulting month, see `checked_sub_months` for\ndetails.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `NaiveDate::checked_sub_months` to get an `Option` instead.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Months};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nassert_eq!(from_ymd(2014, 1, 1) - Months::new(11), from_ymd(2013, 2, 1));\nassert_eq!(from_ymd(2014, 1, 1) - Months::new(12), from_ymd(2013, 1, 1));\nassert_eq!(from_ymd(2014, 1, 1) - Months::new(13), from_ymd(2012, 12, 1));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1119:199","0:1120:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1470:2735":{"id":"0:1470:2735","crate_id":0,"name":"from_hms_nano_opt","span":{"filename":"src/naive/time/mod.rs","begin":[420,4],"end":[429,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from hour, minute, second and nanosecond.\n\nThe nanosecond part is allowed to exceed 1,000,000,000 in order to represent a\n[leap second](#leap-second-handling), but only when `sec == 59`.\n\n# Errors\n\nReturns `None` on invalid hour, minute, second and/or nanosecond.\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nlet from_hmsn_opt = NaiveTime::from_hms_nano_opt;\n\nassert!(from_hmsn_opt(0, 0, 0, 0).is_some());\nassert!(from_hmsn_opt(23, 59, 59, 999_999_999).is_some());\nassert!(from_hmsn_opt(23, 59, 59, 1_999_999_999).is_some()); // a leap second after 23:59:59\nassert!(from_hmsn_opt(24, 0, 0, 0).is_none());\nassert!(from_hmsn_opt(23, 60, 0, 0).is_none());\nassert!(from_hmsn_opt(23, 59, 60, 0).is_none());\nassert!(from_hmsn_opt(23, 59, 59, 2_000_000_000).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:3252:2209":{"id":"a:2:3058:246-0:3252:2209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2413:1767":{"id":"0:2413:1767","crate_id":0,"name":"0","span":{"filename":"src/format/mod.rs","begin":[251,13],"end":[251,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:213:2170":{"id":"0:213:2170","crate_id":0,"name":"weekday","span":{"filename":"src/date.rs","begin":[422,4],"end":[424,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3671-0:2566:2160":{"id":"b:2:3671-0:2566:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41604:9276-0:2617:2163":{"id":"a:2:41604:9276-0:2617:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2560-0:3160:2171":{"id":"b:2:2560-0:3160:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2634:1151":{"id":"0:2634:1151","crate_id":0,"name":"partial_cmp","span":{"filename":"src/naive/date.rs","begin":[132,50],"end":[132,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3108:2169":{"id":"0:3108:2169","crate_id":0,"name":"RoundingError","span":{"filename":"src/round.rs","begin":[231,0],"end":[259,1]},"visibility":"public","docs":"An error from rounding by `TimeDelta`\n\nSee: [`DurationRound`]","links":{"`DurationRound`":"0:2005:2168"},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:3109:8318","0:3111:8311","0:3113:8313"],"impls":["a:2:41605:9275-0:3108:2169","a:2:3058:246-0:3108:2169","a:2:31969:237-0:3108:2169","a:2:41604:9276-0:3108:2169","a:2:32026:9229-0:3108:2169","b:2:2563-0:3108:2169","b:2:3671-0:3108:2169","b:2:2835-0:3108:2169","b:2:2839-0:3108:2169","b:2:2850-0:3108:2169","b:2:2560-0:3108:2169","b:2:2845-0:3108:2169","b:5:725-0:3108:2169","b:5:5869-0:3108:2169","0:3119","0:2024","0:2022","0:3124","0:3117","0:3122","0:3120","0:3115"]}}},"a:2:3058:246-0:2566:2160":{"id":"a:2:3058:246-0:2566:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2003:8286":{"id":"0:2003:8286","crate_id":0,"name":"trunc_subsecs","span":{"filename":"src/round.rs","begin":[64,4],"end":[72,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["digits",{"primitive":"u16"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2665":{"id":"0:2665","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2099,35],"end":[2099,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2666:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:108-0:3057:2135":{"id":"0:108-0:3057:2135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[479,4],"end":[479,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"import":{"source":"crate::Local","name":"Local","id":"0:3057:2135","glob":false}}},"0:1036:5436":{"id":"0:1036:5436","crate_id":0,"name":"from_num_days_from_ce","span":{"filename":"src/naive/date.rs","begin":[450,4],"end":[452,5]},"visibility":"public","docs":"Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\nJanuary 1, 1 being day 1.\n\n# Panics\n\nPanics if the date is out of range.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"use `from_num_days_from_ce_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_num_days_from_ce_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["days",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:3243:2173":{"id":"a:2:32026:9229-0:3243:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2563-0:2763:2149":{"id":"b:2:2563-0:2763:2149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1982-0:1950:2151":{"id":"0:1982-0:1950:2151","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[522,38],"end":[522,46]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"offset::TimeZone","name":"TimeZone","id":"0:1950:2151","glob":false}}},"b:2:2850-0:2505:3498":{"id":"b:2:2850-0:2505:3498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1257":{"id":"0:1257","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1107,0],"end":[1121,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1258:755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41605:9275-0:2171:2139":{"id":"a:2:41605:9275-0:2171:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1260:2796":{"id":"0:1260:2796","crate_id":0,"name":"year","span":{"filename":"src/naive/datetime/mod.rs","begin":[1137,4],"end":[1139,5]},"visibility":"default","docs":"Returns the year number in the [calendar date](./struct.NaiveDate.html#calendar-date).\n\nSee also the [`NaiveDate::year`](./struct.NaiveDate.html#method.year) method.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Datelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.year(), 2015);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13169:4209":{"id":"2:13169:4209","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:8930"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:2171:2139":{"id":"b:2:2835-0:2171:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1055:2715":{"id":"0:1055:2715","crate_id":0,"name":"and_hms_milli_opt","span":{"filename":"src/naive/date.rs","begin":[910,4],"end":[919,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.\n\nThe millisecond part is allowed to exceed 1,000,000,000 in order to represent a [leap second](\n./struct.NaiveTime.html#leap-second-handling), but only when `sec == 59`.\n\n# Errors\n\nReturns `None` on invalid hour, minute, second and/or millisecond.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet d = NaiveDate::from_ymd_opt(2015, 6, 3).unwrap();\nassert!(d.and_hms_milli_opt(12, 34, 56,   789).is_some());\nassert!(d.and_hms_milli_opt(12, 34, 59, 1_789).is_some()); // leap second\nassert!(d.and_hms_milli_opt(12, 34, 59, 2_789).is_none());\nassert!(d.and_hms_milli_opt(12, 34, 60,   789).is_none());\nassert!(d.and_hms_milli_opt(12, 60, 56,   789).is_none());\nassert!(d.and_hms_milli_opt(24, 34, 56,   789).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["milli",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[532,0],"end":[567,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:96:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:221:2806":{"id":"0:221:2806","crate_id":0,"name":"with_day","span":{"filename":"src/date.rs","begin":[446,4],"end":[448,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:368:3023":{"id":"0:368:3023","crate_id":0,"name":"to_rfc3339_opts","span":{"filename":"src/datetime/mod.rs","begin":[584,4],"end":[589,5]},"visibility":"public","docs":"Return an RFC 3339 and ISO 8601 date and time string with subseconds\nformatted as per `SecondsFormat`.\n\nIf `use_z` is true and the timezone is UTC (offset 0), uses `Z` as\nper [`Fixed::TimezoneOffsetColonZ`]. If `use_z` is false, uses\n[`Fixed::TimezoneOffsetColon`]\n\n# Examples\n\n```rust\n# use chrono::{FixedOffset, SecondsFormat, TimeZone, Utc, NaiveDate};\nlet dt = NaiveDate::from_ymd_opt(2018, 1, 26).unwrap().and_hms_micro_opt(18, 30, 9, 453_829).unwrap().and_local_timezone(Utc).unwrap();\nassert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, false),\n           \"2018-01-26T18:30:09.453+00:00\");\nassert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, true),\n           \"2018-01-26T18:30:09.453Z\");\nassert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),\n           \"2018-01-26T18:30:09Z\");\n\nlet pst = FixedOffset::east_opt(8 * 60 * 60).unwrap();\nlet dt = pst.from_local_datetime(&NaiveDate::from_ymd_opt(2018, 1, 26).unwrap().and_hms_micro_opt(10, 30, 9, 453_829).unwrap()).unwrap();\nassert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),\n           \"2018-01-26T10:30:09+08:00\");\n```","links":{"`Fixed::TimezoneOffsetColonZ`":"0:2401:3468","`Fixed::TimezoneOffsetColon`":"0:2395:3458"},"attrs":["#[cfg(feature = \"alloc\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["secform",{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["use_z",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:376:60":{"id":"0:376:60","crate_id":0,"name":"default","span":{"filename":"src/datetime/mod.rs","begin":[669,4],"end":[671,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2187:2140":{"id":"0:2187:2140","crate_id":0,"name":"SecondsFormat","span":{"filename":"src/format/formatting.rs","begin":[511,0],"end":[531,1]},"visibility":"public","docs":"Specific formatting options for seconds. This may be extended in the\nfuture, so exhaustive matching in external code is not recommended.\n\nSee the `TimeZone::to_rfc3339_opts` function for usage.","links":{},"attrs":["#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:2188:3688","0:2190:3690","0:2192:3692","0:2194:3694","0:2196:3004"],"impls":["a:2:41605:9275-0:2187:2140","a:2:3058:246-0:2187:2140","a:2:31969:237-0:2187:2140","a:2:41604:9276-0:2187:2140","a:2:32026:9229-0:2187:2140","b:2:2563-0:2187:2140","b:2:3671-0:2187:2140","b:2:2835-0:2187:2140","b:2:2839-0:2187:2140","b:2:2850-0:2187:2140","b:2:2560-0:2187:2140","b:2:2845-0:2187:2140","b:5:725-0:2187:2140","0:2208","0:2205","0:2200","0:2203","0:2202","0:2207","0:2210"]}}},"0:2251:2654":{"id":"0:2251:2654","crate_id":0,"name":"StrftimeItems","span":{"filename":"src/format/strftime.rs","begin":[189,0],"end":[199,1]},"visibility":"public","docs":"Parsing iterator for `strftime`-like format strings.\n\nSee the [`format::strftime` module](crate::format::strftime) for supported formatting\nspecifiers.\n\n`StrftimeItems` is used in combination with more low-level methods such as [`format::parse()`]\nor [`format_with_items`].\n\nIf formatting or parsing date and time values is not performance-critical, the methods\n[`parse_from_str`] and [`format`] on types such as [`DateTime`](crate::DateTime) are easier to\nuse.\n\n[`format`]: crate::DateTime::format\n[`format_with_items`]: crate::DateTime::format\n[`parse_from_str`]: crate::DateTime::parse_from_str\n[`DateTime`]: crate::DateTime\n[`format::parse()`]: crate::format::parse()","links":{"crate::DateTime::parse_from_str":"0:402:3132","crate::DateTime::format":"0:412:739","crate::format::strftime":"0:866:3347","crate::format::parse()":"0:779:2839","crate::DateTime":"0:2171:2139"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:884","a:2:41605:9275-0:2251:2654","a:2:3058:246-0:2251:2654","a:2:31969:237-0:2251:2654","a:2:41604:9276-0:2251:2654","a:2:32026:9229-0:2251:2654","b:2:2563-0:2251:2654","b:2:8105-0:2251:2654","b:2:3671-0:2251:2654","b:2:2835-0:2251:2654","b:2:2839-0:2251:2654","b:2:2850-0:2251:2654","b:2:2560-0:2251:2654","b:2:2845-0:2251:2654","b:5:725-0:2251:2654","0:2255","0:2258","0:892"]}}},"b:2:2560-0:2426:3477":{"id":"b:2:2560-0:2426:3477","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1125:199":{"id":"0:1125:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/date.rs","begin":[1997,4],"end":[1997,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1343:3264":{"id":"0:1343:3264","crate_id":0,"name":"from_str","span":{"filename":"src/naive/datetime/mod.rs","begin":[2137,4],"end":[2162,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:2781:2145":{"id":"a:2:3058:246-0:2781:2145","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1569:1104":{"id":"0:1569:1104","crate_id":0,"name":"offset","span":{"filename":"src/offset/mod.rs","begin":[4,0],"end":[649,1]},"visibility":"public","docs":"The time zone, which calculates offsets from the local time to UTC.\n\nThere are four operations provided by the `TimeZone` trait:\n\n1. Converting the local `NaiveDateTime` to `DateTime<Tz>`\n2. Converting the UTC `NaiveDateTime` to `DateTime<Tz>`\n3. Converting `DateTime<Tz>` to the local `NaiveDateTime`\n4. Constructing `DateTime<Tz>` objects from various offsets\n\n1 is used for constructors. 2 is used for the `with_timezone` method of date and time types.\n3 is used for other methods, e.g. `year()` or `format()`, and provided by an associated type\nwhich implements `Offset` (which then passed to `TimeZone` for actual implementations).\nTechnically speaking `TimeZone` has a total knowledge about given timescale,\nbut `Offset` is used as a cache to avoid the repeated conversion\nand provides implementations for 1 and 3.\nAn `TimeZone` instance can be reconstructed from the corresponding `Offset` instance.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1621-0:2781:2145","0:1896-0:3057:2135","0:1929-0:3064:2146","0:3077:2166","0:1948:2150","0:1950:2151"],"is_stripped":false}}},"0:3173:3607":{"id":"0:3173:3607","crate_id":0,"name":"February","span":{"filename":"src/month.rs","begin":[45,4],"end":[45,16]},"visibility":"default","docs":"February","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"0:119-0:2781:2145":{"id":"0:119-0:2781:2145","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[485,20],"end":[485,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::FixedOffset","name":"FixedOffset","id":"0:2781:2145","glob":false}}},"0:2064":{"id":"0:2064","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[167,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2065:138","0:2066:1632"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41605:9275-0:3243:2173":{"id":"a:2:41605:9275-0:3243:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13140:35766":{"id":"2:13140:35766","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13128:41644":{"id":"2:13128:41644","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12757:8930","str::split":"2:13119:34330","prim@char":"1:12067:454","`DoubleEndedIterator`":"2:8139:131","str::rsplit_terminator":"2:13131:41645"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43413:8964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1275:2806":{"id":"0:1275:2806","crate_id":0,"name":"with_day","span":{"filename":"src/naive/datetime/mod.rs","begin":[1366,4],"end":[1368,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.\n\nSee also the [`NaiveDate::with_day`] method.\n\n# Errors\n\nReturns `None` if the resulting date does not exist, or if the value for `day` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Datelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.with_day(30), Some(NaiveDate::from_ymd_opt(2015, 9, 30).unwrap().and_hms_opt(12, 34, 56).unwrap()));\nassert_eq!(dt.with_day(31), None); // no September 31\n```","links":{"`NaiveDate::with_day`":"0:1105:2806"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1478:6369":{"id":"0:1478:6369","crate_id":0,"name":"overflowing_sub_signed","span":{"filename":"src/naive/time/mod.rs","begin":[641,4],"end":[644,5]},"visibility":"public","docs":"Subtracts given `TimeDelta` from the current time, and also returns the number of *seconds*\nin the integral number of days ignored from the subtraction.\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveTime};\n\nlet from_hms = |h, m, s| { NaiveTime::from_hms_opt(h, m, s).unwrap() };\n\nassert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(TimeDelta::hours(2)),\n           (from_hms(1, 4, 5), 0));\nassert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(TimeDelta::hours(17)),\n           (from_hms(10, 4, 5), 86_400));\nassert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(TimeDelta::hours(-22)),\n           (from_hms(1, 4, 5), -86_400));\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"tuple":[{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"primitive":"i64"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2635":{"id":"0:2635","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[132,62],"end":[132,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2646:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2636:465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:964:3264":{"id":"0:964:3264","crate_id":0,"name":"from_str","span":{"filename":"src/format/mod.rs","begin":[494,4],"end":[500,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:12717:3263","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3157":{"id":"0:3157","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[32,44],"end":[32,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3158:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1019:5285":{"id":"0:1019:5285","crate_id":0,"name":"first_day","span":{"filename":"src/naive/date.rs","begin":[63,4],"end":[71,5]},"visibility":"public","docs":"Returns a date representing the first day of the week.\n\n# Panics\n\nPanics if the first day of the week happens to fall just out of range of `NaiveDate`\n(more than ca. 262,000 years away from common era).\n\n# Examples\n\n```\nuse chrono::{NaiveDate, Weekday};\n\nlet date = NaiveDate::from_ymd_opt(2022, 4, 18).unwrap();\nlet week = date.week(Weekday::Mon);\nassert!(week.first_day() <= date);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1039:5462":{"id":"0:1039:5462","crate_id":0,"name":"from_weekday_of_month_opt","span":{"filename":"src/naive/date.rs","begin":[528,4],"end":[541,5]},"visibility":"public","docs":"Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\nsince the beginning of the given month. For instance, if you want the 2nd Friday of March\n2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.\n\n`n` is 1-indexed.\n\n# Errors\n\nReturns `None` if:\n- The specified day does not exist in that month (for example the 5th Monday of Apr. 2023).\n- The value for `month` or `n` is invalid.\n- `year` is out of range for `NaiveDate`.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Weekday};\nassert_eq!(NaiveDate::from_weekday_of_month_opt(2017, 3, Weekday::Fri, 2),\n           NaiveDate::from_ymd_opt(2017, 3, 10))\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"i32"}],["month",{"primitive":"u32"}],["weekday",{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["n",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2681:793":{"id":"0:2681:793","crate_id":0,"name":"hash","span":{"filename":"src/naive/date.rs","begin":[2135,29],"end":[2135,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2687:1151":{"id":"0:2687:1151","crate_id":0,"name":"partial_cmp","span":{"filename":"src/naive/date.rs","begin":[2135,46],"end":[2135,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:2178:2653":{"id":"b:2:2839-0:2178:2653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1249:739":{"id":"0:1249:739","crate_id":0,"name":"format","span":{"filename":"src/naive/datetime/mod.rs","begin":[1053,4],"end":[1055,5]},"visibility":"public","docs":"Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](crate::format::strftime)\non the supported escape sequences.\n\nThis returns a `DelayedFormat`,\nwhich gets converted to a string only when actual formatting happens.\nYou may use the `to_string` method to get a `String`,\nor just feed it into `print!` and other formatting macros.\n(In this way it avoids the redundant memory allocation.)\n\nA wrong format string does *not* issue an error immediately.\nRather, converting or formatting the `DelayedFormat` fails.\nYou are recommended to immediately use `DelayedFormat` for this reason.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet dt = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap().and_hms_opt(23, 56, 4).unwrap();\nassert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2015-09-05 23:56:04\");\nassert_eq!(dt.format(\"around %l %p on %b %-d\").to_string(), \"around 11 PM on Sep 5\");\n```\n\nThe resulting `DelayedFormat` can be formatted directly via the `Display` trait.\n\n```\n# use chrono::NaiveDate;\n# let dt = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap().and_hms_opt(23, 56, 4).unwrap();\nassert_eq!(format!(\"{}\", dt.format(\"%Y-%m-%d %H:%M:%S\")), \"2015-09-05 23:56:04\");\nassert_eq!(format!(\"{}\", dt.format(\"around %l %p on %b %-d\")), \"around 11 PM on Sep 5\");\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:227:2809":{"id":"0:227:2809","crate_id":0,"name":"with_ordinal0","span":{"filename":"src/date.rs","begin":[461,4],"end":[463,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2362":{"id":"0:2362","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[156,9],"end":[156,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2363:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1615":{"id":"0:1615","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[151,0],"end":[155,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Offset","id":"0:1948:2150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1616:2880"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2781:2145":{"id":"0:2781:2145","crate_id":0,"name":"FixedOffset","span":{"filename":"src/offset/fixed.rs","begin":[30,0],"end":[32,1]},"visibility":"public","docs":"The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.\n\nUsing the [`TimeZone`](./trait.TimeZone.html) methods\non a `FixedOffset` struct is the preferred way to construct\n`DateTime<FixedOffset>` instances. See the [`east_opt`](#method.east_opt) and\n[`west_opt`](#method.west_opt) methods for examples.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1598","a:2:41605:9275-0:2781:2145","a:2:3058:246-0:2781:2145","a:2:31969:237-0:2781:2145","a:2:41604:9276-0:2781:2145","a:2:32026:9229-0:2781:2145","b:2:2563-0:2781:2145","b:2:3671-0:2781:2145","b:2:2835-0:2781:2145","b:2:2839-0:2781:2145","b:2:2850-0:2781:2145","b:2:2560-0:2781:2145","b:2:2845-0:2781:2145","b:5:725-0:2781:2145","b:5:5869-0:2781:2145","0:1306","0:2791","0:1615","0:1617","0:1619","0:2792","0:1526","0:1605","0:2783","0:510","0:2788","0:1322","0:2784","0:1608","0:1513","0:488","0:2786"]}}},"0:3258:793":{"id":"0:3258:793","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[581,22],"end":[581,26]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2595:3568":{"id":"0:2595:3568","crate_id":0,"name":"BadFormat","span":{"filename":"src/format/mod.rs","begin":[423,4],"end":[423,13]},"visibility":"default","docs":"There was an error on the formatting string, or there were non-supported formating items.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1568-0:2612:2165":{"id":"0:1568-0:2612:2165","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[514,25],"end":[514,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"naive::NaiveWeek","name":"NaiveWeek","id":"0:2612:2165","glob":false}}},"0:362:2769":{"id":"0:362:2769","crate_id":0,"name":"naive_utc","span":{"filename":"src/datetime/mod.rs","begin":[478,4],"end":[480,5]},"visibility":"public","docs":"Returns a view to the naive UTC datetime.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1120:1569":{"id":"0:1120:1569","crate_id":0,"name":"sub","span":{"filename":"src/naive/date.rs","begin":[1971,4],"end":[1973,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["months",{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3109:2337","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:2673:5261":{"id":"b:2:2835-0:2673:5261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2157:458":{"id":"0:2157:458","crate_id":0,"name":"clone","span":{"filename":"src/time_delta.rs","begin":[575,16],"end":[575,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:478":{"id":"0:478","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1270,0],"end":[1279,1]},"visibility":"default","docs":"Add `std::time::Duration` to `DateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`DateTime<Tz>::checked_add_signed`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_add_signed`":"0:354:2760"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:480:199","0:481:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2839-0:2566:2160":{"id":"b:2:2839-0:2566:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1508":{"id":"0:1508","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1159,0],"end":[1171,1]},"visibility":"default","docs":"Add `std::time::Duration` to `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the addition ignores integral number of days.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1509:199","0:1510:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2560-0:3064:2146":{"id":"b:2:2560-0:3064:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:3108:2169":{"id":"b:5:725-0:3108:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2337:3406":{"id":"0:2337:3406","crate_id":0,"name":"Minute","span":{"filename":"src/format/mod.rs","begin":[137,4],"end":[137,10]},"visibility":"default","docs":"The number of minutes since the last whole hour (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:41605:9275-0:2372:2842":{"id":"a:2:41605:9275-0:2372:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5869-0:3108:2169":{"id":"b:5:5869-0:3108:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1227:2912":{"id":"0:1227:2912","crate_id":0,"name":"timestamp_millis","span":{"filename":"src/naive/datetime/mod.rs","begin":[464,4],"end":[467,5]},"visibility":"public","docs":"Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.\n\nNote that this does *not* account for the timezone!\nThe true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet dt = NaiveDate::from_ymd_opt(1970, 1, 1).unwrap().and_hms_milli_opt(0, 0, 1, 444).unwrap();\nassert_eq!(dt.timestamp_millis(), 1_444);\n\nlet dt = NaiveDate::from_ymd_opt(2001, 9, 9).unwrap().and_hms_milli_opt(1, 46, 40, 555).unwrap();\nassert_eq!(dt.timestamp_millis(), 1_000_000_000_555);\n\nlet dt = NaiveDate::from_ymd_opt(1969, 12, 31).unwrap().and_hms_milli_opt(23, 59, 59, 100).unwrap();\nassert_eq!(dt.timestamp_millis(), -900);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3250":{"id":"0:3250","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[245,27],"end":[245,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2653:458":{"id":"0:2653:458","crate_id":0,"name":"clone","span":{"filename":"src/naive/date.rs","begin":[190,53],"end":[190,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1523:1569":{"id":"0:1523:1569","crate_id":0,"name":"sub","span":{"filename":"src/naive/time/mod.rs","begin":[1273,4],"end":[1280,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41604:9276-0:2582:3548":{"id":"a:2:41604:9276-0:2582:3548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1056:2722":{"id":"0:1056:2722","crate_id":0,"name":"and_hms_micro","span":{"filename":"src/naive/date.rs","begin":[946,4],"end":[948,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.\n\nThe microsecond part is allowed to exceed 1,000,000,000 in order to represent a [leap second](\n./struct.NaiveTime.html#leap-second-handling), but only when `sec == 59`.\n\n# Panics\n\nPanics on invalid hour, minute, second and/or microsecond.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};\n\nlet d = NaiveDate::from_ymd_opt(2015, 6, 3).unwrap();\n\nlet dt: NaiveDateTime = d.and_hms_micro_opt(12, 34, 56, 789_012).unwrap();\nassert_eq!(dt.year(), 2015);\nassert_eq!(dt.weekday(), Weekday::Wed);\nassert_eq!(dt.second(), 56);\nassert_eq!(dt.nanosecond(), 789_012_000);\n```","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `and_hms_micro_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `and_hms_micro_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["micro",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13070:41638":{"id":"2:13070:41638","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2593:3566":{"id":"0:2593:3566","crate_id":0,"name":"TooLong","span":{"filename":"src/format/mod.rs","begin":[420,4],"end":[420,11]},"visibility":"default","docs":"All formatting items have been read but there is a remaining input.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1025:2153":{"id":"0:1025:2153","crate_id":0,"name":"MAX_DATE","span":{"filename":"src/naive/date.rs","begin":[207,0],"end":[207,47]},"visibility":"public","docs":"The maximum possible `NaiveDate` (December 31, 262143 CE).","links":{},"attrs":["#[deprecated(since = \"0.4.20\", note = \"Use NaiveDate::MAX instead\")]"],"deprecation":{"since":"0.4.20","note":"Use NaiveDate::MAX instead"},"inner":{"constant":{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"NaiveDate::MAX","value":null,"is_literal":false}}},"0:2585:3555":{"id":"0:2585:3555","crate_id":0,"name":"Impossible","span":{"filename":"src/format/mod.rs","begin":[404,4],"end":[404,14]},"visibility":"default","docs":"There is no possible date and time value with given set of fields.\n\nThis does not include the out-of-range conditions, which are trivially invalid.\nIt includes the case that there are one or more fields that are inconsistent to each other.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:8107:174":{"id":"2:8107:174","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"b:2:2835-0:3125:2144":{"id":"b:2:2835-0:3125:2144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3093":{"id":"0:3093","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[41,16],"end":[41,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3095:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:949:2161":{"id":"0:949:2161","crate_id":0,"name":"ParseResult","span":{"filename":"src/format/mod.rs","begin":[431,0],"end":[431,48]},"visibility":"public","docs":"Same as `Result<T, ParseError>`.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:1338:726":{"id":"0:1338:726","crate_id":0,"name":"fmt","span":{"filename":"src/naive/datetime/mod.rs","begin":[2078,4],"end":[2082,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2294":{"id":"0:2294","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[77,22],"end":[77,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3069":{"id":"0:3069","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[43,22],"end":[43,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1556-0:2692:2148":{"id":"0:1556-0:2692:2148","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[20,25],"end":[20,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"self::datetime::NaiveDateTime","name":"NaiveDateTime","id":"0:2692:2148","glob":false}}},"0:1886":{"id":"0:1886","crate_id":0,"name":null,"span":{"filename":"src/offset/local/mod.rs","begin":[120,0],"end":[159,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1887:2817","0:1888:1782"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13092:35756":{"id":"2:13092:35756","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13091:35755"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2395:3458":{"id":"0:2395:3458","crate_id":0,"name":"TimezoneOffsetColon","span":{"filename":"src/format/mod.rs","begin":[216,4],"end":[216,23]},"visibility":"default","docs":"Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).\n\nIn the parser, the colon can be omitted and/or surrounded with any amount of whitespace.\nThe offset is limited from `-24:00` to `+24:00`,\nwhich is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:77:296":{"id":"0:77:296","crate_id":0,"name":"add_assign","span":{"filename":"src/time_delta.rs","begin":[475,4],"end":[478,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[474,0],"end":[479,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33052:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:77:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5871:1609":{"id":"5:5871:1609","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:2171:2139":{"id":"b:2:2850-0:2171:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1334":{"id":"0:1334","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[2042,0],"end":[2048,1]},"visibility":"default","docs":"Subtract `Days` from `NaiveDateTime`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `checked_sub_days` to get an `Option` instead.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1335:199","0:1336:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13199:16510":{"id":"2:13199:16510","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4856:16510"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43671:8973","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:425:2803":{"id":"0:425:2803","crate_id":0,"name":"with_year","span":{"filename":"src/datetime/mod.rs","begin":[1013,4],"end":[1015,5]},"visibility":"default","docs":"Makes a new `DateTime` with the year number changed, while keeping the same month and day.\n\nSee also the [`NaiveDate::with_year`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist.\n- When the `NaiveDateTime` would be out of range.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveDate::with_year`":"0:1102:2803"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:966:137":{"id":"0:966:137","crate_id":0,"name":"Err","span":{"filename":"src/format/mod.rs","begin":[529,4],"end":[529,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:3256":{"id":"0:3256","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[581,16],"end":[581,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2095:2801":{"id":"0:2095:2801","crate_id":0,"name":"ordinal0","span":{"filename":"src/traits.rs","begin":[75,4],"end":[75,30]},"visibility":"default","docs":"Returns the day of year starting from 0.\n\nThe return value ranges from 0 to 365. (The last day of year differs by years.)","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2845-0:3252:2209":{"id":"b:2:2845-0:3252:2209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:247:793":{"id":"0:247:793","crate_id":0,"name":"hash","span":{"filename":"src/date.rs","begin":[491,4],"end":[493,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:2781:2145":{"id":"b:2:2560-0:2781:2145","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2486:3514":{"id":"0:2486:3514","crate_id":0,"name":"OptionalMinutes","span":{"filename":"src/format/mod.rs","begin":[306,4],"end":[306,19]},"visibility":"default","docs":"Format offset from UTC as hours, and optionally with minutes.\nAny seconds will be rounded to the nearest minute.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13115:9734":{"id":"2:13115:9734","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41482:191","prim@char":"1:12067:454","self::pattern":"2:12757:8930"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:8946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1297:199":{"id":"0:1297:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[1679,4],"end":[1679,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2560-0:2505:3498":{"id":"b:2:2560-0:2505:3498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2560-0:2692:2148":{"id":"b:2:2560-0:2692:2148","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32026:9229-0:2360:3420":{"id":"a:2:32026:9229-0:2360:3420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1126:1569":{"id":"0:1126:1569","crate_id":0,"name":"sub","span":{"filename":"src/naive/date.rs","begin":[1999,4],"end":[2001,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3109:2337","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:265:199":{"id":"0:265:199","crate_id":0,"name":"Output","span":{"filename":"src/date.rs","begin":[529,4],"end":[529,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:370:2685":{"id":"0:370:2685","crate_id":0,"name":"MAX_UTC","span":{"filename":"src/datetime/mod.rs","begin":[594,4],"end":[594,94]},"visibility":"public","docs":"The maximum possible `DateTime<Utc>`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"default":"_"}}},"0:102-0:2151:2130":{"id":"0:102-0:2151:2130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[466,0],"end":[466,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"time_delta::OutOfRangeError","name":"OutOfRangeError","id":"0:2151:2130","glob":false}}},"b:2:3671-0:2525:174":{"id":"b:2:3671-0:2525:174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:174:2740":{"id":"0:174:2740","crate_id":0,"name":"succ_opt","span":{"filename":"src/date.rs","begin":[215,4],"end":[217,5]},"visibility":"public","docs":"Makes a new `Date` for the next date.\n\nReturns `None` when `self` is the last representable date.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2367:793":{"id":"0:2367:793","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[156,20],"end":[156,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1269:2803":{"id":"0:1269:2803","crate_id":0,"name":"with_year","span":{"filename":"src/naive/datetime/mod.rs","begin":[1297,4],"end":[1299,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the year number changed, while keeping the same month and\nday.\n\nSee also the [`NaiveDate::with_year`] method.\n\n# Errors\n\nReturns `None` if the resulting date does not exist, or when the `NaiveDateTime` would be\nout of range.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Datelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.with_year(2016), Some(NaiveDate::from_ymd_opt(2016, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap()));\nassert_eq!(dt.with_year(-308), Some(NaiveDate::from_ymd_opt(-308, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap()));\n```","links":{"`NaiveDate::with_year`":"0:1102:2803"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41605:9275-0:3223:2174":{"id":"a:2:41605:9275-0:3223:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:952:726":{"id":"0:952:726","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[434,4],"end":[445,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:199":{"id":"0:81:199","crate_id":0,"name":"Output","span":{"filename":"src/time_delta.rs","begin":[489,4],"end":[489,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:350:2754":{"id":"0:350:2754","crate_id":0,"name":"with_timezone","span":{"filename":"src/datetime/mod.rs","begin":[346,4],"end":[348,5]},"visibility":"public","docs":"Changes the associated time zone.\nThe returned `DateTime` references the same instant of time from the perspective of the\nprovided time zone.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tz",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Tz2"}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Tz2","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:189:2775":{"id":"0:189:2775","crate_id":0,"name":"years_since","span":{"filename":"src/date.rs","begin":[311,4],"end":[313,5]},"visibility":"public","docs":"Returns the number of whole years from the given `base` until `self`.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["base",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2246":{"id":"0:2246","crate_id":0,"name":null,"span":{"filename":"src/format/parsed.rs","begin":[20,47],"end":[20,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2247:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2612:2165":{"id":"0:2612:2165","crate_id":0,"name":"NaiveWeek","span":{"filename":"src/naive/date.rs","begin":[39,0],"end":[42,1]},"visibility":"public","docs":"A week represented by a [`NaiveDate`] and a [`Weekday`] which is the first\nday of the week.","links":{"`NaiveDate`":"0:2637:2147","`Weekday`":"0:3125:2144"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1018","a:2:41605:9275-0:2612:2165","a:2:3058:246-0:2612:2165","a:2:31969:237-0:2612:2165","a:2:41604:9276-0:2612:2165","a:2:32026:9229-0:2612:2165","b:2:2563-0:2612:2165","b:2:3671-0:2612:2165","b:2:2835-0:2612:2165","b:2:2839-0:2612:2165","b:2:2850-0:2612:2165","b:2:2560-0:2612:2165","b:2:2845-0:2612:2165","0:2615"]}}},"0:1237:3237":{"id":"0:1237:3237","crate_id":0,"name":"checked_sub_offset","span":{"filename":"src/naive/datetime/mod.rs","begin":[767,4],"end":[775,5]},"visibility":"public","docs":"Subtracts given `FixedOffset` from the current datetime.\nReturns `None` if the result would be outside the valid range for [`NaiveDateTime`].\n\nThis method is similar to [`checked_sub_signed`](#method.checked_sub_signed), but preserves\nleap seconds.","links":{"`NaiveDateTime`":"0:2692:2148"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1320":{"id":"0:1320","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1916,0],"end":[1921,1]},"visibility":"default","docs":"Subtract-assign `std::time::Duration` from `NaiveDateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_sub_signed`] to get an `Option` instead.","links":{"`NaiveDateTime::checked_sub_signed`":"0:1240:2762"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33111:2338","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1321:1570"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1322":{"id":"0:1322","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1929,0],"end":[1936,1]},"visibility":"default","docs":"Subtract `FixedOffset` from `NaiveDateTime`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `checked_sub_offset` to get an `Option` instead.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1323:199","0:1324:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31969:237-0:2746:2164":{"id":"a:2:31969:237-0:2746:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3203:3618":{"id":"0:3203:3618","crate_id":0,"name":"December","span":{"filename":"src/month.rs","begin":[65,4],"end":[65,17]},"visibility":"default","docs":"December","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"11","value":"11"}}}},"0:2202":{"id":"0:2202","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[509,16],"end":[509,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:3064:2146":{"id":"b:5:725-0:3064:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:372:3041":{"id":"0:372:3041","crate_id":0,"name":"from_timestamp","span":{"filename":"src/datetime/mod.rs","begin":[629,4],"end":[634,5]},"visibility":"public","docs":"Makes a new [`DateTime<Utc>`] from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\nand the number of nanoseconds since the last whole non-leap second.\n\nThis is guaranteed to round-trip with regard to [`timestamp`](DateTime::timestamp) and\n[`timestamp_subsec_nanos`](DateTime::timestamp_subsec_nanos).\n\nIf you need to create a `DateTime` with a [`TimeZone`] different from [`Utc`], use\n[`TimeZone::timestamp_opt`] or [`DateTime::with_timezone`].\n\nThe nanosecond part can exceed 1,000,000,000 in order to represent a\n[leap second](NaiveTime#leap-second-handling), but only when `secs % 60 == 59`.\n(The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)\n\n# Errors\n\nReturns `None` on out-of-range number of seconds and/or\ninvalid nanosecond, otherwise returns `Some(DateTime {...})`.\n\n# Example\n\n```\nuse chrono::{DateTime, Utc};\n\nlet dt: DateTime<Utc> = DateTime::<Utc>::from_timestamp(1431648000, 0).expect(\"invalid timestamp\");\n\nassert_eq!(dt.to_string(), \"2015-05-15 00:00:00 UTC\");\nassert_eq!(DateTime::from_timestamp(dt.timestamp(), dt.timestamp_subsec_nanos()).unwrap(), dt);\n```","links":{"NaiveTime#leap-second-handling":"0:2763:2149","`Utc`":"0:3064:2146","`DateTime::with_timezone`":"0:350:2754","`TimeZone`":"0:1950:2151","DateTime::timestamp_subsec_nanos":"0:347:2949","`TimeZone::timestamp_opt`":"0:1961:3274","`DateTime<Utc>`":"0:2171:2139","DateTime::timestamp":"0:340:2905"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"i64"}],["nsecs",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2192:3692":{"id":"0:2192:3692","crate_id":0,"name":"Micros","span":{"filename":"src/format/formatting.rs","begin":[519,4],"end":[519,10]},"visibility":"default","docs":"Use fixed 6 subsecond digits. This corresponds to [Fixed::Nanosecond6].","links":{"Fixed::Nanosecond6":"0:2389:3448"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2238":{"id":"0:2238","crate_id":0,"name":null,"span":{"filename":"src/format/parsed.rs","begin":[20,16],"end":[20,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2239:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2845-0:2151:2130":{"id":"b:2:2845-0:2151:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1127":{"id":"0:1127","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2033,0],"end":[2040,1]},"visibility":"default","docs":"Subtract `TimeDelta` from `NaiveDate`.\n\nThis discards the fractional days in `TimeDelta`, rounding to the closest integral number of\ndays towards `TimeDelta::zero()`.\nIt is the same as the addition with a negated `TimeDelta`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDate::checked_sub_signed`] to get an `Option` instead.\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveDate};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nassert_eq!(from_ymd(2014, 1, 1) - TimeDelta::zero(),             from_ymd(2014, 1, 1));\nassert_eq!(from_ymd(2014, 1, 1) - TimeDelta::seconds(86399),     from_ymd(2014, 1, 1));\nassert_eq!(from_ymd(2014, 1, 1) - TimeDelta::seconds(-86399),    from_ymd(2014, 1, 1));\nassert_eq!(from_ymd(2014, 1, 1) - TimeDelta::days(1),            from_ymd(2013, 12, 31));\nassert_eq!(from_ymd(2014, 1, 1) - TimeDelta::days(-1),           from_ymd(2014, 1, 2));\nassert_eq!(from_ymd(2014, 1, 1) - TimeDelta::days(364),          from_ymd(2013, 1, 2));\nassert_eq!(from_ymd(2014, 1, 1) - TimeDelta::days(365*4 + 1),    from_ymd(2010, 1, 1));\nassert_eq!(from_ymd(2014, 1, 1) - TimeDelta::days(365*400 + 97), from_ymd(1614, 1, 1));\n```\n\n[`NaiveDate::checked_sub_signed`]: crate::NaiveDate::checked_sub_signed","links":{"crate::NaiveDate::checked_sub_signed":"0:1069:2762"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1128:199","0:1129:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:245":{"id":"0:245","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[490,0],"end":[494,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:247:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3217:793":{"id":"0:3217:793","crate_id":0,"name":"hash","span":{"filename":"src/month.rs","begin":[31,44],"end":[31,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2845-0:2746:2164":{"id":"b:2:2845-0:2746:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2835-0:3243:2173":{"id":"b:2:2835-0:3243:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:408:2782":{"id":"0:408:2782","crate_id":0,"name":"format_with_items","span":{"filename":"src/datetime/mod.rs","begin":[895,4],"end":[902,5]},"visibility":"public","docs":"Formats the combined date and time with the specified formatting items.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:2171:2139":{"id":"a:2:32026:9229-0:2171:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:947":{"id":"0:947","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[386,0],"end":[391,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:948:874"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2570:726":{"id":"0:2570:726","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[383,9],"end":[383,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:2251:2654":{"id":"b:2:2563-0:2251:2654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3126:3648":{"id":"0:3126:3648","crate_id":0,"name":"Mon","span":{"filename":"src/weekday.rs","begin":[44,4],"end":[44,11]},"visibility":"default","docs":"Monday.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"0:3222:465":{"id":"0:3222:465","crate_id":0,"name":"cmp","span":{"filename":"src/month.rs","begin":[31,62],"end":[31,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2139:667":{"id":"0:2139:667","crate_id":0,"name":"eq","span":{"filename":"src/time_delta.rs","begin":[52,31],"end":[52,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41604:9276-0:2566:2160":{"id":"a:2:41604:9276-0:2566:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:96:726":{"id":"0:96:726","crate_id":0,"name":"fmt","span":{"filename":"src/time_delta.rs","begin":[536,4],"end":[566,5]},"visibility":"default","docs":"Format a `TimeDelta` using the [ISO 8601] format\n\n[ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601#Durations","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:2525:174":{"id":"b:2:2563-0:2525:174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2604":{"id":"0:2604","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[395,23],"end":[395,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2605:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1328":{"id":"0:1328","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[2013,0],"end":[2020,1]},"visibility":"default","docs":"Subtracts another `NaiveDateTime` from the current date and time.\nThis does not overflow or underflow at all.\n\nAs a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),\nthe subtraction assumes that **there is no leap second ever**,\nexcept when any of the `NaiveDateTime`s themselves represents a leap second\nin which case the assumption becomes that\n**there are exactly one (or two) leap second(s) ever**.\n\nThe implementation is a wrapper around [`NaiveDateTime::signed_duration_since`].\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveDate};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nlet d = from_ymd(2016, 7, 8);\nassert_eq!(d.and_hms_opt(3, 5, 7).unwrap() - d.and_hms_opt(2, 4, 6).unwrap(), TimeDelta::seconds(3600 + 60 + 1));\n\n// July 8 is 190th day in the year 2016\nlet d0 = from_ymd(2016, 1, 1);\nassert_eq!(d.and_hms_milli_opt(0, 7, 6, 500).unwrap() - d0.and_hms_opt(0, 0, 0).unwrap(),\n           TimeDelta::seconds(189 * 86_400 + 7 * 60 + 6) + TimeDelta::milliseconds(500));\n```\n\nLeap seconds are handled, but the subtraction assumes that no other leap\nseconds happened.\n\n```\n# use chrono::{TimeDelta, NaiveDate};\n# let from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\nlet leap = from_ymd(2015, 6, 30).and_hms_milli_opt(23, 59, 59, 1_500).unwrap();\nassert_eq!(leap - from_ymd(2015, 6, 30).and_hms_opt(23, 0, 0).unwrap(),\n           TimeDelta::seconds(3600) + TimeDelta::milliseconds(500));\nassert_eq!(from_ymd(2015, 7, 1).and_hms_opt(1, 0, 0).unwrap() - leap,\n           TimeDelta::seconds(3600) - TimeDelta::milliseconds(500));\n```","links":{"`NaiveDateTime::signed_duration_since`":"0:1244:2767"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1329:199","0:1330:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:697:3975":{"id":"0:697:3975","crate_id":0,"name":"set_isoyear_mod_100","span":{"filename":"src/format/parsed.rs","begin":[175,4],"end":[183,5]},"visibility":"public","docs":"Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2471":{"id":"0:2471","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[280,29],"end":[280,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2746:2164":{"id":"0:2746:2164","crate_id":0,"name":"IsoWeek","span":{"filename":"src/naive/isoweek.rs","begin":[27,0],"end":[32,1]},"visibility":"public","docs":"ISO 8601 week.\n\nThis type, combined with [`Weekday`](../enum.Weekday.html),\nconstitutes the ISO 8601 [week date](./struct.NaiveDate.html#week-date).\nOne can retrieve this type from the existing [`Datelike`](../trait.Datelike.html) types\nvia the [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) method.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1425","a:2:41605:9275-0:2746:2164","a:2:3058:246-0:2746:2164","a:2:31969:237-0:2746:2164","a:2:41604:9276-0:2746:2164","a:2:32026:9229-0:2746:2164","b:2:2563-0:2746:2164","b:2:3671-0:2746:2164","b:2:2835-0:2746:2164","b:2:2839-0:2746:2164","b:2:2850-0:2746:2164","b:2:2560-0:2746:2164","b:2:2845-0:2746:2164","b:5:725-0:2746:2164","0:2748","0:2753","0:2760","0:2758","0:1429","0:2751","0:2757","0:2749","0:2755"]}}},"0:2178:2653":{"id":"0:2178:2653","crate_id":0,"name":"DelayedFormat","span":{"filename":"src/format/formatting.rs","begin":[36,0],"end":[50,1]},"visibility":"public","docs":"A *temporary* object which can be used as an argument to `format!` or others.\nThis is normally constructed via `format` methods of each date and time type.","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:597","a:2:41605:9275-0:2178:2653","a:2:3058:246-0:2178:2653","a:2:31969:237-0:2178:2653","a:2:41604:9276-0:2178:2653","a:2:32026:9229-0:2178:2653","b:2:2563-0:2178:2653","b:2:3671-0:2178:2653","b:2:2835-0:2178:2653","b:2:2839-0:2178:2653","b:2:2850-0:2178:2653","b:2:2560-0:2178:2653","b:2:2845-0:2178:2653","b:5:5869-0:2178:2653","0:2184","0:604"]}}},"0:2772:793":{"id":"0:2772:793","crate_id":0,"name":"hash","span":{"filename":"src/naive/time/mod.rs","begin":[204,24],"end":[204,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3671-0:2129:2131":{"id":"b:2:3671-0:2129:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:206:2796":{"id":"0:206:2796","crate_id":0,"name":"year","span":{"filename":"src/date.rs","begin":[394,4],"end":[396,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:2360:3420":{"id":"a:2:3058:246-0:2360:3420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2208":{"id":"0:2208","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[509,33],"end":[509,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2209:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2839-0:2505:3498":{"id":"b:2:2839-0:2505:3498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2640":{"id":"0:2640","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[190,9],"end":[190,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2641:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1141":{"id":"0:1141","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2121,0],"end":[2121,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:8192:5878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1321:1570":{"id":"0:1321:1570","crate_id":0,"name":"sub_assign","span":{"filename":"src/naive/datetime/mod.rs","begin":[1918,4],"end":[1920,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2760":{"id":"0:2760","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[19,54],"end":[19,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2761:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3124":{"id":"0:3124","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[230,38],"end":[230,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3122":{"id":"0:3122","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[230,34],"end":[230,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2033":{"id":"0:2033","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[59,0],"end":[160,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2034:2739","0:2035:2746","0:2036:3653","0:2037:8439","0:2038:4045","0:2039:3652"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2122":{"id":"0:2122","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[592,0],"end":[596,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2123:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2845-0:2461:3492":{"id":"b:2:2845-0:2461:3492","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41604:9276-0:3064:2146":{"id":"a:2:41604:9276-0:3064:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:31969:237-0:2360:3420":{"id":"a:2:31969:237-0:2360:3420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1999:8286":{"id":"0:1999:8286","crate_id":0,"name":"trunc_subsecs","span":{"filename":"src/round.rs","begin":[42,4],"end":[42,48]},"visibility":"default","docs":"Return a copy truncated to the specified number of subsecond\ndigits. With 9 or more digits, self is returned unmodified.\n\n# Example\n``` rust\n# use chrono::{SubsecRound, Timelike, Utc, NaiveDate};\nlet dt = NaiveDate::from_ymd_opt(2018, 1, 11).unwrap().and_hms_milli_opt(12, 0, 0, 154).unwrap().and_local_timezone(Utc).unwrap();\nassert_eq!(dt.trunc_subsecs(2).nanosecond(), 150_000_000);\nassert_eq!(dt.trunc_subsecs(1).nanosecond(), 100_000_000);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["digits",{"primitive":"u16"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:2009":{"id":"0:2009","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[143,0],"end":[153,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DurationRound","id":"0:2005:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:2011:137","0:2012:8304","0:2013:8309"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2563-0:3252:2209":{"id":"b:2:2563-0:3252:2209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41604:9276-0:2213:2843":{"id":"a:2:41604:9276-0:2213:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2101:2806":{"id":"0:2101:2806","crate_id":0,"name":"with_day","span":{"filename":"src/traits.rs","begin":[192,4],"end":[192,49]},"visibility":"default","docs":"Makes a new value with the day of month (starting from 1) changed.\n\n# Errors\n\nReturns `None` when:\n\n- The resulting date does not exist (for example `day(31)` in April).\n- In case of [`DateTime<Tz>`] if the resulting date and time fall within a timezone\n  transition such as from DST to standard time.\n- The value for `day` is out of range.\n\n[`DateTime<Tz>`]: crate::DateTime","links":{"crate::DateTime":"0:2171:2139"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:2696":{"id":"0:2696","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[76,9],"end":[76,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2697:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41605:9275-0:2304:3372":{"id":"a:2:41605:9275-0:2304:3372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3234:793":{"id":"0:3234:793","crate_id":0,"name":"hash","span":{"filename":"src/month.rs","begin":[227,33],"end":[227,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1537":{"id":"0:1537","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1474,0],"end":[1500,1]},"visibility":"default","docs":"Parsing a `str` into a `NaiveTime` uses the same format,\n[`%H:%M:%S%.f`](crate::format::strftime), as in `Debug` and `Display`.\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nlet t = NaiveTime::from_hms_opt(23, 56, 4).unwrap();\nassert_eq!(\"23:56:04\".parse::<NaiveTime>(), Ok(t));\n\nlet t = NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap();\nassert_eq!(\"23:56:4.012345678\".parse::<NaiveTime>(), Ok(t));\n\nlet t = NaiveTime::from_hms_nano_opt(23, 59, 59, 1_234_567_890).unwrap(); // leap second\nassert_eq!(\"23:59:60.23456789\".parse::<NaiveTime>(), Ok(t));\n\n// Seconds are optional\nlet t = NaiveTime::from_hms_opt(23, 56, 0).unwrap();\nassert_eq!(\"23:56\".parse::<NaiveTime>(), Ok(t));\n\nassert!(\"foo\".parse::<NaiveTime>().is_err());\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12717:3263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1538:137","0:1539:3264"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1613:7443":{"id":"0:1613:7443","crate_id":0,"name":"offset_from_utc_date","span":{"filename":"src/offset/fixed.rs","begin":[143,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3135:4040":{"id":"0:3135:4040","crate_id":0,"name":"Thu","span":{"filename":"src/weekday.rs","begin":[50,4],"end":[50,11]},"visibility":"default","docs":"Thursday.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"3","value":"3"}}}},"0:1512:296":{"id":"0:1512:296","crate_id":0,"name":"add_assign","span":{"filename":"src/naive/time/mod.rs","begin":[1179,4],"end":[1181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13088:41642":{"id":"2:13088:41642","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12073:1552","crate::ops::IndexMut":"2:3333:8861","str::slice_unchecked":"2:13087:41641"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1517:199":{"id":"0:1517:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/time/mod.rs","begin":[1246,4],"end":[1246,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2839-0:2781:2145":{"id":"b:2:2839-0:2781:2145","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2151:2130":{"id":"0:2151:2130","crate_id":0,"name":"OutOfRangeError","span":{"filename":"src/time_delta.rs","begin":[576,0],"end":[576,31]},"visibility":"public","docs":"Represents error when converting `TimeDelta` to/from a standard library\nimplementation\n\nThe `std::time::Duration` supports a range from zero to `u64::MAX`\n*seconds*, while this module supports signed range of up to\n`i64::MAX` of *milliseconds*.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:41605:9275-0:2151:2130","a:2:3058:246-0:2151:2130","a:2:31969:237-0:2151:2130","a:2:41604:9276-0:2151:2130","a:2:32026:9229-0:2151:2130","b:2:2563-0:2151:2130","b:2:3671-0:2151:2130","b:2:2835-0:2151:2130","b:2:2839-0:2151:2130","b:2:2850-0:2151:2130","b:2:2560-0:2151:2130","b:2:2845-0:2151:2130","b:5:725-0:2151:2130","b:5:5869-0:2151:2130","0:2160","0:2159","0:2162","0:97","0:2156","0:2154","0:99","0:2158"]}}},"0:3227:458":{"id":"0:3227:458","crate_id":0,"name":"clone","span":{"filename":"src/month.rs","begin":[227,9],"end":[227,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1559-0:2746:2164":{"id":"0:1559-0:2746:2164","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[21,0],"end":[21,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::isoweek::IsoWeek","name":"IsoWeek","id":"0:2746:2164","glob":false}}},"0:2429:726":{"id":"0:2429:726","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[255,9],"end":[255,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41605:9275-0:2566:2160":{"id":"a:2:41605:9275-0:2566:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:214:2802":{"id":"0:214:2802","crate_id":0,"name":"iso_week","span":{"filename":"src/date.rs","begin":[426,4],"end":[428,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2007:8304":{"id":"0:2007:8304","crate_id":0,"name":"duration_round","span":{"filename":"src/round.rs","begin":[123,4],"end":[123,76]},"visibility":"default","docs":"Return a copy rounded by TimeDelta.\n\n# Example\n``` rust\n# use chrono::{DurationRound, TimeDelta, Utc, NaiveDate};\nlet dt = NaiveDate::from_ymd_opt(2018, 1, 11).unwrap().and_hms_milli_opt(12, 0, 0, 154).unwrap().and_local_timezone(Utc).unwrap();\nassert_eq!(\n    dt.duration_round(TimeDelta::milliseconds(10)).unwrap().to_string(),\n    \"2018-01-11 12:00:00.150 UTC\"\n);\nassert_eq!(\n    dt.duration_round(TimeDelta::days(1)).unwrap().to_string(),\n    \"2018-01-12 00:00:00 UTC\"\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["duration",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:2005:2168","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:2109:3177":{"id":"0:2109:3177","crate_id":0,"name":"minute","span":{"filename":"src/traits.rs","begin":[284,4],"end":[284,28]},"visibility":"default","docs":"Returns the minute number from 0 to 59.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:41604:9276-0:3169:2142":{"id":"a:2:41604:9276-0:3169:2142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2345:3419":{"id":"0:2345:3419","crate_id":0,"name":"Internal","span":{"filename":"src/format/mod.rs","begin":[152,4],"end":[152,29]},"visibility":"default","docs":"Internal uses only.\n\nThis item exists so that one can add additional internal-only formatting\nwithout breaking major compatibility (as enum variants cannot be selectively private).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2347:1767"]},"discriminant":null}}},"0:555-0:2171:2139":{"id":"0:555-0:2171:2139","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[500,0],"end":[500,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"datetime::DateTime","name":"DateTime","id":"0:2171:2139","glob":false}}},"b:2:2835-0:2426:3477":{"id":"b:2:2835-0:2426:3477","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2630":{"id":"0:2630","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[132,39],"end":[132,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41604:9276-0:2461:3492":{"id":"a:2:41604:9276-0:2461:3492","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13187:2839":{"id":"2:13187:2839","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12718:137","`FromStr`":"2:12717:3263"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12717:3263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12717:3263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:597":{"id":"0:597","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[53,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"super::Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["0:601:1053","0:602:2785"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2171:2139":{"id":"0:2171:2139","crate_id":0,"name":"DateTime","span":{"filename":"src/datetime/mod.rs","begin":[59,0],"end":[62,1]},"visibility":"public","docs":"ISO 8601 combined date and time with time zone.\n\nThere are some constructors implemented here (the `from_*` methods), but\nthe general-purpose constructors are all via the methods on the\n[`TimeZone`](./offset/trait.TimeZone.html) implementations.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:332","0:371","0:398","0:406","a:2:41605:9275-0:2171:2139","a:2:3058:246-0:2171:2139","a:2:41604:9276-0:2171:2139","a:2:32026:9229-0:2171:2139","b:0:2000-0:2171:2139","b:2:2563-0:2171:2139","b:2:3671-0:2171:2139","b:2:2835-0:2171:2139","b:2:2839-0:2171:2139","b:2:2850-0:2171:2139","b:2:2560-0:2171:2139","b:2:2845-0:2171:2139","b:5:725-0:2171:2139","b:5:5869-0:2171:2139","0:461","0:391","0:387","0:504","0:2009","0:514","0:485","0:439","0:453","0:811","0:492","0:552","0:522","0:550","0:381","0:474","0:544","0:496","0:455","0:385","0:510","0:540","0:534","0:457","0:377","0:463","0:500","0:375","0:383","0:507","0:414","0:2175","0:389","0:526","0:467","0:478","0:482","0:488","0:518","0:470","0:548","0:537","0:379","0:530"]}}},"0:812:137":{"id":"0:812:137","crate_id":0,"name":"Err","span":{"filename":"src/format/parse.rs","begin":[524,4],"end":[524,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2563-0:2171:2139":{"id":"b:2:2563-0:2171:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:546:3264":{"id":"0:546:3264","crate_id":0,"name":"from_str","span":{"filename":"src/datetime/mod.rs","begin":[1612,4],"end":[1614,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2523:793":{"id":"0:2523:793","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[314,44],"end":[314,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2845-0:2479:3495":{"id":"b:2:2845-0:2479:3495","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2548":{"id":"0:2548","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[325,9],"end":[325,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2550:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1557-0:1211:2157":{"id":"0:1557-0:1211:2157","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[20,40],"end":[20,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"self::datetime::MAX_DATETIME","name":"MAX_DATETIME","id":"0:1211:2157","glob":false}}},"0:1610:2751":{"id":"0:1610:2751","crate_id":0,"name":"from_offset","span":{"filename":"src/offset/fixed.rs","begin":[132,4],"end":[134,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["offset",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2474":{"id":"0:60:2474","crate_id":0,"name":"min_value","span":{"filename":"src/time_delta.rs","begin":[387,4],"end":[389,5]},"visibility":"public","docs":"The minimum possible `TimeDelta`: `-i64::MAX` milliseconds.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2144":{"id":"0:2144","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,58],"end":[52,61]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2646:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2145:465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2505:3498":{"id":"0:2505:3498","crate_id":0,"name":"Colons","span":{"filename":"src/format/mod.rs","begin":[315,0],"end":[322,1]},"visibility":"public","docs":"The separator between hours and minutes in an offset.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:2506:191","0:2508:3522","0:2510:3524"],"impls":["a:2:41605:9275-0:2505:3498","a:2:3058:246-0:2505:3498","a:2:31969:237-0:2505:3498","a:2:41604:9276-0:2505:3498","a:2:32026:9229-0:2505:3498","b:2:2563-0:2505:3498","b:2:3671-0:2505:3498","b:2:2835-0:2505:3498","b:2:2839-0:2505:3498","b:2:2850-0:2505:3498","b:2:2560-0:2505:3498","b:2:2845-0:2505:3498","b:5:725-0:2505:3498","0:2512","0:2515","0:2518","0:2522","0:2514","0:2517","0:2520"]}}},"0:1465:7012":{"id":"0:1465:7012","crate_id":0,"name":"from_hms_milli","span":{"filename":"src/naive/time/mod.rs","begin":[288,4],"end":[290,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from hour, minute, second and millisecond.\n\nThe millisecond part can exceed 1,000\nin order to represent the [leap second](#leap-second-handling).\n\n# Panics\n\nPanics on invalid hour, minute, second and/or millisecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `from_hms_milli_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_hms_milli_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["milli",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:518":{"id":"0:518","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1477,0],"end":[1484,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:520:199","0:521:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2835-0:2461:3492":{"id":"b:2:2835-0:2461:3492","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:239":{"id":"0:239","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[478,0],"end":[482,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["lt","ge","gt","le"],"trait":{"name":"PartialOrd","id":"2:2652:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:241:1151"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41605:9275-0:2164:2134":{"id":"a:2:41605:9275-0:2164:2134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:514":{"id":"0:514","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1469,0],"end":[1475,1]},"visibility":"default","docs":"Subtract `Months` from `DateTime`.\n\nThe result will be clamped to valid days in the resulting month, see\n[`DateTime<Tz>::checked_sub_months`] for details.\n\n# Panics\n\nPanics if:\n- The resulting date would be out of range.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.\n\nStrongly consider using [`DateTime<Tz>::checked_sub_months`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_sub_months`":"0:357:2973"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:516:199","0:517:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:718:4002":{"id":"0:718:4002","crate_id":0,"name":"set_second","span":{"filename":"src/format/parsed.rs","begin":[262,4],"end":[264,5]},"visibility":"public","docs":"Tries to set the [`second`](#structfield.second) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1467:7024":{"id":"0:1467:7024","crate_id":0,"name":"from_hms_micro","span":{"filename":"src/naive/time/mod.rs","begin":[339,4],"end":[341,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from hour, minute, second and microsecond.\n\nThe microsecond part is allowed to exceed 1,000,000,000 in order to represent a\n[leap second](#leap-second-handling), but only when `sec == 59`.\n\n# Panics\n\nPanics on invalid hour, minute, second and/or microsecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `from_hms_micro_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_hms_micro_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["micro",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2039:3652":{"id":"0:2039:3652","crate_id":0,"name":"num_days_from_sunday","span":{"filename":"src/weekday.rs","begin":[147,4],"end":[149,5]},"visibility":"public","docs":"Returns a day-of-week number starting from Sunday = 0.\n\n`w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`\n--------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----\n`w.num_days_from_sunday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 0","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3138:4041":{"id":"0:3138:4041","crate_id":0,"name":"Fri","span":{"filename":"src/weekday.rs","begin":[52,4],"end":[52,11]},"visibility":"default","docs":"Friday.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"4","value":"4"}}}},"0:3154:458":{"id":"0:3154:458","crate_id":0,"name":"clone","span":{"filename":"src/weekday.rs","begin":[32,30],"end":[32,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1966:7431":{"id":"0:1966:7431","crate_id":0,"name":"datetime_from_str","span":{"filename":"src/offset/mod.rs","begin":[480,4],"end":[484,5]},"visibility":"default","docs":"Parses a string with the specified format string and returns a\n`DateTime` with the current offset.\n\nSee the [`crate::format::strftime`] module on the\nsupported escape sequences.\n\nIf the to-be-parsed string includes an offset, it *must* match the\noffset of the TimeZone, otherwise an error will be returned.\n\nSee also [`DateTime::parse_from_str`] which gives a [`DateTime`] with\nparsed [`FixedOffset`].\n\nSee also [`NaiveDateTime::parse_from_str`] which gives a [`NaiveDateTime`] without\nan offset, but can be converted to a [`DateTime`] with [`NaiveDateTime::and_utc`] or\n[`NaiveDateTime::and_local_timezone`].","links":{"`NaiveDateTime`":"0:2692:2148","`NaiveDateTime::and_local_timezone`":"0:1251:2969","`FixedOffset`":"0:2781:2145","`NaiveDateTime::parse_from_str`":"0:1219:3132","`NaiveDateTime::and_utc`":"0:1253:3053","`crate::format::strftime`":"0:866:3347","`DateTime::parse_from_str`":"0:402:3132","`DateTime`":"0:2171:2139"},"attrs":["#[deprecated(since = \"0.4.29\", note =\n\"use `DateTime::parse_from_str` or `NaiveDateTime::parse_from_str` with `and_utc()` or `and_local_timezone()` instead\")]"],"deprecation":{"since":"0.4.29","note":"use `DateTime::parse_from_str` or `NaiveDateTime::parse_from_str` with `and_utc()` or `and_local_timezone()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3197:3615":{"id":"0:3197:3615","crate_id":0,"name":"October","span":{"filename":"src/month.rs","begin":[61,4],"end":[61,15]},"visibility":"default","docs":"October","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"9","value":"9"}}}},"0:1023:1053":{"id":"0:1023:1053","crate_id":0,"name":"new","span":{"filename":"src/naive/date.rs","begin":[137,4],"end":[139,5]},"visibility":"public","docs":"Construct a new `Days` from a number of days","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["num",{"primitive":"u64"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:2617:2163":{"id":"b:2:2563-0:2617:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:2213:2843":{"id":"b:5:725-0:2213:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:373:3052":{"id":"0:373:3052","crate_id":0,"name":"from_timestamp_millis","span":{"filename":"src/datetime/mod.rs","begin":[660,4],"end":[662,5]},"visibility":"public","docs":"Makes a new [`DateTime<Utc>`] from the number of non-leap milliseconds\nsince January 1, 1970 0:00:00.000 UTC (aka \"UNIX timestamp\").\n\nThis is guaranteed to round-trip with regard to [`timestamp_millis`](DateTime::timestamp_millis).\n\nIf you need to create a `DateTime` with a [`TimeZone`] different from [`Utc`], use\n[`TimeZone::timestamp_millis_opt`] or [`DateTime::with_timezone`].\n\n# Errors\n\nReturns `None` on out-of-range number of milliseconds, otherwise returns `Some(DateTime {...})`.\n\n# Example\n\n```\nuse chrono::{DateTime, Utc};\n\nlet dt: DateTime<Utc> = DateTime::<Utc>::from_timestamp_millis(947638923004).expect(\"invalid timestamp\");\n\nassert_eq!(dt.to_string(), \"2000-01-12 01:02:03.004 UTC\");\nassert_eq!(DateTime::from_timestamp_millis(dt.timestamp_millis()).unwrap(), dt);\n```","links":{"`Utc`":"0:3064:2146","`TimeZone::timestamp_millis_opt`":"0:1963:3279","`DateTime::with_timezone`":"0:350:2754","`TimeZone`":"0:1950:2151","`DateTime<Utc>`":"0:2171:2139","DateTime::timestamp_millis":"0:341:2912"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["millis",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1429":{"id":"0:1429","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[141,0],"end":[152,1]},"visibility":"default","docs":"The `Debug` output of the ISO week `w` is the same as\n[`d.format(\"%G-W%V\")`](../format/strftime/index.html)\nwhere `d` is any `NaiveDate` value in that week.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(format!(\"{:?}\", NaiveDate::from_ymd_opt(2015,  9,  5).unwrap().iso_week()), \"2015-W36\");\nassert_eq!(format!(\"{:?}\", NaiveDate::from_ymd_opt(   0,  1,  3).unwrap().iso_week()), \"0000-W01\");\nassert_eq!(format!(\"{:?}\", NaiveDate::from_ymd_opt(9999, 12, 31).unwrap().iso_week()), \"9999-W52\");\n```\n\nISO 8601 requires an explicit sign for years before 1 BCE or after 9999 CE.\n\n```\n# use chrono::{NaiveDate, Datelike};\nassert_eq!(format!(\"{:?}\", NaiveDate::from_ymd_opt(    0,  1,  2).unwrap().iso_week()),  \"-0001-W52\");\nassert_eq!(format!(\"{:?}\", NaiveDate::from_ymd_opt(10000, 12, 31).unwrap().iso_week()), \"+10000-W52\");\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1430:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5869-0:3252:2209":{"id":"b:5:5869-0:3252:2209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31969:237-0:2582:3548":{"id":"a:2:31969:237-0:2582:3548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:954:2525":{"id":"0:954:2525","crate_id":0,"name":"description","span":{"filename":"src/format/mod.rs","begin":[451,4],"end":[453,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:2187:2140":{"id":"b:2:2560-0:2187:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5869-0:3125:2144":{"id":"b:5:5869-0:3125:2144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3188:3612":{"id":"0:3188:3612","crate_id":0,"name":"July","span":{"filename":"src/month.rs","begin":[55,4],"end":[55,12]},"visibility":"default","docs":"July","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"6","value":"6"}}}},"2:13101:39728":{"id":"2:13101:39728","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43655:8971","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1078:5668":{"id":"0:1078:5668","crate_id":0,"name":"iter_days","span":{"filename":"src/naive/date.rs","begin":[1382,4],"end":[1384,5]},"visibility":"public","docs":"Returns an iterator that steps by days across all representable dates.\n\n# Example\n\n```\n# use chrono::NaiveDate;\n\nlet expected = [\n    NaiveDate::from_ymd_opt(2016, 2, 27).unwrap(),\n    NaiveDate::from_ymd_opt(2016, 2, 28).unwrap(),\n    NaiveDate::from_ymd_opt(2016, 2, 29).unwrap(),\n    NaiveDate::from_ymd_opt(2016, 3, 1).unwrap(),\n];\n\nlet mut count = 0;\nfor (idx, d) in NaiveDate::from_ymd_opt(2016, 2, 27).unwrap().iter_days().take(4).enumerate() {\n   assert_eq!(d, expected[idx]);\n   count += 1;\n}\nassert_eq!(count, 4);\n\nfor d in NaiveDate::from_ymd_opt(2016, 3, 1).unwrap().iter_days().rev().take(4) {\n    count -= 1;\n    assert_eq!(d, expected[count]);\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41604:9276-0:3057:2135":{"id":"a:2:41604:9276-0:3057:2135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:685":{"id":"0:685","crate_id":0,"name":null,"span":{"filename":"src/format/parsed.rs","begin":[124,0],"end":[696,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:686:1053","0:687:3964","0:689:3967","0:691:3969","0:693:3971","0:695:3973","0:697:3975","0:699:3977","0:701:3979","0:703:3981","0:705:3983","0:707:3985","0:708:3987","0:710:3989","0:712:3992","0:713:3995","0:714:3998","0:716:4000","0:718:4002","0:720:4004","0:722:4006","0:723:4008","0:725:4017","0:733:4053","0:734:4062","0:739:4067","0:740:3107","0:741:4077"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2560-0:3057:2135":{"id":"b:2:2560-0:3057:2135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1271:2804":{"id":"0:1271:2804","crate_id":0,"name":"with_month","span":{"filename":"src/naive/datetime/mod.rs","begin":[1320,4],"end":[1322,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the month number (starting from 1) changed.\n\nSee also the [`NaiveDate::with_month`] method.\n\n# Errors\n\nReturns `None` if the resulting date does not exist, or if the value for `month` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Datelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 30).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.with_month(10), Some(NaiveDate::from_ymd_opt(2015, 10, 30).unwrap().and_hms_opt(12, 34, 56).unwrap()));\nassert_eq!(dt.with_month(13), None); // no month 13\nassert_eq!(dt.with_month(2), None); // no February 30\n```","links":{"`NaiveDate::with_month`":"0:1103:2804"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:971-0:2187:2140":{"id":"0:971-0:2187:2140","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[509,42],"end":[509,55]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"format::SecondsFormat","name":"SecondsFormat","id":"0:2187:2140","glob":false}}},"0:2054-0:3160:2171":{"id":"0:2054-0:3160:2171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[529,0],"end":[529,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"weekday::ParseWeekdayError","name":"ParseWeekdayError","id":"0:3160:2171","glob":false}}},"0:1114:296":{"id":"0:1114:296","crate_id":0,"name":"add_assign","span":{"filename":"src/naive/date.rs","begin":[1910,4],"end":[1912,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2295":{"id":"0:2295","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[77,22],"end":[77,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2296:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2375:3432":{"id":"0:2375:3432","crate_id":0,"name":"LongMonthName","span":{"filename":"src/format/mod.rs","begin":[180,4],"end":[180,17]},"visibility":"default","docs":"Full month names.\n\nPrints a full name in the title case, reads either a short or full name in any case.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2542:1768":{"id":"0:2542:1768","crate_id":0,"name":"1","span":{"filename":"src/format/mod.rs","begin":[339,21],"end":[339,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"a:2:3058:246-0:2612:2165":{"id":"a:2:3058:246-0:2612:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2612:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2835-0:3169:2142":{"id":"b:2:2835-0:3169:2142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:550":{"id":"0:550","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1638,0],"end":[1642,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SystemTime","id":"1:9197:2837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:551:755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1528:1569":{"id":"0:1528:1569","crate_id":0,"name":"sub","span":{"filename":"src/naive/time/mod.rs","begin":[1302,4],"end":[1304,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1037:5437":{"id":"0:1037:5437","crate_id":0,"name":"from_num_days_from_ce_opt","span":{"filename":"src/naive/date.rs","begin":[477,4],"end":[484,5]},"visibility":"public","docs":"Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\nJanuary 1, 1 being day 1.\n\n# Errors\n\nReturns `None` if the date is out of range.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet from_ndays_opt = NaiveDate::from_num_days_from_ce_opt;\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nassert_eq!(from_ndays_opt(730_000),      Some(from_ymd(1999, 9, 3)));\nassert_eq!(from_ndays_opt(1),            Some(from_ymd(1, 1, 1)));\nassert_eq!(from_ndays_opt(0),            Some(from_ymd(0, 12, 31)));\nassert_eq!(from_ndays_opt(-1),           Some(from_ymd(0, 12, 30)));\nassert_eq!(from_ndays_opt(100_000_000),  None);\nassert_eq!(from_ndays_opt(-100_000_000), None);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["days",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2063:1030":{"id":"0:2063:1030","crate_id":0,"name":"name","span":{"filename":"src/month.rs","begin":[149,4],"end":[164,5]},"visibility":"public","docs":"Get the name of the month\n\n```\nuse chrono::Month;\n\nassert_eq!(Month::January.name(), \"January\")\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2473:667":{"id":"0:2473:667","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[280,29],"end":[280,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1499:3187":{"id":"0:1499:3187","crate_id":0,"name":"with_minute","span":{"filename":"src/naive/time/mod.rs","begin":[989,4],"end":[995,5]},"visibility":"default","docs":"Makes a new `NaiveTime` with the minute number changed.\n\n# Errors\n\nReturns `None` if the value for `minute` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nlet dt = NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap();\nassert_eq!(dt.with_minute(45), Some(NaiveTime::from_hms_nano_opt(23, 45, 4, 12_345_678).unwrap()));\nassert_eq!(dt.with_minute(60), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["min",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13069:41637":{"id":"2:13069:41637","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:2612:2165":{"id":"b:2:2850-0:2612:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2612:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3257":{"id":"0:3257","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[581,22],"end":[581,26]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3258:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2110:3178":{"id":"0:2110:3178","crate_id":0,"name":"second","span":{"filename":"src/traits.rs","begin":[287,4],"end":[287,28]},"visibility":"default","docs":"Returns the second number from 0 to 59.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1041:2840":{"id":"0:1041:2840","crate_id":0,"name":"parse_and_remainder","span":{"filename":"src/naive/date.rs","begin":[607,4],"end":[611,5]},"visibility":"public","docs":"Parses a string from a user-specified format into a new `NaiveDate` value, and a slice with\nthe remaining portion of the string.\nSee the [`format::strftime` module](crate::format::strftime)\non the supported escape sequences.\n\nSimilar to [`parse_from_str`](#method.parse_from_str).\n\n# Example\n\n```rust\n# use chrono::{NaiveDate};\nlet (date, remainder) = NaiveDate::parse_and_remainder(\n    \"2015-02-18 trailing text\", \"%Y-%m-%d\").unwrap();\nassert_eq!(date, NaiveDate::from_ymd_opt(2015, 2, 18).unwrap());\nassert_eq!(remainder, \" trailing text\");\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:2479:3495":{"id":"a:2:3058:246-0:2479:3495","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1345":{"id":"0:1345","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[2176,0],"end":[2180,1]},"visibility":"default","docs":"The default value for a NaiveDateTime is one with epoch 0\nthat is, 1st of January 1970 at 00:00:00.\n\n# Example\n\n```rust\nuse chrono::NaiveDateTime;\n\nlet default_date = NaiveDateTime::default();\nassert_eq!(Some(default_date), NaiveDateTime::from_timestamp_opt(0, 0));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2887:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1346:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1952:3294":{"id":"0:1952:3294","crate_id":0,"name":"with_ymd_and_hms","span":{"filename":"src/offset/mod.rs","begin":[226,4],"end":[240,5]},"visibility":"default","docs":"Make a new `DateTime` from year, month, day, time components and current time zone.\n\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n\nReturns `LocalResult::None` on invalid input data.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}],["month",{"primitive":"u32"}],["day",{"primitive":"u32"}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:2617:2163":{"id":"b:5:725-0:2617:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2311:3382":{"id":"0:2311:3382","crate_id":0,"name":"IsoYear","span":{"filename":"src/format/mod.rs","begin":[111,4],"end":[111,11]},"visibility":"default","docs":"Year in the ISO week date (FW=4, PW=∞).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2005:2168":{"id":"0:2005:2168","crate_id":0,"name":"DurationRound","span":{"filename":"src/round.rs","begin":[99,0],"end":[141,1]},"visibility":"public","docs":"Extension trait for rounding or truncating a DateTime by a TimeDelta.\n\n# Limitations\nBoth rounding and truncating are done via [`TimeDelta::num_nanoseconds`] and\n[`DateTime::timestamp_nanos_opt`]. This means that they will fail if either the\n`TimeDelta` or the `DateTime` are too big to represented as nanoseconds. They\nwill also fail if the `TimeDelta` is bigger than the timestamp.","links":{"`TimeDelta::num_nanoseconds`":"0:56:2468","`DateTime::timestamp_nanos_opt`":"0:344:2940"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:2006:137","0:2007:8304","0:2008:8309"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:2014","0:2009"]}}},"0:2301":{"id":"0:2301","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[77,44],"end":[77,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2302:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2839-0:3077:2166":{"id":"b:2:2839-0:3077:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2563-0:2178:2653":{"id":"b:2:2563-0:2178:2653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1891:2751":{"id":"0:1891:2751","crate_id":0,"name":"from_offset","span":{"filename":"src/offset/local/mod.rs","begin":[164,4],"end":[166,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_offset",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41604:9276-0:2304:3372":{"id":"a:2:41604:9276-0:2304:3372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1427:3651":{"id":"0:1427:3651","crate_id":0,"name":"week","span":{"filename":"src/naive/isoweek.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"Returns the ISO week number starting from 1.\n\nThe return value ranges from 1 to 53. (The last week of year differs by years.)\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike, Weekday};\n\nlet d = NaiveDate::from_isoywd_opt(2015, 15, Weekday::Mon).unwrap();\nassert_eq!(d.iso_week().week(), 15);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1981-0:1948:2150":{"id":"0:1981-0:1948:2150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[522,30],"end":[522,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"offset::Offset","name":"Offset","id":"0:1948:2150","glob":false}}},"b:2:2839-0:2251:2654":{"id":"b:2:2839-0:2251:2654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2357":{"id":"0:2357","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[100,38],"end":[100,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2358:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:347:2949":{"id":"0:347:2949","crate_id":0,"name":"timestamp_subsec_nanos","span":{"filename":"src/datetime/mod.rs","begin":[323,4],"end":[325,5]},"visibility":"public","docs":"Returns the number of nanoseconds since the last second boundary\n\nIn event of a leap second this may exceed 999,999,999.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3231":{"id":"0:3231","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,29],"end":[227,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:349:2695":{"id":"0:349:2695","crate_id":0,"name":"timezone","span":{"filename":"src/datetime/mod.rs","begin":[337,4],"end":[339,5]},"visibility":"public","docs":"Retrieves an associated time zone.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Tz"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:512:199":{"id":"0:512:199","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1446,4],"end":[1446,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:2335:3404":{"id":"0:2335:3404","crate_id":0,"name":"Hour12","span":{"filename":"src/format/mod.rs","begin":[135,4],"end":[135,10]},"visibility":"default","docs":"Hour number in the 12-hour clocks (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:3058:246-0:3057:2135":{"id":"a:2:3058:246-0:3057:2135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3058:246-0:3077:2166":{"id":"a:2:3058:246-0:3077:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2563-0:2372:2842":{"id":"b:2:2563-0:2372:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2850-0:2479:3495":{"id":"b:2:2850-0:2479:3495","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31969:237-0:2426:3477":{"id":"a:2:31969:237-0:2426:3477","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2237":{"id":"0:2237","crate_id":0,"name":null,"span":{"filename":"src/format/parsed.rs","begin":[20,16],"end":[20,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:779:2839":{"id":"0:779:2839","crate_id":0,"name":"parse","span":{"filename":"src/format/parse.rs","begin":[245,0],"end":[255,1]},"visibility":"public","docs":"Tries to parse given string into `parsed` with given formatting items.\nReturns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\nThere should be no trailing string after parsing;\nuse a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.\n\nThis particular date and time parser is:\n\n- Greedy. It will consume the longest possible prefix.\n  For example, `April` is always consumed entirely when the long month name is requested;\n  it equally accepts `Apr`, but prefers the longer prefix in this case.\n\n- Padding-agnostic (for numeric items).\n  The [`Pad`](./enum.Pad.html) field is completely ignored,\n  so one can prepend any number of whitespace then any number of zeroes before numbers.\n\n- (Still) obeying the intrinsic parsing width. This allows, for example, parsing `HHMMSS`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["parsed",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"super::Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"super::ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"super::Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:2213:2843":{"id":"b:2:2850-0:2213:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1156":{"id":"0:1156","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2232,0],"end":[2236,1]},"visibility":"default","docs":"The `Display` output of the naive date `d` is the same as\n[`d.format(\"%Y-%m-%d\")`](crate::format::strftime).\n\nThe string printed can be readily parsed via the `parse` method on `str`.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nassert_eq!(format!(\"{}\", NaiveDate::from_ymd_opt(2015,  9,  5).unwrap()), \"2015-09-05\");\nassert_eq!(format!(\"{}\", NaiveDate::from_ymd_opt(   0,  1,  1).unwrap()), \"0000-01-01\");\nassert_eq!(format!(\"{}\", NaiveDate::from_ymd_opt(9999, 12, 31).unwrap()), \"9999-12-31\");\n```\n\nISO 8601 requires an explicit sign for years before 1 BCE or after 9999 CE.\n\n```\n# use chrono::NaiveDate;\nassert_eq!(format!(\"{}\", NaiveDate::from_ymd_opt(   -1,  1,  1).unwrap()),  \"-0001-01-01\");\nassert_eq!(format!(\"{}\", NaiveDate::from_ymd_opt(10000, 12, 31).unwrap()), \"+10000-12-31\");\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1157:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1045:2973":{"id":"0:1045:2973","crate_id":0,"name":"checked_sub_months","span":{"filename":"src/naive/date.rs","begin":[670,4],"end":[680,5]},"visibility":"public","docs":"Subtract a duration in [`Months`] from the date\n\nUses the last day of the month if the day does not exist in the resulting month.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\n# use chrono::{NaiveDate, Months};\nassert_eq!(\n    NaiveDate::from_ymd_opt(2022, 2, 20).unwrap().checked_sub_months(Months::new(6)),\n    Some(NaiveDate::from_ymd_opt(2021, 8, 20).unwrap())\n);\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1).unwrap()\n        .checked_sub_months(Months::new(core::i32::MAX as u32 + 1)),\n    None\n);\n```","links":{"`Months`":"0:3223:2174"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["months",{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1253:3053":{"id":"0:1253:3053","crate_id":0,"name":"and_utc","span":{"filename":"src/naive/datetime/mod.rs","begin":[1092,4],"end":[1094,5]},"visibility":"public","docs":"Converts the `NaiveDateTime` into the timezone-aware `DateTime<Utc>`.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Utc};\nlet dt = NaiveDate::from_ymd_opt(2023, 1, 30).unwrap().and_hms_opt(19, 32, 33).unwrap().and_utc();\nassert_eq!(dt.timezone(), Utc);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:2637:2147":{"id":"b:2:2560-0:2637:2147","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1217:6182":{"id":"0:1217:6182","crate_id":0,"name":"from_timestamp_nanos","span":{"filename":"src/naive/datetime/mod.rs","begin":[226,4],"end":[231,5]},"visibility":"public","docs":"Creates a new [NaiveDateTime] from nanoseconds since the UNIX epoch.\n\nThe UNIX epoch starts on midnight, January 1, 1970, UTC.\n\n# Errors\n\nReturns `None` if the number of nanoseconds would be out of range for a `NaiveDateTime`\n(more than ca. 262,000 years away from common era)\n\n# Example\n\n```\nuse chrono::NaiveDateTime;\nlet timestamp_nanos: i64 = 1662921288_000_000_000; //Sunday, September 11, 2022 6:34:48 PM\nlet naive_datetime = NaiveDateTime::from_timestamp_nanos(timestamp_nanos);\nassert!(naive_datetime.is_some());\nassert_eq!(timestamp_nanos, naive_datetime.unwrap().timestamp_nanos_opt().unwrap());\n\n// Negative timestamps (before the UNIX epoch) are supported as well.\nlet timestamp_nanos: i64 = -2208936075_000_000_000; //Mon Jan 01 1900 14:38:45 GMT+0000\nlet naive_datetime = NaiveDateTime::from_timestamp_nanos(timestamp_nanos);\nassert!(naive_datetime.is_some());\nassert_eq!(timestamp_nanos, naive_datetime.unwrap().timestamp_nanos_opt().unwrap());\n```","links":{"NaiveDateTime":"0:2692:2148"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["nanos",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2211:793":{"id":"0:2211:793","crate_id":0,"name":"hash","span":{"filename":"src/format/formatting.rs","begin":[509,44],"end":[509,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:602:2785":{"id":"0:602:2785","crate_id":0,"name":"new_with_offset","span":{"filename":"src/format/formatting.rs","begin":[69,4],"end":[87,5]},"visibility":"public","docs":"Makes a new `DelayedFormat` value out of local date and time and UTC offset.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}],["time",{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}],["offset",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Off"}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Off","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Off"},"bounds":[{"trait_bound":{"trait":{"name":"Offset","id":"0:1948:2150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1497:3179":{"id":"0:1497:3179","crate_id":0,"name":"nanosecond","span":{"filename":"src/naive/time/mod.rs","begin":[945,4],"end":[947,5]},"visibility":"default","docs":"Returns the number of nanoseconds since the whole non-leap second.\nThe range from 1,000,000,000 to 1,999,999,999 represents\nthe [leap second](#leap-second-handling).\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nassert_eq!(NaiveTime::from_hms_opt(0, 0, 0).unwrap().nanosecond(), 0);\nassert_eq!(NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap().nanosecond(), 12_345_678);\n```\n\nLeap seconds may have seemingly out-of-range return values.\nYou can reduce the range with `time.nanosecond() % 1_000_000_000`, or\nuse the proper [formatting method](#method.format) to get a human-readable representation.\n\n```\n# use chrono::{NaiveTime, Timelike};\nlet leap = NaiveTime::from_hms_milli_opt(23, 59, 59, 1_000).unwrap();\nassert_eq!(leap.nanosecond(), 1_000_000_000);\nassert_eq!(leap.format(\"%H:%M:%S%.9f\").to_string(), \"23:59:60.000000000\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5869-0:2566:2160":{"id":"b:5:5869-0:2566:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3263":{"id":"0:3263","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[581,39],"end":[581,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32026:9229-0:2213:2843":{"id":"a:2:32026:9229-0:2213:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2850-0:2637:2147":{"id":"b:2:2850-0:2637:2147","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2228:3950":{"id":"0:2228:3950","crate_id":0,"name":"hour_mod_12","span":{"filename":"src/format/parsed.rs","begin":[84,4],"end":[84,32]},"visibility":"public","docs":"Hour number modulo 12 (0--11).","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}}}},"0:457":{"id":"0:457","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1200,0],"end":[1204,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"Tz2","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:460:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3239":{"id":"0:3239","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,50],"end":[227,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","ge","gt","le"],"trait":{"name":"PartialOrd","id":"2:2652:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3240:1151"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2757":{"id":"0:2757","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[19,41],"end":[19,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2755":{"id":"0:2755","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[19,36],"end":[19,39]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2646:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2756:465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2050":{"id":"0:2050","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[238,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2051:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2024":{"id":"0:2024","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[278,0],"end":[283,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","source","type_id","cause","provide"],"trait":{"name":"Error","id":"2:2898:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2025:2525"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:557-0:331:2157":{"id":"0:557-0:331:2157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[503,19],"end":[503,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"datetime::MAX_DATETIME","name":"MAX_DATETIME","id":"0:331:2157","glob":false}}},"0:1130":{"id":"0:1130","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2052,0],"end":[2057,1]},"visibility":"default","docs":"Subtract-assign `TimeDelta` from `NaiveDate`.\n\nThis discards the fractional days in `TimeDelta`, rounding to the closest integral number of\ndays towards `TimeDelta::zero()`.\nIt is the same as the addition with a negated `TimeDelta`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDate::checked_sub_signed`] to get an `Option` instead.","links":{"`NaiveDate::checked_sub_signed`":"0:1069:2762"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33111:2338","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1131:1570"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:236:667":{"id":"0:236:667","crate_id":0,"name":"eq","span":{"filename":"src/date.rs","begin":[471,4],"end":[473,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:345:2943":{"id":"0:345:2943","crate_id":0,"name":"timestamp_subsec_millis","span":{"filename":"src/datetime/mod.rs","begin":[305,4],"end":[307,5]},"visibility":"public","docs":"Returns the number of milliseconds since the last second boundary.\n\nIn event of a leap second this may exceed 999.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1151:5879":{"id":"0:1151:5879","crate_id":0,"name":"next_back","span":{"filename":"src/naive/date.rs","begin":[2158,4],"end":[2162,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8248:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:3223:2174":{"id":"a:2:32026:9229-0:3223:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2221:3644":{"id":"0:2221:3644","crate_id":0,"name":"week_from_sun","span":{"filename":"src/format/parsed.rs","begin":[61,4],"end":[61,34]},"visibility":"public","docs":"Week number, where the week 1 starts at the first Sunday of January\n(0--53, 1--53 or 1--52 depending on the year).","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}}}},"0:2349:458":{"id":"0:2349:458","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[100,9],"end":[100,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3095:667":{"id":"0:3095:667","crate_id":0,"name":"eq","span":{"filename":"src/offset/mod.rs","begin":[41,16],"end":[41,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1598":{"id":"0:1598","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[34,0],"end":[118,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1599:7491","0:1600:2828","0:1601:7500","0:1602:2829","0:1603:3655","0:1604:7506"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:127-0:1950:2151":{"id":"0:127-0:1950:2151","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[487,28],"end":[487,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::TimeZone","name":"TimeZone","id":"0:1950:2151","glob":false}}},"b:2:2845-0:2654:5260":{"id":"b:2:2845-0:2654:5260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2793:458":{"id":"0:2793:458","crate_id":0,"name":"clone","span":{"filename":"src/offset/fixed.rs","begin":[22,36],"end":[22,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103-0:2129:2131":{"id":"0:103-0:2129:2131","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[467,0],"end":[467,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"time_delta::TimeDelta","name":"TimeDelta","id":"0:2129:2131","glob":false}}},"0:2775:1151":{"id":"0:2775:1151","crate_id":0,"name":"partial_cmp","span":{"filename":"src/naive/time/mod.rs","begin":[204,30],"end":[204,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273-0:2164:2134":{"id":"0:273-0:2164:2134","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[492,0],"end":[492,19]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"date::Date","name":"Date","id":"0:2164:2134","glob":false}}},"2:13078:35729":{"id":"2:13078:35729","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12084:1656"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2675":{"id":"0:2675","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2135,9],"end":[2135,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2676:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2677":{"id":"0:2677","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2135,16],"end":[2135,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2750:667":{"id":"0:2750:667","crate_id":0,"name":"eq","span":{"filename":"src/naive/isoweek.rs","begin":[19,9],"end":[19,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3119":{"id":"0:3119","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[230,23],"end":[230,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2850-0:2582:3548":{"id":"b:2:2850-0:2582:3548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2845-0:3169:2142":{"id":"b:2:2845-0:3169:2142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3223:2174":{"id":"0:3223:2174","crate_id":0,"name":"Months","span":{"filename":"src/month.rs","begin":[229,0],"end":[229,34]},"visibility":"public","docs":"A duration in calendar months","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:2071","a:2:41605:9275-0:3223:2174","a:2:3058:246-0:3223:2174","a:2:31969:237-0:3223:2174","a:2:41604:9276-0:3223:2174","a:2:32026:9229-0:3223:2174","b:2:2563-0:3223:2174","b:2:3671-0:3223:2174","b:2:2835-0:3223:2174","b:2:2839-0:3223:2174","b:2:2850-0:3223:2174","b:2:2560-0:3223:2174","b:2:2845-0:3223:2174","b:5:725-0:3223:2174","0:1115","0:3233","0:514","0:3237","0:492","0:3226","0:1325","0:3228","0:3229","0:3239","0:3241","0:1118","0:3231","0:3236","0:1309"]}}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[505,0],"end":[510,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33052:2333","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:255:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1266:2801":{"id":"0:1266:2801","crate_id":0,"name":"ordinal0","span":{"filename":"src/naive/datetime/mod.rs","begin":[1251,4],"end":[1253,5]},"visibility":"default","docs":"Returns the day of year starting from 0.\n\nThe return value ranges from 0 to 365. (The last day of year differs by years.)\n\nSee also the [`NaiveDate::ordinal0`] method.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Datelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.ordinal0(), 267);\n```","links":{"`NaiveDate::ordinal0`":"0:1099:2801"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41605:9275-0:2582:3548":{"id":"a:2:41605:9275-0:2582:3548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1961:3274":{"id":"0:1961:3274","crate_id":0,"name":"timestamp_opt","span":{"filename":"src/offset/mod.rs","begin":[382,4],"end":[387,5]},"visibility":"default","docs":"Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\nand the number of nanoseconds since the last whole non-leap second.\n\nThe nanosecond part can exceed 1,000,000,000 in order to represent a\n[leap second](crate::NaiveTime#leap-second-handling), but only when `secs % 60 == 59`.\n(The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)\n\n# Errors\n\nReturns `LocalResult::None` on out-of-range number of seconds and/or\ninvalid nanosecond, otherwise always returns `LocalResult::Single`.\n\n# Example\n\n```\nuse chrono::{Utc, TimeZone};\n\nassert_eq!(Utc.timestamp_opt(1431648000, 0).unwrap().to_string(), \"2015-05-15 00:00:00 UTC\");\n```","links":{"crate::NaiveTime#leap-second-handling":"0:2763:2149"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["secs",{"primitive":"i64"}],["nsecs",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:2754":{"id":"0:181:2754","crate_id":0,"name":"with_timezone","span":{"filename":"src/date.rs","begin":[256,4],"end":[258,5]},"visibility":"public","docs":"Changes the associated time zone.\nThis does not change the actual `Date` (but will change the string representation).","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tz",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Tz2"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Tz2","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330:2158":{"id":"0:330:2158","crate_id":0,"name":"MIN_DATETIME","span":{"filename":"src/datetime/mod.rs","begin":[66,0],"end":[66,65]},"visibility":"public","docs":"The minimum possible `DateTime<Utc>`.","links":{},"attrs":["#[deprecated(since = \"0.4.20\", note = \"Use DateTime::MIN_UTC instead\")]"],"deprecation":{"since":"0.4.20","note":"Use DateTime::MIN_UTC instead"},"inner":{"constant":{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"expr":"DateTime<Utc>::MIN_UTC","value":null,"is_literal":false}}},"b:2:2850-0:2372:2842":{"id":"b:2:2850-0:2372:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13152:41647":{"id":"2:13152:41647","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12757:8930","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::rmatch_indices":"2:13155:41648"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43513:8969","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3671-0:3160:2171":{"id":"b:2:3671-0:3160:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5596:42351":{"id":"5:5596:42351","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:3344","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:294:3344","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1162":{"id":"0:1162","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2285,0],"end":[2289,1]},"visibility":"default","docs":"The default value for a NaiveDate is 1st of January 1970.\n\n# Example\n\n```rust\nuse chrono::NaiveDate;\n\nlet default_date = NaiveDate::default();\nassert_eq!(default_date, NaiveDate::from_ymd_opt(1970, 1, 1).unwrap());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2887:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1163:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2845-0:3243:2173":{"id":"b:2:2845-0:3243:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2474":{"id":"0:2474","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[280,40],"end":[280,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3671-0:2479:3495":{"id":"b:2:3671-0:2479:3495","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2701:793":{"id":"0:2701:793","crate_id":0,"name":"hash","span":{"filename":"src/naive/datetime/mod.rs","begin":[76,24],"end":[76,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:3243:2173":{"id":"b:2:2563-0:3243:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2529:1767":{"id":"0:2529:1767","crate_id":0,"name":"0","span":{"filename":"src/format/mod.rs","begin":[328,12],"end":[328,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"a:2:32026:9229-0:2525:174":{"id":"a:2:32026:9229-0:2525:174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2647":{"id":"0:2647","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[190,30],"end":[190,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","ge","gt","le"],"trait":{"name":"PartialOrd","id":"2:2652:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2648:1151"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1283":{"id":"0:1283","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1453,0],"end":[1624,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["num_seconds_from_midnight","hour12"],"trait":{"name":"Timelike","id":"0:2106:2143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1284:2702","0:1285:3177","0:1286:3178","0:1287:3179","0:1288:3183","0:1290:3187","0:1292:3193","0:1294:3200"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:0:2000-0:2763:2149":{"id":"b:0:2000-0:2763:2149","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[45,0],"end":[73,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Timelike","id":"0:2106:2143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"SubsecRound","id":"0:1997:2138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2002:8281","0:2003:8286"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1286:3178":{"id":"0:1286:3178","crate_id":0,"name":"second","span":{"filename":"src/naive/datetime/mod.rs","begin":[1501,4],"end":[1503,5]},"visibility":"default","docs":"Returns the second number from 0 to 59.\n\nSee also the [`NaiveTime::second`] method.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Timelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 34, 56, 789).unwrap();\nassert_eq!(dt.second(), 56);\n```","links":{"`NaiveTime::second`":"0:1496:3178"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:2673:5261":{"id":"b:5:725-0:2673:5261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:57:2465":{"id":"0:57:2465","crate_id":0,"name":"checked_add","span":{"filename":"src/time_delta.rs","begin":[349,4],"end":[359,5]},"visibility":"public","docs":"Add two `TimeDelta`s, returning `None` if overflow occurred.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2393":{"id":"0:34:2393","crate_id":0,"name":"weeks","span":{"filename":"src/time_delta.rs","begin":[105,4],"end":[107,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of weeks.\n\nEquivalent to `TimeDelta::seconds(weeks * 7 * 24 * 60 * 60)` with\noverflow checks.\n\n# Panics\n\nPanics when the duration is out of bounds.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["weeks",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1136:755":{"id":"0:1136:755","crate_id":0,"name":"from","span":{"filename":"src/naive/date.rs","begin":[2093,4],"end":[2095,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["naive_datetime",{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:2781:2145":{"id":"a:2:32026:9229-0:2781:2145","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:353:2958":{"id":"0:353:2958","crate_id":0,"name":"to_utc","span":{"filename":"src/datetime/mod.rs","begin":[362,4],"end":[364,5]},"visibility":"public","docs":"Turn this `DateTime` into a `DateTime<Utc>`, dropping the offset and associated timezone\ninformation.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2587:3560":{"id":"0:2587:3560","crate_id":0,"name":"NotEnough","span":{"filename":"src/format/mod.rs","begin":[411,4],"end":[411,13]},"visibility":"default","docs":"Given set of fields is not enough to make a requested date and time value.\n\nNote that there *may* be a case that given fields constrain the possible values so much\nthat there is a unique possible value. Chrono only tries to be correct for\nmost useful sets of fields however, as such constraint solving can be expensive.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:32026:9229-0:2164:2134":{"id":"a:2:32026:9229-0:2164:2134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:953":{"id":"0:953","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[449,0],"end":[454,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","source","type_id","cause","provide"],"trait":{"name":"Error","id":"2:2898:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:954:2525"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1022":{"id":"0:1022","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[135,0],"end":[140,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1023:1053"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:8105-0:2251:2654":{"id":"b:2:8105-0:2251:2654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8101:166","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:8107:174","2:8108:9013","2:8109:851"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"a:2:31969:237-0:2692:2148":{"id":"a:2:31969:237-0:2692:2148","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:207:2172":{"id":"0:207:2172","crate_id":0,"name":"month","span":{"filename":"src/date.rs","begin":[398,4],"end":[400,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:2762":{"id":"0:184:2762","crate_id":0,"name":"checked_sub_signed","span":{"filename":"src/date.rs","begin":[275,4],"end":[278,5]},"visibility":"public","docs":"Subtracts given `TimeDelta` from the current date.\n\nReturns `None` when it will result in overflow.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:424:2802":{"id":"0:424:2802","crate_id":0,"name":"iso_week","span":{"filename":"src/datetime/mod.rs","begin":[997,4],"end":[999,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1018":{"id":"0:1018","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[44,0],"end":[124,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2612:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1019:5285","0:1020:5292","0:1021:2403"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2232:2905":{"id":"0:2232:2905","crate_id":0,"name":"timestamp","span":{"filename":"src/format/parsed.rs","begin":[98,4],"end":[98,30]},"visibility":"public","docs":"The number of non-leap seconds since the midnight UTC on January 1, 1970.\n\nThis can be off by one if [`second`](#structfield.second) is 60 (a leap second).","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}}}},"0:2073:8550":{"id":"0:2073:8550","crate_id":0,"name":"as_u32","span":{"filename":"src/month.rs","begin":[239,4],"end":[241,5]},"visibility":"public","docs":"Returns the total number of months in the `Months` instance.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:887:2839":{"id":"0:887:2839","crate_id":0,"name":"parse","span":{"filename":"src/format/strftime.rs","begin":[333,4],"end":[340,5]},"visibility":"public","docs":"Parse format string into a `Vec` of formatting [`Item`]'s.\n\nIf you need to format or parse multiple values with the same format string, it is more\nefficient to convert it to a `Vec` of formatting [`Item`]'s than to re-parse the format\nstring on every use.\n\nThe `format_with_items` methods on [`DateTime`], [`NaiveDateTime`], [`NaiveDate`] and\n[`NaiveTime`] accept the result for formatting. [`format::parse()`] can make use of it for\nparsing.\n\n[`DateTime`]: crate::DateTime::format_with_items\n[`NaiveDateTime`]: crate::NaiveDateTime::format_with_items\n[`NaiveDate`]: crate::NaiveDate::format_with_items\n[`NaiveTime`]: crate::NaiveTime::format_with_items\n[`format::parse()`]: crate::format::parse()\n\n# Errors\n\nReturns an error if the format string contains an invalid or unrecognized formatting\nspecifier.\n\n# Example\n\n```\nuse chrono::format::{parse, Parsed, StrftimeItems};\nuse chrono::NaiveDate;\n\nlet fmt_items = StrftimeItems::new(\"%e %b %Y %k.%M\").parse()?;\nlet datetime = NaiveDate::from_ymd_opt(2023, 7, 11).unwrap().and_hms_opt(9, 0, 0).unwrap();\n\n// Formatting\nassert_eq!(\n    datetime.format_with_items(fmt_items.as_slice().iter()).to_string(),\n    \"11 Jul 2023  9.00\"\n);\n\n// Parsing\nlet mut parsed = Parsed::new();\nparse(&mut parsed, \"11 Jul 2023  9.00\", fmt_items.as_slice().iter())?;\nlet parsed_dt = parsed.to_naive_datetime_with_offset(0)?;\nassert_eq!(parsed_dt, datetime);\n# Ok::<(), chrono::ParseError>(())\n```","links":{"`Item`":"0:2525:174","crate::NaiveTime::format_with_items":"0:1482:2782","crate::NaiveDate::format_with_items":"0:1072:2782","crate::DateTime::format_with_items":"0:408:2782","crate::NaiveDateTime::format_with_items":"0:1245:2782","crate::format::parse()":"0:779:2839"},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7056:263","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3158:793":{"id":"0:3158:793","crate_id":0,"name":"hash","span":{"filename":"src/weekday.rs","begin":[32,44],"end":[32,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2135":{"id":"0:2135","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,22],"end":[52,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2887:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2136:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2137":{"id":"0:2137","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,31],"end":[52,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32026:9229-0:2187:2140":{"id":"a:2:32026:9229-0:2187:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1346:60":{"id":"0:1346:60","crate_id":0,"name":"default","span":{"filename":"src/naive/datetime/mod.rs","begin":[2177,4],"end":[2179,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1943:2724":{"id":"0:1943:2724","crate_id":0,"name":"and_hms_micro_opt","span":{"filename":"src/offset/mod.rs","begin":[153,4],"end":[166,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nPropagates any error. Ambiguous result would be discarded.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["micro",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164:2713":{"id":"0:164:2713","crate_id":0,"name":"and_hms_milli","span":{"filename":"src/date.rs","begin":[121,4],"end":[123,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nPanics on invalid hour, minute, second and/or millisecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"Use and_hms_milli_opt() instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"Use and_hms_milli_opt() instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["milli",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:548":{"id":"0:548","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1618,0],"end":[1635,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SystemTime","id":"1:9197:2837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:549:755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:439":{"id":"0:439","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1114,0],"end":[1194,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["num_seconds_from_midnight","hour12"],"trait":{"name":"Timelike","id":"0:2106:2143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:441:2702","0:442:3177","0:443:3178","0:444:3179","0:445:3183","0:447:3187","0:449:3193","0:451:3200"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31969:237-0:2151:2130":{"id":"a:2:31969:237-0:2151:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:177:2747":{"id":"0:177:2747","crate_id":0,"name":"pred_opt","span":{"filename":"src/date.rs","begin":[234,4],"end":[236,5]},"visibility":"public","docs":"Makes a new `Date` for the prior date.\n\nReturns `None` when `self` is the first representable date.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1973:7443":{"id":"0:1973:7443","crate_id":0,"name":"offset_from_utc_date","span":{"filename":"src/offset/mod.rs","begin":[530,4],"end":[530,68]},"visibility":"default","docs":"Creates the offset for given UTC `NaiveDate`. This cannot fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:1950:2151","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13098:39373":{"id":"2:13098:39373","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13097:39370"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43646:8975","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:42352":{"id":"5:5600:42352","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7633:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2036:3653":{"id":"0:2036:3653","crate_id":0,"name":"number_from_monday","span":{"filename":"src/weekday.rs","begin":[104,4],"end":[106,5]},"visibility":"public","docs":"Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)\n\n`w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`\n------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----\n`w.number_from_monday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 7","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1079:5675":{"id":"0:1079:5675","crate_id":0,"name":"iter_weeks","span":{"filename":"src/naive/date.rs","begin":[1413,4],"end":[1415,5]},"visibility":"public","docs":"Returns an iterator that steps by weeks across all representable dates.\n\n# Example\n\n```\n# use chrono::NaiveDate;\n\nlet expected = [\n    NaiveDate::from_ymd_opt(2016, 2, 27).unwrap(),\n    NaiveDate::from_ymd_opt(2016, 3, 5).unwrap(),\n    NaiveDate::from_ymd_opt(2016, 3, 12).unwrap(),\n    NaiveDate::from_ymd_opt(2016, 3, 19).unwrap(),\n];\n\nlet mut count = 0;\nfor (idx, d) in NaiveDate::from_ymd_opt(2016, 2, 27).unwrap().iter_weeks().take(4).enumerate() {\n   assert_eq!(d, expected[idx]);\n   count += 1;\n}\nassert_eq!(count, 4);\n\nfor d in NaiveDate::from_ymd_opt(2016, 3, 19).unwrap().iter_weeks().rev().take(4) {\n    count -= 1;\n    assert_eq!(d, expected[count]);\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:935-0:2213:2843":{"id":"0:935-0:2213:2843","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[69,0],"end":[69,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"parsed::Parsed","name":"Parsed","id":"0:2213:2843","glob":false}}},"b:2:2839-0:2637:2147":{"id":"b:2:2839-0:2637:2147","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2319:3389":{"id":"0:2319:3389","crate_id":0,"name":"Day","span":{"filename":"src/format/mod.rs","begin":[119,4],"end":[119,7]},"visibility":"default","docs":"Day of the month (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:3671-0:2187:2140":{"id":"b:2:3671-0:2187:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2763:2149":{"id":"0:2763:2149","crate_id":0,"name":"NaiveTime","span":{"filename":"src/naive/time/mod.rs","begin":[212,0],"end":[215,1]},"visibility":"public","docs":"ISO 8601 time without timezone.\nAllows for the nanosecond precision and optional leap second representation.\n\n# Leap Second Handling\n\nSince 1960s, the manmade atomic clock has been so accurate that\nit is much more accurate than Earth's own motion.\nIt became desirable to define the civil time in terms of the atomic clock,\nbut that risks the desynchronization of the civil time from Earth.\nTo account for this, the designers of the Coordinated Universal Time (UTC)\nmade that the UTC should be kept within 0.9 seconds of the observed Earth-bound time.\nWhen the mean solar day is longer than the ideal (86,400 seconds),\nthe error slowly accumulates and it is necessary to add a **leap second**\nto slow the UTC down a bit.\n(We may also remove a second to speed the UTC up a bit, but it never happened.)\nThe leap second, if any, follows 23:59:59 of June 30 or December 31 in the UTC.\n\nFast forward to the 21st century,\nwe have seen 26 leap seconds from January 1972 to December 2015.\nYes, 26 seconds. Probably you can read this paragraph within 26 seconds.\nBut those 26 seconds, and possibly more in the future, are never predictable,\nand whether to add a leap second or not is known only before 6 months.\nInternet-based clocks (via NTP) do account for known leap seconds,\nbut the system API normally doesn't (and often can't, with no network connection)\nand there is no reliable way to retrieve leap second information.\n\nChrono does not try to accurately implement leap seconds; it is impossible.\nRather, **it allows for leap seconds but behaves as if there are *no other* leap seconds.**\nVarious operations will ignore any possible leap second(s)\nexcept when any of the operands were actually leap seconds.\n\nIf you cannot tolerate this behavior,\nyou must use a separate `TimeZone` for the International Atomic Time (TAI).\nTAI is like UTC but has no leap seconds, and thus slightly differs from UTC.\nChrono does not yet provide such implementation, but it is planned.\n\n## Representing Leap Seconds\n\nThe leap second is indicated via fractional seconds more than 1 second.\nThis makes possible to treat a leap second as the prior non-leap second\nif you don't care about sub-second accuracy.\nYou should use the proper formatting to get the raw leap second.\n\nAll methods accepting fractional seconds will accept such values.\n\n```\nuse chrono::{NaiveDate, NaiveTime, Utc};\n\nlet t = NaiveTime::from_hms_milli_opt(8, 59, 59, 1_000).unwrap();\n\nlet dt1 = NaiveDate::from_ymd_opt(2015, 7, 1).unwrap().and_hms_micro_opt(8, 59, 59, 1_000_000).unwrap();\n\nlet dt2 = NaiveDate::from_ymd_opt(2015, 6, 30).unwrap().and_hms_nano_opt(23, 59, 59, 1_000_000_000).unwrap().and_local_timezone(Utc).unwrap();\n# let _ = (t, dt1, dt2);\n```\n\nNote that the leap second can happen anytime given an appropriate time zone;\n2015-07-01 01:23:60 would be a proper leap second if UTC+01:24 had existed.\nPractically speaking, though, by the time of the first leap second on 1972-06-30,\nevery time zone offset around the world has standardized to the 5-minute alignment.\n\n## Date And Time Arithmetics\n\nAs a concrete example, let's assume that `03:00:60` and `04:00:60` are leap seconds.\nIn reality, of course, leap seconds are separated by at least 6 months.\nWe will also use some intuitive concise notations for the explanation.\n\n`Time + TimeDelta`\n(short for [`NaiveTime::overflowing_add_signed`](#method.overflowing_add_signed)):\n\n- `03:00:00 + 1s = 03:00:01`.\n- `03:00:59 + 60s = 03:01:59`.\n- `03:00:59 + 61s = 03:02:00`.\n- `03:00:59 + 1s = 03:01:00`.\n- `03:00:60 + 1s = 03:01:00`.\n  Note that the sum is identical to the previous.\n- `03:00:60 + 60s = 03:01:59`.\n- `03:00:60 + 61s = 03:02:00`.\n- `03:00:60.1 + 0.8s = 03:00:60.9`.\n\n`Time - TimeDelta`\n(short for [`NaiveTime::overflowing_sub_signed`](#method.overflowing_sub_signed)):\n\n- `03:00:00 - 1s = 02:59:59`.\n- `03:01:00 - 1s = 03:00:59`.\n- `03:01:00 - 60s = 03:00:00`.\n- `03:00:60 - 60s = 03:00:00`.\n  Note that the result is identical to the previous.\n- `03:00:60.7 - 0.4s = 03:00:60.3`.\n- `03:00:60.7 - 0.9s = 03:00:59.8`.\n\n`Time - Time`\n(short for [`NaiveTime::signed_duration_since`](#method.signed_duration_since)):\n\n- `04:00:00 - 03:00:00 = 3600s`.\n- `03:01:00 - 03:00:00 = 60s`.\n- `03:00:60 - 03:00:00 = 60s`.\n  Note that the difference is identical to the previous.\n- `03:00:60.6 - 03:00:59.4 = 1.2s`.\n- `03:01:00 - 03:00:59.8 = 0.2s`.\n- `03:01:00 - 03:00:60.5 = 0.5s`.\n  Note that the difference is larger than the previous,\n  even though the leap second clearly follows the previous whole second.\n- `04:00:60.9 - 03:00:60.1 =\n  (04:00:60.9 - 04:00:00) + (04:00:00 - 03:01:00) + (03:01:00 - 03:00:60.1) =\n  60.9s + 3540s + 0.9s = 3601.8s`.\n\nIn general,\n\n- `Time + TimeDelta` unconditionally equals to `TimeDelta + Time`.\n\n- `Time - TimeDelta` unconditionally equals to `Time + (-TimeDelta)`.\n\n- `Time1 - Time2` unconditionally equals to `-(Time2 - Time1)`.\n\n- Associativity does not generally hold, because\n  `(Time + TimeDelta1) - TimeDelta2` no longer equals to `Time + (TimeDelta1 - TimeDelta2)`\n  for two positive durations.\n\n    - As a special case, `(Time + TimeDelta) - TimeDelta` also does not equal to `Time`.\n\n    - If you can assume that all durations have the same sign, however,\n      then the associativity holds:\n      `(Time + TimeDelta1) + TimeDelta2` equals to `Time + (TimeDelta1 + TimeDelta2)`\n      for two positive durations.\n\n## Reading And Writing Leap Seconds\n\nThe \"typical\" leap seconds on the minute boundary are\ncorrectly handled both in the formatting and parsing.\nThe leap second in the human-readable representation\nwill be represented as the second part being 60, as required by ISO 8601.\n\n```\nuse chrono::{Utc, NaiveDate};\n\nlet dt = NaiveDate::from_ymd_opt(2015, 6, 30).unwrap().and_hms_milli_opt(23, 59, 59, 1_000).unwrap().and_local_timezone(Utc).unwrap();\nassert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:59:60Z\");\n```\n\nThere are hypothetical leap seconds not on the minute boundary nevertheless supported by Chrono.\nThey are allowed for the sake of completeness and consistency; there were several \"exotic\" time\nzone offsets with fractional minutes prior to UTC after all.\nFor such cases the human-readable representation is ambiguous and would be read back to the next\nnon-leap second.\n\nA `NaiveTime` with a leap second that is not on a minute boundary can only be created from a\n[`DateTime`](crate::DateTime) with fractional minutes as offset, or using\n[`Timelike::with_nanosecond()`].\n\n```\nuse chrono::{FixedOffset, NaiveDate, TimeZone};\n\nlet paramaribo_pre1945 = FixedOffset::east_opt(-13236).unwrap(); // -03:40:36\nlet leap_sec_2015 =\n    NaiveDate::from_ymd_opt(2015, 6, 30).unwrap().and_hms_milli_opt(23, 59, 59, 1_000).unwrap();\nlet dt1 = paramaribo_pre1945.from_utc_datetime(&leap_sec_2015);\nassert_eq!(format!(\"{:?}\", dt1), \"2015-06-30T20:19:24-03:40:36\");\nassert_eq!(format!(\"{:?}\", dt1.time()), \"20:19:24\");\n\nlet next_sec = NaiveDate::from_ymd_opt(2015, 7, 1).unwrap().and_hms_opt(0, 0, 0).unwrap();\nlet dt2 = paramaribo_pre1945.from_utc_datetime(&next_sec);\nassert_eq!(format!(\"{:?}\", dt2), \"2015-06-30T20:19:24-03:40:36\");\nassert_eq!(format!(\"{:?}\", dt2.time()), \"20:19:24\");\n\nassert!(dt1.time() != dt2.time());\nassert!(dt1.time().to_string() == dt2.time().to_string());\n```\n\nSince Chrono alone cannot determine any existence of leap seconds,\n**there is absolutely no guarantee that the leap second read has actually happened**.","links":{"crate::DateTime":"0:2171:2139","`Timelike::with_nanosecond()`":"0:2115:3200"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1462","a:2:41605:9275-0:2763:2149","a:2:3058:246-0:2763:2149","a:2:31969:237-0:2763:2149","a:2:41604:9276-0:2763:2149","a:2:32026:9229-0:2763:2149","b:0:2000-0:2763:2149","b:2:2563-0:2763:2149","b:2:3671-0:2763:2149","b:2:2835-0:2763:2149","b:2:2839-0:2763:2149","b:2:2850-0:2763:2149","b:2:2560-0:2763:2149","b:2:2845-0:2763:2149","b:5:725-0:2763:2149","b:5:5869-0:2763:2149","0:1519","0:2766","0:2776","0:2767","0:2769","0:1493","0:2774","0:1524","0:1532","0:1526","0:2778","0:2771","0:1537","0:1521","0:1544","0:1529","0:1535","0:1503","0:1506","0:1508","0:2779","0:1516","0:1513","0:1511"]}}},"b:2:2560-0:2360:3420":{"id":"b:2:2560-0:2360:3420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2222:3647":{"id":"0:2222:3647","crate_id":0,"name":"week_from_mon","span":{"filename":"src/format/parsed.rs","begin":[65,4],"end":[65,34]},"visibility":"public","docs":"Week number, where the week 1 starts at the first Monday of January\n(0--53, 1--53 or 1--52 depending on the year).","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}}}},"0:2097:2802":{"id":"0:2097:2802","crate_id":0,"name":"iso_week","span":{"filename":"src/traits.rs","begin":[81,4],"end":[81,34]},"visibility":"default","docs":"Returns the ISO week.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:2006:137":{"id":"0:2006:137","crate_id":0,"name":"Err","span":{"filename":"src/round.rs","begin":[102,4],"end":[102,32]},"visibility":"default","docs":"Error that can occur in rounding or truncating","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"std::error::Error","id":"2:2898:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}}},"b:2:2850-0:2461:3492":{"id":"b:2:2850-0:2461:3492","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3671-0:3125:2144":{"id":"b:2:3671-0:3125:2144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1462":{"id":"0:1462","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[233,0],"end":[860,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1463:6998","0:1464:2708","0:1465:7012","0:1466:2717","0:1467:7024","0:1468:2726","0:1469:7036","0:1470:2735","0:1471:7050","0:1472:6195","0:1473:3132","0:1474:2840","0:1477:6333","0:1478:6369","0:1479:2767","0:1482:2782","0:1486:739","0:1491:2382"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13125:35760":{"id":"2:13125:35760","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12757:8930","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::split":"2:13119:34330"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43381:8961","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:8946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:3252:2209":{"id":"b:2:2835-0:3252:2209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3671-0:2213:2843":{"id":"b:2:3671-0:2213:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2561:726":{"id":"0:2561:726","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[325,31],"end":[325,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:2187:2140":{"id":"a:2:3058:246-0:2187:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2196:3004":{"id":"0:2196:3004","crate_id":0,"name":"AutoSi","span":{"filename":"src/format/formatting.rs","begin":[526,4],"end":[526,10]},"visibility":"default","docs":"Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to display all available\nnon-zero sub-second digits.  This corresponds to [Fixed::Nanosecond].","links":{"Fixed::Nanosecond":"0:2385:3412"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:31969:237-0:2673:5261":{"id":"a:2:31969:237-0:2673:5261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:811":{"id":"0:811","crate_id":0,"name":null,"span":{"filename":"src/format/parse.rs","begin":[523,0],"end":[534,1]},"visibility":"default","docs":"Accepts a relaxed form of RFC3339.\nA space or a 'T' are acepted as the separator between the date and time\nparts. Additional spaces are allowed between each component.\n\nAll of these examples are equivalent:\n```\n# use chrono::{DateTime, offset::FixedOffset};\n\"2012-12-12T12:12:12Z\".parse::<DateTime<FixedOffset>>()?;\n\"2012-12-12 12:12:12Z\".parse::<DateTime<FixedOffset>>()?;\n\"2012-  12-12T12:  12:12Z\".parse::<DateTime<FixedOffset>>()?;\n# Ok::<(), chrono::ParseError>(())\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12717:3263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:812:137","0:813:3264"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:691:3969":{"id":"0:691:3969","crate_id":0,"name":"set_year_mod_100","span":{"filename":"src/format/parsed.rs","begin":[148,4],"end":[153,5]},"visibility":"public","docs":"Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2247:793":{"id":"0:2247:793","crate_id":0,"name":"hash","span":{"filename":"src/format/parsed.rs","begin":[20,47],"end":[20,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:740:3107":{"id":"0:740:3107","crate_id":0,"name":"to_datetime","span":{"filename":"src/format/parsed.rs","begin":[626,4],"end":[641,5]},"visibility":"public","docs":"Returns a parsed timezone-aware date and time out of given fields.\n\nThis method is able to determine the combined date and time\nfrom date and time fields or a single [`timestamp`](#structfield.timestamp) field,\nplus a time zone offset.\nEither way those fields have to be consistent to each other.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1154:726":{"id":"0:1154:726","crate_id":0,"name":"fmt","span":{"filename":"src/naive/date.rs","begin":[2190,4],"end":[2207,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1068:2760":{"id":"0:1068:2760","crate_id":0,"name":"checked_add_signed","span":{"filename":"src/naive/date.rs","begin":[1157,4],"end":[1163,5]},"visibility":"public","docs":"Adds the number of whole days in the given `TimeDelta` to the current date.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveDate};\n\nlet d = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap();\nassert_eq!(d.checked_add_signed(TimeDelta::days(40)),\n           Some(NaiveDate::from_ymd_opt(2015, 10, 15).unwrap()));\nassert_eq!(d.checked_add_signed(TimeDelta::days(-40)),\n           Some(NaiveDate::from_ymd_opt(2015, 7, 27).unwrap()));\nassert_eq!(d.checked_add_signed(TimeDelta::days(1_000_000_000)), None);\nassert_eq!(d.checked_add_signed(TimeDelta::days(-1_000_000_000)), None);\nassert_eq!(NaiveDate::MAX.checked_add_signed(TimeDelta::days(1)), None);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:331:2157":{"id":"0:331:2157","crate_id":0,"name":"MAX_DATETIME","span":{"filename":"src/datetime/mod.rs","begin":[69,0],"end":[69,65]},"visibility":"public","docs":"The maximum possible `DateTime<Utc>`.","links":{},"attrs":["#[deprecated(since = \"0.4.20\", note = \"Use DateTime::MAX_UTC instead\")]"],"deprecation":{"since":"0.4.20","note":"Use DateTime::MAX_UTC instead"},"inner":{"constant":{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"expr":"DateTime<Utc>::MAX_UTC","value":null,"is_literal":false}}},"0:2331:3400":{"id":"0:2331:3400","crate_id":0,"name":"Ordinal","span":{"filename":"src/format/mod.rs","begin":[131,4],"end":[131,11]},"visibility":"default","docs":"Day of the year (FW=PW=3).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1940:2692":{"id":"0:1940:2692","crate_id":0,"name":"and_time","span":{"filename":"src/offset/mod.rs","begin":[100,4],"end":[107,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.\n\nPropagates any error. Ambiguous result would be discarded.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["time",{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:2304:3372":{"id":"a:2:3058:246-0:2304:3372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:513:1569":{"id":"0:513:1569","crate_id":0,"name":"sub","span":{"filename":"src/datetime/mod.rs","begin":[1449,4],"end":[1453,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:499:1569":{"id":"0:499:1569","crate_id":0,"name":"sub","span":{"filename":"src/datetime/mod.rs","begin":[1373,4],"end":[1375,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3215:726":{"id":"0:3215:726","crate_id":0,"name":"fmt","span":{"filename":"src/month.rs","begin":[31,37],"end":[31,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13075:4180":{"id":"2:13075:4180","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12305:7962"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2692:2148":{"id":"0:2692:2148","crate_id":0,"name":"NaiveDateTime","span":{"filename":"src/naive/datetime/mod.rs","begin":[85,0],"end":[88,1]},"visibility":"public","docs":"ISO 8601 combined date and time without timezone.\n\n# Example\n\n`NaiveDateTime` is commonly created from [`NaiveDate`].\n\n```\nuse chrono::{NaiveDate, NaiveDateTime};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2016, 7, 8).unwrap().and_hms_opt(9, 10, 11).unwrap();\n# let _ = dt;\n```\n\nYou can use typical [date-like](Datelike) and [time-like](Timelike) methods,\nprovided that relevant traits are in the scope.\n\n```\n# use chrono::{NaiveDate, NaiveDateTime};\n# let dt: NaiveDateTime = NaiveDate::from_ymd_opt(2016, 7, 8).unwrap().and_hms_opt(9, 10, 11).unwrap();\nuse chrono::{Datelike, Timelike, Weekday};\n\nassert_eq!(dt.weekday(), Weekday::Fri);\nassert_eq!(dt.num_seconds_from_midnight(), 33011);\n```","links":{"Timelike":"0:2106:2143","`NaiveDate`":"0:2637:2147","Datelike":"0:2087:2141"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1212","a:2:41605:9275-0:2692:2148","a:2:3058:246-0:2692:2148","a:2:31969:237-0:2692:2148","a:2:41604:9276-0:2692:2148","a:2:32026:9229-0:2692:2148","b:0:2000-0:2692:2148","b:2:2563-0:2692:2148","b:2:3671-0:2692:2148","b:2:2835-0:2692:2148","b:2:2839-0:2692:2148","b:2:2850-0:2692:2148","b:2:2560-0:2692:2148","b:2:2845-0:2692:2148","b:5:725-0:2692:2148","b:5:5869-0:2692:2148","0:1318","0:1283","0:1306","0:1296","0:2014","0:1339","0:1257","0:1320","0:2705","0:1341","0:2708","0:1299","0:2698","0:1331","0:2696","0:2703","0:1302","0:1312","0:1304","0:1325","0:1135","0:1322","0:1315","0:1259","0:1334","0:1345","0:2695","0:2707","0:1328","0:2700","0:1309","0:1337"]}}},"0:2373:3429":{"id":"0:2373:3429","crate_id":0,"name":"ShortMonthName","span":{"filename":"src/format/mod.rs","begin":[176,4],"end":[176,18]},"visibility":"default","docs":"Abbreviated month names.\n\nPrints a three-letter-long name in the title case, reads the same name in any case.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1301:295":{"id":"0:1301:295","crate_id":0,"name":"add","span":{"filename":"src/naive/datetime/mod.rs","begin":[1701,4],"end":[1705,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1609:2150":{"id":"0:1609:2150","crate_id":0,"name":"Offset","span":{"filename":"src/offset/fixed.rs","begin":[130,4],"end":[130,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2285:191":{"id":"0:2285:191","crate_id":0,"name":"None","span":{"filename":"src/format/mod.rs","begin":[80,4],"end":[80,8]},"visibility":"default","docs":"No padding.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:3671-0:3057:2135":{"id":"b:2:3671-0:3057:2135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2201:458":{"id":"0:2201:458","crate_id":0,"name":"clone","span":{"filename":"src/format/formatting.rs","begin":[509,9],"end":[509,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2499:667":{"id":"0:2499:667","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[293,29],"end":[293,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1474:2840":{"id":"0:1474:2840","crate_id":0,"name":"parse_and_remainder","span":{"filename":"src/naive/time/mod.rs","begin":[560,4],"end":[564,5]},"visibility":"public","docs":"Parses a string from a user-specified format into a new `NaiveTime` value, and a slice with\nthe remaining portion of the string.\nSee the [`format::strftime` module](crate::format::strftime)\non the supported escape sequences.\n\nSimilar to [`parse_from_str`](#method.parse_from_str).\n\n# Example\n\n```rust\n# use chrono::{NaiveTime};\nlet (time, remainder) = NaiveTime::parse_and_remainder(\n    \"3h4m33s trailing text\", \"%-Hh%-Mm%-Ss\").unwrap();\nassert_eq!(time, NaiveTime::from_hms_opt(3, 4, 33).unwrap());\nassert_eq!(remainder, \" trailing text\");\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1917:2150":{"id":"0:1917:2150","crate_id":0,"name":"Offset","span":{"filename":"src/offset/utc.rs","begin":[117,4],"end":[117,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1213:1053":{"id":"0:1213:1053","crate_id":0,"name":"new","span":{"filename":"src/naive/datetime/mod.rs","begin":[108,4],"end":[110,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from date and time components.\nEquivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)\nand many other helper constructors on `NaiveDate`.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveTime, NaiveDateTime};\n\nlet d = NaiveDate::from_ymd_opt(2015, 6, 3).unwrap();\nlet t = NaiveTime::from_hms_milli_opt(12, 34, 56, 789).unwrap();\n\nlet dt = NaiveDateTime::new(d, t);\nassert_eq!(dt.date(), d);\nassert_eq!(dt.time(), t);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["time",{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1504:199":{"id":"0:1504:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/time/mod.rs","begin":[1136,4],"end":[1136,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2348":{"id":"0:2348","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[100,9],"end":[100,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2349:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3160:2171":{"id":"0:3160:2171","crate_id":0,"name":"ParseWeekdayError","span":{"filename":"src/weekday.rs","begin":[231,0],"end":[233,1]},"visibility":"public","docs":"An error resulting from reading `Weekday` value with `FromStr`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:41605:9275-0:3160:2171","a:2:3058:246-0:3160:2171","a:2:31969:237-0:3160:2171","a:2:41604:9276-0:3160:2171","a:2:32026:9229-0:3160:2171","b:2:2563-0:3160:2171","b:2:3671-0:3160:2171","b:2:2835-0:3160:2171","b:2:2839-0:3160:2171","b:2:2850-0:3160:2171","b:2:2560-0:3160:2171","b:2:2845-0:3160:2171","b:5:725-0:3160:2171","b:5:5869-0:3160:2171","0:2052","0:3165","0:3164","0:2050","0:3162","0:3167","0:2049"]}}},"0:427:2804":{"id":"0:427:2804","crate_id":0,"name":"with_month","span":{"filename":"src/datetime/mod.rs","begin":[1029,4],"end":[1031,5]},"visibility":"default","docs":"Makes a new `DateTime` with the month number (starting from 1) changed.\n\nSee also the [`NaiveDate::with_month`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist.\n- The value for `month` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveDate::with_month`":"0:1103:2804"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1463:6998":{"id":"0:1463:6998","crate_id":0,"name":"from_hms","span":{"filename":"src/naive/time/mod.rs","begin":[245,4],"end":[247,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from hour, minute and second.\n\nNo [leap second](#leap-second-handling) is allowed here;\nuse `NaiveTime::from_hms_*` methods with a subsecond parameter instead.\n\n# Panics\n\nPanics on invalid hour, minute and/or second.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `from_hms_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_hms_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1312":{"id":"0:1312","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1857,0],"end":[1864,1]},"visibility":"default","docs":"Subtract `TimeDelta` from `NaiveDateTime`.\n\nThis is the same as the addition with a negated `TimeDelta`.\n\nAs a part of Chrono's [leap second handling] the subtraction assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_sub_signed`] to get an `Option` instead.\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveDate};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nlet d = from_ymd(2016, 7, 8);\nlet hms = |h, m, s| d.and_hms_opt(h, m, s).unwrap();\nassert_eq!(hms(3, 5, 7) - TimeDelta::zero(),             hms(3, 5, 7));\nassert_eq!(hms(3, 5, 7) - TimeDelta::seconds(1),         hms(3, 5, 6));\nassert_eq!(hms(3, 5, 7) - TimeDelta::seconds(-1),        hms(3, 5, 8));\nassert_eq!(hms(3, 5, 7) - TimeDelta::seconds(3600 + 60), hms(2, 4, 7));\nassert_eq!(hms(3, 5, 7) - TimeDelta::seconds(86_400),\n           from_ymd(2016, 7, 7).and_hms_opt(3, 5, 7).unwrap());\nassert_eq!(hms(3, 5, 7) - TimeDelta::days(365),\n           from_ymd(2015, 7, 9).and_hms_opt(3, 5, 7).unwrap());\n\nlet hmsm = |h, m, s, milli| d.and_hms_milli_opt(h, m, s, milli).unwrap();\nassert_eq!(hmsm(3, 5, 7, 450) - TimeDelta::milliseconds(670), hmsm(3, 5, 6, 780));\n```\n\nLeap seconds are handled,\nbut the subtraction assumes that it is the only leap second happened.\n\n```\n# use chrono::{TimeDelta, NaiveDate};\n# let from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n# let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli_opt(h, m, s, milli).unwrap();\nlet leap = hmsm(3, 5, 59, 1_300);\nassert_eq!(leap - TimeDelta::zero(),            hmsm(3, 5, 59, 1_300));\nassert_eq!(leap - TimeDelta::milliseconds(200), hmsm(3, 5, 59, 1_100));\nassert_eq!(leap - TimeDelta::milliseconds(500), hmsm(3, 5, 59, 800));\nassert_eq!(leap - TimeDelta::seconds(60),       hmsm(3, 5, 0, 300));\nassert_eq!(leap - TimeDelta::days(1),\n           from_ymd(2016, 7, 7).and_hms_milli_opt(3, 6, 0, 300).unwrap());\n```\n\n[leap second handling]: crate::NaiveTime#leap-second-handling","links":{"crate::NaiveTime#leap-second-handling":"0:2763:2149","`NaiveDateTime::checked_sub_signed`":"0:1240:2762"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1313:199","0:1314:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:2781:2145":{"id":"b:5:725-0:2781:2145","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2560-0:2617:2163":{"id":"b:2:2560-0:2617:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1228:2918":{"id":"0:1228:2918","crate_id":0,"name":"timestamp_micros","span":{"filename":"src/naive/datetime/mod.rs","begin":[487,4],"end":[490,5]},"visibility":"public","docs":"Returns the number of non-leap *microseconds* since midnight on January 1, 1970.\n\nNote that this does *not* account for the timezone!\nThe true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet dt = NaiveDate::from_ymd_opt(1970, 1, 1).unwrap().and_hms_micro_opt(0, 0, 1, 444).unwrap();\nassert_eq!(dt.timestamp_micros(), 1_000_444);\n\nlet dt = NaiveDate::from_ymd_opt(2001, 9, 9).unwrap().and_hms_micro_opt(1, 46, 40, 555).unwrap();\nassert_eq!(dt.timestamp_micros(), 1_000_000_000_000_555);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1518:1569":{"id":"0:1518:1569","crate_id":0,"name":"sub","span":{"filename":"src/naive/time/mod.rs","begin":[1249,4],"end":[1251,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124-0:2763:2149":{"id":"0:124-0:2763:2149","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[486,46],"end":[486,55]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::NaiveTime","name":"NaiveTime","id":"0:2763:2149","glob":false}}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[675,0],"end":[679,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2887:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:378:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:488":{"id":"0:488","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1325,0],"end":[1334,1]},"visibility":"default","docs":"Add `FixedOffset` to the datetime value of `DateTime` (offset remains unchanged).\n\n# Panics\n\nPanics if the resulting date would be out of range.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:490:199","0:491:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:783:2840":{"id":"0:783:2840","crate_id":0,"name":"parse_and_remainder","span":{"filename":"src/format/parse.rs","begin":[271,0],"end":[281,1]},"visibility":"public","docs":"Tries to parse given string into `parsed` with given formatting items.\nReturns `Ok` with a slice of the unparsed remainder.\n\nThis particular date and time parser is:\n\n- Greedy. It will consume the longest possible prefix.\n  For example, `April` is always consumed entirely when the long month name is requested;\n  it equally accepts `Apr`, but prefers the longer prefix in this case.\n\n- Padding-agnostic (for numeric items).\n  The [`Pad`](./enum.Pad.html) field is completely ignored,\n  so one can prepend any number of zeroes before numbers.\n\n- (Still) obeying the intrinsic parsing width. This allows, for example, parsing `HHMMSS`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["parsed",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"super::Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["s",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"primitive":"str"}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"super::ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"super::Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116-0:2106:2143":{"id":"0:116-0:2106:2143","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[484,37],"end":[484,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Timelike","name":"Timelike","id":"0:2106:2143","glob":false}}},"0:2409:3476":{"id":"0:2409:3476","crate_id":0,"name":"RFC3339","span":{"filename":"src/format/mod.rs","begin":[245,4],"end":[245,11]},"visibility":"default","docs":"RFC 3339 & ISO 8601 date and time syntax.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1102:2803":{"id":"0:1102:2803","crate_id":0,"name":"with_year","span":{"filename":"src/naive/date.rs","begin":[1708,4],"end":[1717,5]},"visibility":"default","docs":"Makes a new `NaiveDate` with the year number changed, while keeping the same month and day.\n\n# Errors\n\nReturns `None` if the resulting date does not exist, or when the `NaiveDate` would be\nout of range.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_year(2016),\n           Some(NaiveDate::from_ymd_opt(2016, 9, 8).unwrap()));\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_year(-308),\n           Some(NaiveDate::from_ymd_opt(-308, 9, 8).unwrap()));\n```\n\nA leap day (February 29) is a good example that this method can return `None`.\n\n```\n# use chrono::{NaiveDate, Datelike};\nassert!(NaiveDate::from_ymd_opt(2016, 2, 29).unwrap().with_year(2015).is_none());\nassert!(NaiveDate::from_ymd_opt(2016, 2, 29).unwrap().with_year(2020).is_some());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2680":{"id":"0:2680","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2135,29],"end":[2135,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2681:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1945":{"id":"0:1945","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[191,0],"end":[204,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1947:1704"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3185:3611":{"id":"0:3185:3611","crate_id":0,"name":"June","span":{"filename":"src/month.rs","begin":[53,4],"end":[53,12]},"visibility":"default","docs":"June","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"5","value":"5"}}}},"b:2:2835-0:2213:2843":{"id":"b:2:2835-0:2213:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3216":{"id":"0:3216","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,44],"end":[31,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3217:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1970:2780":{"id":"0:1970:2780","crate_id":0,"name":"from_local_date","span":{"filename":"src/offset/mod.rs","begin":[499,4],"end":[504,5]},"visibility":"default","docs":"Converts the local `NaiveDate` to the timezone-aware `Date` if possible.","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]","#[deprecated(since = \"0.4.23\", note = \"use `from_local_datetime()` instead\")]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.23","note":"use `from_local_datetime()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3214":{"id":"0:3214","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,37],"end":[31,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3215:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1507:296":{"id":"0:1507:296","crate_id":0,"name":"add_assign","span":{"filename":"src/naive/time/mod.rs","begin":[1150,4],"end":[1152,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:399:3103":{"id":"0:399:3103","crate_id":0,"name":"parse_from_rfc2822","span":{"filename":"src/datetime/mod.rs","begin":[798,4],"end":[803,5]},"visibility":"public","docs":"Parses an RFC 2822 date-and-time string into a `DateTime<FixedOffset>` value.\n\nThis parses valid RFC 2822 datetime strings (such as `Tue, 1 Jul 2003 10:52:37 +0200`)\nand returns a new [`DateTime`] instance with the parsed timezone as the [`FixedOffset`].\n\nRFC 2822 is the internet message standard that specifies the representation of times in HTTP\nand email headers. It is the 2001 revision of RFC 822, and is itself revised as RFC 5322 in\n2008.\n\n# Support for the obsolete date format\n\n- A 2-digit year is interpreted to be a year in 1950-2049.\n- The standard allows comments and whitespace between many of the tokens. See [4.3] and\n  [Appendix A.5]\n- Single letter 'military' time zone names are parsed as a `-0000` offset.\n  They were defined with the wrong sign in RFC 822 and corrected in RFC 2822. But because\n  the meaning is now ambiguous, the standard says they should be be considered as `-0000`\n  unless there is out-of-band information confirming their meaning.\n  The exception is `Z`, which remains identical to `+0000`.\n\n[4.3]: https://www.rfc-editor.org/rfc/rfc2822#section-4.3\n[Appendix A.5]: https://www.rfc-editor.org/rfc/rfc2822#appendix-A.5\n\n# Example\n\n```\n# use chrono::{DateTime, FixedOffset, TimeZone};\nassert_eq!(\n    DateTime::parse_from_rfc2822(\"Wed, 18 Feb 2015 23:16:09 GMT\").unwrap(),\n    FixedOffset::east_opt(0).unwrap().with_ymd_and_hms(2015, 2, 18, 23, 16, 9).unwrap()\n);\n```","links":{"`DateTime`":"0:2171:2139","`FixedOffset`":"0:2781:2145"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2788":{"id":"0:2788","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[22,24],"end":[22,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2789:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13191:4229":{"id":"2:13191:4229","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31969:237-0:3169:2142":{"id":"a:2:31969:237-0:3169:2142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:31969:237-0:2617:2163":{"id":"a:2:31969:237-0:2617:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:180:2695":{"id":"0:180:2695","crate_id":0,"name":"timezone","span":{"filename":"src/date.rs","begin":[248,4],"end":[250,5]},"visibility":"public","docs":"Retrieves an associated time zone.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Tz"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:2781:2145":{"id":"b:2:2563-0:2781:2145","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2845-0:3057:2135":{"id":"b:2:2845-0:3057:2135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1924:2880":{"id":"0:1924:2880","crate_id":0,"name":"fix","span":{"filename":"src/offset/utc.rs","begin":[139,4],"end":[141,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:355:2968":{"id":"0:355:2968","crate_id":0,"name":"checked_add_months","span":{"filename":"src/datetime/mod.rs","begin":[392,4],"end":[397,5]},"visibility":"public","docs":"Adds given `Months` to the current date and time.\n\nUses the last day of the month if the day does not exist in the resulting month.\n\nSee [`NaiveDate::checked_add_months`] for more details on behavior.\n\n# Errors\n\nReturns `None` if:\n- The resulting date would be out of range.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveDate::checked_add_months`":"0:1044:2968"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:525:1569":{"id":"0:525:1569","crate_id":0,"name":"sub","span":{"filename":"src/datetime/mod.rs","begin":[1490,4],"end":[1492,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2652":{"id":"0:2652","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[190,53],"end":[190,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2653:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41605:9275-0:3160:2171":{"id":"a:2:41605:9275-0:3160:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41605:9275-0:2692:2148":{"id":"a:2:41605:9275-0:2692:2148","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3208:667":{"id":"0:3208:667","crate_id":0,"name":"eq","span":{"filename":"src/month.rs","begin":[31,9],"end":[31,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2688":{"id":"0:2688","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2135,58],"end":[2135,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3058:246-0:2251:2654":{"id":"a:2:3058:246-0:2251:2654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1565-0:2763:2149":{"id":"0:1565-0:2763:2149","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[513,48],"end":[513,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"naive::NaiveTime","name":"NaiveTime","id":"0:2763:2149","glob":false}}},"0:2538:1767":{"id":"0:2538:1767","crate_id":0,"name":"0","span":{"filename":"src/format/mod.rs","begin":[336,15],"end":[336,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Box","id":"5:294:3344","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}},"0:3132:4039":{"id":"0:3132:4039","crate_id":0,"name":"Wed","span":{"filename":"src/weekday.rs","begin":[48,4],"end":[48,11]},"visibility":"default","docs":"Wednesday.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"0:160:2692":{"id":"0:160:2692","crate_id":0,"name":"and_time","span":{"filename":"src/date.rs","begin":[87,4],"end":[90,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.\n\nReturns `None` on invalid datetime.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["time",{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1513":{"id":"0:1513","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1188,0],"end":[1195,1]},"visibility":"default","docs":"Add `FixedOffset` to `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the addition ignores integral number of days.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1514:199","0:1515:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2077":{"id":"0:2077","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[259,0],"end":[263,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2078:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1024:2154":{"id":"0:1024:2154","crate_id":0,"name":"MIN_DATE","span":{"filename":"src/naive/date.rs","begin":[204,0],"end":[204,47]},"visibility":"public","docs":"The minimum possible `NaiveDate` (January 1, 262145 BCE).","links":{},"attrs":["#[deprecated(since = \"0.4.20\", note = \"Use NaiveDate::MIN instead\")]"],"deprecation":{"since":"0.4.20","note":"Use NaiveDate::MIN instead"},"inner":{"constant":{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"NaiveDate::MIN","value":null,"is_literal":false}}},"b:2:2845-0:3160:2171":{"id":"b:2:2845-0:3160:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1316:199":{"id":"0:1316:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[1877,4],"end":[1877,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2850-0:2781:2145":{"id":"b:2:2850-0:2781:2145","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2035:2746":{"id":"0:2035:2746","crate_id":0,"name":"pred","span":{"filename":"src/weekday.rs","begin":[86,4],"end":[96,5]},"visibility":"public","docs":"The previous day in the week.\n\n`w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`\n----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----\n`w.pred()`: | `Sun` | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat`","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1241:2973":{"id":"0:1241:2973","crate_id":0,"name":"checked_sub_months","span":{"filename":"src/naive/datetime/mod.rs","begin":[912,4],"end":[914,5]},"visibility":"public","docs":"Subtracts given `Months` from the current date and time.\n\nUses the last day of the month if the day does not exist in the resulting month.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\nuse chrono::{Months, NaiveDate};\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1).unwrap().and_hms_opt(1, 0, 0).unwrap()\n        .checked_sub_months(Months::new(1)),\n    Some(NaiveDate::from_ymd_opt(2013, 12, 1).unwrap().and_hms_opt(1, 0, 0).unwrap())\n);\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1).unwrap().and_hms_opt(1, 0, 0).unwrap()\n        .checked_sub_months(Months::new(core::i32::MAX as u32 + 1)),\n    None\n);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:2798":{"id":"0:209:2798","crate_id":0,"name":"day","span":{"filename":"src/date.rs","begin":[406,4],"end":[408,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1927":{"id":"0:1927","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[150,0],"end":[154,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1928:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2233:1104":{"id":"0:2233:1104","crate_id":0,"name":"offset","span":{"filename":"src/format/parsed.rs","begin":[101,4],"end":[101,27]},"visibility":"public","docs":"Offset from the local time to UTC, in seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}}}},"b:2:2835-0:3223:2174":{"id":"b:2:2835-0:3223:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1214:3041":{"id":"0:1214:3041","crate_id":0,"name":"from_timestamp","span":{"filename":"src/naive/datetime/mod.rs","begin":[131,4],"end":[134,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` corresponding to a UTC date and time,\nfrom the number of non-leap seconds\nsince the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\nand the number of nanoseconds since the last whole non-leap second.\n\nFor a non-naive version of this function see [`TimeZone::timestamp`].\n\nThe nanosecond part can exceed 1,000,000,000 in order to represent a\n[leap second](NaiveTime#leap-second-handling), but only when `secs % 60 == 59`.\n(The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)\n\n# Panics\n\nPanics if the number of seconds would be out of range for a `NaiveDateTime` (more than\nca. 262,000 years away from common era), and panics on an invalid nanosecond (2 seconds or\nmore).","links":{"NaiveTime#leap-second-handling":"0:2763:2149","`TimeZone::timestamp`":"0:1960:2905"},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `from_timestamp_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_timestamp_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"i64"}],["nsecs",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1296":{"id":"0:1296","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1678,0],"end":[1685,1]},"visibility":"default","docs":"Add `TimeDelta` to `NaiveDateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_add_signed`] to get an `Option` instead.\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveDate};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nlet d = from_ymd(2016, 7, 8);\nlet hms = |h, m, s| d.and_hms_opt(h, m, s).unwrap();\nassert_eq!(hms(3, 5, 7) + TimeDelta::zero(),             hms(3, 5, 7));\nassert_eq!(hms(3, 5, 7) + TimeDelta::seconds(1),         hms(3, 5, 8));\nassert_eq!(hms(3, 5, 7) + TimeDelta::seconds(-1),        hms(3, 5, 6));\nassert_eq!(hms(3, 5, 7) + TimeDelta::seconds(3600 + 60), hms(4, 6, 7));\nassert_eq!(hms(3, 5, 7) + TimeDelta::seconds(86_400),\n           from_ymd(2016, 7, 9).and_hms_opt(3, 5, 7).unwrap());\nassert_eq!(hms(3, 5, 7) + TimeDelta::days(365),\n           from_ymd(2017, 7, 8).and_hms_opt(3, 5, 7).unwrap());\n\nlet hmsm = |h, m, s, milli| d.and_hms_milli_opt(h, m, s, milli).unwrap();\nassert_eq!(hmsm(3, 5, 7, 980) + TimeDelta::milliseconds(450), hmsm(3, 5, 8, 430));\n```\n\nLeap seconds are handled,\nbut the addition assumes that it is the only leap second happened.\n\n```\n# use chrono::{TimeDelta, NaiveDate};\n# let from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n# let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli_opt(h, m, s, milli).unwrap();\nlet leap = hmsm(3, 5, 59, 1_300);\nassert_eq!(leap + TimeDelta::zero(),             hmsm(3, 5, 59, 1_300));\nassert_eq!(leap + TimeDelta::milliseconds(-500), hmsm(3, 5, 59, 800));\nassert_eq!(leap + TimeDelta::milliseconds(500),  hmsm(3, 5, 59, 1_800));\nassert_eq!(leap + TimeDelta::milliseconds(800),  hmsm(3, 6, 0, 100));\nassert_eq!(leap + TimeDelta::seconds(10),        hmsm(3, 6, 9, 300));\nassert_eq!(leap + TimeDelta::seconds(-10),       hmsm(3, 5, 50, 300));\nassert_eq!(leap + TimeDelta::days(1),\n           from_ymd(2016, 7, 9).and_hms_milli_opt(3, 5, 59, 300).unwrap());\n```\n\n[leap second handling]: crate::NaiveTime#leap-second-handling","links":{"crate::NaiveTime#leap-second-handling":"0:2763:2149","`NaiveDateTime::checked_add_signed`":"0:1234:2760"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1297:199","0:1298:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1958:7389":{"id":"0:1958:7389","crate_id":0,"name":"isoywd","span":{"filename":"src/offset/mod.rs","begin":[320,4],"end":[322,5]},"visibility":"default","docs":"Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.\n\nThe time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),\nbut it will propagate to the `DateTime` values constructed via this date.\n\nPanics on the out-of-range date and/or invalid week number.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"use `from_local_datetime()` with a `NaiveDateTime` instead\")]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.23","note":"use `from_local_datetime()` with a `NaiveDateTime` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}],["week",{"primitive":"u32"}],["weekday",{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2125:726":{"id":"0:2125:726","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[599,4],"end":[601,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2691:465":{"id":"0:2691:465","crate_id":0,"name":"cmp","span":{"filename":"src/naive/date.rs","begin":[2135,62],"end":[2135,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1137":{"id":"0:1137","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2104,0],"end":[2119,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min_by","size_hint","copied","partial_cmp_by","count","try_find","is_partitioned","inspect","skip_while","step_by","sum","min_by_key","take","all","skip","cloned","eq_by","rposition","try_fold","by_ref","chain","take_while","intersperse","cmp","filter","any","ne","max_by","enumerate","le","is_sorted","unzip","try_for_each","try_collect","eq","map_while","lt","min","rev","intersperse_with","fold","max_by_key","max","is_sorted_by","array_chunks","reduce","collect_into","flat_map","flatten","gt","for_each","next_chunk","is_sorted_by_key","product","try_reduce","partition","last","map_windows","filter_map","advance_by","ge","find","partial_cmp","position","zip","__iterator_get_unchecked","map","cmp_by","find_map","partition_in_place","fuse","peekable","scan","nth","collect","cycle"],"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1138:174","0:1139:1067","0:1140:5876"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2156":{"id":"0:2156","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[575,16],"end":[575,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2157:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41605:9275-0:2187:2140":{"id":"a:2:41605:9275-0:2187:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3070":{"id":"0:3070","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[43,22],"end":[43,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3071:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:2763:2149":{"id":"b:5:725-0:2763:2149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3072":{"id":"0:3072","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[43,33],"end":[43,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2845-0:3064:2146":{"id":"b:2:2845-0:3064:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3671-0:3243:2173":{"id":"b:2:3671-0:3243:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1466:2717":{"id":"0:1466:2717","crate_id":0,"name":"from_hms_milli_opt","span":{"filename":"src/naive/time/mod.rs","begin":[318,4],"end":[326,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from hour, minute, second and millisecond.\n\nThe millisecond part is allowed to exceed 1,000,000,000 in order to represent a\n[leap second](#leap-second-handling), but only when `sec == 59`.\n\n# Errors\n\nReturns `None` on invalid hour, minute, second and/or millisecond.\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nlet from_hmsm_opt = NaiveTime::from_hms_milli_opt;\n\nassert!(from_hmsm_opt(0, 0, 0, 0).is_some());\nassert!(from_hmsm_opt(23, 59, 59, 999).is_some());\nassert!(from_hmsm_opt(23, 59, 59, 1_999).is_some()); // a leap second after 23:59:59\nassert!(from_hmsm_opt(24, 0, 0, 0).is_none());\nassert!(from_hmsm_opt(23, 60, 0, 0).is_none());\nassert!(from_hmsm_opt(23, 59, 60, 0).is_none());\nassert!(from_hmsm_opt(23, 59, 59, 2_000).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["milli",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1956:7383":{"id":"0:1956:7383","crate_id":0,"name":"yo","span":{"filename":"src/offset/mod.rs","begin":[283,4],"end":[285,5]},"visibility":"default","docs":"Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n\nThe time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),\nbut it will propagate to the `DateTime` values constructed via this date.\n\nPanics on the out-of-range date and/or invalid DOY.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"use `from_local_datetime()` with a `NaiveDateTime` instead\")]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.23","note":"use `from_local_datetime()` with a `NaiveDateTime` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2099:2804":{"id":"0:2099:2804","crate_id":0,"name":"with_month","span":{"filename":"src/traits.rs","begin":[164,4],"end":[164,53]},"visibility":"default","docs":"Makes a new value with the month number (starting from 1) changed.\n\n# Errors\n\nReturns `None` when:\n\n- The resulting date does not exist (for example `month(4)` when day of the month is 31).\n- In case of [`DateTime<Tz>`] if the resulting date and time fall within a timezone\n  transition such as from DST to standard time.\n- The value for `month` is out of range.\n\n[`DateTime<Tz>`]: crate::DateTime\n\n# Examples\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2023, 5, 12).unwrap().with_month(9).unwrap(),\n    NaiveDate::from_ymd_opt(2023, 9, 12).unwrap()\n);\n// Resulting date 2023-09-31 does not exist:\nassert!(NaiveDate::from_ymd_opt(2023, 5, 31).unwrap().with_month(9).is_none());\n```\n\nDon't combine multiple `Datelike::with_*` methods. The intermediate value may not exist.\n```\nuse chrono::{NaiveDate, Datelike};\n\nfn with_year_month(date: NaiveDate, year: i32, month: u32) -> Option<NaiveDate> {\n    date.with_year(year)?.with_month(month)\n}\nlet d = NaiveDate::from_ymd_opt(2020, 2, 29).unwrap();\nassert!(with_year_month(d, 2019, 1).is_none()); // fails because of invalid intermediate value\n\n// Correct version:\nfn with_year_month_fixed(date: NaiveDate, year: i32, month: u32) -> Option<NaiveDate> {\n    NaiveDate::from_ymd_opt(year, month, date.day())\n}\nlet d = NaiveDate::from_ymd_opt(2020, 2, 29).unwrap();\nassert_eq!(with_year_month_fixed(d, 2019, 1), NaiveDate::from_ymd_opt(2019, 1, 29));\n```","links":{"crate::DateTime":"0:2171:2139"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:85:619":{"id":"0:85:619","crate_id":0,"name":"div","span":{"filename":"src/time_delta.rs","begin":[503,4],"end":[517,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:460:667":{"id":"0:460:667","crate_id":0,"name":"eq","span":{"filename":"src/datetime/mod.rs","begin":[1201,4],"end":[1203,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41605:9275-0:2781:2145":{"id":"a:2:41605:9275-0:2781:2145","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:342:2918":{"id":"0:342:2918","crate_id":0,"name":"timestamp_micros","span":{"filename":"src/datetime/mod.rs","begin":[240,4],"end":[242,5]},"visibility":"public","docs":"Returns the number of non-leap-microseconds since January 1, 1970 UTC.\n\n# Example\n\n```\nuse chrono::{Utc, NaiveDate};\n\nlet dt = NaiveDate::from_ymd_opt(1970, 1, 1).unwrap().and_hms_micro_opt(0, 0, 1, 444).unwrap().and_local_timezone(Utc).unwrap();\nassert_eq!(dt.timestamp_micros(), 1_000_444);\n\nlet dt = NaiveDate::from_ymd_opt(2001, 9, 9).unwrap().and_hms_micro_opt(1, 46, 40, 555).unwrap().and_local_timezone(Utc).unwrap();\nassert_eq!(dt.timestamp_micros(), 1_000_000_000_000_555);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2415:458":{"id":"0:2415:458","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[171,9],"end":[171,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:363:2694":{"id":"0:363:2694","crate_id":0,"name":"naive_local","span":{"filename":"src/datetime/mod.rs","begin":[491,4],"end":[495,5]},"visibility":"public","docs":"Returns a view to the naive local datetime.\n\n# Panics\n\n[`DateTime`] internally stores the date and time in UTC with a [`NaiveDateTime`]. This\nmethod will panic if the offset from UTC would push the local datetime outside of the\nrepresentable range of a [`NaiveDateTime`].","links":{"`NaiveDateTime`":"0:2692:2148","`DateTime`":"0:2171:2139"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1149":{"id":"0:1149","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2155,0],"end":[2155,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:8192:5878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2766":{"id":"0:2766","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[204,9],"end":[204,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2850-0:3108:2169":{"id":"b:2:2850-0:3108:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2243:726":{"id":"0:2243:726","crate_id":0,"name":"fmt","span":{"filename":"src/format/parsed.rs","begin":[20,31],"end":[20,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:2673:5261":{"id":"a:2:32026:9229-0:2673:5261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13175:35768":{"id":"2:13175:35768","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:8930"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:8946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:3223:2174":{"id":"b:5:725-0:3223:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2850-0:2164:2134":{"id":"b:2:2850-0:2164:2134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41605:9275-0:2525:174":{"id":"a:2:41605:9275-0:2525:174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2132":{"id":"0:2132","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,9],"end":[52,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2133:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:2129:2131":{"id":"b:5:725-0:2129:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:472:793":{"id":"0:472:793","crate_id":0,"name":"hash","span":{"filename":"src/datetime/mod.rs","begin":[1236,4],"end":[1238,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1240:2762":{"id":"0:1240:2762","crate_id":0,"name":"checked_sub_signed","span":{"filename":"src/naive/datetime/mod.rs","begin":[874,4],"end":[884,5]},"visibility":"public","docs":"Subtracts given `TimeDelta` from the current date and time.\n\nAs a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),\nthe subtraction assumes that **there is no leap second ever**,\nexcept when the `NaiveDateTime` itself represents a leap second\nin which case the assumption becomes that **there is exactly a single leap second ever**.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveDate};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nlet d = from_ymd(2016, 7, 8);\nlet hms = |h, m, s| d.and_hms_opt(h, m, s).unwrap();\nassert_eq!(hms(3, 5, 7).checked_sub_signed(TimeDelta::zero()),\n           Some(hms(3, 5, 7)));\nassert_eq!(hms(3, 5, 7).checked_sub_signed(TimeDelta::seconds(1)),\n           Some(hms(3, 5, 6)));\nassert_eq!(hms(3, 5, 7).checked_sub_signed(TimeDelta::seconds(-1)),\n           Some(hms(3, 5, 8)));\nassert_eq!(hms(3, 5, 7).checked_sub_signed(TimeDelta::seconds(3600 + 60)),\n           Some(hms(2, 4, 7)));\nassert_eq!(hms(3, 5, 7).checked_sub_signed(TimeDelta::seconds(86_400)),\n           Some(from_ymd(2016, 7, 7).and_hms_opt(3, 5, 7).unwrap()));\n\nlet hmsm = |h, m, s, milli| d.and_hms_milli_opt(h, m, s, milli).unwrap();\nassert_eq!(hmsm(3, 5, 7, 450).checked_sub_signed(TimeDelta::milliseconds(670)),\n           Some(hmsm(3, 5, 6, 780)));\n```\n\nOverflow returns `None`.\n\n```\n# use chrono::{TimeDelta, NaiveDate};\n# let hms = |h, m, s| NaiveDate::from_ymd_opt(2016, 7, 8).unwrap().and_hms_opt(h, m, s).unwrap();\nassert_eq!(hms(3, 5, 7).checked_sub_signed(TimeDelta::days(1_000_000_000)), None);\n```\n\nLeap seconds are handled,\nbut the subtraction assumes that it is the only leap second happened.\n\n```\n# use chrono::{TimeDelta, NaiveDate};\n# let from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n# let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli_opt(h, m, s, milli).unwrap();\nlet leap = hmsm(3, 5, 59, 1_300);\nassert_eq!(leap.checked_sub_signed(TimeDelta::zero()),\n           Some(hmsm(3, 5, 59, 1_300)));\nassert_eq!(leap.checked_sub_signed(TimeDelta::milliseconds(200)),\n           Some(hmsm(3, 5, 59, 1_100)));\nassert_eq!(leap.checked_sub_signed(TimeDelta::milliseconds(500)),\n           Some(hmsm(3, 5, 59, 800)));\nassert_eq!(leap.checked_sub_signed(TimeDelta::seconds(60)),\n           Some(hmsm(3, 5, 0, 300)));\nassert_eq!(leap.checked_sub_signed(TimeDelta::days(1)),\n           Some(from_ymd(2016, 7, 7).and_hms_milli_opt(3, 6, 0, 300).unwrap()));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:276-0:155:2154":{"id":"0:276-0:155:2154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[495,25],"end":[495,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"date::MIN_DATE","name":"MIN_DATE","id":"0:155:2154","glob":false}}},"0:1521":{"id":"0:1521","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1269,0],"end":[1281,1]},"visibility":"default","docs":"Subtract `std::time::Duration` from `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the subtraction ignores integral number of days.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1522:199","0:1523:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1140:5876":{"id":"0:1140:5876","crate_id":0,"name":"size_hint","span":{"filename":"src/naive/date.rs","begin":[2115,4],"end":[2118,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2043":{"id":"0:2043","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[179,0],"end":[194,1]},"visibility":"default","docs":"Any weekday can be represented as an integer from 0 to 6, which equals to\n[`Weekday::num_days_from_monday`](#method.num_days_from_monday) in this implementation.\nDo not heavily depend on this though; use explicit methods whenever possible.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2044:138","0:2045:1632"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3673:1647":{"id":"2:3673:1647","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39267:13459","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:384:755":{"id":"0:384:755","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[704,4],"end":[706,5]},"visibility":"default","docs":"Convert this `DateTime<Utc>` instance into a `DateTime<Local>` instance.\n\nConversion is performed via [`DateTime::with_timezone`], accounting for the difference in timezones.","links":{"`DateTime::with_timezone`":"0:350:2754"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:929-0:613:3351":{"id":"0:929-0:613:3351","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[64,29],"end":[64,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"formatting::format_item","name":"format_item","id":"0:613:3351","glob":false}}},"0:122-0:2637:2147":{"id":"0:122-0:2637:2147","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[486,20],"end":[486,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::NaiveDate","name":"NaiveDate","id":"0:2637:2147","glob":false}}},"0:1298:295":{"id":"0:1298:295","crate_id":0,"name":"add","span":{"filename":"src/naive/datetime/mod.rs","begin":[1682,4],"end":[1684,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:894:174":{"id":"0:894:174","crate_id":0,"name":"Item","span":{"filename":"src/format/strftime.rs","begin":[389,4],"end":[389,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}},"0:1265:2800":{"id":"0:1265:2800","crate_id":0,"name":"ordinal","span":{"filename":"src/naive/datetime/mod.rs","begin":[1232,4],"end":[1234,5]},"visibility":"default","docs":"Returns the day of year starting from 1.\n\nThe return value ranges from 1 to 366. (The last day of year differs by years.)\n\nSee also the [`NaiveDate::ordinal`](./struct.NaiveDate.html#method.ordinal) method.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Datelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.ordinal(), 268);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3182:3610":{"id":"0:3182:3610","crate_id":0,"name":"May","span":{"filename":"src/month.rs","begin":[51,4],"end":[51,11]},"visibility":"default","docs":"May","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"4","value":"4"}}}},"2:13097:39370":{"id":"2:13097:39370","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13098:39373"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43637:8959","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2461:3492":{"id":"0:2461:3492","crate_id":0,"name":"OffsetFormat","span":{"filename":"src/format/mod.rs","begin":[281,0],"end":[290,1]},"visibility":"public","docs":"Type for specifying the format of UTC offsets.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:2462:3494","0:2463:3497","0:2464:3500","0:2465:3502"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:41605:9275-0:2461:3492","a:2:3058:246-0:2461:3492","a:2:31969:237-0:2461:3492","a:2:41604:9276-0:2461:3492","a:2:32026:9229-0:2461:3492","b:2:2563-0:2461:3492","b:2:3671-0:2461:3492","b:2:2835-0:2461:3492","b:2:2839-0:2461:3492","b:2:2850-0:2461:3492","b:2:2560-0:2461:3492","b:2:2845-0:2461:3492","b:5:725-0:2461:3492","0:2472","0:2476","0:2466","0:2468","0:2471","0:2469","0:2474"]}}},"0:2230:3178":{"id":"0:2230:3178","crate_id":0,"name":"second","span":{"filename":"src/format/parsed.rs","begin":[90,4],"end":[90,27]},"visibility":"public","docs":"Second number (0--60, accounting for leap seconds).","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}}}},"a:2:41605:9275-0:2746:2164":{"id":"a:2:41605:9275-0:2746:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1464:2708":{"id":"0:1464:2708","crate_id":0,"name":"from_hms_opt","span":{"filename":"src/naive/time/mod.rs","begin":[273,4],"end":[275,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from hour, minute and second.\n\nThe millisecond part is allowed to exceed 1,000,000,000 in order to represent a\n[leap second](#leap-second-handling), but only when `sec == 59`.\n\n# Errors\n\nReturns `None` on invalid hour, minute and/or second.\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nlet from_hms_opt = NaiveTime::from_hms_opt;\n\nassert!(from_hms_opt(0, 0, 0).is_some());\nassert!(from_hms_opt(23, 59, 59).is_some());\nassert!(from_hms_opt(24, 0, 0).is_none());\nassert!(from_hms_opt(23, 60, 0).is_none());\nassert!(from_hms_opt(23, 59, 60).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:3077:2166":{"id":"b:2:2850-0:3077:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3238:667":{"id":"0:3238:667","crate_id":0,"name":"eq","span":{"filename":"src/month.rs","begin":[227,39],"end":[227,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:2731":{"id":"0:170:2731","crate_id":0,"name":"and_hms_nano","span":{"filename":"src/date.rs","begin":[179,4],"end":[181,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nPanics on invalid hour, minute, second and/or nanosecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"Use and_hms_nano_opt() instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"Use and_hms_nano_opt() instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2399:3464":{"id":"0:2399:3464","crate_id":0,"name":"TimezoneOffsetTripleColon","span":{"filename":"src/format/mod.rs","begin":[228,4],"end":[228,29]},"visibility":"default","docs":"Offset from the local time to UTC without minutes (`+09` or `-04` or `+00`).\n\nIn the parser, the colon can be omitted and/or surrounded with any amount of whitespace.\nThe offset is limited from `-24` to `+24`,\nwhich is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:269:726":{"id":"0:269:726","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[538,4],"end":[541,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13090:35752":{"id":"2:13090:35752","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13089:35751","str::split_at_mut_checked":"2:13092:35756"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:2450":{"id":"0:50:2450","crate_id":0,"name":"num_hours","span":{"filename":"src/time_delta.rs","begin":[290,4],"end":[292,5]},"visibility":"public","docs":"Returns the total number of whole hours in the `TimeDelta`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:3252:2209":{"id":"a:2:32026:9229-0:3252:2209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:38:2408":{"id":"0:38:2408","crate_id":0,"name":"hours","span":{"filename":"src/time_delta.rs","begin":[158,4],"end":[160,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of hours.\n\nEquivalent to `TimeDelta::seconds(hours * 60 * 60)` with overflow checks.\n\n# Panics\n\nPanics when the `TimeDelta` would be out of bounds.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hours",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2433":{"id":"0:2433","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[255,23],"end":[255,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2434:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2162":{"id":"0:2162","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[575,40],"end":[575,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:444:3179":{"id":"0:444:3179","crate_id":0,"name":"nanosecond","span":{"filename":"src/datetime/mod.rs","begin":[1128,4],"end":[1130,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2177:458":{"id":"0:2177:458","crate_id":0,"name":"clone","span":{"filename":"src/datetime/mod.rs","begin":[52,9],"end":[52,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2469":{"id":"0:2469","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[280,22],"end":[280,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2470:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2138":{"id":"0:2138","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,31],"end":[52,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2139:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1329:199":{"id":"0:1329:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[2014,4],"end":[2014,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2091:2797":{"id":"0:2091:2797","crate_id":0,"name":"month0","span":{"filename":"src/traits.rs","begin":[55,4],"end":[55,28]},"visibility":"default","docs":"Returns the month number starting from 0.\n\nThe return value ranges from 0 to 11.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1308:295":{"id":"0:1308:295","crate_id":0,"name":"add","span":{"filename":"src/naive/datetime/mod.rs","begin":[1752,4],"end":[1754,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:3125:2144":{"id":"b:2:2560-0:3125:2144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:37:2404":{"id":"0:37:2404","crate_id":0,"name":"try_days","span":{"filename":"src/time_delta.rs","begin":[145,4],"end":[147,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of days.\n\nEquivalent to `TimeDelta::seconds(days * 24 * 60 * 60)` with overflow\nchecks.\n\n# Errors\n\nReturns `None` when the `TimeDelta` would be out of bounds.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["days",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:414":{"id":"0:414","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[963,0],"end":[1112,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["num_days_from_ce","year_ce"],"trait":{"name":"Datelike","id":"0:2087:2141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:416:2796","0:417:2172","0:418:2797","0:419:2798","0:420:2799","0:421:2800","0:422:2801","0:423:2170","0:424:2802","0:425:2803","0:427:2804","0:429:2805","0:431:2806","0:433:2807","0:435:2808","0:437:2809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2323:3393":{"id":"0:2323:3393","crate_id":0,"name":"WeekFromMon","span":{"filename":"src/format/mod.rs","begin":[123,4],"end":[123,15]},"visibility":"default","docs":"Week number, where the week 1 starts at the first Monday of January (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2839-0:2479:3495":{"id":"b:2:2839-0:2479:3495","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1218:3043":{"id":"0:1218:3043","crate_id":0,"name":"from_timestamp_opt","span":{"filename":"src/naive/datetime/mod.rs","begin":[265,4],"end":[278,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` corresponding to a UTC date and time,\nfrom the number of non-leap seconds\nsince the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\nand the number of nanoseconds since the last whole non-leap second.\n\nThe nanosecond part can exceed 1,000,000,000 in order to represent a\n[leap second](NaiveTime#leap-second-handling), but only when `secs % 60 == 59`.\n(The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)\n\n# Errors\n\nReturns `None` if the number of seconds would be out of range for a `NaiveDateTime` (more\nthan ca. 262,000 years away from common era), and panics on an invalid nanosecond\n(2 seconds or more).\n\n# Example\n\n```\nuse chrono::NaiveDateTime;\nuse std::i64;\n\nlet from_timestamp_opt = NaiveDateTime::from_timestamp_opt;\n\nassert!(from_timestamp_opt(0, 0).is_some());\nassert!(from_timestamp_opt(0, 999_999_999).is_some());\nassert!(from_timestamp_opt(0, 1_500_000_000).is_none()); // invalid leap second\nassert!(from_timestamp_opt(59, 1_500_000_000).is_some()); // leap second\nassert!(from_timestamp_opt(59, 2_000_000_000).is_none());\nassert!(from_timestamp_opt(i64::MAX, 0).is_none());\n```","links":{"NaiveTime#leap-second-handling":"0:2763:2149"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"i64"}],["nsecs",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1477:6333":{"id":"0:1477:6333","crate_id":0,"name":"overflowing_add_signed","span":{"filename":"src/naive/time/mod.rs","begin":[584,4],"end":[620,5]},"visibility":"public","docs":"Adds given `TimeDelta` to the current time, and also returns the number of *seconds*\nin the integral number of days ignored from the addition.\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveTime};\n\nlet from_hms = |h, m, s| { NaiveTime::from_hms_opt(h, m, s).unwrap() };\n\nassert_eq!(from_hms(3, 4, 5).overflowing_add_signed(TimeDelta::hours(11)),\n           (from_hms(14, 4, 5), 0));\nassert_eq!(from_hms(3, 4, 5).overflowing_add_signed(TimeDelta::hours(23)),\n           (from_hms(2, 4, 5), 86_400));\nassert_eq!(from_hms(3, 4, 5).overflowing_add_signed(TimeDelta::hours(-7)),\n           (from_hms(20, 4, 5), -86_400));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"tuple":[{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"primitive":"i64"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13172:34163":{"id":"2:13172:34163","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12067:454","self::pattern":"2:12757:8930"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:2705":{"id":"0:162:2705","crate_id":0,"name":"and_hms_opt","span":{"filename":"src/date.rs","begin":[109,4],"end":[111,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.\n\nReturns `None` on invalid hour, minute and/or second.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:366:2999":{"id":"0:366:2999","crate_id":0,"name":"to_rfc2822","span":{"filename":"src/datetime/mod.rs","begin":[538,4],"end":[543,5]},"visibility":"public","docs":"Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.\n\n# Panics\n\nPanics if the date can not be represented in this format: the year may not be negative and\ncan not have more than 4 digits.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:2178:2653":{"id":"a:2:32026:9229-0:2178:2653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:930-0:2178:2653":{"id":"0:930-0:2178:2653","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[64,42],"end":[64,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"formatting::DelayedFormat","name":"DelayedFormat","id":"0:2178:2653","glob":false}}},"0:2502":{"id":"0:2502","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[293,44],"end":[293,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2503:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2369":{"id":"0:2369","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[156,26],"end":[156,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2488:3516":{"id":"0:2488:3516","crate_id":0,"name":"OptionalSeconds","span":{"filename":"src/format/mod.rs","begin":[308,4],"end":[308,19]},"visibility":"default","docs":"Format offset from UTC as hours and minutes, and optionally seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2697:667":{"id":"0:2697:667","crate_id":0,"name":"eq","span":{"filename":"src/naive/datetime/mod.rs","begin":[76,9],"end":[76,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3066":{"id":"0:3066","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[43,9],"end":[43,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1942:2715":{"id":"0:1942:2715","crate_id":0,"name":"and_hms_milli_opt","span":{"filename":"src/offset/mod.rs","begin":[131,4],"end":[144,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nPropagates any error. Ambiguous result would be discarded.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["milli",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2065:138":{"id":"0:2065:138","crate_id":0,"name":"Error","span":{"filename":"src/month.rs","begin":[168,4],"end":[168,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:5:725-0:3243:2173":{"id":"b:5:725-0:3243:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2560-0:3243:2173":{"id":"b:2:2560-0:3243:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2850-0:2746:2164":{"id":"b:2:2850-0:2746:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:722:4006":{"id":"0:722:4006","crate_id":0,"name":"set_timestamp","span":{"filename":"src/format/parsed.rs","begin":[274,4],"end":[276,5]},"visibility":"public","docs":"Tries to set the [`timestamp`](#structfield.timestamp) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2845-0:2763:2149":{"id":"b:2:2845-0:2763:2149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74:199":{"id":"0:74:199","crate_id":0,"name":"Output","span":{"filename":"src/time_delta.rs","begin":[467,4],"end":[467,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[488,0],"end":[498,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Mul","id":"2:32446:2335","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:81:199","0:82:1022"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:965":{"id":"0:965","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[528,0],"end":[552,1]},"visibility":"default","docs":"Parsing a `str` into a `Month` uses the format [`%B`](./format/strftime/index.html).\n\n# Example\n\n```\nuse chrono::Month;\n\nassert_eq!(\"January\".parse::<Month>(), Ok(Month::January));\nassert!(\"any day\".parse::<Month>().is_err());\n```\n\nThe parsing is case-insensitive.\n\n```\n# use chrono::Month;\nassert_eq!(\"fEbruARy\".parse::<Month>(), Ok(Month::February));\n```\n\nOnly the shortest form (e.g. `jan`) and the longest form (e.g. `january`) is accepted.\n\n```\n# use chrono::Month;\nassert!(\"septem\".parse::<Month>().is_err());\nassert!(\"Augustin\".parse::<Month>().is_err());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12717:3263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:966:137","0:967:3264"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:969-0:2566:2160":{"id":"0:969-0:2566:2160","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[509,17],"end":[509,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"format::ParseError","name":"ParseError","id":"0:2566:2160","glob":false}}},"2:2854:1632":{"id":"2:2854:1632","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13079:8009":{"id":"2:13079:8009","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41482:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1128:199":{"id":"0:1128:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/date.rs","begin":[2034,4],"end":[2034,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:168:2724":{"id":"0:168:2724","crate_id":0,"name":"and_hms_micro_opt","span":{"filename":"src/date.rs","begin":[161,4],"end":[169,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nReturns `None` on invalid hour, minute, second and/or microsecond.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["micro",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:3243:2173":{"id":"b:2:2850-0:3243:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2522":{"id":"0:2522","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[314,44],"end":[314,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2523:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:244:465":{"id":"0:244:465","crate_id":0,"name":"cmp","span":{"filename":"src/date.rs","begin":[485,4],"end":[487,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2245:60":{"id":"0:2245:60","crate_id":0,"name":"default","span":{"filename":"src/format/parsed.rs","begin":[20,38],"end":[20,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41605:9275-0:2637:2147":{"id":"a:2:41605:9275-0:2637:2147","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:31969:237-0:2304:3372":{"id":"a:2:31969:237-0:2304:3372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1550-0:2673:5261":{"id":"0:1550-0:2673:5261","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[13,61],"end":[13,83]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::date::NaiveDateWeeksIterator","name":"NaiveDateWeeksIterator","id":"0:2673:5261","glob":false}}},"0:2578":{"id":"0:2578","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[383,38],"end":[383,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:733:4053":{"id":"0:733:4053","crate_id":0,"name":"to_naive_time","span":{"filename":"src/format/parsed.rs","begin":[501,4],"end":[534,5]},"visibility":"public","docs":"Returns a parsed naive time out of given fields.\n\nThis method is able to determine the time from given subset of fields:\n\n- Hour, minute. (second and nanosecond assumed to be 0)\n- Hour, minute, second. (nanosecond assumed to be 0)\n- Hour, minute, second, nanosecond.\n\nIt is able to handle leap seconds when given second is 60.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:2251:2654":{"id":"a:2:32026:9229-0:2251:2654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:725-0:2525:174":{"id":"b:5:725-0:2525:174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2835-0:3077:2166":{"id":"b:2:2835-0:3077:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31969:237-0:3064:2146":{"id":"a:2:31969:237-0:3064:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1107:2808":{"id":"0:1107:2808","crate_id":0,"name":"with_ordinal","span":{"filename":"src/naive/date.rs","begin":[1829,4],"end":[1831,5]},"visibility":"default","docs":"Makes a new `NaiveDate` with the day of year (starting from 1) changed.\n\n# Errors\n\nReturns `None` if the resulting date does not exist, or if the value for `ordinal` is\ninvalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 1, 1).unwrap().with_ordinal(60),\n           Some(NaiveDate::from_ymd_opt(2015, 3, 1).unwrap()));\nassert_eq!(NaiveDate::from_ymd_opt(2015, 1, 1).unwrap().with_ordinal(366),\n           None); // 2015 had only 365 days\n\nassert_eq!(NaiveDate::from_ymd_opt(2016, 1, 1).unwrap().with_ordinal(60),\n           Some(NaiveDate::from_ymd_opt(2016, 2, 29).unwrap()));\nassert_eq!(NaiveDate::from_ymd_opt(2016, 1, 1).unwrap().with_ordinal(366),\n           Some(NaiveDate::from_ymd_opt(2016, 12, 31).unwrap()));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2419":{"id":"0:2419","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[171,27],"end":[171,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2562:2652":{"id":"2:2562:2652","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3246:458":{"id":"0:3246:458","crate_id":0,"name":"clone","span":{"filename":"src/month.rs","begin":[245,9],"end":[245,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3671-0:2151:2130":{"id":"b:2:3671-0:2151:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3096":{"id":"0:3096","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[41,27],"end":[41,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3098:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2566:2160":{"id":"0:2566:2160","crate_id":0,"name":"ParseError","span":{"filename":"src/format/mod.rs","begin":[384,0],"end":[384,38]},"visibility":"public","docs":"An error from the `parse` function.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:947","a:2:41605:9275-0:2566:2160","a:2:3058:246-0:2566:2160","a:2:31969:237-0:2566:2160","a:2:41604:9276-0:2566:2160","a:2:32026:9229-0:2566:2160","b:2:2563-0:2566:2160","b:2:3671-0:2566:2160","b:2:2835-0:2566:2160","b:2:2839-0:2566:2160","b:2:2850-0:2566:2160","b:2:2560-0:2566:2160","b:2:2845-0:2566:2160","b:5:725-0:2566:2160","b:5:5869-0:2566:2160","0:2569","0:2579","0:2576","0:2578","0:953","0:2574","0:2573","0:951","0:2571"]}}},"b:2:2835-0:2566:2160":{"id":"b:2:2835-0:2566:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3166:667":{"id":"0:3166:667","crate_id":0,"name":"eq","span":{"filename":"src/weekday.rs","begin":[230,16],"end":[230,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:392:755":{"id":"0:392:755","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[750,4],"end":[752,5]},"visibility":"default","docs":"Convert this `DateTime<Local>` instance into a `DateTime<FixedOffset>` instance.\n\nConversion is performed via [`DateTime::with_timezone`].","links":{"`DateTime::with_timezone`":"0:350:2754"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:895:1067":{"id":"0:895:1067","crate_id":0,"name":"next","span":{"filename":"src/format/strftime.rs","begin":[391,4],"end":[410,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:215:2803":{"id":"0:215:2803","crate_id":0,"name":"with_year","span":{"filename":"src/date.rs","begin":[431,4],"end":[433,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266:1569":{"id":"0:266:1569","crate_id":0,"name":"sub","span":{"filename":"src/date.rs","begin":[532,4],"end":[534,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41604:9276-0:2151:2130":{"id":"a:2:41604:9276-0:2151:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3058:246-0:2284:3355":{"id":"a:2:3058:246-0:2284:3355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2463:3497":{"id":"0:2463:3497","crate_id":0,"name":"colons","span":{"filename":"src/format/mod.rs","begin":[285,4],"end":[285,22]},"visibility":"public","docs":"Separator between hours, minutes and seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:2:2850-0:3169:2142":{"id":"b:2:2850-0:3169:2142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:551:755":{"id":"0:551:755","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[1639,4],"end":[1641,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"resolved_path":{"name":"SystemTime","id":"1:9197:2837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2129:2131":{"id":"0:2129:2131","crate_id":0,"name":"TimeDelta","span":{"filename":"src/time_delta.rs","begin":[60,0],"end":[63,1]},"visibility":"public","docs":"Time duration with nanosecond precision.\n\nThis also allows for negative durations; see individual methods for details.\n\nA `TimeDelta` is represented internally as a complement of seconds and\nnanoseconds. The range is restricted to that of `i64` milliseconds, with the\nminimum value notably being set to `-i64::MAX` rather than allowing the full\nrange of `i64::MIN`. This is to allow easy flipping of sign, so that for\ninstance `abs()` can be called without any checks.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:32","a:2:41605:9275-0:2129:2131","a:2:3058:246-0:2129:2131","a:2:31969:237-0:2129:2131","a:2:41604:9276-0:2129:2131","a:2:32026:9229-0:2129:2131","b:2:2563-0:2129:2131","b:2:3671-0:2129:2131","b:2:2835-0:2129:2131","b:2:2839-0:2129:2131","b:2:2850-0:2129:2131","b:2:2560-0:2129:2131","b:2:2845-0:2129:2131","b:5:725-0:2129:2131","b:5:5869-0:2129:2131","0:1318","0:1519","0:1130","0:1296","0:1110","0:91","0:504","0:73","0:249","0:86","0:2135","0:2138","0:474","0:2137","0:2148","0:496","0:78","0:260","0:1302","0:1503","0:1312","0:253","0:1506","0:70","0:1516","0:2144","0:1113","0:2140","0:2142","0:2134","0:95","0:256","0:482","0:76","0:83","0:2146","0:67","0:2132","0:1127","0:80"]}}},"0:252:295":{"id":"0:252:295","crate_id":0,"name":"add","span":{"filename":"src/date.rs","begin":[500,4],"end":[502,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1133:199":{"id":"0:1133:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/date.rs","begin":[2084,4],"end":[2084,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1964:2926":{"id":"0:1964:2926","crate_id":0,"name":"timestamp_nanos","span":{"filename":"src/offset/mod.rs","begin":[435,4],"end":[442,5]},"visibility":"default","docs":"Makes a new `DateTime` from the number of non-leap nanoseconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").\n\nUnlike [`timestamp_millis_opt`](#method.timestamp_millis_opt), this never fails.\n\n# Example\n\n```\nuse chrono::{Utc, TimeZone};\n\nassert_eq!(Utc.timestamp_nanos(1431648000000000).timestamp(), 1431648);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["nanos",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13155:41648":{"id":"2:13155:41648","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12757:8930","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::match_indices":"2:13152:41647"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43531:8970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12778:8946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1929-0:3064:2146":{"id":"0:1929-0:3064:2146","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[38,0],"end":[38,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::utc::Utc","name":"Utc","id":"0:3064:2146","glob":false}}},"b:2:2835-0:2692:2148":{"id":"b:2:2835-0:2692:2148","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1430:726":{"id":"0:1430:726","crate_id":0,"name":"fmt","span":{"filename":"src/naive/isoweek.rs","begin":[142,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:433:2807":{"id":"0:433:2807","crate_id":0,"name":"with_day0","span":{"filename":"src/datetime/mod.rs","begin":[1077,4],"end":[1079,5]},"visibility":"default","docs":"Makes a new `DateTime` with the day of month (starting from 0) changed.\n\nSee also the [`NaiveDate::with_day0`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist.\n- The value for `day0` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveDate::with_day0`":"0:1106:2807"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:3108:2169":{"id":"b:2:2835-0:3108:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2215:3924":{"id":"0:2215:3924","crate_id":0,"name":"year_div_100","span":{"filename":"src/format/parsed.rs","begin":[33,4],"end":[33,33]},"visibility":"public","docs":"Year divided by 100. Implies that the year is >= 1 BCE when set.\n\nDue to the common usage, if this field is missing but\n[`year_mod_100`](#structfield.year_mod_100) is present,\nit is inferred to 19 when `year_mod_100 >= 70` and 20 otherwise.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}}}},"b:5:725-0:2746:2164":{"id":"b:5:725-0:2746:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1500:3193":{"id":"0:1500:3193","crate_id":0,"name":"with_second","span":{"filename":"src/naive/time/mod.rs","begin":[1016,4],"end":[1022,5]},"visibility":"default","docs":"Makes a new `NaiveTime` with the second number changed.\n\nAs with the [`second`](#method.second) method,\nthe input range is restricted to 0 through 59.\n\n# Errors\n\nReturns `None` if the value for `second` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nlet dt = NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap();\nassert_eq!(dt.with_second(17), Some(NaiveTime::from_hms_nano_opt(23, 56, 17, 12_345_678).unwrap()));\nassert_eq!(dt.with_second(60), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:695:3973":{"id":"0:695:3973","crate_id":0,"name":"set_isoyear_div_100","span":{"filename":"src/format/parsed.rs","begin":[163,4],"end":[171,5]},"visibility":"public","docs":"Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2785:667":{"id":"0:2785:667","crate_id":0,"name":"eq","span":{"filename":"src/offset/fixed.rs","begin":[22,9],"end":[22,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2705":{"id":"0:2705","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[76,42],"end":[76,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2646:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2706:465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2703":{"id":"0:2703","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[76,30],"end":[76,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","ge","gt","le"],"trait":{"name":"PartialOrd","id":"2:2652:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2704:1151"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:604":{"id":"0:604","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[120,0],"end":[140,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"super::Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["0:608:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32026:9229-0:2129:2131":{"id":"a:2:32026:9229-0:2129:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3086:1767":{"id":"0:3086:1767","crate_id":0,"name":"0","span":{"filename":"src/offset/mod.rs","begin":[50,14],"end":[50,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"T"}}},"0:1607:3264":{"id":"0:1607:3264","crate_id":0,"name":"from_str","span":{"filename":"src/offset/fixed.rs","begin":[123,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:12717:3263","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:3223:2174":{"id":"b:2:2560-0:3223:2174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:477:295":{"id":"0:477:295","crate_id":0,"name":"add","span":{"filename":"src/datetime/mod.rs","begin":[1255,4],"end":[1257,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:190:2682":{"id":"0:190:2682","crate_id":0,"name":"MIN_UTC","span":{"filename":"src/date.rs","begin":[316,4],"end":[316,78]},"visibility":"public","docs":"The minimum possible `Date`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"default":"_"}}},"0:2527:3527":{"id":"0:2527:3527","crate_id":0,"name":"Literal","span":{"filename":"src/format/mod.rs","begin":[328,4],"end":[328,20]},"visibility":"default","docs":"A literally printed and parsed text.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2529:1767"]},"discriminant":null}}},"0:549:755":{"id":"0:549:755","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[1619,4],"end":[1634,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"resolved_path":{"name":"SystemTime","id":"1:9197:2837","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1229:2926":{"id":"0:1229:2926","crate_id":0,"name":"timestamp_nanos","span":{"filename":"src/naive/datetime/mod.rs","begin":[507,4],"end":[512,5]},"visibility":"public","docs":"Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.\n\nNote that this does *not* account for the timezone!\nThe true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.\n\n# Panics\n\nAn `i64` with nanosecond precision can span a range of ~584 years. This function panics on\nan out of range `NaiveDateTime`.\n\nThe dates that can be represented as nanoseconds are between 1677-09-21T00:12:43.145224192\nand 2262-04-11T23:47:16.854775807.","links":{},"attrs":["#[deprecated(since = \"0.4.31\", note = \"use `timestamp_nanos_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.31","note":"use `timestamp_nanos_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:2171:2139":{"id":"b:2:2839-0:2171:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:31969:237-0:2763:2149":{"id":"a:2:31969:237-0:2763:2149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2563-0:3108:2169":{"id":"b:2:2563-0:3108:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3163:458":{"id":"0:3163:458","crate_id":0,"name":"clone","span":{"filename":"src/weekday.rs","begin":[230,9],"end":[230,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3245":{"id":"0:3245","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[245,9],"end":[245,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3246:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[585,0],"end":[590,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["description","source","type_id","cause","provide"],"trait":{"name":"Error","id":"2:2898:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:100:2525"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2563-0:2304:3372":{"id":"b:2:2563-0:2304:3372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3167":{"id":"0:3167","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[230,27],"end":[230,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31969:237-0:2129:2131":{"id":"a:2:31969:237-0:2129:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1938":{"id":"0:1938","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[93,0],"end":[189,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1940:2692","0:1941:2705","0:1942:2715","0:1943:2724","0:1944:2733"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:161:2701":{"id":"0:161:2701","crate_id":0,"name":"and_hms","span":{"filename":"src/date.rs","begin":[99,4],"end":[101,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.\n\nPanics on invalid hour, minute and/or second.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"Use and_hms_opt() instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"Use and_hms_opt() instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:2360:3420":{"id":"b:2:2850-0:2360:3420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1620:726":{"id":"0:1620:726","crate_id":0,"name":"fmt","span":{"filename":"src/offset/fixed.rs","begin":[174,4],"end":[176,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2666:667":{"id":"0:2666:667","crate_id":0,"name":"eq","span":{"filename":"src/naive/date.rs","begin":[2099,35],"end":[2099,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2105:5689":{"id":"0:2105:5689","crate_id":0,"name":"num_days_from_ce","span":{"filename":"src/traits.rs","begin":[248,4],"end":[263,5]},"visibility":"default","docs":"Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.\n\n# Examples\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(NaiveDate::from_ymd_opt(1970, 1, 1).unwrap().num_days_from_ce(), 719_163);\nassert_eq!(NaiveDate::from_ymd_opt(2, 1, 1).unwrap().num_days_from_ce(), 366);\nassert_eq!(NaiveDate::from_ymd_opt(1, 1, 1).unwrap().num_days_from_ce(), 1);\nassert_eq!(NaiveDate::from_ymd_opt(0, 1, 1).unwrap().num_days_from_ce(), -365);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[528,0],"end":[535,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:265:199","0:266:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:344:2940":{"id":"0:344:2940","crate_id":0,"name":"timestamp_nanos_opt","span":{"filename":"src/datetime/mod.rs","begin":[296,4],"end":[298,5]},"visibility":"public","docs":"Returns the number of non-leap-nanoseconds since January 1, 1970 UTC.\n\n# Errors\n\nAn `i64` with nanosecond precision can span a range of ~584 years. This function returns\n`None` on an out of range `DateTime`.\n\nThe dates that can be represented as nanoseconds are between 1677-09-21T00:12:43.145224192\nand 2262-04-11T23:47:16.854775807.\n\n# Example\n\n```\nuse chrono::{Utc, NaiveDate};\n\nlet dt = NaiveDate::from_ymd_opt(1970, 1, 1).unwrap().and_hms_nano_opt(0, 0, 1, 444).unwrap().and_local_timezone(Utc).unwrap();\nassert_eq!(dt.timestamp_nanos_opt(), Some(1_000_000_444));\n\nlet dt = NaiveDate::from_ymd_opt(2001, 9, 9).unwrap().and_hms_nano_opt(1, 46, 40, 555).unwrap().and_local_timezone(Utc).unwrap();\nassert_eq!(dt.timestamp_nanos_opt(), Some(1_000_000_000_000_000_555));\n\nlet dt = NaiveDate::from_ymd_opt(1677, 9, 21).unwrap().and_hms_nano_opt(0, 12, 43, 145_224_192).unwrap().and_local_timezone(Utc).unwrap();\nassert_eq!(dt.timestamp_nanos_opt(), Some(-9_223_372_036_854_775_808));\n\nlet dt = NaiveDate::from_ymd_opt(2262, 4, 11).unwrap().and_hms_nano_opt(23, 47, 16, 854_775_807).unwrap().and_local_timezone(Utc).unwrap();\nassert_eq!(dt.timestamp_nanos_opt(), Some(9_223_372_036_854_775_807));\n\nlet dt = NaiveDate::from_ymd_opt(1677, 9, 21).unwrap().and_hms_nano_opt(0, 12, 43, 145_224_191).unwrap().and_local_timezone(Utc).unwrap();\nassert_eq!(dt.timestamp_nanos_opt(), None);\n\nlet dt = NaiveDate::from_ymd_opt(2262, 4, 11).unwrap().and_hms_nano_opt(23, 47, 16, 854_775_808).unwrap().and_local_timezone(Utc).unwrap();\nassert_eq!(dt.timestamp_nanos_opt(), None);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:2612:2165":{"id":"b:2:2835-0:2612:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2612:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2835-0:2304:3372":{"id":"b:2:2835-0:2304:3372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1501:3200":{"id":"0:1501:3200","crate_id":0,"name":"with_nanosecond","span":{"filename":"src/naive/time/mod.rs","begin":[1056,4],"end":[1061,5]},"visibility":"default","docs":"Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.\n\nAs with the [`nanosecond`](#method.nanosecond) method,\nthe input range can exceed 1,000,000,000 for leap seconds.\n\n# Errors\n\nReturns `None` if `nanosecond >= 2,000,000,000`.\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nlet dt = NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap();\nassert_eq!(dt.with_nanosecond(333_333_333),\n           Some(NaiveTime::from_hms_nano_opt(23, 56, 4, 333_333_333).unwrap()));\nassert_eq!(dt.with_nanosecond(2_000_000_000), None);\n```\n\nLeap seconds can theoretically follow *any* whole second.\nThe following would be a proper leap second at the time zone offset of UTC-00:03:57\n(there are several historical examples comparable to this \"non-sense\" offset),\nand therefore is allowed.\n\n```\n# use chrono::{NaiveTime, Timelike};\nlet dt = NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap();\nlet strange_leap_second = dt.with_nanosecond(1_333_333_333).unwrap();\nassert_eq!(strange_leap_second.nanosecond(), 1_333_333_333);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13095:13671":{"id":"2:13095:13671","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12067:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43339:8956","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1054:2713":{"id":"0:1054:2713","crate_id":0,"name":"and_hms_milli","span":{"filename":"src/naive/date.rs","begin":[882,4],"end":[884,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.\n\nThe millisecond part is allowed to exceed 1,000,000,000 in order to represent a [leap second](\n./struct.NaiveTime.html#leap-second-handling), but only when `sec == 59`.\n\n# Panics\n\nPanics on invalid hour, minute, second and/or millisecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `and_hms_milli_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `and_hms_milli_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["milli",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3101":{"id":"0:3101","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[41,40],"end":[41,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41605:9275-0:2251:2654":{"id":"a:2:41605:9275-0:2251:2654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2403:3471":{"id":"0:2403:3471","crate_id":0,"name":"TimezoneOffset","span":{"filename":"src/format/mod.rs","begin":[238,4],"end":[238,18]},"visibility":"default","docs":"Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\nParsing allows an optional colon.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2490:3518":{"id":"0:2490:3518","crate_id":0,"name":"OptionalMinutesAndSeconds","span":{"filename":"src/format/mod.rs","begin":[310,4],"end":[310,29]},"visibility":"default","docs":"Format offset from UTC as hours and optionally minutes and seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:41604:9276-0:2505:3498":{"id":"a:2:41604:9276-0:2505:3498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1554-0:1024:2154":{"id":"0:1554-0:1024:2154","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[15,31],"end":[15,39]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"self::date::MIN_DATE","name":"MIN_DATE","id":"0:1024:2154","glob":false}}},"b:5:725-0:2171:2139":{"id":"b:5:725-0:2171:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2695":{"id":"0:2695","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[76,9],"end":[76,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13160:4166":{"id":"2:13160:4166","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1048:2977":{"id":"0:1048:2977","crate_id":0,"name":"checked_sub_days","span":{"filename":"src/naive/date.rs","begin":[779,4],"end":[784,5]},"visibility":"public","docs":"Subtract a duration in [`Days`] from the date\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\n# use chrono::{NaiveDate, Days};\nassert_eq!(\n    NaiveDate::from_ymd_opt(2022, 2, 20).unwrap().checked_sub_days(Days::new(6)),\n    Some(NaiveDate::from_ymd_opt(2022, 2, 14).unwrap())\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2022, 2, 20).unwrap().checked_sub_days(Days::new(1000000000000)),\n    None\n);\n```","links":{"`Days`":"0:2617:2163"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2115:3200":{"id":"0:2115:3200","crate_id":0,"name":"with_nanosecond","span":{"filename":"src/traits.rs","begin":[316,4],"end":[316,57]},"visibility":"default","docs":"Makes a new value with nanoseconds since the whole non-leap second changed.\n\nReturns `None` when the resulting value would be invalid.\nAs with the [`nanosecond`](#tymethod.nanosecond) method,\nthe input range can exceed 1,000,000,000 for leap seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"5:5613:7957":{"id":"5:5613:7957","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7633:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[520,0],"end":[524,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sum","id":"2:8060:2499","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:2500"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41604:9276-0:2251:2654":{"id":"a:2:41604:9276-0:2251:2654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1144":{"id":"0:1144","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2132,0],"end":[2132,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:8557:5270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2767":{"id":"0:2767","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[204,9],"end":[204,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2768:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1548-0:2637:2147":{"id":"0:1548-0:2637:2147","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[13,27],"end":[13,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::date::NaiveDate","name":"NaiveDate","id":"0:2637:2147","glob":false}}},"5:5611:42353":{"id":"5:5611:42353","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7633:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2565:7603":{"id":"2:2565:7603","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1330:1569":{"id":"0:1330:1569","crate_id":0,"name":"sub","span":{"filename":"src/naive/datetime/mod.rs","begin":[2017,4],"end":[2019,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1495:3177":{"id":"0:1495:3177","crate_id":0,"name":"minute","span":{"filename":"src/naive/time/mod.rs","begin":[889,4],"end":[891,5]},"visibility":"default","docs":"Returns the minute number from 0 to 59.\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nassert_eq!(NaiveTime::from_hms_opt(0, 0, 0).unwrap().minute(), 0);\nassert_eq!(NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap().minute(), 56);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2482:3510":{"id":"0:2482:3510","crate_id":0,"name":"Minutes","span":{"filename":"src/format/mod.rs","begin":[301,4],"end":[301,11]},"visibility":"default","docs":"Format offset from UTC as hours and minutes.\nAny seconds will be rounded to the nearest minute.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1216:6175":{"id":"0:1216:6175","crate_id":0,"name":"from_timestamp_micros","span":{"filename":"src/naive/datetime/mod.rs","begin":[194,4],"end":[198,5]},"visibility":"public","docs":"Creates a new [NaiveDateTime] from microseconds since the UNIX epoch.\n\nThe UNIX epoch starts on midnight, January 1, 1970, UTC.\n\n# Errors\n\nReturns `None` if the number of microseconds would be out of range for a `NaiveDateTime`\n(more than ca. 262,000 years away from common era)\n\n# Example\n\n```\nuse chrono::NaiveDateTime;\nlet timestamp_micros: i64 = 1662921288000000; //Sunday, September 11, 2022 6:34:48 PM\nlet naive_datetime = NaiveDateTime::from_timestamp_micros(timestamp_micros);\nassert!(naive_datetime.is_some());\nassert_eq!(timestamp_micros, naive_datetime.unwrap().timestamp_micros());\n\n// Negative timestamps (before the UNIX epoch) are supported as well.\nlet timestamp_micros: i64 = -2208936075000000; //Mon Jan 01 1900 14:38:45 GMT+0000\nlet naive_datetime = NaiveDateTime::from_timestamp_micros(timestamp_micros);\nassert!(naive_datetime.is_some());\nassert_eq!(timestamp_micros, naive_datetime.unwrap().timestamp_micros());\n```","links":{"NaiveDateTime":"0:2692:2148"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["micros",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1059:2733":{"id":"0:1059:2733","crate_id":0,"name":"and_hms_nano_opt","span":{"filename":"src/naive/date.rs","begin":[1024,4],"end":[1033,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.\n\nThe nanosecond part is allowed to exceed 1,000,000,000 in order to represent a [leap second](\n./struct.NaiveTime.html#leap-second-handling), but only when `sec == 59`.\n\n# Errors\n\nReturns `None` on invalid hour, minute, second and/or nanosecond.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet d = NaiveDate::from_ymd_opt(2015, 6, 3).unwrap();\nassert!(d.and_hms_nano_opt(12, 34, 56,   789_012_345).is_some());\nassert!(d.and_hms_nano_opt(12, 34, 59, 1_789_012_345).is_some()); // leap second\nassert!(d.and_hms_nano_opt(12, 34, 59, 2_789_012_345).is_none());\nassert!(d.and_hms_nano_opt(12, 34, 60,   789_012_345).is_none());\nassert!(d.and_hms_nano_opt(12, 60, 56,   789_012_345).is_none());\nassert!(d.and_hms_nano_opt(24, 34, 56,   789_012_345).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2631":{"id":"0:2631","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[132,39],"end":[132,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2632:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3153":{"id":"0:3153","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[32,30],"end":[32,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3154:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3149:667":{"id":"0:3149:667","crate_id":0,"name":"eq","span":{"filename":"src/weekday.rs","begin":[32,9],"end":[32,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3242:465":{"id":"0:3242:465","crate_id":0,"name":"cmp","span":{"filename":"src/month.rs","begin":[227,62],"end":[227,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:2525:174":{"id":"b:2:2850-0:2525:174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2510:3524":{"id":"0:2510:3524","crate_id":0,"name":"Maybe","span":{"filename":"src/format/mod.rs","begin":[321,4],"end":[321,9]},"visibility":"default","docs":"No separator when formatting, colon allowed when parsing.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2047:8459":{"id":"0:2047:8459","crate_id":0,"name":"from_i64","span":{"filename":"src/weekday.rs","begin":[201,4],"end":[212,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["n",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:2443":{"id":"0:47:2443","crate_id":0,"name":"nanoseconds","span":{"filename":"src/time_delta.rs","begin":[272,4],"end":[275,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of nanoseconds.\n\nThe number of nanoseconds acceptable by this constructor is less than\nthe total number that can actually be stored in a `TimeDelta`, so it is\nnot possible to specify a value that would be out of bounds. This\nfunction is therefore infallible.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["nanos",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2667":{"id":"0:2667","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2099,46],"end":[2099,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","ge","gt","le"],"trait":{"name":"PartialOrd","id":"2:2652:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2668:1151"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1311:295":{"id":"0:1311:295","crate_id":0,"name":"add","span":{"filename":"src/naive/datetime/mod.rs","begin":[1800,4],"end":[1802,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3104:2332","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2113:3187":{"id":"0:2113:3187","crate_id":0,"name":"with_minute","span":{"filename":"src/traits.rs","begin":[302,4],"end":[302,52]},"visibility":"default","docs":"Makes a new value with the minute number changed.\n\nReturns `None` when the resulting value would be invalid.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["min",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:41605:9275-0:2505:3498":{"id":"a:2:41605:9275-0:2505:3498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1473:3132":{"id":"0:1473:3132","crate_id":0,"name":"parse_from_str","span":{"filename":"src/naive/time/mod.rs","begin":[538,4],"end":[542,5]},"visibility":"public","docs":"Parses a string with the specified format string and returns a new `NaiveTime`.\nSee the [`format::strftime` module](crate::format::strftime)\non the supported escape sequences.\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nlet parse_from_str = NaiveTime::parse_from_str;\n\nassert_eq!(parse_from_str(\"23:56:04\", \"%H:%M:%S\"),\n           Ok(NaiveTime::from_hms_opt(23, 56, 4).unwrap()));\nassert_eq!(parse_from_str(\"pm012345.6789\", \"%p%I%M%S%.f\"),\n           Ok(NaiveTime::from_hms_micro_opt(13, 23, 45, 678_900).unwrap()));\n```\n\nDate and offset is ignored for the purpose of parsing.\n\n```\n# use chrono::NaiveTime;\n# let parse_from_str = NaiveTime::parse_from_str;\nassert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),\n           Ok(NaiveTime::from_hms_opt(12, 34, 56).unwrap()));\n```\n\n[Leap seconds](#leap-second-handling) are correctly handled by\ntreating any time of the form `hh:mm:60` as a leap second.\n(This equally applies to the formatting, so the round trip is possible.)\n\n```\n# use chrono::NaiveTime;\n# let parse_from_str = NaiveTime::parse_from_str;\nassert_eq!(parse_from_str(\"08:59:60.123\", \"%H:%M:%S%.f\"),\n           Ok(NaiveTime::from_hms_milli_opt(8, 59, 59, 1_123).unwrap()));\n```\n\nMissing seconds are assumed to be zero,\nbut out-of-bound times or insufficient fields are errors otherwise.\n\n```\n# use chrono::NaiveTime;\n# let parse_from_str = NaiveTime::parse_from_str;\nassert_eq!(parse_from_str(\"7:15\", \"%H:%M\"),\n           Ok(NaiveTime::from_hms_opt(7, 15, 0).unwrap()));\n\nassert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());\nassert!(parse_from_str(\"12\", \"%H\").is_err());\nassert!(parse_from_str(\"17:60\", \"%H:%M\").is_err());\nassert!(parse_from_str(\"24:00:00\", \"%H:%M:%S\").is_err());\n```\n\nAll parsed fields should be consistent to each other, otherwise it's an error.\nHere `%H` is for 24-hour clocks, unlike `%I`,\nand thus can be independently determined without AM/PM.\n\n```\n# use chrono::NaiveTime;\n# let parse_from_str = NaiveTime::parse_from_str;\nassert!(parse_from_str(\"13:07 AM\", \"%H:%M %p\").is_err());\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:2617:2163":{"id":"a:2:3058:246-0:2617:2163","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1259":{"id":"0:1259","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1123,0],"end":[1451,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["num_days_from_ce","year_ce"],"trait":{"name":"Datelike","id":"0:2087:2141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1260:2796","0:1261:2172","0:1262:2797","0:1263:2798","0:1264:2799","0:1265:2800","0:1266:2801","0:1267:2170","0:1268:2802","0:1269:2803","0:1271:2804","0:1273:2805","0:1275:2806","0:1277:2807","0:1279:2808","0:1281:2809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41605:9275-0:3064:2146":{"id":"a:2:41605:9275-0:3064:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:506:1570":{"id":"0:506:1570","crate_id":0,"name":"sub_assign","span":{"filename":"src/datetime/mod.rs","begin":[1413,4],"end":[1418,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2360:3420":{"id":"0:2360:3420","crate_id":0,"name":"InternalNumeric","span":{"filename":"src/format/mod.rs","begin":[157,0],"end":[159,1]},"visibility":"public","docs":"An opaque type representing numeric item types for internal uses only.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:41605:9275-0:2360:3420","a:2:3058:246-0:2360:3420","a:2:31969:237-0:2360:3420","a:2:41604:9276-0:2360:3420","a:2:32026:9229-0:2360:3420","b:2:2563-0:2360:3420","b:2:3671-0:2360:3420","b:2:2835-0:2360:3420","b:2:2839-0:2360:3420","b:2:2850-0:2360:3420","b:2:2560-0:2360:3420","b:2:2845-0:2360:3420","b:5:725-0:2360:3420","0:2366","0:937","0:2362","0:2364","0:2369","0:2370"]}}},"0:2551":{"id":"0:2551","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[325,16],"end":[325,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[466,0],"end":[472,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:74:199","0:75:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:72:295":{"id":"0:72:295","crate_id":0,"name":"add","span":{"filename":"src/time_delta.rs","begin":[461,4],"end":[463,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:343:2926":{"id":"0:343:2926","crate_id":0,"name":"timestamp_nanos","span":{"filename":"src/datetime/mod.rs","begin":[257,4],"end":[259,5]},"visibility":"public","docs":"Returns the number of non-leap-nanoseconds since January 1, 1970 UTC.\n\n# Panics\n\nAn `i64` with nanosecond precision can span a range of ~584 years. This function panics on\nan out of range `DateTime`.\n\nThe dates that can be represented as nanoseconds are between 1677-09-21T00:12:43.145224192\nand 2262-04-11T23:47:16.854775807.","links":{},"attrs":["#[deprecated(since = \"0.4.31\", note = \"use `timestamp_nanos_opt()` instead\")]","#[inline]","#[must_use]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.31","note":"use `timestamp_nanos_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:2251:2654":{"id":"b:2:2835-0:2251:2654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:528:199":{"id":"0:528:199","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1506,4],"end":[1506,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"b:2:2563-0:2673:5261":{"id":"b:2:2563-0:2673:5261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1888:1782":{"id":"0:1888:1782","crate_id":0,"name":"now","span":{"filename":"src/offset/local/mod.rs","begin":[156,4],"end":[158,5]},"visibility":"public","docs":"Returns a `DateTime<Local>` which corresponds to the current date, time and offset from\nUTC.\n\nSee also the similar [`Utc::now()`] which returns `DateTime<Utc>`, i.e. without the local\noffset.\n\n# Example\n\n```\n# #![allow(unused_variables)]\n# use chrono::{DateTime, FixedOffset, Local};\n// Current local time\nlet now = Local::now();\n\n// Current local date\nlet today = now.date_naive();\n\n// Current local time, converted to `DateTime<FixedOffset>`\nlet now_fixed_offset = Local::now().fixed_offset();\n// or\nlet now_fixed_offset: DateTime<FixedOffset> = Local::now().into();\n\n// Current time in some timezone (let's use +05:00)\n// Note that it is usually more efficient to use `Utc::now` for this use case.\nlet offset = FixedOffset::east_opt(5 * 60 * 60).unwrap();\nlet now_with_offset = Local::now().with_timezone(&offset);\n```","links":{"`Utc::now()`":"0:1915:1782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:389":{"id":"0:389","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[734,0],"end":[742,1]},"visibility":"default","docs":"Convert a `DateTime<Local>` instance into a `DateTime<Utc>` instance.","links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:390:755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2560-0:2171:2139":{"id":"b:2:2560-0:2171:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2845-0:2505:3498":{"id":"b:2:2845-0:2505:3498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2431:458":{"id":"0:2431:458","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[255,16],"end":[255,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2845-0:2178:2653":{"id":"b:2:2845-0:2178:2653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1479:2767":{"id":"0:1479:2767","crate_id":0,"name":"signed_duration_since","span":{"filename":"src/naive/time/mod.rs","begin":[701,4],"end":[726,5]},"visibility":"public","docs":"Subtracts another `NaiveTime` from the current time.\nReturns a `TimeDelta` within +/- 1 day.\nThis does not overflow or underflow at all.\n\nAs a part of Chrono's [leap second handling](#leap-second-handling),\nthe subtraction assumes that **there is no leap second ever**,\nexcept when any of the `NaiveTime`s themselves represents a leap second\nin which case the assumption becomes that\n**there are exactly one (or two) leap second(s) ever**.\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveTime};\n\nlet from_hmsm = |h, m, s, milli| { NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap() };\nlet since = NaiveTime::signed_duration_since;\n\nassert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 900)),\n           TimeDelta::zero());\nassert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 875)),\n           TimeDelta::milliseconds(25));\nassert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 6, 925)),\n           TimeDelta::milliseconds(975));\nassert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 0, 900)),\n           TimeDelta::seconds(7));\nassert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 0, 7, 900)),\n           TimeDelta::seconds(5 * 60));\nassert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(0, 5, 7, 900)),\n           TimeDelta::seconds(3 * 3600));\nassert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(4, 5, 7, 900)),\n           TimeDelta::seconds(-3600));\nassert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(2, 4, 6, 800)),\n           TimeDelta::seconds(3600 + 60 + 1) + TimeDelta::milliseconds(100));\n```\n\nLeap seconds are handled, but the subtraction assumes that\nthere were no other leap seconds happened.\n\n```\n# use chrono::{TimeDelta, NaiveTime};\n# let from_hmsm = |h, m, s, milli| { NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap() };\n# let since = NaiveTime::signed_duration_since;\nassert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 59, 0)),\n           TimeDelta::seconds(1));\nassert_eq!(since(from_hmsm(3, 0, 59, 1_500), from_hmsm(3, 0, 59, 0)),\n           TimeDelta::milliseconds(1500));\nassert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 0, 0)),\n           TimeDelta::seconds(60));\nassert_eq!(since(from_hmsm(3, 0, 0, 0), from_hmsm(2, 59, 59, 1_000)),\n           TimeDelta::seconds(1));\nassert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(2, 59, 59, 1_000)),\n           TimeDelta::seconds(61));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2639":{"id":"0:2639","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[190,9],"end":[190,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:963:137":{"id":"0:963:137","crate_id":0,"name":"Err","span":{"filename":"src/format/mod.rs","begin":[492,4],"end":[492,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:41604:9276-0:3108:2169":{"id":"a:2:41604:9276-0:3108:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2850-0:2566:2160":{"id":"b:2:2850-0:2566:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2600:726":{"id":"0:2600:726","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[395,9],"end":[395,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115-0:3169:2142":{"id":"0:115-0:3169:2142","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[484,30],"end":[484,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Month","name":"Month","id":"0:3169:2142","glob":false}}},"0:1268:2802":{"id":"0:1268:2802","crate_id":0,"name":"iso_week","span":{"filename":"src/naive/datetime/mod.rs","begin":[1273,4],"end":[1275,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1052:2701":{"id":"0:1052:2701","crate_id":0,"name":"and_hms","span":{"filename":"src/naive/date.rs","begin":[840,4],"end":[842,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date, hour, minute and second.\n\nNo [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;\nuse `NaiveDate::and_hms_*` methods with a subsecond parameter instead.\n\n# Panics\n\nPanics on invalid hour, minute and/or second.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `and_hms_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `and_hms_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1617":{"id":"0:1617","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[157,0],"end":[171,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1618:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:484:296":{"id":"0:484:296","crate_id":0,"name":"add_assign","span":{"filename":"src/datetime/mod.rs","begin":[1293,4],"end":[1298,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2366":{"id":"0:2366","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[156,20],"end":[156,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2367:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2364":{"id":"0:2364","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[156,16],"end":[156,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:173:2739":{"id":"0:173:2739","crate_id":0,"name":"succ","span":{"filename":"src/date.rs","begin":[206,4],"end":[208,5]},"visibility":"public","docs":"Makes a new `Date` for the next date.\n\nPanics when `self` is the last representable date.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"Use succ_opt() instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"Use succ_opt() instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5869-0:3064:2146":{"id":"b:5:5869-0:3064:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13096:2648":{"id":"2:13096:2648","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43349:8955","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41604:9276-0:2360:3420":{"id":"a:2:41604:9276-0:2360:3420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2559":{"id":"0:2559","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[325,31],"end":[325,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2561:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:91":{"id":"0:91","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[526,0],"end":[530,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sum","id":"2:8060:2499","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:92:2500"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2599":{"id":"0:2599","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[395,9],"end":[395,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2600:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1095:2797":{"id":"0:1095:2797","crate_id":0,"name":"month0","span":{"filename":"src/naive/date.rs","begin":[1545,4],"end":[1547,5]},"visibility":"default","docs":"Returns the month number starting from 0.\n\nThe return value ranges from 0 to 11.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().month0(), 8);\nassert_eq!(NaiveDate::from_ymd_opt(-308, 3, 14).unwrap().month0(), 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2216:3926":{"id":"0:2216:3926","crate_id":0,"name":"year_mod_100","span":{"filename":"src/format/parsed.rs","begin":[36,4],"end":[36,33]},"visibility":"public","docs":"Year modulo 100. Implies that the year is >= 1 BCE when set.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}}}},"0:2704:1151":{"id":"0:2704:1151","crate_id":0,"name":"partial_cmp","span":{"filename":"src/naive/datetime/mod.rs","begin":[76,30],"end":[76,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5869-0:3160:2171":{"id":"b:5:5869-0:3160:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:337:2152":{"id":"0:337:2152","crate_id":0,"name":"date","span":{"filename":"src/datetime/mod.rs","begin":[151,4],"end":[153,5]},"visibility":"public","docs":"Retrieves the date component with an associated timezone.\n\nUnless you are immediately planning on turning this into a `DateTime`\nwith the same timezone you should use the [`date_naive`](DateTime::date_naive) method.\n\n[`NaiveDate`] is a more well-defined type, and has more traits implemented on it,\nso should be preferred to [`Date`] any time you truly want to operate on dates.\n\n# Panics\n\n[`DateTime`] internally stores the date and time in UTC with a [`NaiveDateTime`]. This\nmethod will panic if the offset from UTC would push the local date outside of the\nrepresentable range of a [`Date`].","links":{"DateTime::date_naive":"0:338:2895","`NaiveDateTime`":"0:2692:2148","`DateTime`":"0:2171:2139","`NaiveDate`":"0:2637:2147","`Date`":"0:2164:2134"},"attrs":["#[inline]","#[deprecated(since = \"0.4.23\", note = \"Use `date_naive()` instead\")]","#[allow(deprecated)]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"Use `date_naive()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41605:9275-0:2426:3477":{"id":"a:2:41605:9275-0:2426:3477","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2560-0:2582:3548":{"id":"b:2:2560-0:2582:3548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:944":{"id":"0:944","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[366,0],"end":[380,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:946:3543"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2102:2807":{"id":"0:2102:2807","crate_id":0,"name":"with_day0","span":{"filename":"src/traits.rs","begin":[206,4],"end":[206,51]},"visibility":"default","docs":"Makes a new value with the day of month (starting from 0) changed.\n\n# Errors\n\nReturns `None` when:\n\n- The resulting date does not exist (for example `day0(30)` in April).\n- In case of [`DateTime<Tz>`] if the resulting date and time fall within a timezone\n  transition such as from DST to standard time.\n- The value for `day0` is out of range.\n\n[`DateTime<Tz>`]: crate::DateTime","links":{"crate::DateTime":"0:2171:2139"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:2849:1634":{"id":"2:2849:1634","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1893:7436":{"id":"0:1893:7436","crate_id":0,"name":"offset_from_local_datetime","span":{"filename":"src/offset/local/mod.rs","begin":[174,4],"end":[176,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2391:3450":{"id":"0:2391:3450","crate_id":0,"name":"Nanosecond9","span":{"filename":"src/format/mod.rs","begin":[206,4],"end":[206,15]},"visibility":"default","docs":"Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2850-0:2426:3477":{"id":"b:2:2850-0:2426:3477","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1093:2796":{"id":"0:1093:2796","crate_id":0,"name":"year","span":{"filename":"src/naive/date.rs","begin":[1511,4],"end":[1513,5]},"visibility":"default","docs":"Returns the year number in the [calendar date](#calendar-date).\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().year(), 2015);\nassert_eq!(NaiveDate::from_ymd_opt(-308, 3, 14).unwrap().year(), -308); // 309 BCE\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45:2428":{"id":"0:45:2428","crate_id":0,"name":"try_milliseconds","span":{"filename":"src/time_delta.rs","begin":[241,4],"end":[250,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of milliseconds.\n\n# Errors\n\nReturns `None` the `TimeDelta` would be out of bounds, i.e. when `milliseconds` is more\nthan `i64::MAX` or less than `-i64::MAX`. Notably, this is not the same as `i64::MIN`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["milliseconds",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1123:295":{"id":"0:1123:295","crate_id":0,"name":"add","span":{"filename":"src/naive/date.rs","begin":[1985,4],"end":[1987,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3104:2332","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3671-0:2763:2149":{"id":"b:2:3671-0:2763:2149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:503:1569":{"id":"0:503:1569","crate_id":0,"name":"sub","span":{"filename":"src/datetime/mod.rs","begin":[1392,4],"end":[1396,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1913":{"id":"0:1913","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[55,0],"end":[114,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"now\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1914:2817","0:1915:1782"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31969:237-0:2612:2165":{"id":"a:2:31969:237-0:2612:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2612:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:211:2800":{"id":"0:211:2800","crate_id":0,"name":"ordinal","span":{"filename":"src/date.rs","begin":[414,4],"end":[416,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:2129:2131":{"id":"b:2:2560-0:2129:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3671-0:2505:3498":{"id":"b:2:3671-0:2505:3498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2563-0:3057:2135":{"id":"b:2:2563-0:3057:2135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3206":{"id":"0:3206","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,9],"end":[31,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1242:2975":{"id":"0:1242:2975","crate_id":0,"name":"checked_add_days","span":{"filename":"src/naive/datetime/mod.rs","begin":[920,4],"end":[922,5]},"visibility":"public","docs":"Add a duration in [`Days`] to the date part of the `NaiveDateTime`\n\nReturns `None` if the resulting date would be out of range.","links":{"`Days`":"0:2617:2163"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:714:3998":{"id":"0:714:3998","crate_id":0,"name":"set_hour","span":{"filename":"src/format/parsed.rs","begin":[247,4],"end":[252,5]},"visibility":"public","docs":"Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n[`hour_mod_12`](#structfield.hour_mod_12) fields from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2240":{"id":"0:2240","crate_id":0,"name":null,"span":{"filename":"src/format/parsed.rs","begin":[20,27],"end":[20,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2302:793":{"id":"0:2302:793","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[77,44],"end":[77,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2027-0:2005:2168":{"id":"0:2027-0:2005:2168","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[525,16],"end":[525,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"round::DurationRound","name":"DurationRound","id":"0:2005:2168","glob":false}}},"b:2:2835-0:2637:2147":{"id":"b:2:2835-0:2637:2147","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2341:3412":{"id":"0:2341:3412","crate_id":0,"name":"Nanosecond","span":{"filename":"src/format/mod.rs","begin":[143,4],"end":[143,14]},"visibility":"default","docs":"The number of nanoseconds since the last whole second (FW=PW=9).\nNote that this is *not* left-aligned;\nsee also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13081:35726":{"id":"2:13081:35726","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41482:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:2452":{"id":"0:51:2452","crate_id":0,"name":"num_minutes","span":{"filename":"src/time_delta.rs","begin":[296,4],"end":[298,5]},"visibility":"public","docs":"Returns the total number of whole minutes in the `TimeDelta`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:2468":{"id":"0:56:2468","crate_id":0,"name":"num_nanoseconds","span":{"filename":"src/time_delta.rs","begin":[341,4],"end":[345,5]},"visibility":"public","docs":"Returns the total number of whole nanoseconds in the `TimeDelta`,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5869-0:2171:2139":{"id":"b:5:5869-0:2171:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:429:2805":{"id":"0:429:2805","crate_id":0,"name":"with_month0","span":{"filename":"src/datetime/mod.rs","begin":[1045,4],"end":[1047,5]},"visibility":"default","docs":"Makes a new `DateTime` with the month number (starting from 0) changed.\n\nSee also the [`NaiveDate::with_month0`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist.\n- The value for `month0` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveDate::with_month0`":"0:1104:2805"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:2284:3355":{"id":"a:2:32026:9229-0:2284:3355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13190:36908":{"id":"2:13190:36908","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39453:9640","Self::is_ascii":"2:13189:35010"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39453:9640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:1022":{"id":"0:82:1022","crate_id":0,"name":"mul","span":{"filename":"src/time_delta.rs","begin":[491,4],"end":[497,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:2654:5260":{"id":"b:2:2850-0:2654:5260","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41604:9276-0:2129:2131":{"id":"a:2:41604:9276-0:2129:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2034:2739":{"id":"0:2034:2739","crate_id":0,"name":"succ","span":{"filename":"src/weekday.rs","begin":[67,4],"end":[77,5]},"visibility":"public","docs":"The next day in the week.\n\n`w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`\n----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----\n`w.succ()`: | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun` | `Mon`","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:2746:2164":{"id":"b:2:2835-0:2746:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1121":{"id":"0:1121","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[1982,0],"end":[1988,1]},"visibility":"default","docs":"Add `Days` to `NaiveDate`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `NaiveDate::checked_add_days` to get an `Option` instead.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1122:199","0:1123:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2700":{"id":"0:2700","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[76,24],"end":[76,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2701:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[668,0],"end":[672,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2887:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:376:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3058:246-0:2505:3498":{"id":"a:2:3058:246-0:2505:3498","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1212":{"id":"0:1212","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[90,0],"end":[1105,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1213:1053","0:1214:3041","0:1215:3052","0:1216:6175","0:1217:6182","0:1218:3043","0:1219:3132","0:1220:2840","0:1223:2152","0:1224:2197","0:1225:2905","0:1227:2912","0:1228:2918","0:1229:2926","0:1230:2940","0:1231:2943","0:1232:2946","0:1233:2949","0:1234:2760","0:1235:2968","0:1236:2984","0:1237:3237","0:1240:2762","0:1241:2973","0:1242:2975","0:1243:2977","0:1244:2767","0:1245:2782","0:1249:739","0:1251:2969","0:1253:3053","0:1254:2382","0:1255:2383","0:1256:2838"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2339:3408":{"id":"0:2339:3408","crate_id":0,"name":"Second","span":{"filename":"src/format/mod.rs","begin":[139,4],"end":[139,10]},"visibility":"default","docs":"The number of seconds since the last whole minute (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1147:1067":{"id":"0:1147:1067","crate_id":0,"name":"next","span":{"filename":"src/naive/date.rs","begin":[2143,4],"end":[2147,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8248:179","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3083:1767":{"id":"0:3083:1767","crate_id":0,"name":"0","span":{"filename":"src/offset/mod.rs","begin":[47,11],"end":[47,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"T"}}},"0:2589:3562":{"id":"0:2589:3562","crate_id":0,"name":"Invalid","span":{"filename":"src/format/mod.rs","begin":[414,4],"end":[414,11]},"visibility":"default","docs":"The input string has some invalid character sequence for given formatting items.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:339:2197":{"id":"0:339:2197","crate_id":0,"name":"time","span":{"filename":"src/datetime/mod.rs","begin":[182,4],"end":[184,5]},"visibility":"public","docs":"Retrieves the time component.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:367:3003":{"id":"0:367:3003","crate_id":0,"name":"to_rfc3339","span":{"filename":"src/datetime/mod.rs","begin":[548,4],"end":[556,5]},"visibility":"public","docs":"Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:613:3351":{"id":"0:613:3351","crate_id":0,"name":"format_item","span":{"filename":"src/format/formatting.rs","begin":[171,0],"end":[187,1]},"visibility":"public","docs":"Formats single formatting item","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[deprecated(since = \"0.4.32\", note = \"Use DelayedFormat::fmt instead\")]"],"deprecation":{"since":"0.4.32","note":"Use DelayedFormat::fmt instead"},"inner":{"function":{"decl":{"inputs":[["w",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["date",{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"crate::NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["time",{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"crate::NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["off",{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"tuple":[{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"crate::FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}}],"bindings":[]}}}}],["item",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"super::Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:2372:2842":{"id":"a:2:32026:9229-0:2372:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1076:739":{"id":"0:1076:739","crate_id":0,"name":"format","span":{"filename":"src/naive/date.rs","begin":[1320,4],"end":[1322,5]},"visibility":"public","docs":"Formats the date with the specified format string.\nSee the [`format::strftime` module](crate::format::strftime)\non the supported escape sequences.\n\nThis returns a `DelayedFormat`,\nwhich gets converted to a string only when actual formatting happens.\nYou may use the `to_string` method to get a `String`,\nor just feed it into `print!` and other formatting macros.\n(In this way it avoids the redundant memory allocation.)\n\nA wrong format string does *not* issue an error immediately.\nRather, converting or formatting the `DelayedFormat` fails.\nYou are recommended to immediately use `DelayedFormat` for this reason.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet d = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap();\nassert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");\nassert_eq!(d.format(\"%A, %-d %B, %C%y\").to_string(), \"Saturday, 5 September, 2015\");\n```\n\nThe resulting `DelayedFormat` can be formatted directly via the `Display` trait.\n\n```\n# use chrono::NaiveDate;\n# let d = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap();\nassert_eq!(format!(\"{}\", d.format(\"%Y-%m-%d\")), \"2015-09-05\");\nassert_eq!(format!(\"{}\", d.format(\"%A, %-d %B, %C%y\")), \"Saturday, 5 September, 2015\");\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:2746:2164":{"id":"b:2:2560-0:2746:2164","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1533:726":{"id":"0:1533:726","crate_id":0,"name":"fmt","span":{"filename":"src/naive/time/mod.rs","begin":[1390,4],"end":[1414,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2792":{"id":"0:2792","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[22,36],"end":[22,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2793:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:967:3264":{"id":"0:967:3264","crate_id":0,"name":"from_str","span":{"filename":"src/format/mod.rs","begin":[531,4],"end":[551,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:12717:3263","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:487:296":{"id":"0:487:296","crate_id":0,"name":"add_assign","span":{"filename":"src/datetime/mod.rs","begin":[1313,4],"end":[1317,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1134:1569":{"id":"0:1134:1569","crate_id":0,"name":"sub","span":{"filename":"src/naive/date.rs","begin":[2087,4],"end":[2089,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32":{"id":"0:32","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[77,0],"end":[443,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:33:1053","0:34:2393","0:35:2394","0:36:2403","0:37:2404","0:38:2408","0:39:2409","0:40:2413","0:41:2414","0:42:2419","0:43:2397","0:44:2427","0:45:2428","0:46:2439","0:47:2443","0:48:2445","0:49:2446","0:50:2450","0:51:2452","0:52:2448","0:53:2457","0:54:2459","0:55:2464","0:56:2468","0:57:2465","0:58:2471","0:59:2473","0:60:2474","0:61:2475","0:62:2477","0:63:2479","0:64:2483","0:65:2489"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:378:60":{"id":"0:378:60","crate_id":0,"name":"default","span":{"filename":"src/datetime/mod.rs","begin":[676,4],"end":[678,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:2479:3495":{"id":"a:2:32026:9229-0:2479:3495","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3162":{"id":"0:3162","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[230,9],"end":[230,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3163:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1336:1569":{"id":"0:1336:1569","crate_id":0,"name":"sub","span":{"filename":"src/naive/datetime/mod.rs","begin":[2045,4],"end":[2047,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3109:2337","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:2251:2654":{"id":"b:5:725-0:2251:2654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:558-0:330:2158":{"id":"0:558-0:330:2158","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[503,33],"end":[503,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"datetime::MIN_DATETIME","name":"MIN_DATETIME","id":"0:330:2158","glob":false}}},"0:1033:4035":{"id":"0:1033:4035","crate_id":0,"name":"from_yo_opt","span":{"filename":"src/naive/date.rs","begin":[340,4],"end":[343,5]},"visibility":"public","docs":"Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n(year and day of the year).\n\n# Errors\n\nReturns `None` if:\n- The specified ordinal day does not exist (for example 2023-366).\n- The value for `ordinal` is invalid (for example: `0`, `400`).\n- `year` is out of range for `NaiveDate`.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet from_yo_opt = NaiveDate::from_yo_opt;\n\nassert!(from_yo_opt(2015, 100).is_some());\nassert!(from_yo_opt(2015, 0).is_none());\nassert!(from_yo_opt(2015, 365).is_some());\nassert!(from_yo_opt(2015, 366).is_none());\nassert!(from_yo_opt(-4, 366).is_some()); // 5 BCE is a leap year\nassert!(from_yo_opt(400000, 1).is_none());\nassert!(from_yo_opt(-400000, 1).is_none());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"i32"}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31969:237-0:3077:2166":{"id":"a:2:31969:237-0:3077:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1113":{"id":"0:1113","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[1908,0],"end":[1913,1]},"visibility":"default","docs":"Add-assign of `TimeDelta` to `NaiveDate`.\n\nThis discards the fractional days in `TimeDelta`, rounding to the closest integral number of days\ntowards `TimeDelta::zero()`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDate::checked_add_signed`] to get an `Option` instead.","links":{"`NaiveDate::checked_add_signed`":"0:1068:2760"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33052:2333","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1114:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31969:237-0:2479:3495":{"id":"a:2:31969:237-0:2479:3495","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2582:3548":{"id":"0:2582:3548","crate_id":0,"name":"ParseErrorKind","span":{"filename":"src/format/mod.rs","begin":[396,0],"end":[428,1]},"visibility":"public","docs":"The category of parse error","links":{},"attrs":["#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:2583:2209","0:2585:3555","0:2587:3560","0:2589:3562","0:2591:3564","0:2593:3566","0:2595:3568"],"impls":["a:2:41605:9275-0:2582:3548","a:2:3058:246-0:2582:3548","a:2:31969:237-0:2582:3548","a:2:41604:9276-0:2582:3548","a:2:32026:9229-0:2582:3548","b:2:2563-0:2582:3548","b:2:3671-0:2582:3548","b:2:2835-0:2582:3548","b:2:2839-0:2582:3548","b:2:2850-0:2582:3548","b:2:2560-0:2582:3548","b:2:2845-0:2582:3548","b:5:725-0:2582:3548","0:2604","0:2601","0:2609","0:2599","0:2606","0:2608","0:2603"]}}},"b:2:2563-0:3169:2142":{"id":"b:2:2563-0:3169:2142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:474":{"id":"0:474","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1251,0],"end":[1258,1]},"visibility":"default","docs":"Add `TimeDelta` to `DateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`DateTime<Tz>::checked_add_signed`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_add_signed`":"0:354:2760"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3104:2332","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:476:199","0:477:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1302":{"id":"0:1302","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1718,0],"end":[1723,1]},"visibility":"default","docs":"Add-assign `TimeDelta` to `NaiveDateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_add_signed`] to get an `Option` instead.","links":{"`NaiveDateTime::checked_add_signed`":"0:1234:2760"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33052:2333","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1303:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2325:2164":{"id":"0:2325:2164","crate_id":0,"name":"IsoWeek","span":{"filename":"src/format/mod.rs","begin":[125,4],"end":[125,11]},"visibility":"default","docs":"Week number in the ISO week date (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13085:35728":{"id":"2:13085:35728","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10849:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13194:36911":{"id":"2:13194:36911","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:7728"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1491:2382":{"id":"0:1491:2382","crate_id":0,"name":"MIN","span":{"filename":"src/naive/time/mod.rs","begin":[858,4],"end":[858,52]},"visibility":"public","docs":"The earliest possible `NaiveTime`","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:2648:1151":{"id":"0:2648:1151","crate_id":0,"name":"partial_cmp","span":{"filename":"src/naive/date.rs","begin":[190,30],"end":[190,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1111:199":{"id":"0:1111:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/date.rs","begin":[1891,4],"end":[1891,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:498:199":{"id":"0:498:199","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1370,4],"end":[1370,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:521:1569":{"id":"0:521:1569","crate_id":0,"name":"sub","span":{"filename":"src/datetime/mod.rs","begin":[1481,4],"end":[1483,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2321:3391":{"id":"0:2321:3391","crate_id":0,"name":"WeekFromSun","span":{"filename":"src/format/mod.rs","begin":[121,4],"end":[121,15]},"visibility":"default","docs":"Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2155:726":{"id":"0:2155:726","crate_id":0,"name":"fmt","span":{"filename":"src/time_delta.rs","begin":[575,9],"end":[575,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2690":{"id":"0:2690","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2135,62],"end":[2135,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2646:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2691:465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2850-0:3064:2146":{"id":"b:2:2850-0:3064:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2835-0:3064:2146":{"id":"b:2:2835-0:3064:2146","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2758":{"id":"0:2758","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[19,47],"end":[19,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2759:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1560-0:2763:2149":{"id":"0:1560-0:2763:2149","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[22,0],"end":[22,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::time::NaiveTime","name":"NaiveTime","id":"0:2763:2149","glob":false}}},"b:5:5869-0:3243:2173":{"id":"b:5:5869-0:3243:2173","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3243:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41604:9276-0:2612:2165":{"id":"a:2:41604:9276-0:2612:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2612:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1333:295":{"id":"0:1333:295","crate_id":0,"name":"add","span":{"filename":"src/naive/datetime/mod.rs","begin":[2031,4],"end":[2033,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3104:2332","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:2475":{"id":"0:61:2475","crate_id":0,"name":"max_value","span":{"filename":"src/time_delta.rs","begin":[393,4],"end":[395,5]},"visibility":"public","docs":"The maximum possible `TimeDelta`: `i64::MAX` milliseconds.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:2187:2140":{"id":"b:2:2839-0:2187:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:346:2946":{"id":"0:346:2946","crate_id":0,"name":"timestamp_subsec_micros","span":{"filename":"src/datetime/mod.rs","begin":[314,4],"end":[316,5]},"visibility":"public","docs":"Returns the number of microseconds since the last second boundary.\n\nIn event of a leap second this may exceed 999,999.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3071:667":{"id":"0:3071:667","crate_id":0,"name":"eq","span":{"filename":"src/offset/utc.rs","begin":[43,22],"end":[43,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32026:9229-0:3077:2166":{"id":"a:2:32026:9229-0:3077:2166","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2103:2808":{"id":"0:2103:2808","crate_id":0,"name":"with_ordinal","span":{"filename":"src/traits.rs","begin":[220,4],"end":[220,57]},"visibility":"default","docs":"Makes a new value with the day of year (starting from 1) changed.\n\n# Errors\n\nReturns `None` when:\n\n- The resulting date does not exist (`with_ordinal(366)` in a non-leap year).\n- In case of [`DateTime<Tz>`] if the resulting date and time fall within a timezone\n  transition such as from DST to standard time.\n- The value for `ordinal` is out of range.\n\n[`DateTime<Tz>`]: crate::DateTime","links":{"crate::DateTime":"0:2171:2139"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1960:2905":{"id":"0:1960:2905","crate_id":0,"name":"timestamp","span":{"filename":"src/offset/mod.rs","begin":[358,4],"end":[360,5]},"visibility":"default","docs":"Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\nand the number of nanoseconds since the last whole non-leap second.\n\nThe nanosecond part can exceed 1,000,000,000 in order to represent a\n[leap second](crate::NaiveTime#leap-second-handling), but only when `secs % 60 == 59`.\n(The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)\n\n# Panics\n\nPanics on the out-of-range number of seconds and/or invalid nanosecond,\nfor a non-panicking version see [`timestamp_opt`](#method.timestamp_opt).","links":{"crate::NaiveTime#leap-second-handling":"0:2763:2149"},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `timestamp_opt()` instead\")]"],"deprecation":{"since":"0.4.23","note":"use `timestamp_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["secs",{"primitive":"i64"}],["nsecs",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1145":{"id":"0:1145","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2140,0],"end":[2153,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min_by","size_hint","copied","partial_cmp_by","count","try_find","is_partitioned","inspect","skip_while","step_by","sum","min_by_key","take","all","skip","cloned","eq_by","rposition","try_fold","by_ref","chain","take_while","intersperse","cmp","filter","any","ne","max_by","enumerate","le","is_sorted","unzip","try_for_each","try_collect","eq","map_while","lt","min","rev","intersperse_with","fold","max_by_key","max","is_sorted_by","array_chunks","reduce","collect_into","flat_map","flatten","gt","for_each","next_chunk","is_sorted_by_key","product","try_reduce","partition","last","map_windows","filter_map","advance_by","ge","find","partial_cmp","position","zip","__iterator_get_unchecked","map","cmp_by","find_map","partition_in_place","fuse","peekable","scan","nth","collect","cycle"],"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1146:174","0:1147:1067","0:1148:5876"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2124":{"id":"0:2124","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[598,0],"end":[602,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2125:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13165:41652":{"id":"2:13165:41652","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2470:458":{"id":"0:2470:458","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[280,22],"end":[280,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2642":{"id":"0:2642","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[190,20],"end":[190,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:338:2895":{"id":"0:338:2895","crate_id":0,"name":"date_naive","span":{"filename":"src/datetime/mod.rs","begin":[174,4],"end":[177,5]},"visibility":"public","docs":"Retrieves the date component.\n\n# Panics\n\n[`DateTime`] internally stores the date and time in UTC with a [`NaiveDateTime`]. This\nmethod will panic if the offset from UTC would push the local date outside of the\nrepresentable range of a [`NaiveDate`].\n\n# Example\n\n```\nuse chrono::prelude::*;\n\nlet date: DateTime<Utc> = Utc.with_ymd_and_hms(2020, 1, 1, 0, 0, 0).unwrap();\nlet other: DateTime<FixedOffset> = FixedOffset::east_opt(23).unwrap().with_ymd_and_hms(2020, 1, 1, 0, 0, 0).unwrap();\nassert_eq!(date.date_naive(), other.date_naive());\n```","links":{"`NaiveDateTime`":"0:2692:2148","`DateTime`":"0:2171:2139","`NaiveDate`":"0:2637:2147"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2424:793":{"id":"0:2424:793","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[171,38],"end":[171,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2644":{"id":"0:2644","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[190,24],"end":[190,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2645:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1224:2197":{"id":"0:1224:2197","crate_id":0,"name":"time","span":{"filename":"src/naive/datetime/mod.rs","begin":[408,4],"end":[410,5]},"visibility":"public","docs":"Retrieves a time component.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveTime};\n\nlet dt = NaiveDate::from_ymd_opt(2016, 7, 8).unwrap().and_hms_opt(9, 10, 11).unwrap();\nassert_eq!(dt.time(), NaiveTime::from_hms_opt(9, 10, 11).unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1959:5992":{"id":"0:1959:5992","crate_id":0,"name":"isoywd_opt","span":{"filename":"src/offset/mod.rs","begin":[338,4],"end":[343,5]},"visibility":"default","docs":"Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.\n\nThe time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),\nbut it will propagate to the `DateTime` values constructed via this date.\n\nReturns `None` on the out-of-range date and/or invalid week number.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"use `from_local_datetime()` with a `NaiveDateTime` instead\")]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.23","note":"use `from_local_datetime()` with a `NaiveDateTime` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}],["week",{"primitive":"u32"}],["weekday",{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:2767":{"id":"0:185:2767","crate_id":0,"name":"signed_duration_since","span":{"filename":"src/date.rs","begin":[287,4],"end":[289,5]},"visibility":"public","docs":"Subtracts another `Date` from the current date.\nReturns a `TimeDelta` of integral numbers.\n\nThis does not overflow or underflow at all,\nas all possible output fits in the range of `TimeDelta`.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Tz2","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2761:793":{"id":"0:2761:793","crate_id":0,"name":"hash","span":{"filename":"src/naive/isoweek.rs","begin":[19,54],"end":[19,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31969:237-0:2178:2653":{"id":"a:2:31969:237-0:2178:2653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1031:2825":{"id":"0:1031:2825","crate_id":0,"name":"from_ymd_opt","span":{"filename":"src/naive/date.rs","begin":[291,4],"end":[299,5]},"visibility":"public","docs":"Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n(year, month and day).\n\n# Errors\n\nReturns `None` if:\n- The specified calendar day does not exist (for example 2023-04-31).\n- The value for `month` or `day` is invalid.\n- `year` is out of range for `NaiveDate`.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet from_ymd_opt = NaiveDate::from_ymd_opt;\n\nassert!(from_ymd_opt(2015, 3, 14).is_some());\nassert!(from_ymd_opt(2015, 0, 14).is_none());\nassert!(from_ymd_opt(2015, 2, 29).is_none());\nassert!(from_ymd_opt(-4, 2, 29).is_some()); // 5 BCE is a leap year\nassert!(from_ymd_opt(400000, 1, 1).is_none());\nassert!(from_ymd_opt(-400000, 1, 1).is_none());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"i32"}],["month",{"primitive":"u32"}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2678":{"id":"0:2678","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2135,22],"end":[2135,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2679:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2069:8459":{"id":"0:2069:8459","crate_id":0,"name":"from_i64","span":{"filename":"src/month.rs","begin":[202,4],"end":[204,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["n",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13077:334":{"id":"2:13077:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13078:35729","`u8`":"1:12084:1656"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13158:41649":{"id":"2:13158:41649","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2617:2163":{"id":"0:2617:2163","crate_id":0,"name":"Days","span":{"filename":"src/naive/date.rs","begin":[133,0],"end":[133,32]},"visibility":"public","docs":"A duration in calendar days.\n\nThis is useful because when using `TimeDelta` it is possible that adding `TimeDelta::days(1)`\ndoesn't increment the day value as expected due to it being a fixed number of seconds. This\ndifference applies only when dealing with `DateTime<TimeZone>` data types and in other cases\n`TimeDelta::days(n)` and `Days::new(n)` are equivalent.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:1022","a:2:41605:9275-0:2617:2163","a:2:3058:246-0:2617:2163","a:2:31969:237-0:2617:2163","a:2:41604:9276-0:2617:2163","a:2:32026:9229-0:2617:2163","b:2:2563-0:2617:2163","b:2:3671-0:2617:2163","b:2:2835-0:2617:2163","b:2:2839-0:2617:2163","b:2:2850-0:2617:2163","b:2:2560-0:2617:2163","b:2:2845-0:2617:2163","b:5:725-0:2617:2163","0:1124","0:2620","0:2625","0:2635","0:1331","0:2627","0:526","0:1334","0:2631","0:2633","0:2630","0:2623","0:2622","0:1121","0:530"]}}},"0:1020:5292":{"id":"0:1020:5292","crate_id":0,"name":"last_day","span":{"filename":"src/naive/date.rs","begin":[91,4],"end":[99,5]},"visibility":"public","docs":"Returns a date representing the last day of the week.\n\n# Panics\n\nPanics if the last day of the week happens to fall just out of range of `NaiveDate`\n(more than ca. 262,000 years away from common era).\n\n# Examples\n\n```\nuse chrono::{NaiveDate, Weekday};\n\nlet date = NaiveDate::from_ymd_opt(2022, 4, 18).unwrap();\nlet week = date.week(Weekday::Mon);\nassert!(week.last_day() >= date);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2480:3507":{"id":"0:2480:3507","crate_id":0,"name":"Hours","span":{"filename":"src/format/mod.rs","begin":[298,4],"end":[298,9]},"visibility":"default","docs":"Format offset from UTC as only hours. Not recommended, it is not uncommon for timezones to\nhave an offset of 30 minutes, 15 minutes, etc.\nAny minutes and seconds get truncated.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:5:725-0:2164:2134":{"id":"b:5:725-0:2164:2134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:379":{"id":"0:379","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[681,0],"end":[685,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2887:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:380:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2217:3930":{"id":"0:2217:3930","crate_id":0,"name":"isoyear","span":{"filename":"src/format/parsed.rs","begin":[42,4],"end":[42,28]},"visibility":"public","docs":"Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).\n\nThis can be negative unlike [`isoyear_div_100`](#structfield.isoyear_div_100) and\n[`isoyear_mod_100`](#structfield.isoyear_mod_100) fields.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}}}},"0:3104":{"id":"0:3104","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[41,44],"end":[41,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3106:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1030:5362":{"id":"0:1030:5362","crate_id":0,"name":"from_ymd","span":{"filename":"src/naive/date.rs","begin":[262,4],"end":[264,5]},"visibility":"public","docs":"Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n(year, month and day).\n\n# Panics\n\nPanics if the specified calendar day does not exist, on invalid values for `month` or `day`,\nor if `year` is out of range for `NaiveDate`.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `from_ymd_opt()` instead\")]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_ymd_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"i32"}],["month",{"primitive":"u32"}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2038:4045":{"id":"0:2038:4045","crate_id":0,"name":"num_days_from_monday","span":{"filename":"src/weekday.rs","begin":[137,4],"end":[139,5]},"visibility":"public","docs":"Returns a day-of-week number starting from Monday = 0.\n\n`w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`\n--------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----\n`w.num_days_from_monday()`: | 0     | 1     | 2     | 3     | 4     | 5     | 6\n\n# Example\n\n```rust\n# use chrono::{Local, Datelike};\n// MTWRFSU is occasionally used as a single-letter abbreviation of the weekdays.\n// Use `num_days_from_monday` to index into the array.\nconst MTWRFSU: [char; 7] = ['M', 'T', 'W', 'R', 'F', 'S', 'U'];\n\nlet today = Local::now().weekday();\nprintln!(\"{}\", MTWRFSU[today.num_days_from_monday() as usize]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:2213:2843":{"id":"b:2:2839-0:2213:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1243:2977":{"id":"0:1243:2977","crate_id":0,"name":"checked_sub_days","span":{"filename":"src/naive/datetime/mod.rs","begin":[928,4],"end":[930,5]},"visibility":"public","docs":"Subtract a duration in [`Days`] from the date part of the `NaiveDateTime`\n\nReturns `None` if the resulting date would be out of range.","links":{"`Days`":"0:2617:2163"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2698":{"id":"0:2698","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[76,20],"end":[76,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:365:2775":{"id":"0:365:2775","crate_id":0,"name":"years_since","span":{"filename":"src/datetime/mod.rs","begin":[514,4],"end":[528,5]},"visibility":"public","docs":"Retrieve the elapsed years from now to the given [`DateTime`].\n\n# Errors\n\nReturns `None` if `base < self`.","links":{"`DateTime`":"0:2171:2139"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["base",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2636:465":{"id":"0:2636:465","crate_id":0,"name":"cmp","span":{"filename":"src/naive/date.rs","begin":[132,62],"end":[132,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1335:199":{"id":"0:1335:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[2043,4],"end":[2043,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:32026:9229-0:2612:2165":{"id":"a:2:32026:9229-0:2612:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32026:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2612:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2839-0:2164:2134":{"id":"b:2:2839-0:2164:2134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2562":{"id":"0:2562","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[325,38],"end":[325,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2564:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:476:199":{"id":"0:476:199","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1252,4],"end":[1252,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:1425":{"id":"0:1425","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[59,0],"end":[118,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1426:2796","0:1427:3651","0:1428:6844"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:31969:237-0:2461:3492":{"id":"a:2:31969:237-0:2461:3492","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1944:2733":{"id":"0:1944:2733","crate_id":0,"name":"and_hms_nano_opt","span":{"filename":"src/offset/mod.rs","begin":[175,4],"end":[188,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nPropagates any error. Ambiguous result would be discarded.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31969:237-0:2251:2654":{"id":"a:2:31969:237-0:2251:2654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2835-0:2582:3548":{"id":"b:2:2835-0:2582:3548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2136:60":{"id":"0:2136:60","crate_id":0,"name":"default","span":{"filename":"src/time_delta.rs","begin":[52,22],"end":[52,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:451:3200":{"id":"0:451:3200","crate_id":0,"name":"with_nanosecond","span":{"filename":"src/datetime/mod.rs","begin":[1191,4],"end":[1193,5]},"visibility":"default","docs":"Makes a new `DateTime` with nanoseconds since the whole non-leap second changed.\n\nReturns `None` when the resulting `NaiveDateTime` would be invalid.\nAs with the [`NaiveDateTime::nanosecond`] method,\nthe input range can exceed 1,000,000,000 for leap seconds.\n\nSee also the [`NaiveTime::with_nanosecond`] method.\n\n# Errors\n\nReturns `None` if `nanosecond >= 2,000,000,000`.","links":{"`NaiveTime::with_nanosecond`":"0:1501:3200","`NaiveDateTime::nanosecond`":"0:1287:3179"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1285:3177":{"id":"0:1285:3177","crate_id":0,"name":"minute","span":{"filename":"src/naive/datetime/mod.rs","begin":[1484,4],"end":[1486,5]},"visibility":"default","docs":"Returns the minute number from 0 to 59.\n\nSee also the [`NaiveTime::minute`] method.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Timelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 34, 56, 789).unwrap();\nassert_eq!(dt.minute(), 34);\n```","links":{"`NaiveTime::minute`":"0:1495:3177"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2563-0:3160:2171":{"id":"b:2:2563-0:3160:2171","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1980-0:2781:2145":{"id":"0:1980-0:2781:2145","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[522,17],"end":[522,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"offset::FixedOffset","name":"FixedOffset","id":"0:2781:2145","glob":false}}},"2:13094:3672":{"id":"2:13094:3672","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12067:454"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43333:8957","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3075:793":{"id":"0:3075:793","crate_id":0,"name":"hash","span":{"filename":"src/offset/utc.rs","begin":[43,37],"end":[43,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2495":{"id":"0:2495","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[293,22],"end":[293,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2496:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2493:726":{"id":"0:2493:726","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[293,9],"end":[293,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2497":{"id":"0:2497","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[293,29],"end":[293,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2845-0:2171:2139":{"id":"b:2:2845-0:2171:2139","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2213:2843":{"id":"0:2213:2843","crate_id":0,"name":"Parsed","span":{"filename":"src/format/parsed.rs","begin":[21,0],"end":[106,1]},"visibility":"public","docs":"Parsed parts of date and time. There are two classes of methods:\n\n- `set_*` methods try to set given field(s) while checking for the consistency.\n  It may or may not check for the range constraint immediately (for efficiency reasons).\n\n- `to_*` methods try to make a concrete date and time value out of set fields.\n  It fully checks any remaining out-of-range conditions and inconsistent/impossible fields.","links":{},"attrs":["#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:2214:2796","0:2215:3924","0:2216:3926","0:2217:3930","0:2218:3935","0:2219:3937","0:2220:2172","0:2221:3644","0:2222:3647","0:2223:2195","0:2224:2170","0:2225:2800","0:2226:2798","0:2227:3948","0:2228:3950","0:2229:3177","0:2230:3178","0:2231:3179","0:2232:2905","0:2233:1104"],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:685","a:2:41605:9275-0:2213:2843","a:2:3058:246-0:2213:2843","a:2:31969:237-0:2213:2843","a:2:41604:9276-0:2213:2843","a:2:32026:9229-0:2213:2843","b:2:2563-0:2213:2843","b:2:3671-0:2213:2843","b:2:2835-0:2213:2843","b:2:2839-0:2213:2843","b:2:2850-0:2213:2843","b:2:2560-0:2213:2843","b:2:2845-0:2213:2843","b:5:725-0:2213:2843","0:2244","0:2235","0:2246","0:2237","0:2240","0:2242","0:2238"]}}},"0:1547-0:2617:2163":{"id":"0:1547-0:2617:2163","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[13,21],"end":[13,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::date::Days","name":"Days","id":"0:2617:2163","glob":false}}},"a:2:3058:246-0:2673:5261":{"id":"a:2:3058:246-0:2673:5261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2146":{"id":"0:2146","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,63],"end":[52,68]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2147:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2845-0:2692:2148":{"id":"b:2:2845-0:2692:2148","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1553-0:1025:2153":{"id":"0:1553-0:1025:2153","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[15,21],"end":[15,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"self::date::MAX_DATE","name":"MAX_DATE","id":"0:1025:2153","glob":false}}},"0:3060":{"id":"0:3060","crate_id":0,"name":null,"span":{"filename":"src/offset/local/mod.rs","begin":[109,15],"end":[109,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3061:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2591:3564":{"id":"0:2591:3564","crate_id":0,"name":"TooShort","span":{"filename":"src/format/mod.rs","begin":[417,4],"end":[417,12]},"visibility":"default","docs":"The input string has been prematurely ended.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2560-0:2372:2842":{"id":"b:2:2560-0:2372:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2560-0:2566:2160":{"id":"b:2:2560-0:2566:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1498:3183":{"id":"0:1498:3183","crate_id":0,"name":"with_hour","span":{"filename":"src/naive/time/mod.rs","begin":[965,4],"end":[971,5]},"visibility":"default","docs":"Makes a new `NaiveTime` with the hour number changed.\n\n# Errors\n\nReturns `None` if the value for `hour` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nlet dt = NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap();\nassert_eq!(dt.with_hour(7), Some(NaiveTime::from_hms_nano_opt(7, 56, 4, 12_345_678).unwrap()));\nassert_eq!(dt.with_hour(24), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2839-0:2692:2148":{"id":"b:2:2839-0:2692:2148","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1103:2804":{"id":"0:1103:2804","crate_id":0,"name":"with_month","span":{"filename":"src/naive/date.rs","begin":[1736,4],"end":[1738,5]},"visibility":"default","docs":"Makes a new `NaiveDate` with the month number (starting from 1) changed.\n\n# Errors\n\nReturns `None` if the resulting date does not exist, or if the value for `month` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_month(10),\n           Some(NaiveDate::from_ymd_opt(2015, 10, 8).unwrap()));\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_month(13), None); // no month 13\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 30).unwrap().with_month(2), None); // no February 30\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5869-0:2763:2149":{"id":"b:5:5869-0:2763:2149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5867:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5871:1609"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1482:2782":{"id":"0:1482:2782","crate_id":0,"name":"format_with_items","span":{"filename":"src/naive/time/mod.rs","begin":[784,4],"end":[790,5]},"visibility":"public","docs":"Formats the time with the specified formatting items.\nOtherwise it is the same as the ordinary [`format`](#method.format) method.\n\nThe `Iterator` of items should be `Clone`able,\nsince the resulting `DelayedFormat` value may be formatted multiple times.\n\n# Example\n\n```\nuse chrono::NaiveTime;\nuse chrono::format::strftime::StrftimeItems;\n\nlet fmt = StrftimeItems::new(\"%H:%M:%S\");\nlet t = NaiveTime::from_hms_opt(23, 56, 4).unwrap();\nassert_eq!(t.format_with_items(fmt.clone()).to_string(), \"23:56:04\");\nassert_eq!(t.format(\"%H:%M:%S\").to_string(),             \"23:56:04\");\n```\n\nThe resulting `DelayedFormat` can be formatted directly via the `Display` trait.\n\n```\n# use chrono::NaiveTime;\n# use chrono::format::strftime::StrftimeItems;\n# let fmt = StrftimeItems::new(\"%H:%M:%S\").clone();\n# let t = NaiveTime::from_hms_opt(23, 56, 4).unwrap();\nassert_eq!(format!(\"{}\", t.format_with_items(fmt)), \"23:56:04\");\n```","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1231:2943":{"id":"0:1231:2943","crate_id":0,"name":"timestamp_subsec_millis","span":{"filename":"src/naive/datetime/mod.rs","begin":[588,4],"end":[590,5]},"visibility":"public","docs":"Returns the number of milliseconds since the last whole non-leap second.\n\nThe return value ranges from 0 to 999,\nor for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet dt = NaiveDate::from_ymd_opt(2016, 7, 8).unwrap().and_hms_nano_opt(9, 10, 11, 123_456_789).unwrap();\nassert_eq!(dt.timestamp_subsec_millis(), 123);\n\nlet dt = NaiveDate::from_ymd_opt(2015, 7, 1).unwrap().and_hms_nano_opt(8, 59, 59, 1_234_567_890).unwrap();\nassert_eq!(dt.timestamp_subsec_millis(), 1_234);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:1185":{"id":"0:106:1185","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[475,0],"end":[475,15]},"visibility":"public","docs":"A convenience module appropriate for glob imports (`use chrono::prelude::*;`).","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:107-0:2164:2134","0:108-0:3057:2135","0:109-0:1997:2138","0:111-0:2171:2139","0:112-0:2187:2140","0:114-0:2087:2141","0:115-0:3169:2142","0:116-0:2106:2143","0:117-0:3125:2144","0:119-0:2781:2145","0:120-0:3064:2146","0:122-0:2637:2147","0:123-0:2692:2148","0:124-0:2763:2149","0:126-0:1948:2150","0:127-0:1950:2151"],"is_stripped":false}}},"0:1341":{"id":"0:1341","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[2134,0],"end":[2163,1]},"visibility":"default","docs":"Parsing a `str` into a `NaiveDateTime` uses the same format,\n[`%Y-%m-%dT%H:%M:%S%.f`](crate::format::strftime), as in `Debug`.\n\n# Example\n\n```\nuse chrono::{NaiveDateTime, NaiveDate};\n\nlet dt = NaiveDate::from_ymd_opt(2015, 9, 18).unwrap().and_hms_opt(23, 56, 4).unwrap();\nassert_eq!(\"2015-09-18T23:56:04\".parse::<NaiveDateTime>(), Ok(dt));\n\nlet dt = NaiveDate::from_ymd_opt(12345, 6, 7).unwrap().and_hms_milli_opt(7, 59, 59, 1_500).unwrap(); // leap second\nassert_eq!(\"+12345-6-7T7:59:60.5\".parse::<NaiveDateTime>(), Ok(dt));\n\nassert!(\"foo\".parse::<NaiveDateTime>().is_err());\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12717:3263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1342:137","0:1343:3264"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3088":{"id":"0:3088","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[41,9],"end":[41,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3090:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:725-0:2187:2140":{"id":"b:5:725-0:2187:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2133:458":{"id":"0:2133:458","crate_id":0,"name":"clone","span":{"filename":"src/time_delta.rs","begin":[52,9],"end":[52,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:2178:2653":{"id":"b:2:2835-0:2178:2653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2087:2141":{"id":"0:2087:2141","crate_id":0,"name":"Datelike","span":{"filename":"src/traits.rs","begin":[31,0],"end":[264,1]},"visibility":"public","docs":"The common set of methods for date component.\n\nMethods such as [`year`], [`month`], [`day`] and [`weekday`] can be used to get basic\ninformation about the date.\n\nThe `with_*` methods can change the date.\n\n# Warning\n\nThe `with_*` methods can be convenient to change a single component of a date, but they must be\nused with some care. Examples to watch out for:\n\n- [`with_year`] changes the year component of a year-month-day value. Don't use this method if\n  you want the ordinal to stay the same after changing the year, of if you want the week and\n  weekday values to stay the same.\n- Don't combine two `with_*` methods to change two components of the date. For example to\n  change both the year and month components of a date. This could fail because an intermediate\n  value does not exist, while the final date would be valid.\n\nFor more complex changes to a date, it is best to use the methods on [`NaiveDate`] to create a\nnew value instead of altering an existing date.\n\n[`year`]: Datelike::year\n[`month`]: Datelike::month\n[`day`]: Datelike::day\n[`weekday`]: Datelike::weekday\n[`with_year`]: Datelike::with_year\n[`NaiveDate`]: crate::NaiveDate","links":{"Datelike::weekday":"0:2096:2170","Datelike::month":"0:2090:2172","Datelike::with_year":"0:2098:2803","Datelike::year":"0:2088:2796","crate::NaiveDate":"0:2637:2147","Datelike::day":"0:2092:2798"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:2088:2796","0:2089:8618","0:2090:2172","0:2091:2797","0:2092:2798","0:2093:2799","0:2094:2800","0:2095:2801","0:2096:2170","0:2097:2802","0:2098:2803","0:2099:2804","0:2100:2805","0:2101:2806","0:2102:2807","0:2103:2808","0:2104:2809","0:2105:5689"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:1092","0:204","0:414","0:1259"]}}},"0:1969:7436":{"id":"0:1969:7436","crate_id":0,"name":"offset_from_local_datetime","span":{"filename":"src/offset/mod.rs","begin":[493,4],"end":[493,93]},"visibility":"default","docs":"Creates the offset(s) for given local `NaiveDateTime` if possible.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:1950:2151","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:3116:726":{"id":"0:3116:726","crate_id":0,"name":"fmt","span":{"filename":"src/round.rs","begin":[230,9],"end":[230,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:725:4017":{"id":"0:725:4017","crate_id":0,"name":"to_naive_date","span":{"filename":"src/format/parsed.rs","begin":[295,4],"end":[490,5]},"visibility":"public","docs":"Returns a parsed naive date out of given fields.\n\nThis method is able to determine the date from given subset of fields:\n\n- Year, month, day.\n- Year, day of the year (ordinal).\n- Year, week number counted from Sunday or Monday, day of the week.\n- ISO week date.\n\nGregorian year and ISO week date year can have their century number (`*_div_100`) omitted,\nthe two-digit year is used to guess the century number then.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:255:296":{"id":"0:255:296","crate_id":0,"name":"add_assign","span":{"filename":"src/date.rs","begin":[507,4],"end":[509,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2297":{"id":"0:2297","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[77,33],"end":[77,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2525:174":{"id":"0:2525:174","crate_id":0,"name":"Item","span":{"filename":"src/format/mod.rs","begin":[326,0],"end":[344,1]},"visibility":"public","docs":"A single formatting item. This is used for both formatting and parsing.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:2527:3527","0:2530:3529","0:2533:3360","0:2536:3532","0:2539:3372","0:2543:2842","0:2546:138"],"impls":["0:944","a:2:41605:9275-0:2525:174","a:2:3058:246-0:2525:174","a:2:31969:237-0:2525:174","a:2:41604:9276-0:2525:174","a:2:32026:9229-0:2525:174","b:2:2563-0:2525:174","b:2:3671-0:2525:174","b:2:2835-0:2525:174","b:2:2839-0:2525:174","b:2:2850-0:2525:174","b:2:2560-0:2525:174","b:2:2845-0:2525:174","b:5:725-0:2525:174","0:2551","0:2553","0:2559","0:2562","0:2548","0:2556"]}}},"0:1234:2760":{"id":"0:1234:2760","crate_id":0,"name":"checked_add_signed","span":{"filename":"src/naive/datetime/mod.rs","begin":[704,4],"end":[714,5]},"visibility":"public","docs":"Adds given `TimeDelta` to the current date and time.\n\nAs a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),\nthe addition assumes that **there is no leap second ever**,\nexcept when the `NaiveDateTime` itself represents a leap second\nin which case the assumption becomes that **there is exactly a single leap second ever**.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveDate};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nlet d = from_ymd(2016, 7, 8);\nlet hms = |h, m, s| d.and_hms_opt(h, m, s).unwrap();\nassert_eq!(hms(3, 5, 7).checked_add_signed(TimeDelta::zero()),\n           Some(hms(3, 5, 7)));\nassert_eq!(hms(3, 5, 7).checked_add_signed(TimeDelta::seconds(1)),\n           Some(hms(3, 5, 8)));\nassert_eq!(hms(3, 5, 7).checked_add_signed(TimeDelta::seconds(-1)),\n           Some(hms(3, 5, 6)));\nassert_eq!(hms(3, 5, 7).checked_add_signed(TimeDelta::seconds(3600 + 60)),\n           Some(hms(4, 6, 7)));\nassert_eq!(hms(3, 5, 7).checked_add_signed(TimeDelta::seconds(86_400)),\n           Some(from_ymd(2016, 7, 9).and_hms_opt(3, 5, 7).unwrap()));\n\nlet hmsm = |h, m, s, milli| d.and_hms_milli_opt(h, m, s, milli).unwrap();\nassert_eq!(hmsm(3, 5, 7, 980).checked_add_signed(TimeDelta::milliseconds(450)),\n           Some(hmsm(3, 5, 8, 430)));\n```\n\nOverflow returns `None`.\n\n```\n# use chrono::{TimeDelta, NaiveDate};\n# let hms = |h, m, s| NaiveDate::from_ymd_opt(2016, 7, 8).unwrap().and_hms_opt(h, m, s).unwrap();\nassert_eq!(hms(3, 5, 7).checked_add_signed(TimeDelta::days(1_000_000_000)), None);\n```\n\nLeap seconds are handled,\nbut the addition assumes that it is the only leap second happened.\n\n```\n# use chrono::{TimeDelta, NaiveDate};\n# let from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n# let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli_opt(h, m, s, milli).unwrap();\nlet leap = hmsm(3, 5, 59, 1_300);\nassert_eq!(leap.checked_add_signed(TimeDelta::zero()),\n           Some(hmsm(3, 5, 59, 1_300)));\nassert_eq!(leap.checked_add_signed(TimeDelta::milliseconds(-500)),\n           Some(hmsm(3, 5, 59, 800)));\nassert_eq!(leap.checked_add_signed(TimeDelta::milliseconds(500)),\n           Some(hmsm(3, 5, 59, 1_800)));\nassert_eq!(leap.checked_add_signed(TimeDelta::milliseconds(800)),\n           Some(hmsm(3, 6, 0, 100)));\nassert_eq!(leap.checked_add_signed(TimeDelta::seconds(10)),\n           Some(hmsm(3, 6, 9, 300)));\nassert_eq!(leap.checked_add_signed(TimeDelta::seconds(-10)),\n           Some(hmsm(3, 5, 50, 300)));\nassert_eq!(leap.checked_add_signed(TimeDelta::days(1)),\n           Some(from_ymd(2016, 7, 9).and_hms_milli_opt(3, 5, 59, 300).unwrap()));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13119:34330":{"id":"2:13119:34330","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12757:8930","`DoubleEndedIterator`":"2:8139:131","prim@char":"1:12067:454","str::split_whitespace":"2:13097:39370","str::rsplit":"2:13125:35760"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43363:8963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12763:8944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2351":{"id":"0:2351","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[100,16],"end":[100,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2352:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1157:726":{"id":"0:1157:726","crate_id":0,"name":"fmt","span":{"filename":"src/naive/date.rs","begin":[2233,4],"end":[2235,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:31969:237-0:2525:174":{"id":"a:2:31969:237-0:2525:174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1968:7434":{"id":"0:1968:7434","crate_id":0,"name":"offset_from_local_date","span":{"filename":"src/offset/mod.rs","begin":[490,4],"end":[490,85]},"visibility":"default","docs":"Creates the offset(s) for given local `NaiveDate` if possible.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:1950:2151","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:469:465":{"id":"0:469:465","crate_id":0,"name":"cmp","span":{"filename":"src/datetime/mod.rs","begin":[1230,4],"end":[1232,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1210:2158":{"id":"0:1210:2158","crate_id":0,"name":"MIN_DATETIME","span":{"filename":"src/naive/datetime/mod.rs","begin":[47,0],"end":[47,59]},"visibility":"public","docs":"The minimum possible `NaiveDateTime`.","links":{},"attrs":["#[deprecated(since = \"0.4.20\", note = \"Use NaiveDateTime::MIN instead\")]"],"deprecation":{"since":"0.4.20","note":"Use NaiveDateTime::MIN instead"},"inner":{"constant":{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"NaiveDateTime::MIN","value":null,"is_literal":false}}},"0:2583:2209":{"id":"0:2583:2209","crate_id":0,"name":"OutOfRange","span":{"filename":"src/format/mod.rs","begin":[398,4],"end":[398,14]},"visibility":"default","docs":"Given field is out of permitted range.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2051:726":{"id":"0:2051:726","crate_id":0,"name":"fmt","span":{"filename":"src/weekday.rs","begin":[239,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:2781:2145":{"id":"b:2:2835-0:2781:2145","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2835-0:2164:2134":{"id":"b:2:2835-0:2164:2134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1954:3811":{"id":"0:1954:3811","crate_id":0,"name":"ymd","span":{"filename":"src/offset/mod.rs","begin":[251,4],"end":[253,5]},"visibility":"default","docs":"Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n\nThe time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),\nbut it will propagate to the `DateTime` values constructed via this date.\n\nPanics on the out-of-range date, invalid month and/or day.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `with_ymd_and_hms()` instead\")]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.23","note":"use `with_ymd_and_hms()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}],["month",{"primitive":"u32"}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:972:2162":{"id":"0:972:2162","crate_id":0,"name":"naive","span":{"filename":"src/naive/mod.rs","begin":[1,0],"end":[39,1]},"visibility":"public","docs":"Date and time types unconcerned with timezones.\n\nThey are primarily building blocks for other types\n(e.g. [`TimeZone`](../offset/trait.TimeZone.html)),\nbut can be also used for the simpler date and time handling.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1547-0:2617:2163","0:1548-0:2637:2147","0:1549-0:2654:5260","0:1550-0:2673:5261","0:1551-0:2612:2165","0:1553-0:1025:2153","0:1554-0:1024:2154","0:1556-0:2692:2148","0:1557-0:1211:2157","0:1558-0:1210:2158","0:1559-0:2746:2164","0:1560-0:2763:2149"],"is_stripped":false}}},"b:2:2839-0:2525:174":{"id":"b:2:2839-0:2525:174","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41605:9275-0:2612:2165":{"id":"a:2:41605:9275-0:2612:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2612:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3058:246-0:2461:3492":{"id":"a:2:3058:246-0:2461:3492","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:267":{"id":"0:267","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[537,0],"end":[542,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:269:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2560-0:2164:2134":{"id":"b:2:2560-0:2164:2134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:725-0:2582:3548":{"id":"b:5:725-0:2582:3548","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2563-0:2360:3420":{"id":"b:2:2563-0:2360:3420","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2360:3420","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2563-0:2612:2165":{"id":"b:2:2563-0:2612:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2612:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2560-0:2304:3372":{"id":"b:2:2560-0:2304:3372","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2304:3372","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1150":{"id":"0:1150","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2157,0],"end":[2163,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["rfold","advance_back_by","try_rfold","rfind","nth_back"],"trait":{"name":"DoubleEndedIterator","id":"2:8139:131","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1151:5879"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2771":{"id":"0:2771","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[204,24],"end":[204,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2772:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2563-0:2164:2134":{"id":"b:2:2563-0:2164:2134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3169:2142":{"id":"0:3169:2142","crate_id":0,"name":"Month","span":{"filename":"src/month.rs","begin":[41,0],"end":[66,1]},"visibility":"public","docs":"The month of the year.\n\nThis enum is just a convenience implementation.\nThe month in dates created by DateLike objects does not return this enum.\n\nIt is possible to convert from a date to a month independently\n```\nuse chrono::prelude::*;\nlet date = Utc.with_ymd_and_hms(2019, 10, 28, 9, 10, 11).unwrap();\n// `2019-10-28T09:10:11Z`\nlet month = Month::try_from(u8::try_from(date.month()).unwrap()).ok();\nassert_eq!(month, Some(Month::October))\n```\nOr from a Month to an integer usable by dates\n```\n# use chrono::prelude::*;\nlet month = Month::January;\nlet dt = Utc.with_ymd_and_hms(2019, month.number_from_month(), 28, 9, 10, 11).unwrap();\nassert_eq!((dt.year(), dt.month(), dt.day()), (2019, 1, 28));\n```\nAllows mapping from and to month, from 1-January to 12-December.\nCan be Serialized/Deserialized with serde","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:3170:3606","0:3173:3607","0:3176:3608","0:3179:3609","0:3182:3610","0:3185:3611","0:3188:3612","0:3191:3613","0:3194:3614","0:3197:3615","0:3200:3616","0:3203:3618"],"impls":["0:2059","a:2:41605:9275-0:3169:2142","a:2:3058:246-0:3169:2142","a:2:31969:237-0:3169:2142","a:2:41604:9276-0:3169:2142","a:2:32026:9229-0:3169:2142","b:2:2563-0:3169:2142","b:2:3671-0:3169:2142","b:2:2835-0:3169:2142","b:2:2839-0:3169:2142","b:2:2850-0:3169:2142","b:2:2560-0:3169:2142","b:2:2845-0:3169:2142","b:5:725-0:3169:2142","0:3209","0:3206","0:3207","0:3212","0:3219","0:3216","0:965","0:3211","0:3221","0:3214","0:2064","0:2067"]}}},"b:2:2560-0:2213:2843":{"id":"b:2:2560-0:2213:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2465:3502":{"id":"0:2465:3502","crate_id":0,"name":"padding","span":{"filename":"src/format/mod.rs","begin":[289,4],"end":[289,20]},"visibility":"public","docs":"Pad the hour value to two digits.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:65:2489":{"id":"0:65:2489","crate_id":0,"name":"to_std","span":{"filename":"src/time_delta.rs","begin":[428,4],"end":[433,5]},"visibility":"public","docs":"Creates a `std::time::Duration` object from a `TimeDelta`.\n\nThis function errors when duration is less than zero. As standard\nlibrary implementation is limited to non-negative values.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:2471":{"id":"0:58:2471","crate_id":0,"name":"checked_sub","span":{"filename":"src/time_delta.rs","begin":[363,4],"end":[373,5]},"visibility":"public","docs":"Subtract two `TimeDelta`s, returning `None` if overflow occurred.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:435:2808":{"id":"0:435:2808","crate_id":0,"name":"with_ordinal","span":{"filename":"src/datetime/mod.rs","begin":[1093,4],"end":[1095,5]},"visibility":"default","docs":"Makes a new `DateTime` with the day of year (starting from 1) changed.\n\nSee also the [`NaiveDate::with_ordinal`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist.\n- The value for `ordinal` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveDate::with_ordinal`":"0:1107:2808"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:2461:3492":{"id":"b:2:2560-0:2461:3492","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1916":{"id":"0:1916","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[116,0],"end":[136,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["timestamp_millis","isoywd","ymd","yo","timestamp_nanos","isoywd_opt","yo_opt","from_local_datetime","from_utc_date","from_local_date","timestamp","from_utc_datetime","timestamp_opt","datetime_from_str","with_ymd_and_hms","timestamp_millis_opt","timestamp_micros","ymd_opt"],"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1917:2150","0:1918:2751","0:1919:7434","0:1920:7436","0:1921:7443","0:1922:4079"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2850-0:3057:2135":{"id":"b:2:2850-0:3057:2135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1300:199":{"id":"0:1300:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[1698,4],"end":[1698,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2791":{"id":"0:2791","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[22,30],"end":[22,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:495:295":{"id":"0:495:295","crate_id":0,"name":"add","span":{"filename":"src/datetime/mod.rs","begin":[1352,4],"end":[1354,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3104:2332","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2751":{"id":"0:2751","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[19,20],"end":[19,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2615:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3233":{"id":"0:3233","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,33],"end":[227,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3234:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2508:3522":{"id":"0:2508:3522","crate_id":0,"name":"Colon","span":{"filename":"src/format/mod.rs","begin":[319,4],"end":[319,9]},"visibility":"default","docs":"Colon (`:`) as separator","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2563-0:2566:2160":{"id":"b:2:2563-0:2566:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2651":{"id":"0:2651","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[190,47],"end":[190,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3262:667":{"id":"0:3262:667","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[581,28],"end":[581,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2845-0:2372:2842":{"id":"b:2:2845-0:2372:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:272:726":{"id":"0:272:726","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[548,4],"end":[551,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2203":{"id":"0:2203","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[509,22],"end":[509,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2204:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:64:2483":{"id":"0:64:2483","crate_id":0,"name":"from_std","span":{"filename":"src/time_delta.rs","begin":[413,4],"end":[422,5]},"visibility":"public","docs":"Creates a `TimeDelta` object from `std::time::Duration`\n\nThis function errors when original duration is larger than the maximum\nvalue supported for this type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["duration",{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41623:226","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1914:2817":{"id":"0:1914:2817","crate_id":0,"name":"today","span":{"filename":"src/offset/utc.rs","begin":[63,4],"end":[65,5]},"visibility":"public","docs":"Returns a `Date` which corresponds to the current date.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"use `Utc::now()` instead, potentially with `.date_naive()`\")]","#[allow(deprecated)]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `Utc::now()` instead, potentially with `.date_naive()`"},"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1955:5987":{"id":"0:1955:5987","crate_id":0,"name":"ymd_opt","span":{"filename":"src/offset/mod.rs","begin":[264,4],"end":[269,5]},"visibility":"default","docs":"Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n\nThe time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),\nbut it will propagate to the `DateTime` values constructed via this date.\n\nReturns `None` on the out-of-range date, invalid month and/or day.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `with_ymd_and_hms()` instead\")]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.23","note":"use `with_ymd_and_hms()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}],["month",{"primitive":"u32"}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1105:2806":{"id":"0:1105:2806","crate_id":0,"name":"with_day","span":{"filename":"src/naive/date.rs","begin":[1780,4],"end":[1782,5]},"visibility":"default","docs":"Makes a new `NaiveDate` with the day of month (starting from 1) changed.\n\n# Errors\n\nReturns `None` if the resulting date does not exist, or if the value for `day` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_day(30),\n           Some(NaiveDate::from_ymd_opt(2015, 9, 30).unwrap()));\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_day(31),\n           None); // no September 31\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13162:41650":{"id":"2:13162:41650","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:2694":{"id":"0:188:2694","crate_id":0,"name":"naive_local","span":{"filename":"src/date.rs","begin":[305,4],"end":[307,5]},"visibility":"public","docs":"Returns a view to the naive local date.\n\nThis is technically the same as [`naive_utc`](#method.naive_utc)\nbecause the offset is restricted to never exceed one day,\nbut provided for the consistency.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2845-0:2129:2131":{"id":"b:2:2845-0:2129:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2671":{"id":"0:2671","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2099,62],"end":[2099,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2646:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2672:465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3115":{"id":"0:3115","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[230,9],"end":[230,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3116:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3671-0:2164:2134":{"id":"b:2:3671-0:2164:2134","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2850-0:2673:5261":{"id":"b:2:2850-0:2673:5261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2673:5261","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:198:2782":{"id":"0:198:2782","crate_id":0,"name":"format_with_items","span":{"filename":"src/date.rs","begin":[337,4],"end":[343,5]},"visibility":"public","docs":"Formats the date with the specified formatting items.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:219:2805":{"id":"0:219:2805","crate_id":0,"name":"with_month0","span":{"filename":"src/date.rs","begin":[441,4],"end":[443,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1158":{"id":"0:1158","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2254,0],"end":[2273,1]},"visibility":"default","docs":"Parsing a `str` into a `NaiveDate` uses the same format,\n[`%Y-%m-%d`](crate::format::strftime), as in `Debug` and `Display`.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet d = NaiveDate::from_ymd_opt(2015, 9, 18).unwrap();\nassert_eq!(\"2015-09-18\".parse::<NaiveDate>(), Ok(d));\n\nlet d = NaiveDate::from_ymd_opt(12345, 6, 7).unwrap();\nassert_eq!(\"+12345-6-7\".parse::<NaiveDate>(), Ok(d));\n\nassert!(\"foo\".parse::<NaiveDate>().is_err());\n```","links":{"crate::format::strftime":"0:866:3347"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12717:3263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1159:137","0:1160:3264"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2779":{"id":"0:2779","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[204,53],"end":[204,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2780:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:734:4062":{"id":"0:734:4062","crate_id":0,"name":"to_naive_datetime_with_offset","span":{"filename":"src/format/parsed.rs","begin":[543,4],"end":[613,5]},"visibility":"public","docs":"Returns a parsed naive date and time out of given fields,\nexcept for the [`offset`](#structfield.offset) field (assumed to have a given value).\nThis is required for parsing a local time or other known-timezone inputs.\n\nThis method is able to determine the combined date and time\nfrom date and time fields or a single [`timestamp`](#structfield.timestamp) field.\nEither way those fields have to be consistent to each other.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["offset",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:2394":{"id":"0:35:2394","crate_id":0,"name":"try_weeks","span":{"filename":"src/time_delta.rs","begin":[118,4],"end":[120,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of weeks.\n\nEquivalent to `TimeDelta::seconds(weeks * 7 * 24 * 60 * 60)` with\noverflow checks.\n\n# Errors\n\nReturns `None` when the `TimeDelta` would be out of bounds.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["weeks",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2850-0:2151:2130":{"id":"b:2:2850-0:2151:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2853:138","2:2854:1632"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:504":{"id":"0:504","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1411,0],"end":[1419,1]},"visibility":"default","docs":"Subtract-assign `TimeDelta` from `DateTime`.\n\nThis is the same as the addition with a negated `TimeDelta`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `DateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`DateTime<Tz>::checked_sub_signed`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_sub_signed`":"0:356:2762"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33111:2338","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:506:1570"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:155:2154":{"id":"0:155:2154","crate_id":0,"name":"MIN_DATE","span":{"filename":"src/date.rs","begin":[66,0],"end":[66,53]},"visibility":"public","docs":"The minimum possible `Date`.","links":{},"attrs":["#[allow(deprecated)]","#[deprecated(since = \"0.4.20\", note = \"Use Date::MIN_UTC instead\")]"],"deprecation":{"since":"0.4.20","note":"Use Date::MIN_UTC instead"},"inner":{"constant":{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"expr":"Date<Utc>::MIN_UTC","value":null,"is_literal":false}}},"0:539:726":{"id":"0:539:726","crate_id":0,"name":"fmt","span":{"filename":"src/datetime/mod.rs","begin":[1567,4],"end":[1571,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:705:3983":{"id":"0:705:3983","crate_id":0,"name":"set_isoweek","span":{"filename":"src/format/parsed.rs","begin":[205,4],"end":[207,5]},"visibility":"public","docs":"Tries to set the [`isoweek`](#structfield.isoweek) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2239:667":{"id":"0:2239:667","crate_id":0,"name":"eq","span":{"filename":"src/format/parsed.rs","begin":[20,16],"end":[20,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2623":{"id":"0:2623","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[132,22],"end":[132,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2624:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:107-0:2164:2134":{"id":"0:107-0:2164:2134","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[477,4],"end":[477,24]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"crate::Date","name":"Date","id":"0:2164:2134","glob":false}}},"0:1038:5461":{"id":"0:1038:5461","crate_id":0,"name":"from_weekday_of_month","span":{"filename":"src/naive/date.rs","begin":[498,4],"end":[505,5]},"visibility":"public","docs":"Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\nsince the beginning of the given month. For instance, if you want the 2nd Friday of March\n2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.\n\n`n` is 1-indexed.\n\n# Panics\n\nPanics if the specified day does not exist in that month, on invalid values for `month` or\n`n`, or if `year` is out of range for `NaiveDate`.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"use `from_weekday_of_month_opt()` instead\")]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_weekday_of_month_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"i32"}],["month",{"primitive":"u32"}],["weekday",{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["n",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41605:9275-0:2284:3355":{"id":"a:2:41605:9275-0:2284:3355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:725-0:2461:3492":{"id":"b:5:725-0:2461:3492","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3147":{"id":"0:3147","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[32,9],"end":[32,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1303:296":{"id":"0:1303:296","crate_id":0,"name":"add_assign","span":{"filename":"src/naive/datetime/mod.rs","begin":[1720,4],"end":[1722,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:369:2682":{"id":"0:369:2682","crate_id":0,"name":"MIN_UTC","span":{"filename":"src/datetime/mod.rs","begin":[592,4],"end":[592,94]},"visibility":"public","docs":"The minimum possible `DateTime<Utc>`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"default":"_"}}},"0:2052":{"id":"0:2052","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[244,0],"end":[248,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3160:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2053:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41604:9276-0:3252:2209":{"id":"a:2:41604:9276-0:3252:2209","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3252:2209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3671-0:2461:3492":{"id":"b:2:3671-0:2461:3492","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2385:3412":{"id":"0:2385:3412","crate_id":0,"name":"Nanosecond","span":{"filename":"src/format/mod.rs","begin":[200,4],"end":[200,14]},"visibility":"default","docs":"An optional dot plus one or more digits for left-aligned nanoseconds.\nMay print nothing, 3, 6 or 9 digits according to the available accuracy.\nSee also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2659":{"id":"0:2659","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2099,22],"end":[2099,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2654:5260","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2660:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2028-0:3108:2169":{"id":"0:2028-0:3108:2169","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[525,31],"end":[525,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"round::RoundingError","name":"RoundingError","id":"0:3108:2169","glob":false}}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[887,0],"end":[961,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1950:2151","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"2:10198:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:408:2782","0:412:739"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2255":{"id":"0:2255","crate_id":0,"name":null,"span":{"filename":"src/format/strftime.rs","begin":[188,9],"end":[188,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2251:2654","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2257:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2845-0:2566:2160":{"id":"b:2:2845-0:2566:2160","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1116:199":{"id":"0:1116:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/date.rs","begin":[1940,4],"end":[1940,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:533:1569":{"id":"0:533:1569","crate_id":0,"name":"sub","span":{"filename":"src/datetime/mod.rs","begin":[1526,4],"end":[1528,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3109:2337","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1132":{"id":"0:1132","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[2083,0],"end":[2090,1]},"visibility":"default","docs":"Subtracts another `NaiveDate` from the current date.\nReturns a `TimeDelta` of integral numbers.\n\nThis does not overflow or underflow at all,\nas all possible output fits in the range of `TimeDelta`.\n\nThe implementation is a wrapper around\n[`NaiveDate::signed_duration_since`](#method.signed_duration_since).\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveDate};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nassert_eq!(from_ymd(2014, 1, 1) - from_ymd(2014, 1, 1), TimeDelta::zero());\nassert_eq!(from_ymd(2014, 1, 1) - from_ymd(2013, 12, 31), TimeDelta::days(1));\nassert_eq!(from_ymd(2014, 1, 1) - from_ymd(2014, 1, 2), TimeDelta::days(-1));\nassert_eq!(from_ymd(2014, 1, 1) - from_ymd(2013, 9, 23), TimeDelta::days(100));\nassert_eq!(from_ymd(2014, 1, 1) - from_ymd(2013, 1, 1), TimeDelta::days(365));\nassert_eq!(from_ymd(2014, 1, 1) - from_ymd(2010, 1, 1), TimeDelta::days(365*4 + 1));\nassert_eq!(from_ymd(2014, 1, 1) - from_ymd(1614, 1, 1), TimeDelta::days(365*400 + 97));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1133:199","0:1134:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2754:1151":{"id":"0:2754:1151","crate_id":0,"name":"partial_cmp","span":{"filename":"src/naive/isoweek.rs","begin":[19,24],"end":[19,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"IsoWeek","id":"0:2746:2164","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30809:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1544":{"id":"0:1544","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1512,0],"end":[1516,1]},"visibility":"default","docs":"The default value for a NaiveTime is midnight, 00:00:00 exactly.\n\n# Example\n\n```rust\nuse chrono::NaiveTime;\n\nlet default_time = NaiveTime::default();\nassert_eq!(default_time, NaiveTime::from_hms_opt(0, 0, 0).unwrap());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2887:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1545:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2224:2170":{"id":"0:2224:2170","crate_id":0,"name":"weekday","span":{"filename":"src/format/parsed.rs","begin":[72,4],"end":[72,32]},"visibility":"public","docs":"Day of the week.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:1496:3178":{"id":"0:1496:3178","crate_id":0,"name":"second","span":{"filename":"src/naive/time/mod.rs","begin":[916,4],"end":[918,5]},"visibility":"default","docs":"Returns the second number from 0 to 59.\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nassert_eq!(NaiveTime::from_hms_opt(0, 0, 0).unwrap().second(), 0);\nassert_eq!(NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap().second(), 4);\n```\n\nThis method never returns 60 even when it is a leap second.\n([Why?](#leap-second-handling))\nUse the proper [formatting method](#method.format) to get a human-readable representation.\n\n```\n# use chrono::{NaiveTime, Timelike};\nlet leap = NaiveTime::from_hms_milli_opt(23, 59, 59, 1_000).unwrap();\nassert_eq!(leap.second(), 59);\nassert_eq!(leap.format(\"%H:%M:%S\").to_string(), \"23:59:60\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:502:199":{"id":"0:502:199","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1389,4],"end":[1389,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:3061:458":{"id":"0:3061:458","crate_id":0,"name":"clone","span":{"filename":"src/offset/local/mod.rs","begin":[109,15],"end":[109,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:710:3989":{"id":"0:710:3989","crate_id":0,"name":"set_day","span":{"filename":"src/format/parsed.rs","begin":[223,4],"end":[225,5]},"visibility":"public","docs":"Tries to set the [`day`](#structfield.day) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41605:9275-0:2151:2130":{"id":"a:2:41605:9275-0:2151:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41605:9275","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2236:458":{"id":"0:2236:458","crate_id":0,"name":"clone","span":{"filename":"src/format/parsed.rs","begin":[20,9],"end":[20,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1516":{"id":"0:1516","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1245,0],"end":[1252,1]},"visibility":"default","docs":"Subtract `TimeDelta` from `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the subtraction ignores integral number of days.\nThis is the same as addition with a negated `TimeDelta`.\n\nAs a part of Chrono's [leap second handling], the subtraction assumes that **there is no leap\nsecond ever**, except when the `NaiveTime` itself represents a leap second in which case the\nassumption becomes that **there is exactly a single leap second ever**.\n\n# Example\n\n```\nuse chrono::{TimeDelta, NaiveTime};\n\nlet from_hmsm = |h, m, s, milli| { NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap() };\n\nassert_eq!(from_hmsm(3, 5, 7, 0) - TimeDelta::zero(),                  from_hmsm(3, 5, 7, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) - TimeDelta::seconds(1),              from_hmsm(3, 5, 6, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) - TimeDelta::seconds(60 + 5),         from_hmsm(3, 4, 2, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) - TimeDelta::seconds(2*60*60 + 6*60), from_hmsm(0, 59, 7, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) - TimeDelta::milliseconds(80),        from_hmsm(3, 5, 6, 920));\nassert_eq!(from_hmsm(3, 5, 7, 950) - TimeDelta::milliseconds(280),     from_hmsm(3, 5, 7, 670));\n```\n\nThe subtraction wraps around.\n\n```\n# use chrono::{TimeDelta, NaiveTime};\n# let from_hmsm = |h, m, s, milli| { NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap() };\nassert_eq!(from_hmsm(3, 5, 7, 0) - TimeDelta::seconds(8*60*60), from_hmsm(19, 5, 7, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) - TimeDelta::days(800),        from_hmsm(3, 5, 7, 0));\n```\n\nLeap seconds are handled, but the subtraction assumes that it is the only leap second happened.\n\n```\n# use chrono::{TimeDelta, NaiveTime};\n# let from_hmsm = |h, m, s, milli| { NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap() };\nlet leap = from_hmsm(3, 5, 59, 1_300);\nassert_eq!(leap - TimeDelta::zero(),            from_hmsm(3, 5, 59, 1_300));\nassert_eq!(leap - TimeDelta::milliseconds(200), from_hmsm(3, 5, 59, 1_100));\nassert_eq!(leap - TimeDelta::milliseconds(500), from_hmsm(3, 5, 59, 800));\nassert_eq!(leap - TimeDelta::seconds(60),       from_hmsm(3, 5, 0, 300));\nassert_eq!(leap - TimeDelta::days(1),           from_hmsm(3, 6, 0, 300));\n```\n\n[leap second handling]: crate::NaiveTime#leap-second-handling","links":{"crate::NaiveTime#leap-second-handling":"0:2763:2149"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1517:199","0:1518:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3671-0:2612:2165":{"id":"b:2:3671-0:2612:2165","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2612:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2175":{"id":"0:2175","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[52,9],"end":[52,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1950:2151","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:2177:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2839-0:3169:2142":{"id":"b:2:2839-0:3169:2142","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3169:2142","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2845-0:2213:2843":{"id":"b:2:2845-0:2213:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:540":{"id":"0:540","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1587,0],"end":[1593,1]},"visibility":"default","docs":"Accepts a relaxed form of RFC3339.\nA space or a 'T' are accepted as the separator between the date and time\nparts.\n\nAll of these examples are equivalent:\n```\n# use chrono::{DateTime, Utc};\n\"2012-12-12T12:12:12Z\".parse::<DateTime<Utc>>()?;\n\"2012-12-12 12:12:12Z\".parse::<DateTime<Utc>>()?;\n\"2012-12-12 12:12:12+0000\".parse::<DateTime<Utc>>()?;\n\"2012-12-12 12:12:12+00:00\".parse::<DateTime<Utc>>()?;\n# Ok::<(), chrono::ParseError>(())\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12717:3263","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:541:137","0:542:3264"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2563-0:2187:2140":{"id":"b:2:2563-0:2187:2140","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2187:2140","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2219:3937":{"id":"0:2219:3937","crate_id":0,"name":"isoyear_mod_100","span":{"filename":"src/format/parsed.rs","begin":[54,4],"end":[54,36]},"visibility":"public","docs":"Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.\nImplies that the year is >= 1 BCE when set.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}}}},"0:1972:2696":{"id":"0:1972:2696","crate_id":0,"name":"from_local_datetime","span":{"filename":"src/offset/mod.rs","begin":[508,4],"end":[527,5]},"visibility":"default","docs":"Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2496:458":{"id":"0:2496:458","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[293,22],"end":[293,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2533:3360":{"id":"0:2533:3360","crate_id":0,"name":"Space","span":{"filename":"src/format/mod.rs","begin":[333,4],"end":[333,18]},"visibility":"default","docs":"Whitespace. Prints literally but reads zero or more whitespace.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2535:1767"]},"discriminant":null}}},"0:422:2801":{"id":"0:422:2801","crate_id":0,"name":"ordinal0","span":{"filename":"src/datetime/mod.rs","begin":[989,4],"end":[991,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2476":{"id":"0:2476","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[280,44],"end":[280,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10409:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2461:3492","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2477:793"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2543:2842":{"id":"0:2543:2842","crate_id":0,"name":"Fixed","span":{"filename":"src/format/mod.rs","begin":[341,4],"end":[341,16]},"visibility":"default","docs":"Fixed-format item.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2545:1767"]},"discriminant":null}}},"0:2515":{"id":"0:2515","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[314,22],"end":[314,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2505:3498","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2516:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2605:667":{"id":"0:2605:667","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[395,23],"end":[395,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ParseErrorKind","id":"0:2582:3548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1520:1570":{"id":"0:1520:1570","crate_id":0,"name":"sub_assign","span":{"filename":"src/naive/time/mod.rs","begin":[1260,4],"end":[1262,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126-0:1948:2150":{"id":"0:126-0:1948:2150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[487,20],"end":[487,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Offset","name":"Offset","id":"0:1948:2150","glob":false}}},"0:2225:2800":{"id":"0:2225:2800","crate_id":0,"name":"ordinal","span":{"filename":"src/format/parsed.rs","begin":[75,4],"end":[75,28]},"visibility":"public","docs":"Day of the year (1--365 or 1--366 depending on the year).","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}}}},"0:2389:3448":{"id":"0:2389:3448","crate_id":0,"name":"Nanosecond6","span":{"filename":"src/format/mod.rs","begin":[204,4],"end":[204,15]},"visibility":"default","docs":"Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:530":{"id":"0:530","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1523,0],"end":[1529,1]},"visibility":"default","docs":"Subtract `Days` from `DateTime`.\n\n# Panics\n\nPanics if:\n- The resulting date would be out of range.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.\n\nStrongly consider using `DateTime<Tz>::checked_sub_days` to get an `Option` instead.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:532:199","0:533:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2615":{"id":"0:2615","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[38,9],"end":[38,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2612:2165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2616:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:601:1053":{"id":"0:601:1053","crate_id":0,"name":"new","span":{"filename":"src/format/formatting.rs","begin":[56,4],"end":[65,5]},"visibility":"public","docs":"Makes a new `DelayedFormat` value out of local date and time.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}],["time",{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2178:2653","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2649":{"id":"0:2649","crate_id":0,"name":null,"span":{"filename":"src/naive/date.rs","begin":[190,42],"end":[190,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2646:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2650:465"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:334:2870":{"id":"0:334:2870","crate_id":0,"name":"from_naive_utc_and_offset","span":{"filename":"src/datetime/mod.rs","begin":[96,4],"end":[101,5]},"visibility":"public","docs":"Makes a new `DateTime` from its components: a `NaiveDateTime` in UTC and an `Offset`.\n\nThis is a low-level method, intended for use cases such as deserializing a `DateTime` or\npassing it through FFI.\n\nFor regular use you will probably want to use a method such as\n[`TimeZone::from_local_datetime`] or [`NaiveDateTime::and_local_timezone`] instead.\n\n# Example\n\n```rust\nuse chrono::{Local, DateTime};\n\nlet dt = Local::now();\n// Get components\nlet naive_utc = dt.naive_utc();\nlet offset = dt.offset().clone();\n// Serialize, pass through FFI... and recreate the `DateTime`:\nlet dt_new = DateTime::<Local>::from_naive_utc_and_offset(naive_utc, offset);\nassert_eq!(dt, dt_new);\n```","links":{"`NaiveDateTime::and_local_timezone`":"0:1251:2969","`TimeZone::from_local_datetime`":"0:1972:2696"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["datetime",{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["offset",{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1950:2151","args":null}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2645:793":{"id":"0:2645:793","crate_id":0,"name":"hash","span":{"filename":"src/naive/date.rs","begin":[190,24],"end":[190,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2560-0:2284:3355":{"id":"b:2:2560-0:2284:3355","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2562:2652"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2014":{"id":"0:2014","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[155,0],"end":[165,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DurationRound","id":"0:2005:2168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2015:137","0:2016:8304","0:2017:8309"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1502:6253":{"id":"0:1502:6253","crate_id":0,"name":"num_seconds_from_midnight","span":{"filename":"src/naive/time/mod.rs","begin":[1078,4],"end":[1080,5]},"visibility":"default","docs":"Returns the number of non-leap seconds past the last midnight.\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nassert_eq!(NaiveTime::from_hms_opt(1, 2, 3).unwrap().num_seconds_from_midnight(),\n           3723);\nassert_eq!(NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap().num_seconds_from_midnight(),\n           86164);\nassert_eq!(NaiveTime::from_hms_milli_opt(23, 59, 59, 1_000).unwrap().num_seconds_from_midnight(),\n           86399);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1606:137":{"id":"0:1606:137","crate_id":0,"name":"Err","span":{"filename":"src/offset/fixed.rs","begin":[122,4],"end":[122,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1044:2968":{"id":"0:1044:2968","crate_id":0,"name":"checked_add_months","span":{"filename":"src/naive/date.rs","begin":[635,4],"end":[644,5]},"visibility":"public","docs":"Add a duration in [`Months`] to the date\n\nUses the last day of the month if the day does not exist in the resulting month.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\n# use chrono::{NaiveDate, Months};\nassert_eq!(\n    NaiveDate::from_ymd_opt(2022, 2, 20).unwrap().checked_add_months(Months::new(6)),\n    Some(NaiveDate::from_ymd_opt(2022, 8, 20).unwrap())\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2022, 7, 31).unwrap().checked_add_months(Months::new(2)),\n    Some(NaiveDate::from_ymd_opt(2022, 9, 30).unwrap())\n);\n```","links":{"`Months`":"0:3223:2174"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["months",{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:529:295":{"id":"0:529:295","crate_id":0,"name":"add","span":{"filename":"src/datetime/mod.rs","begin":[1508,4],"end":[1510,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2617:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3104:2332","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:725-0:3125:2144":{"id":"b:5:725-0:3125:2144","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:721:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:727:9777","5:728:3543","5:729:9778"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3170:3606":{"id":"0:3170:3606","crate_id":0,"name":"January","span":{"filename":"src/month.rs","begin":[43,4],"end":[43,15]},"visibility":"default","docs":"January","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"0:3179:3609":{"id":"0:3179:3609","crate_id":0,"name":"April","span":{"filename":"src/month.rs","begin":[49,4],"end":[49,13]},"visibility":"default","docs":"April","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"3","value":"3"}}}},"0:2428":{"id":"0:2428","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[255,9],"end":[255,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2429:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:75:1569":{"id":"0:75:1569","crate_id":0,"name":"sub","span":{"filename":"src/time_delta.rs","begin":[469,4],"end":[471,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:2129:2131":{"id":"b:2:2835-0:2129:2131","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:100:2525":{"id":"0:100:2525","crate_id":0,"name":"description","span":{"filename":"src/time_delta.rs","begin":[587,4],"end":[589,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2422:726":{"id":"0:2422:726","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[171,31],"end":[171,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:699:3977":{"id":"0:699:3977","crate_id":0,"name":"set_month","span":{"filename":"src/format/parsed.rs","begin":[187,4],"end":[189,5]},"visibility":"public","docs":"Tries to set the [`month`](#structfield.month) field from given value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:949:2161","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:866:3347":{"id":"0:866:3347","crate_id":0,"name":"strftime","span":{"filename":"src/format/strftime.rs","begin":[4,0],"end":[1135,1]},"visibility":"public","docs":"`strftime`/`strptime`-inspired date and time formatting syntax.\n\n## Specifiers\n\nThe following specifiers are available both to formatting and parsing.\n\n| Spec. | Example  | Description                                                                |\n|-------|----------|----------------------------------------------------------------------------|\n|       |          | **DATE SPECIFIERS:**                                                       |\n| `%Y`  | `2001`   | The full proleptic Gregorian year, zero-padded to 4 digits. chrono supports years from -262144 to 262143. Note: years before 1 BCE or after 9999 CE, require an initial sign (+/-).|\n| `%C`  | `20`     | The proleptic Gregorian year divided by 100, zero-padded to 2 digits. [^1] |\n| `%y`  | `01`     | The proleptic Gregorian year modulo 100, zero-padded to 2 digits. [^1]     |\n|       |          |                                                                            |\n| `%m`  | `07`     | Month number (01--12), zero-padded to 2 digits.                            |\n| `%b`  | `Jul`    | Abbreviated month name. Always 3 letters.                                  |\n| `%B`  | `July`   | Full month name. Also accepts corresponding abbreviation in parsing.       |\n| `%h`  | `Jul`    | Same as `%b`.                                                              |\n|       |          |                                                                            |\n| `%d`  | `08`     | Day number (01--31), zero-padded to 2 digits.                              |\n| `%e`  | ` 8`     | Same as `%d` but space-padded. Same as `%_d`.                              |\n|       |          |                                                                            |\n| `%a`  | `Sun`    | Abbreviated weekday name. Always 3 letters.                                |\n| `%A`  | `Sunday` | Full weekday name. Also accepts corresponding abbreviation in parsing.     |\n| `%w`  | `0`      | Sunday = 0, Monday = 1, ..., Saturday = 6.                                 |\n| `%u`  | `7`      | Monday = 1, Tuesday = 2, ..., Sunday = 7. (ISO 8601)                       |\n|       |          |                                                                            |\n| `%U`  | `28`     | Week number starting with Sunday (00--53), zero-padded to 2 digits. [^2]   |\n| `%W`  | `27`     | Same as `%U`, but week 1 starts with the first Monday in that year instead.|\n|       |          |                                                                            |\n| `%G`  | `2001`   | Same as `%Y` but uses the year number in ISO 8601 week date. [^3]          |\n| `%g`  | `01`     | Same as `%y` but uses the year number in ISO 8601 week date. [^3]          |\n| `%V`  | `27`     | Same as `%U` but uses the week number in ISO 8601 week date (01--53). [^3] |\n|       |          |                                                                            |\n| `%j`  | `189`    | Day of the year (001--366), zero-padded to 3 digits.                       |\n|       |          |                                                                            |\n| `%D`  | `07/08/01`    | Month-day-year format. Same as `%m/%d/%y`.                            |\n| `%x`  | `07/08/01`    | Locale's date representation (e.g., 12/31/99).                        |\n| `%F`  | `2001-07-08`  | Year-month-day format (ISO 8601). Same as `%Y-%m-%d`.                 |\n| `%v`  | ` 8-Jul-2001` | Day-month-year format. Same as `%e-%b-%Y`.                            |\n|       |          |                                                                            |\n|       |          | **TIME SPECIFIERS:**                                                       |\n| `%H`  | `00`     | Hour number (00--23), zero-padded to 2 digits.                             |\n| `%k`  | ` 0`     | Same as `%H` but space-padded. Same as `%_H`.                              |\n| `%I`  | `12`     | Hour number in 12-hour clocks (01--12), zero-padded to 2 digits.           |\n| `%l`  | `12`     | Same as `%I` but space-padded. Same as `%_I`.                              |\n|       |          |                                                                            |\n| `%P`  | `am`     | `am` or `pm` in 12-hour clocks.                                            |\n| `%p`  | `AM`     | `AM` or `PM` in 12-hour clocks.                                            |\n|       |          |                                                                            |\n| `%M`  | `34`     | Minute number (00--59), zero-padded to 2 digits.                           |\n| `%S`  | `60`     | Second number (00--60), zero-padded to 2 digits. [^4]                      |\n| `%f`  | `26490000`    | Number of nanoseconds since last whole second. [^7]                   |\n| `%.f` | `.026490`| Decimal fraction of a second. Consumes the leading dot. [^7]               |\n| `%.3f`| `.026`        | Decimal fraction of a second with a fixed length of 3.                |\n| `%.6f`| `.026490`     | Decimal fraction of a second with a fixed length of 6.                |\n| `%.9f`| `.026490000`  | Decimal fraction of a second with a fixed length of 9.                |\n| `%3f` | `026`         | Decimal fraction of a second like `%.3f` but without the leading dot. |\n| `%6f` | `026490`      | Decimal fraction of a second like `%.6f` but without the leading dot. |\n| `%9f` | `026490000`   | Decimal fraction of a second like `%.9f` but without the leading dot. |\n|       |               |                                                                       |\n| `%R`  | `00:34`       | Hour-minute format. Same as `%H:%M`.                                  |\n| `%T`  | `00:34:60`    | Hour-minute-second format. Same as `%H:%M:%S`.                        |\n| `%X`  | `00:34:60`    | Locale's time representation (e.g., 23:13:48).                        |\n| `%r`  | `12:34:60 AM` | Locale's 12 hour clock time. (e.g., 11:11:04 PM). Falls back to `%X` if the locale does not have a 12 hour clock format. |\n|       |          |                                                                            |\n|       |          | **TIME ZONE SPECIFIERS:**                                                  |\n| `%Z`  | `ACST`   | Local time zone name. Skips all non-whitespace characters during parsing. Identical to `%:z` when formatting. [^8] |\n| `%z`  | `+0930`  | Offset from the local time to UTC (with UTC being `+0000`).                |\n| `%:z` | `+09:30` | Same as `%z` but with a colon.                                             |\n|`%::z`|`+09:30:00`| Offset from the local time to UTC with seconds.                            |\n|`%:::z`| `+09`    | Offset from the local time to UTC without minutes.                         |\n| `%#z` | `+09`    | *Parsing only:* Same as `%z` but allows minutes to be missing or present.  |\n|       |          |                                                                            |\n|       |          | **DATE & TIME SPECIFIERS:**                                                |\n|`%c`|`Sun Jul  8 00:34:60 2001`|Locale's date and time (e.g., Thu Mar  3 23:05:25 2005).       |\n| `%+`  | `2001-07-08T00:34:60.026490+09:30` | ISO 8601 / RFC 3339 date & time format. [^5]     |\n|       |               |                                                                       |\n| `%s`  | `994518299`   | UNIX timestamp, the number of seconds since 1970-01-01 00:00 UTC. [^6]|\n|       |          |                                                                            |\n|       |          | **SPECIAL SPECIFIERS:**                                                    |\n| `%t`  |          | Literal tab (`\\t`).                                                        |\n| `%n`  |          | Literal newline (`\\n`).                                                    |\n| `%%`  |          | Literal percent sign.                                                      |\n\nIt is possible to override the default padding behavior of numeric specifiers `%?`.\nThis is not allowed for other specifiers and will result in the `BAD_FORMAT` error.\n\nModifier | Description\n-------- | -----------\n`%-?`    | Suppresses any padding including spaces and zeroes. (e.g. `%j` = `012`, `%-j` = `12`)\n`%_?`    | Uses spaces as a padding. (e.g. `%j` = `012`, `%_j` = ` 12`)\n`%0?`    | Uses zeroes as a padding. (e.g. `%e` = ` 9`, `%0e` = `09`)\n\nNotes:\n\n[^1]: `%C`, `%y`:\n   This is floor division, so 100 BCE (year number -99) will print `-1` and `99` respectively.\n\n[^2]: `%U`:\n   Week 1 starts with the first Sunday in that year.\n   It is possible to have week 0 for days before the first Sunday.\n\n[^3]: `%G`, `%g`, `%V`:\n   Week 1 is the first week with at least 4 days in that year.\n   Week 0 does not exist, so this should be used with `%G` or `%g`.\n\n[^4]: `%S`:\n   It accounts for leap seconds, so `60` is possible.\n\n[^5]: `%+`: Same as `%Y-%m-%dT%H:%M:%S%.f%:z`, i.e. 0, 3, 6 or 9 fractional\n   digits for seconds and colons in the time zone offset.\n   <br>\n   <br>\n   This format also supports having a `Z` or `UTC` in place of `%:z`. They\n   are equivalent to `+00:00`.\n   <br>\n   <br>\n   Note that all `T`, `Z`, and `UTC` are parsed case-insensitively.\n   <br>\n   <br>\n   The typical `strftime` implementations have different (and locale-dependent)\n   formats for this specifier. While Chrono's format for `%+` is far more\n   stable, it is best to avoid this specifier if you want to control the exact\n   output.\n\n[^6]: `%s`:\n   This is not padded and can be negative.\n   For the purpose of Chrono, it only accounts for non-leap seconds\n   so it slightly differs from ISO C `strftime` behavior.\n\n[^7]: `%f`, `%.f`:\n   <br>\n   `%f` and `%.f` are notably different formatting specifiers.<br>\n   `%f` counts the number of nanoseconds since the last whole second, while `%.f` is a fraction of a\n   second.<br>\n   Example: 7μs is formatted as `7000` with `%f`, and formatted as `.000007` with `%.f`.\n\n[^8]: `%Z`:\n   Since `chrono` is not aware of timezones beyond their offsets, this specifier\n   **only prints the offset** when used for formatting. The timezone abbreviation\n   will NOT be printed. See [this issue](https://github.com/chronotope/chrono/issues/960)\n   for more information.\n   <br>\n   <br>\n   Offset will not be populated from the parsed data, nor will it be validated.\n   Timezone is completely ignored. Similar to the glibc `strptime` treatment of\n   this format code.\n   <br>\n   <br>\n   It is not possible to reliably convert from an abbreviation to an offset,\n   for example CDT can mean either Central Daylight Time (North America) or\n   China Daylight Time.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:2251:2654"],"is_stripped":false}}},"0:2492":{"id":"0:2492","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[293,9],"end":[293,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10193:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2493:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2571":{"id":"0:2571","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[383,16],"end":[383,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2572:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2149:793":{"id":"0:2149:793","crate_id":0,"name":"hash","span":{"filename":"src/time_delta.rs","begin":[52,70],"end":[52,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3671-0:2426:3477":{"id":"b:2:3671-0:2426:3477","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3669:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3673:1647"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3200:3616":{"id":"0:3200:3616","crate_id":0,"name":"November","span":{"filename":"src/month.rs","begin":[63,4],"end":[63,17]},"visibility":"default","docs":"November","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"10","value":"10"}}}},"0:2304:3372":{"id":"0:2304:3372","crate_id":0,"name":"Numeric","span":{"filename":"src/format/mod.rs","begin":[101,0],"end":[153,1]},"visibility":"public","docs":"Numeric item types.\nThey have associated formatting width (FW) and parsing width (PW).\n\nThe **formatting width** is the minimal width to be formatted.\nIf the number is too short, and the padding is not [`Pad::None`](./enum.Pad.html#variant.None),\nthen it is left-padded.\nIf the number is too long or (in some cases) negative, it is printed as is.\n\nThe **parsing width** is the maximal width to be scanned.\nThe parser only tries to consume from one to given number of digits (greedily).\nIt also trims the preceding whitespace if any.\nIt cannot parse the negative number, so some date and time cannot be formatted then\nparsed with the same formatting items.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:2305:3375","0:2307:3377","0:2309:3379","0:2311:3382","0:2313:3384","0:2315:3386","0:2317:2142","0:2319:3389","0:2321:3391","0:2323:3393","0:2325:2164","0:2327:3396","0:2329:3398","0:2331:3400","0:2333:3402","0:2335:3404","0:2337:3406","0:2339:3408","0:2341:3412","0:2343:3415","0:2345:3419"],"impls":["a:2:41605:9275-0:2304:3372","a:2:3058:246-0:2304:3372","a:2:31969:237-0:2304:3372","a:2:41604:9276-0:2304:3372","a:2:32026:9229-0:2304:3372","b:2:2563-0:2304:3372","b:2:3671-0:2304:3372","b:2:2835-0:2304:3372","b:2:2839-0:2304:3372","b:2:2850-0:2304:3372","b:2:2560-0:2304:3372","b:2:2845-0:2304:3372","b:5:725-0:2304:3372","0:2355","0:2351","0:2357","0:2348","0:2353","0:2350"]}}},"b:2:2845-0:2637:2147":{"id":"b:2:2845-0:2637:2147","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2506:191":{"id":"0:2506:191","crate_id":0,"name":"None","span":{"filename":"src/format/mod.rs","begin":[317,4],"end":[317,8]},"visibility":"default","docs":"No separator","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:53:2457":{"id":"0:53:2457","crate_id":0,"name":"subsec_nanos","span":{"filename":"src/time_delta.rs","begin":[313,4],"end":[319,5]},"visibility":"public","docs":"Returns the number of nanoseconds such that\n`subsec_nanos() + num_seconds() * NANOS_PER_SEC` is the total number of\nnanoseconds in the `TimeDelta`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:496":{"id":"0:496","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1369,0],"end":[1376,1]},"visibility":"default","docs":"Subtract `TimeDelta` from `DateTime`.\n\nThis is the same as the addition with a negated `TimeDelta`.\n\nAs a part of Chrono's [leap second handling] the subtraction assumes that **there is no leap\nsecond ever**, except when the `DateTime` itself represents a leap second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`DateTime<Tz>::checked_sub_signed`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_sub_signed`":"0:356:2762"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3109:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:498:199","0:499:1569"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[700,0],"end":[707,1]},"visibility":"default","docs":"Convert a `DateTime<Utc>` instance into a `DateTime<Local>` instance.","links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3064:2146","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Local","id":"0:3057:2135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:384:755"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2572:458":{"id":"0:2572:458","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[383,16],"end":[383,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseError","id":"0:2566:2160","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1524":{"id":"0:1524","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1287,0],"end":[1292,1]},"visibility":"default","docs":"Subtract-assign `std::time::Duration` from `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the subtraction ignores integral number of days.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33111:2338","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44129:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1525:1570"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2046":{"id":"0:2046","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[199,0],"end":[227,1]},"visibility":"default","docs":"Any weekday can be represented as an integer from 0 to 6, which equals to\n[`Weekday::num_days_from_monday`](#method.num_days_from_monday) in this implementation.\nDo not heavily depend on this though; use explicit methods whenever possible.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["from_i128","from_i8","from_f64","from_f32","from_u8","from_i16","from_u16","from_i32","from_isize","from_usize","from_u32","from_u128"],"trait":{"name":"FromPrimitive","id":"21:164:8458","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2047:8459","0:2048:8460"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1947:1704":{"id":"0:1947:1704","crate_id":0,"name":"unwrap","span":{"filename":"src/offset/mod.rs","begin":[195,4],"end":[203,5]},"visibility":"public","docs":"Returns the single unique conversion result, or panics accordingly.","links":{},"attrs":["#[must_use]","#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2835-0:2151:2130":{"id":"b:2:2835-0:2151:2130","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2809:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2151:2130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2838:3300"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13076:41640":{"id":"2:13076:41640","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1896-0:3057:2135":{"id":"0:1896-0:3057:2135","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[35,0],"end":[35,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"import":{"source":"self::local::Local","name":"Local","id":"0:3057:2135","glob":false}}},"0:2628:793":{"id":"0:2628:793","crate_id":0,"name":"hash","span":{"filename":"src/naive/date.rs","begin":[132,33],"end":[132,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:729:9778":{"id":"5:729:9778","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1892:7434":{"id":"0:1892:7434","crate_id":0,"name":"offset_from_local_date","span":{"filename":"src/offset/local/mod.rs","begin":[169,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3077:2166","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1277:2807":{"id":"0:1277:2807","crate_id":0,"name":"with_day0","span":{"filename":"src/naive/datetime/mod.rs","begin":[1388,4],"end":[1390,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.\n\nSee also the [`NaiveDate::with_day0`] method.\n\n# Errors\n\nReturns `None` if the resulting date does not exist, or if the value for `day0` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Datelike};\n\nlet dt: NaiveDateTime = NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.with_day0(29), Some(NaiveDate::from_ymd_opt(2015, 9, 30).unwrap().and_hms_opt(12, 34, 56).unwrap()));\nassert_eq!(dt.with_day0(30), None); // no September 31\n```","links":{"`NaiveDate::with_day0`":"0:1106:2807"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3058:246-0:2763:2149":{"id":"a:2:3058:246-0:2763:2149","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3058:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3084:4072":{"id":"0:3084:4072","crate_id":0,"name":"Ambiguous","span":{"filename":"src/offset/mod.rs","begin":[50,4],"end":[50,35]},"visibility":"default","docs":"Given local time representation has multiple results and thus ambiguous.\nThis can occur when, for example, the negative timezone transition.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:3086:1767","0:3087:1768"]},"discriminant":null}}},"0:482":{"id":"0:482","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1291,0],"end":[1299,1]},"visibility":"default","docs":"Add-assign `chrono::Duration` to `DateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`DateTime<Tz>::checked_add_signed`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_add_signed`":"0:354:2760"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1950:2151","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33052:2333","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:484:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2563-0:2426:3477":{"id":"b:2:2563-0:2426:3477","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:31970:7364","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2557:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2426:3477","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2565:7603"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1962:2912":{"id":"0:1962:2912","crate_id":0,"name":"timestamp_millis","span":{"filename":"src/offset/mod.rs","begin":[395,4],"end":[397,5]},"visibility":"default","docs":"Makes a new `DateTime` from the number of non-leap milliseconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").\n\nPanics on out-of-range number of milliseconds for a non-panicking\nversion see [`timestamp_millis_opt`](#method.timestamp_millis_opt).","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `timestamp_millis_opt()` instead\")]"],"deprecation":{"since":"0.4.23","note":"use `timestamp_millis_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["millis",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2171:2139","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13192:35014":{"id":"2:13192:35014","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1545:60":{"id":"0:1545:60","crate_id":0,"name":"default","span":{"filename":"src/naive/time/mod.rs","begin":[1513,4],"end":[1515,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:2799":{"id":"0:210:2799","crate_id":0,"name":"day0","span":{"filename":"src/date.rs","begin":[410,4],"end":[412,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:609:739":{"id":"0:609:739","crate_id":0,"name":"format","span":{"filename":"src/format/formatting.rs","begin":[146,0],"end":[166,1]},"visibility":"public","docs":"Tries to format given arguments with given formatting items.\nInternally used by `DelayedFormat`.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[deprecated(since = \"0.4.32\", note = \"Use DelayedFormat::fmt instead\")]"],"deprecation":{"since":"0.4.32","note":"Use DelayedFormat::fmt instead"},"inner":{"function":{"decl":{"inputs":[["w",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["date",{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"crate::NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["time",{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"crate::NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["off",{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"tuple":[{"resolved_path":{"name":"String","id":"5:7633:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"crate::FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}}],"bindings":[]}}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8248:179","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2554:103","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"super::Item","id":"0:2525:174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2204:726":{"id":"0:2204:726","crate_id":0,"name":"fmt","span":{"filename":"src/format/formatting.rs","begin":[509,22],"end":[509,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:183:2760":{"id":"0:183:2760","crate_id":0,"name":"checked_add_signed","span":{"filename":"src/date.rs","begin":[265,4],"end":[268,5]},"visibility":"public","docs":"Adds given `TimeDelta` to the current date.\n\nReturns `None` when it will result in overflow.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2164:2134","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2292":{"id":"0:2292","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[77,15],"end":[77,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2284:3355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2293:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2438:793":{"id":"0:2438:793","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[255,38],"end":[255,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2498":{"id":"0:2498","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[293,29],"end":[293,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2479:3495","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2499:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1035:4046":{"id":"0:1035:4046","crate_id":0,"name":"from_isoywd_opt","span":{"filename":"src/naive/date.rs","begin":[409,4],"end":[439,5]},"visibility":"public","docs":"Makes a new `NaiveDate` from the [ISO week date](#week-date)\n(year, week number and day of the week).\nThe resulting `NaiveDate` may have a different year from the input year.\n\n# Errors\n\nReturns `None` if:\n- The specified week does not exist in that year (for example 2023 week 53).\n- The value for `week` is invalid (for example: `0`, `60`).\n- If the resulting date is out of range for `NaiveDate`.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Weekday};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\nlet from_isoywd_opt = NaiveDate::from_isoywd_opt;\n\nassert_eq!(from_isoywd_opt(2015, 0, Weekday::Sun), None);\nassert_eq!(from_isoywd_opt(2015, 10, Weekday::Sun), Some(from_ymd(2015, 3, 8)));\nassert_eq!(from_isoywd_opt(2015, 30, Weekday::Mon), Some(from_ymd(2015, 7, 20)));\nassert_eq!(from_isoywd_opt(2015, 60, Weekday::Mon), None);\n\nassert_eq!(from_isoywd_opt(400000, 10, Weekday::Fri), None);\nassert_eq!(from_isoywd_opt(-400000, 10, Weekday::Sat), None);\n```\n\nThe year number of ISO week date may differ from that of the calendar date.\n\n```\n# use chrono::{NaiveDate, Weekday};\n# let from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n# let from_isoywd_opt = NaiveDate::from_isoywd_opt;\n//           Mo Tu We Th Fr Sa Su\n// 2014-W52  22 23 24 25 26 27 28    has 4+ days of new year,\n// 2015-W01  29 30 31  1  2  3  4 <- so this is the first week\nassert_eq!(from_isoywd_opt(2014, 52, Weekday::Sun), Some(from_ymd(2014, 12, 28)));\nassert_eq!(from_isoywd_opt(2014, 53, Weekday::Mon), None);\nassert_eq!(from_isoywd_opt(2015, 1, Weekday::Mon), Some(from_ymd(2014, 12, 29)));\n\n// 2015-W52  21 22 23 24 25 26 27    has 4+ days of old year,\n// 2015-W53  28 29 30 31  1  2  3 <- so this is the last week\n// 2016-W01   4  5  6  7  8  9 10\nassert_eq!(from_isoywd_opt(2015, 52, Weekday::Sun), Some(from_ymd(2015, 12, 27)));\nassert_eq!(from_isoywd_opt(2015, 53, Weekday::Sun), Some(from_ymd(2016, 1, 3)));\nassert_eq!(from_isoywd_opt(2015, 54, Weekday::Mon), None);\nassert_eq!(from_isoywd_opt(2016, 1, Weekday::Mon), Some(from_ymd(2016, 1, 4)));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"i32"}],["week",{"primitive":"u32"}],["weekday",{"resolved_path":{"name":"Weekday","id":"0:3125:2144","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41480:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1051:2692":{"id":"0:1051:2692","crate_id":0,"name":"and_time","span":{"filename":"src/naive/date.rs","begin":[825,4],"end":[827,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveTime, NaiveDateTime};\n\nlet d = NaiveDate::from_ymd_opt(2015, 6, 3).unwrap();\nlet t = NaiveTime::from_hms_milli_opt(12, 34, 56, 789).unwrap();\n\nlet dt: NaiveDateTime = d.and_time(t);\nassert_eq!(dt.date(), d);\nassert_eq!(dt.time(), t);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["time",{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2845-0:3108:2169":{"id":"b:2:2845-0:3108:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2819:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2815:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2848:138","2:2849:1634"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1928:726":{"id":"0:1928:726","crate_id":0,"name":"fmt","span":{"filename":"src/offset/utc.rs","begin":[151,4],"end":[153,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10168:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10149:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2358:793":{"id":"0:2358:793","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[100,38],"end":[100,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10417:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2414":{"id":"0:2414","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[171,9],"end":[171,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2415:458"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2416":{"id":"0:2416","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[171,16],"end":[171,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:31971:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1032:5379":{"id":"0:1032:5379","crate_id":0,"name":"from_yo","span":{"filename":"src/naive/date.rs","begin":[310,4],"end":[312,5]},"visibility":"public","docs":"Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n(year and day of the year).\n\n# Panics\n\nPanics if the specified ordinal day does not exist, on invalid values for `ordinal`, or if\n`year` is out of range for `NaiveDate`.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `from_yo_opt()` instead\")]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_yo_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"i32"}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2637:2147","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2081-0:3169:2142":{"id":"0:2081-0:3169:2142","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[535,16],"end":[535,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"month::Month","name":"Month","id":"0:3169:2142","glob":false}}},"0:1564-0:2692:2148":{"id":"0:1564-0:2692:2148","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[513,33],"end":[513,46]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"naive::NaiveDateTime","name":"NaiveDateTime","id":"0:2692:2148","glob":false}}},"a:2:31969:237-0:2213:2843":{"id":"a:2:31969:237-0:2213:2843","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:31969:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2213:2843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1527:199":{"id":"0:1527:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/time/mod.rs","begin":[1299,4],"end":[1299,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveTime","id":"0:2763:2149","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2839-0:3108:2169":{"id":"b:2:2839-0:3108:2169","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2812:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3108:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2841:755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41604:9276-0:2372:2842":{"id":"a:2:41604:9276-0:2372:2842","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41604:9276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2372:2842","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13072:41639":{"id":"2:13072:41639","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13070:41638"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2477":{"id":"0:62:2477","crate_id":0,"name":"zero","span":{"filename":"src/time_delta.rs","begin":[399,4],"end":[401,5]},"visibility":"public","docs":"A `TimeDelta` where the stored seconds and nanoseconds are equal to zero.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2129:2131","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1307:199":{"id":"0:1307:199","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[1749,4],"end":[1749,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2692:2148","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:517:1569":{"id":"0:517:1569","crate_id":0,"name":"sub","span":{"filename":"src/datetime/mod.rs","begin":[1472,4],"end":[1474,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3109:2337","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2784":{"id":"0:2784","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[22,9],"end":[22,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2610:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2781:2145","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2785:667"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3226":{"id":"0:3226","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,9],"end":[227,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2576:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3223:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3227:458"],"negative":false,"synthetic":false,"blanket_impl":null}}}},"paths":{"5:6955:9017":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"0:2411:3419":{"crate_id":0,"path":["chrono","format","Fixed","Internal"],"kind":"variant"},"2:43333:8957":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"21:497:10346":{"crate_id":21,"path":["num_traits","ops","wrapping","WrappingMul"],"kind":"trait"},"2:2554:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:2087:7928":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:8304:8955":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:41420:13831":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:13089:7966":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:3093:9232":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:5064:12614":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:4821:14359":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:40272:9051":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:437:10570":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:9318:10156":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"16:7052:14482":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:726:9111":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:2029:13329":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4985:12573":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:4802:11673":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:43585:8968":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:11026:29190":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"21:503:10348":{"crate_id":21,"path":["num_traits","ops","wrapping","WrappingShl"],"kind":"trait"},"6:5352:12698":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"2:44103:8936":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:14246:11031":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:3028:13301":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:8883:14612":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:44129:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:5112:12617":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:102:12140":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:42720:9107":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:1485:12315":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:8317:8958":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:7749:9161":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:5081:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:12030:14413":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:10457:9106":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:8300:13282":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:22704:10316":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"11:710:10084":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:11835:14554":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"0:2546:138":{"crate_id":0,"path":["chrono","format","Item","Error"],"kind":"variant"},"2:45997:13759":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:42202:8899":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:5400:10620":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:6629:12997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13325:10839":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:15799:11469":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:9108:13857":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"0:2383:3441":{"crate_id":0,"path":["chrono","format","Fixed","UpperAmPm"],"kind":"variant"},"16:4940:11678":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:2470:21894":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:10174:15327":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:5039:12601":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:5122:12618":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:5347:11685":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:6636:12998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"18:765:33359":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:8956:13852":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:42442:13639":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:22533:13363":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:12213:14423":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:45289:13694":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"11:2326:10092":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"17:16032:10822":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"16:7539:11641":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:11605:7932":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:6965:9018":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"0:559:739":{"crate_id":0,"path":["chrono","format"],"kind":"module"},"2:22:741":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:10997:10636":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:5581:12806":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:10686:13864":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:7467:13175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:4785:16582":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"11:2304:10091":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:43381:8961":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:5260:12665":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"0:2379:3436":{"crate_id":0,"path":["chrono","format","Fixed","LongWeekdayName"],"kind":"variant"},"1:7967:9152":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:1885:10156":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:6441:12899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:10150:2836":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:3396:9009":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:42026:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:9015:16629":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:7098:11879":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:6026:11725":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:11879:8952":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:12189:14421":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"18:718:10505":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:1663:12430":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:13308:10837":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:11006:8876":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:6592:9075":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:14599:11091":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:2438:11606":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:1463:9222":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:6098:29109":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:21468:40152":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:6749:11822":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:8497:9218":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"18:754:10513":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:45391:13706":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"0:1984:2167":{"crate_id":0,"path":["chrono","round"],"kind":"module"},"6:5671:12849":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:5083:12615":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:6562:12963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:43671:8973":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:6665:29113":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"0:3079:191":{"crate_id":0,"path":["chrono","offset","LocalResult","None"],"kind":"variant"},"6:586:12311":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:45627:13727":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:14131:10992":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"0:3111:8311":{"crate_id":0,"path":["chrono","round","RoundingError","DurationExceedsLimit"],"kind":"variant"},"2:4570:9082":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13455:10864":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:12778:8946":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:40094:14559":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:3501:7707":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:11016:9782":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:12584:14365":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"18:481:10471":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:45306:13697":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:41442:13631":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:3104:2332":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:9671:29156":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:9831:726":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"1:2585:9190":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:2205:13296":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:3301:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:7813:11946":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:22323:21894":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"16:6813:11836":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:6532:11785":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:11041:13876":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:3136:8858":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:15445:11357":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:12763:8944":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:5160:12621":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:4565:9081":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"11:800:9011":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:46603:13815":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:0:8713":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:12516:14430":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:6160:28219":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"0:2479:3495":{"crate_id":0,"path":["chrono","format","OffsetPrecision"],"kind":"enum"},"1:4076:16560":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:22362:16744":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:43293:14565":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:43617:8958":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:4103:40943":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:3473:14357":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:7403:14538":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:8109:7822":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"0:2309:3379":{"crate_id":0,"path":["chrono","format","Numeric","YearMod100"],"kind":"variant"},"11:837:10086":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:4882:11676":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:14284:11036":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:5407:1117":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:46455:13805":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"0:3252:2209":{"crate_id":0,"path":["chrono","OutOfRange"],"kind":"struct"},"16:2902:28247":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:570:12302":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:10801:34158":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"0:2530:3529":{"crate_id":0,"path":["chrono","format","Item","OwnedLiteral"],"kind":"variant"},"18:643:10473":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:3351:9197":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:1908:640":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:12671:14436":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"11:2369:14514":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:4448:9094":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:1590:12147":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:2265:9134":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:867:10081":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:15010:11250":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:9916:29174":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:44095:8941":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:4062:11660":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:868:16520":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:4465:14583":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:8388:14610":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:7984:13256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11674:10667":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:2808:11623":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"18:581:8895":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:45779:13735":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:2508:11609":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:5828:14591":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:7088:14287":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:40114:9156":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:11223:14288":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:13187:10805":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:15748:11458":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:4531:11665":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11788:14402":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:45968:13758":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:1887:10157":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:8306:13283":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:12018:14095":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:14356:11047":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"11:328:12145":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"0:2307:3377":{"crate_id":0,"path":["chrono","format","Numeric","YearDiv100"],"kind":"variant"},"2:4922:21828":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"11:2352:10093":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:9857:14884":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:6079:11587":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:1510:12325":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:4717:13153":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"6:545:12289":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:8329:14609":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:4283:14542":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"11:2151:10093":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:3925:11659":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:12494:10748":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:10778:10161":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:8889:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:22104:16657":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:12757:8930":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:43431:8962":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:8650:9224":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:21678:16656":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:15324:11324":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:4833:726":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"5:1426:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:30234:9002":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:45758:13734":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10399:8955":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:4551:16582":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:6714:13033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:43922:13676":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:7656:14274":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:21992:40150":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:5769:11693":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"11:1582:14510":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"0:2405:3473":{"crate_id":0,"path":["chrono","format","Fixed","TimezoneOffsetZ"],"kind":"variant"},"17:13292:10833":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:4922:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:6648:11798":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:11016:14368":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:9049:14614":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:8404:13833":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:13573:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:41751:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:15390:11343":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:9486:9154":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"6:5361:12702":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:403:14347":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:13015:10742":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:10462:9201":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:12086:1654":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:8425:13142":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:294:3344":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:14212:11028":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:5344:12697":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:15058:11259":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:8265:13274":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:922:10086":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:15281:11312":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:12070:1167":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"11:1603:14511":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:2239:7599":{"crate_id":1,"path":["std","fs"],"kind":"module"},"2:40201:9060":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:7111:11882":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:41242:13614":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:39115:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:2838:11624":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11367:10639":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:6548:13825":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:46035:13761":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:14091:10988":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:8031:7928":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:8139:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:517:12273":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:4295:14543":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"9:482:28098":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:4979:12570":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13832:10951":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:4467:9169":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:7750:9541":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:7241:15817":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"5:3283:41294":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:16212:11572":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:3109:2337":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:39103:8862":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:7473:9013":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:45811:13737":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:12969:10780":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:3489:8864":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:40141:9047":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:5075:11682":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:10849:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:5867:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:5140:9205":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:4241:15815":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:1535:12339":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:3510:8866":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:7580:11937":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:2756:13308":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:44079:8938":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:6802:11835":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11392:14384":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:6692:9013":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:44107:8937":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:6758:11823":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12993:29181":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:513:14348":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:2788:11622":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"21:347:10328":{"crate_id":21,"path":["num_traits","ops","bytes","ToBytes"],"kind":"trait"},"5:1544:10084":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"11:2542:12153":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:8023:9192":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:7715:9009":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:279:40943":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:16249:11578":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:11234:14550":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:12887:10775":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:4880:14584":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:1680:12437":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:9665:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:7773:9531":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:2323:28246":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:12127:10717":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"10:0:8708":{"crate_id":10,"path":["adler"],"kind":"module"},"2:6083:9050":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"0:2393:3453":{"crate_id":0,"path":["chrono","format","Fixed","TimezoneName"],"kind":"variant"},"2:40295:9067":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:13485:10868":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:640:14570":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:5714:13822":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:13024:29182":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:542:11585":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:3208:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:5046:12603":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:22376:21894":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"17:10759:10653":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:5445:9130":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:8377:13832":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11419:13887":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"0:2372:2842":{"crate_id":0,"path":["chrono","format","Fixed"],"kind":"enum"},"17:11730:10673":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:7497:11931":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"0:2426:3477":{"crate_id":0,"path":["chrono","format","InternalFixed"],"kind":"struct"},"1:3558:2836":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:6895:11851":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:11802:14553":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"16:5897:11705":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:15463:11360":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"0:0:2219":{"crate_id":0,"path":["chrono"],"kind":"module"},"13:0:8704":{"crate_id":13,"path":["std_detect"],"kind":"module"},"9:392:28100":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:4718:11670":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:3740:40943":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:3231:34752":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:32026:9229":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:12238:14425":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:7379:42602":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:10563:21948":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:6940:11857":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:12066:1049":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:4864:12518":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:39871:13585":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:6763:13047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"16:4352:11661":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:8623:9221":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"11:2548:12154":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:1580:12370":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:39893:39209":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:12422:10740":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"11:1676:42583":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:14260:11033":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11877:10678":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:9164:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:43181:14561":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:15176:11290":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"0:3109:8318":{"crate_id":0,"path":["chrono","round","RoundingError","DurationExceedsTimestamp"],"kind":"variant"},"1:4262:15816":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:5307:11684":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:7755:11636":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"15:327:14862":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:5134:12619":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:42481:11973":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:4830:11674":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:30809:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:11656:13891":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:7769:11944":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:1653:12424":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:39965:21833":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:33771:8846":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:6478:12913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:6620:11796":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:15608:11418":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:10108:14623":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:13568:10893":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:5927:11711":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:46550:13812":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:4698:8912":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:46486:13808":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:7570:13319":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:4206:9169":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:6417:12883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:2612:11614":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:6588:11787":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:12485:29301":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"0:3081:4071":{"crate_id":0,"path":["chrono","offset","LocalResult","Single"],"kind":"variant"},"6:7575:13244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:12362:10736":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:7144:29116":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:13606:10901":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:2203:14352":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:8323:14607":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:836:9222":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:4787:12459":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"21:465:33379":{"crate_id":21,"path":["num_traits","ops","overflowing","OverflowingMul"],"kind":"trait"},"1:7841:10160":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:5515:12781":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"16:2936:28248":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:21573:13361":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:4587:11667":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:3237:9222":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:41386:39220":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:12305:7962":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:16235:11577":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:6726:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:1939:8880":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:44091:8943":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:46210:13796":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:589:10484":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"21:275:10325":{"crate_id":21,"path":["num_traits","identities","One"],"kind":"trait"},"17:16259:10849":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:7561:13235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:14079:10987":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:7486:37667":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:43936:21809":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"0:2327:3396":{"crate_id":0,"path":["chrono","format","Numeric","NumDaysFromSun"],"kind":"variant"},"6:8197:13270":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:1516:10081":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:15569:11403":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:645:16512":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:4826:16574":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11313:10650":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:2652:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:40210:9061":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:4422:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:9670:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:22835:9124":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:39260:8865":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:8382:16581":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:3196:11594":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:13774:10942":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:6678:13016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"21:435:10341":{"crate_id":21,"path":["num_traits","ops","mul_add","MulAddAssign"],"kind":"trait"},"2:10992:9222":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:10417:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:44075:8935":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:13738:10934":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:44395:13691":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:11408:14031":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:1565:12358":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:4417:9093":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"0:1948:2150":{"crate_id":0,"path":["chrono","offset","Offset"],"kind":"trait"},"5:1309:10091":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:12067:454":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"18:563:10483":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:6792:13344":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:7452:13169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:8900:13849":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:1525:10082":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"16:7823:29119":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:11715:10670":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:41594:9273":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:12264:14427":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"7:78:28092":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:3669:10521":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:13999:10976":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:12433:10742":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:2819:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:42065:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:11853:14411":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11324:14379":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:4822:16571":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:6611:40943":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:21553:9161":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"21:430:10340":{"crate_id":21,"path":["num_traits","ops","mul_add","MulAdd"],"kind":"trait"},"1:3576:9159":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"21:1984:10318":{"crate_id":21,"path":["num_traits","float","FloatConst"],"kind":"trait"},"10:36:12161":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:5182:867":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:12080:807":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:15126:11274":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"21:105:33368":{"crate_id":21,"path":["num_traits","bounds","UpperBounded"],"kind":"trait"},"17:12597:10753":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"5:5503:1552":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"6:491:12253":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:538:12285":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:5133:14585":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:40320:9069":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"18:670:14344":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:33598:8845":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"20:47:10470":{"crate_id":20,"path":["iana_time_zone","platform","openwrt","BrokenQuote"],"kind":"struct"},"2:3499:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:217:10187":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"11:2403:9782":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:2887:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:13594:10898":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:7705:33799":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:13424:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:4913:11677":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:11642:34190":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"6:532:12282":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:621:8882":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:4997:16608":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13473:10865":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:32446:2335":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:40479:9072":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:46329:13799":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:7979:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"11:1142:14509":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:11189:10643":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"0:2313:3384":{"crate_id":0,"path":["chrono","format","Numeric","IsoYearDiv100"],"kind":"variant"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:10202:8899":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:2898:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"11:1896:9009":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:12824:29180":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:7793:9529":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:6967:33773":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:8064:9045":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:9781:29171":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:4721:13157":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:3778:9011":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:1207:14350":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:13581:10897":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:941:9222":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:730:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:44347:14566":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:12724:29179":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:2576:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:43970:8948":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:5630:12833":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:2101:14521":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:559:12297":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:1340:10092":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:8282:13279":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:41274:16553":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:9088:14619":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:2456:641":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:5477:12772":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:5400:12725":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"9:178:14875":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:15206:11295":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"11:1910:12148":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:6692:15237":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"18:659:14340":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:4313:14581":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:7485:13186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:4148:9782":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:2033:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:4238:9169":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:1575:14520":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:533:9524":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:5290:12681":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:11341:14382":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:12792:10584":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:43531:8970":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:6120:29110":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"11:434:15805":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:7413:13317":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:8985:16628":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"0:2287:3358":{"crate_id":0,"path":["chrono","format","Pad","Zero"],"kind":"variant"},"17:10720:42605":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"0:2484:3512":{"crate_id":0,"path":["chrono","format","OffsetPrecision","Seconds"],"kind":"variant"},"1:12090:1711":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:12459:8980":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:2447:9148":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:4233:15814":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:2104:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:6788:13056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:7516:13211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"11:351:15801":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:45487:13712":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:15116:11273":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:8202:11648":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:32056:9235":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:6721:13034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:7429:13162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:46565:13813":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:9237:9274":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:11702:10669":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:4689:9090":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:46501:13809":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:12621:10754":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"0:1950:2151":{"crate_id":0,"path":["chrono","offset","TimeZone"],"kind":"trait"},"17:9984:29176":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:8255:9157":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:3283:8855":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:21414:8895":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:45923:13757":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:2815:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:21951:9161":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:4393:14582":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:39950:8973":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:5536:12787":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:10696:9151":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:5415:11686":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:12076:14416":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:3264:14356":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:6331:13822":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:42544:8909":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:8175:14502":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:22726:13373":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:45458:13710":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:5020:12592":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:45665:13729":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"21:260:3358":{"crate_id":21,"path":["num_traits","identities","Zero"],"kind":"trait"},"1:11024:2837":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:11557:14391":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"0:2387:3446":{"crate_id":0,"path":["chrono","format","Fixed","Nanosecond3"],"kind":"variant"},"17:12388:10737":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:13723:10930":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"11:1923:12150":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"17:15342:11328":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:43413:8964":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:924:16521":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:10092:29178":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:12289:10720":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:43743:21808":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:8093:11996":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:38440:8854":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"11:2569:9007":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:3294:8856":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:40172:9049":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13526:10878":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:11059:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"0:2317:2142":{"crate_id":0,"path":["chrono","format","Numeric","Month"],"kind":"variant"},"9:424:28101":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:7857:11954":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"0:104:132":{"crate_id":0,"path":["chrono","Duration"],"kind":"type_alias"},"5:6774:40943":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11595:10661":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:3597:14358":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:11289:8965":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:14788:11144":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:10710:14364":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:12695:14438":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:43251:14563":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12443:10744":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:22271:16740":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:43793:13672":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:7559:11936":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:9997:8922":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"0:2401:3468":{"crate_id":0,"path":["chrono","format","Fixed","TimezoneOffsetColonZ"],"kind":"variant"},"17:14372:11048":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:918:10085":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:9036:13856":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:9179:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:41258:13616":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:13844:10953":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:1503:12323":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:33052:2333":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:1063:10093":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:3519:9158":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"21:382:10334":{"crate_id":21,"path":["num_traits","ops","checked","CheckedShl"],"kind":"trait"},"17:10954:29188":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11547:10563":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"11:811:9009":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:15214:11297":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:46358:13800":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:5969:9062":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:13399:10852":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:10905:14367":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:5722:11633":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:4018:16555":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:30298:39224":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:13591:13358":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"10:44:12162":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:8155:12004":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:12081:808":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:3815:14579":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"18:623:42618":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:4062:16558":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"14:202:2160":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"16:6353:11765":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:8110:9044":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:6849:11849":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:11051:14370":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:15944:10819":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"0:2315:3386":{"crate_id":0,"path":["chrono","format","Numeric","IsoYearMod100"],"kind":"variant"},"1:4824:16573":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:6524:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4916:12544":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:1628:12405":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"0:2377:3434":{"crate_id":0,"path":["chrono","format","Fixed","ShortWeekdayName"],"kind":"variant"},"16:2878:11626":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5445:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:5266:12668":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:8136:12001":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:6768:13048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"0:2397:3461":{"crate_id":0,"path":["chrono","format","Fixed","TimezoneOffsetDoubleColon"],"kind":"variant"},"1:7768:9530":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:5006:11680":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:11227:14377":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:39170:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:25:664":{"crate_id":2,"path":["core","env"],"kind":"macro"},"1:9174:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:3270:12149":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:45712:13732":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11583:14397":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:6178:9169":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:6053:13314":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:22811:9110":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"0:2539:3372":{"crate_id":0,"path":["chrono","format","Item","Numeric"],"kind":"variant"},"6:5102:12616":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"0:2536:3532":{"crate_id":0,"path":["chrono","format","Item","OwnedSpace"],"kind":"variant"},"2:44356:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"21:371:10336":{"crate_id":21,"path":["num_traits","ops","checked","CheckedSub"],"kind":"trait"},"7:31:28085":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:21470:40154":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:39931:13591":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:6542:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:5802:29107":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"18:538:10481":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:41629:137":{"crate_id":2,"path":["chrono","format","ParseResult","Err"],"kind":"variant"},"17:13064:10788":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:39865:8973":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"9:53:14865":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"0:3077:2166":{"crate_id":0,"path":["chrono","offset","LocalResult"],"kind":"enum"},"1:8480:9268":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:6948:11637":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"20:0:2220":{"crate_id":20,"path":["iana_time_zone"],"kind":"module"},"6:5382:12713":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:6678:15233":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:11898:10680":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"0:2305:3375":{"crate_id":0,"path":["chrono","format","Numeric","Year"],"kind":"variant"},"17:14311:11038":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:39991:21834":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:3778:11655":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:42959:13653":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:6782:29114":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:42223:8901":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:1828:9009":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"21:531:10352":{"crate_id":21,"path":["num_traits","pow","Pow"],"kind":"trait"},"2:10206:8901":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"0:2329:3398":{"crate_id":0,"path":["chrono","format","Numeric","WeekdayFromMon"],"kind":"variant"},"2:41604:9276":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"0:1997:2138":{"crate_id":0,"path":["chrono","round","SubsecRound"],"kind":"trait"},"17:15701:11444":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:6263:11763":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:564:12299":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:40023:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:4718:8914":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:7633:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:15720:11449":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:6466:11778":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"11:364:15223":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:588:16509":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:5831:11698":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:4971:12565":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"21:585:10309":{"crate_id":21,"path":["num_traits","RefNum"],"kind":"trait"},"6:8012:13259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:5797:9169":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:43513:8969":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:3660:9782":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:13363:10845":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:9886:29173":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:2124:10091":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:3812:14578":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:10691:13866":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:39908:13589":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"21:391:10338":{"crate_id":21,"path":["num_traits","ops","euclid","Euclid"],"kind":"trait"},"17:13211:10819":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:10786:14590":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"0:2343:3415":{"crate_id":0,"path":["chrono","format","Numeric","Timestamp"],"kind":"variant"},"5:1724:40943":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"0:2407:3105":{"crate_id":0,"path":["chrono","format","Fixed","RFC2822"],"kind":"variant"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:2421:7613":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:1581:9011":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:1915:13328":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:6398:11627":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"21:404:10337":{"crate_id":21,"path":["num_traits","ops","euclid","CheckedEuclid"],"kind":"trait"},"14:214:12090":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"0:3113:8313":{"crate_id":0,"path":["chrono","round","RoundingError","TimestampExceedsLimit"],"kind":"variant"},"1:4707:16560":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:10087:10150":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:5677:12852":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:10210:8902":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:5211:13314":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"18:651:10473":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:521:33360":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:10350:10626":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:7321:9272":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:42944:13652":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:15039:11258":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:1559:12356":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:15190:11292":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:43485:8965":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"11:673:9222":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:515:10476":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:1574:9222":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:7528:9007":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:14876:11207":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:5742:11688":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"21:472:236":{"crate_id":21,"path":["num_traits","ops","saturating","Saturating"],"kind":"trait"},"1:12079:810":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:5463:14586":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:7446:13167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:15168:11287":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:9067:33985":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:14414:11055":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:21436:40144":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:40191:9059":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:10982:29189":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"11:1903:12147":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:3237:37524":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:6021:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:6881:16653":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"0:2284:3355":{"crate_id":0,"path":["chrono","format","Pad"],"kind":"enum"},"2:39210:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"0:2289:3360":{"crate_id":0,"path":["chrono","format","Pad","Space"],"kind":"variant"},"16:2708:11618":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:1526:12333":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:12065:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:5489:12775":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:40163:9048":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13553:10887":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"5:7125:40994":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:11256:10645":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"15:288:15792":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:45338:13699":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"18:635:10495":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:5052:12605":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"21:477:10342":{"crate_id":21,"path":["num_traits","ops","saturating","SaturatingAdd"],"kind":"trait"},"2:42506:8908":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:11075:10639":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:2234:13298":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7132:11884":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:14516:11074":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"11:883:10090":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:31946:14558":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:45856:13754":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:8247:13271":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5528:12782":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:2015:21904":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:3119:2336":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:11354:14383":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"11:1566:28178":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:5322:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:7995:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:15635:11427":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"9:0:8707":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:11161:14549":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:41679:9013":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:2195:9519":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:7950:9151":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:10400:33771":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:928:10087":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:22321:39855":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:44372:13690":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:1578:9013":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:45516:13714":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:15931:10805":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:41868:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:40263:9065":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:5046:9264":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:3469:9169":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:10573:42611":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:44111:8876":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:46255:13797":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:261:14346":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:8015:14601":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:828:14515":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:10661:39544":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:45545:13723":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:7014:29115":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:14912:11237":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:4870:12519":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:12050:35105":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:7437:9013":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:39152:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:14968:11243":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:7168:13857":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:5002:12583":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:3647:9222":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:46408:13802":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:497:12256":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"0:2381:3439":{"crate_id":0,"path":["chrono","format","Fixed","LowerAmPm"],"kind":"variant"},"17:16121:11550":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:5862:14595":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:10739:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:2557:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:12659:14435":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:3426:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:9141:13860":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:7549:11935":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:11467:10660":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:39019:8873":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"11:1025:10092":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:3586:9178":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"14:31:14266":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:5225:12647":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:43264:13355":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:9938:29175":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:7940:9153":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:13173:10804":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:2979:14576":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:3032:15228":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:10149:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:4986:14360":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:4491:8910":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:7428:29117":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:45680:13730":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:40181:9058":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:43646:8975":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:523:12276":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:16093:11543":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"5:5710:9016":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:32818:8840":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:8633:9222":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:12318:10725":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:43810:13673":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:1621:12401":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:11285:12218":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"5:824:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:5466:12767":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:14012:10978":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"21:197:10319":{"crate_id":21,"path":["num_traits","cast","AsPrimitive"],"kind":"trait"},"20:29:15783":{"crate_id":20,"path":["iana_time_zone","platform","openwrt","IterWords"],"kind":"struct"},"16:2418:11605":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:4942:12554":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:15836:11476":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:45321:13698":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11102:14373":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:13972:10685":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:5643:12839":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:14503:11073":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:2572:11612":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:15138:11277":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"0:2333:3402":{"crate_id":0,"path":["chrono","format","Numeric","Hour"],"kind":"variant"},"17:12543:14433":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"16:2592:11613":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:6622:14283":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:12408:10739":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:3270:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"13:109:42588":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:2998:11649":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:15273:11311":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11799:14403":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:41546:9782":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:5306:12688":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:7945:9154":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:4965:12562":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"0:3108:2169":{"crate_id":0,"path":["chrono","round","RoundingError"],"kind":"enum"},"2:40251:9074":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:11166:10641":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:7635:10616":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:15778:11466":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:362:9540":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:6442:11773":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:15249:11303":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:12353:10735":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:5436:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:13855:10954":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:39921:13590":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:4437:40957":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"0:2251:2654":{"crate_id":0,"path":["chrono","format","strftime","StrftimeItems"],"kind":"struct"},"6:7348:13133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:2472:21895":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"16:2728:11619":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:12225:14424":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"0:1569:1104":{"crate_id":0,"path":["chrono","offset"],"kind":"module"},"17:12851:10773":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:5336:12696":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:40121:9046":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:7389:13160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:40469:9071":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:6657:13010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:42741:7929":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:2646:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:2374:11603":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6543:11786":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:25686:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:22586:13364":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:10758:37847":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:6664:13011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11128:10609":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"21:412:10339":{"crate_id":21,"path":["num_traits","ops","inv","Inv"],"kind":"trait"},"1:12085:1653":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:1496:12320":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5014:12589":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"11:1917:12149":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:10505:9529":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:5457:12761":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:5244:12657":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"0:2595:3568":{"crate_id":0,"path":["chrono","format","ParseErrorKind","BadFormat"],"kind":"variant"},"16:4976:11679":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:15678:11443":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:3842:11657":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:8370:13831":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:44083:8940":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:14189:11019":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:10452:9104":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:1596:12148":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:13116:10793":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"16:6480:11629":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:7910:29120":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"0:2337:3406":{"crate_id":0,"path":["chrono","format","Numeric","Minute"],"kind":"variant"},"5:1555:10085":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:21680:13361":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"3:0:481":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:41302:13623":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:21451:40140":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:12557:10639":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:9197:2837":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:11089:13877":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"11:299:12142":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:8101:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:22670:13369":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:3504:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:43947:13677":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:46512:13810":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:3100:9234":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"0:2593:3566":{"crate_id":0,"path":["chrono","format","ParseErrorKind","TooLong"],"kind":"variant"},"2:22407:9161":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:7594:15812":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"0:2585:3555":{"crate_id":0,"path":["chrono","format","ParseErrorKind","Impossible"],"kind":"variant"},"2:32632:2334":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:3014:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:8973:13853":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:13252:10822":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:30355:39213":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"0:949:2161":{"crate_id":0,"path":["chrono","format","ParseResult"],"kind":"type_alias"},"11:875:10089":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:4837:12496":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:15333:11327":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:914:10084":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:4307:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:11293:29208":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:45796:13736":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:2478:11608":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:40242:9064":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:8566:9043":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"11:2536:12152":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12201:14422":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"0:2395:3458":{"crate_id":0,"path":["chrono","format","Fixed","TimezoneOffsetColon"],"kind":"variant"},"21:385:10335":{"crate_id":21,"path":["num_traits","ops","checked","CheckedShr"],"kind":"trait"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"21:573:10307":{"crate_id":21,"path":["num_traits","NumOps"],"kind":"trait"},"2:43885:13675":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:5385:10619":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"11:2469:9009":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:11425:13888":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:11153:14365":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:11142:10653":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:6231:11758":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11865:14412":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:46446:13804":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:8583:9220":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"0:2486:3514":{"crate_id":0,"path":["chrono","format","OffsetPrecision","OptionalMinutes"],"kind":"variant"},"1:1585:9009":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:2338:11595":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:10248:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"16:6606:11794":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:15289:11313":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:22654:13366":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:12107:10653":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:4811:12476":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:7646:9024":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:43309:7646":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:43567:8967":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:6433:11772":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:11123:14548":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:0:892":{"crate_id":6,"path":["libc"],"kind":"module"},"2:7876:9029":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:3012:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:15456:11358":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:12278:14428":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:13611:13360":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:10524:14361":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:45885:13755":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:44275:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:21555:16655":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:15521:11402":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:3304:12150":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:15646:11428":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:10465:9197":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:21453:40148":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:0:8714":{"crate_id":17,"path":["object"],"kind":"module"},"11:844:10087":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:12073:1552":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:2112:14522":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:5200:12636":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:4745:8913":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:5037:11681":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:7602:13250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:1607:12150":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"21:4486:10316":{"crate_id":21,"path":["num_traits","FloatErrorKind"],"kind":"enum"},"2:45697:13731":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:5892:9169":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:150:11583":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:44272:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"18:531:10478":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:2234:14355":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10612:14362":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:5212:12643":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:4644:8911":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:6775:13049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:10667:14632":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:11825:14408":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:14436:11066":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:12078:700":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:40717:9035":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:3252:8869":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:22421:16735":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:414:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:4824:12486":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:4614:11668":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:7373:9013":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7799:11634":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:16223:11574":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"21:189:10320":{"crate_id":21,"path":["num_traits","cast","NumCast"],"kind":"trait"},"2:44087:8939":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:43283:13356":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:1593:12377":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:3272:9200":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:46133:13795":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:14986:11248":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:14587:11084":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:2419:9138":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:14402:11053":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:43858:13674":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:42963:13654":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:45374:13705":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:11317:14552":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:8226:29121":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:1671:12431":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"21:307:10326":{"crate_id":21,"path":["num_traits","int","PrimInt"],"kind":"trait"},"6:5624:12830":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"16:6504:11782":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:5756:14443":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:10218:10622":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:8188:14505":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:33288:8843":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:45473:13711":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:10629:39553":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:1929:2213":{"crate_id":1,"path":["std","error"],"kind":"module"},"1:951:10090":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:473:12245":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:14529:11075":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:42759:13651":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:7528:11932":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:10622:42612":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"11:0:8709":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"5:3806:14521":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"21:368:10329":{"crate_id":21,"path":["num_traits","ops","checked","CheckedAdd"],"kind":"trait"},"2:9852:40128":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:31971:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:11773:10757":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:7306:13109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:3053:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:3516:8868":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:8192:5878":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"0:2345:3419":{"crate_id":0,"path":["chrono","format","Numeric","Internal"],"kind":"variant"},"2:33170:8842":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:39230:8863":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:11269:29207":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"16:7618:11938":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:8243:9204":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:22804:13383":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:11634:10664":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:15383:11342":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:8942:14613":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:4012:16556":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:13509:10870":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"19:0:1147":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:5598:12813":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:41460:13632":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"0:2505:3498":{"crate_id":0,"path":["chrono","format","Colons"],"kind":"enum"},"1:1968:8881":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"6:6729:13035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"5:5937:9011":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"11:1160:10094":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:10998:37849":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:6074:15230":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:39190:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:6432:16747":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:44153:8877":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:5636:12836":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:10168:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:4308:9222":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:8006:13257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:6508:9030":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:2287:41374":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:2273:9135":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:7727:11645":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:15376:11341":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:3899:11658":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:356:9539":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:31970:7364":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:6379:12856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:43172:13353":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:14271:11034":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"21:580:10308":{"crate_id":21,"path":["num_traits","NumRef"],"kind":"trait"},"2:41626:193":{"crate_id":2,"path":["chrono","format","ParseResult","Ok"],"kind":"variant"},"2:41712:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"0:2375:3432":{"crate_id":0,"path":["chrono","format","Fixed","LongMonthName"],"kind":"variant"},"2:22742:39217":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:14051:10983":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:1723:12453":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:30836:8895":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:3333:8861":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:7957:9155":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:15266:11310":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:6300:14467":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:10251:10623":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:2307:13304":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"21:377:10333":{"crate_id":21,"path":["num_traits","ops","checked","CheckedRem"],"kind":"trait"},"1:1826:10140":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:6634:11635":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:41605:9275":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:4349:21819":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:8334:16552":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:15616:11421":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:21482:40146":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:12175:14417":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:11513:14578":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:5817:11695":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:40285:9066":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:46056:13762":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"0:2311:3382":{"crate_id":0,"path":["chrono","format","Numeric","IsoYear"],"kind":"variant"},"0:2005:2168":{"crate_id":0,"path":["chrono","round","DurationRound"],"kind":"trait"},"17:14463:11068":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:8604:40127":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:669:14273":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:22295:9161":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:21956:10328":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:6621:12996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:1824:10139":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:3141:8859":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:39984:13594":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:2355:11597":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:15426:11352":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:7359:13138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12251:14426":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:6625:16623":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:43680:8974":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:10818:13851":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:45566:13724":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:16069:11538":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"0:2335:3404":{"crate_id":0,"path":["chrono","format","Numeric","Hour12"],"kind":"variant"},"6:1707:12448":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:3314:9202":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:1054:10092":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:3029:10516":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:42497:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:21561:16658":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:4468:11663":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:10730:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:8560:9042":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"20:61:10112":{"crate_id":20,"path":["iana_time_zone","GetTimezoneError"],"kind":"enum"},"21:279:10323":{"crate_id":21,"path":["num_traits","identities","ConstOne"],"kind":"trait"},"17:10439:10629":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:872:14346":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:30010:9108":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:8073:11995":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:6512:14598":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:11574:14580":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:12454:10745":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:5588:12808":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:37751:8851":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:13785:10945":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:32058:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:553:12294":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:14475:11069":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:7656:29118":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:5390:12718":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:12087:1655":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:43363:8963":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:2548:11611":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:903:9009":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:40344:9054":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:5296:12684":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:7835:16516":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:13449:14555":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"21:214:33369":{"crate_id":21,"path":["num_traits","float","FloatCore"],"kind":"trait"},"17:1098:14349":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:0:1544":{"crate_id":1,"path":["std"],"kind":"module"},"16:7633:42594":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:7622:14539":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:11042:14369":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:43662:8972":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:2610:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:6460:12901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:16105:11545":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:1862:10150":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12089:10715":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:6244:33793":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:30287:8908":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"21:597:10311":{"crate_id":21,"path":["num_traits","NumAssign"],"kind":"trait"},"5:3036:15229":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:16198:11568":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:44293:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12647:14434":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:14235:11029":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:14545:11077":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:2268:7628":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:5502:12780":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:7537:13225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"21:0:2221":{"crate_id":21,"path":["num_traits"],"kind":"module"},"17:14933:11242":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:849:9782":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:30272:13389":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10170:10620":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:7397:42601":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:2660:11616":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:15473:11365":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:5721:13823":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:15992:11524":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"21:352:10327":{"crate_id":21,"path":["num_traits","ops","bytes","FromBytes"],"kind":"trait"},"16:6560:11630":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:16138:11552":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:15151:11282":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:5277:12676":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"11:700:9013":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:4502:11664":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:8639:9223":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"8:0:8706":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:3278:12147":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:11443:10658":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:14994:11249":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:42712:13646":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:485:12251":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:13412:10854":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:12074:1637":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:42452:8908":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:39977:13593":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"16:5686:11628":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"0:2587:3560":{"crate_id":0,"path":["chrono","format","ParseErrorKind","NotEnough"],"kind":"variant"},"2:10208:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"18:598:42616":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:8950:9013":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:5565:12801":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:256:14345":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:40054:13599":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:11841:14410":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"15:394:28211":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:6491:12922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11419:10653":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:9095:14620":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:5370:12708":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:6427:14480":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:7355:11914":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:5320:12692":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:2303:28220":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:6915:13102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:12071:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:5367:29106":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:6932:9016":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"14:160:14266":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:6706:13029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:78:1711":{"crate_id":2,"path":["core","usize"],"kind":"module"},"2:21500:9161":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"5:7539:9101":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"0:2319:3389":{"crate_id":0,"path":["chrono","format","Numeric","Day"],"kind":"variant"},"6:4909:12540":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"7:0:1701":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:12530:14432":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"18:613:42617":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:14066:10986":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:12929:10778":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:11394:13885":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:10018:29157":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:10044:29177":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:7306:42603":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:15769:11464":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:13538:10881":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"5:5449:9131":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:40727:9037":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:12808:10771":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:14449:11067":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:15624:11422":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:15400:11346":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:10646:33780":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:2939:8885":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:5314:12691":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:22233:16739":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:8328:13288":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:14977:11247":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:3026:41303":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"11:2231:12151":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:8447:13834":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"0:2331:3400":{"crate_id":0,"path":["chrono","format","Numeric","Ordinal"],"kind":"variant"},"5:3244:12148":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:11303:14551":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:45420:13708":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:41615:9533":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:10875:33767":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:10671:42607":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:8341:13292":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"21:264:10324":{"crate_id":21,"path":["num_traits","identities","ConstZero"],"kind":"trait"},"1:12089:861":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"0:2373:3429":{"crate_id":0,"path":["chrono","format","Fixed","ShortMonthName"],"kind":"variant"},"0:2285:191":{"crate_id":0,"path":["chrono","format","Pad","None"],"kind":"variant"},"1:7131:33794":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:9100:14621":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"21:500:10347":{"crate_id":21,"path":["num_traits","ops","wrapping","WrappingNeg"],"kind":"trait"},"2:40084:13335":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:13922:10967":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:4330:10182":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:2493:7648":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:6811:13062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:6456:29112":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:40702:9032":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:7006:14481":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:39099:8860":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:5781:11632":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:44334:13687":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:22693:9109":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:45353:13700":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:5164:14585":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:43191:13354":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"21:600:10312":{"crate_id":21,"path":["num_traits","NumAssignRef"],"kind":"trait"},"17:13424:10855":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:9121:33912":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"0:2409:3476":{"crate_id":0,"path":["chrono","format","Fixed","RFC3339"],"kind":"variant"},"2:43655:8971":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:2812:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:44164:8878":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:893:9011":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:8253:13272":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:578:12307":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:5102:39568":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:5415:12731":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"11:2140:10092":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:4561:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:41829:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:6597:12984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:45729:13733":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:45906:13756":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:11089:14372":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:7695:11942":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"21:463:33378":{"crate_id":21,"path":["num_traits","ops","overflowing","OverflowingSub"],"kind":"trait"},"16:6872:11850":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13814:10950":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:7330:13126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:12068:1672":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"11:2554:42585":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:6962:11638":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:9348:8944":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:46018:13760":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:2435:9142":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:40010:13597":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:6435:12896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:6609:12989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:2809:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:2803:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:13437:10856":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:6409:12881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:1585:12372":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:12289:14278":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:8097:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:8259:5942":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"21:566:10356":{"crate_id":21,"path":["num_traits","sign","Unsigned"],"kind":"trait"},"17:14723:11093":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:5653:12840":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:44326:14090":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:23286:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:8287:9057":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:42104:14547":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:33229:8841":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"11:1087:42586":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:5423:12736":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:3529:40893":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:1490:12317":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:945:10089":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:15434:11353":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"18:0:8715":{"crate_id":18,"path":["memchr"],"kind":"module"},"15:306:15796":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:45502:13713":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:42469:39740":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:3581:8872":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"11:774:10081":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"11:2443:9011":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:6447:12900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:113:15788":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:4959:12560":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:16151:11558":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:21424:40144":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:12863:10774":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"21:252:33372":{"crate_id":21,"path":["num_traits","float","TotalOrder"],"kind":"trait"},"5:3791:7928":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:70:809":{"crate_id":2,"path":["core","i64"],"kind":"module"},"1:11347:13881":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:22102:9161":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:11063:14371":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:4500:40957":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:13753:10938":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:4110:16561":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13046:10785":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:31960:7606":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:43349:8955":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:3475:11653":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:1639:12413":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:6746:13039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:14752:11113":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:15418:11350":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:39958:8972":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12464:29300":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:2528:11610":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:3439:9033":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:44383:10186":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:9254:35111":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:11330:33777":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:12508:10751":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:5329:12695":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:8913:13850":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:16269:10854":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:4573:16583":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:10200:8898":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:11497:14387":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:507:10473":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:8301:12014":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:557:9526":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:597:10616":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:1534:10083":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:15:2211":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:11537:14390":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:6152:33787":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"21:495:10350":{"crate_id":21,"path":["num_traits","ops","wrapping","WrappingSub"],"kind":"trait"},"1:939:10088":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11688:10668":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:2654:9191":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:1803:7598":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"6:4800:12468":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:5653:16611":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:10709:13872":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"0:2461:3492":{"crate_id":0,"path":["chrono","format","OffsetFormat"],"kind":"struct"},"2:12573:8976":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:45648:13728":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5250:12659":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:10068:29160":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:10720:9155":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"18:726:10508":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:12084:1656":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:46429:13803":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:40:9008":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:11915:29275":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:8351:13294":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"0:2399:3464":{"crate_id":0,"path":["chrono","format","Fixed","TimezoneOffsetTripleColon"],"kind":"variant"},"1:7686:33785":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:8216:12007":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:2806:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:6698:13025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:15102:11272":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:5582:14590":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:42209:8898":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:42216:8900":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:22824:7645":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12399:10738":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:22309:16743":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"0:2323:3393":{"crate_id":0,"path":["chrono","format","Numeric","WeekFromMon"],"kind":"variant"},"2:40708:9033":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"11:430:15804":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:9858:29172":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"0:2488:3516":{"crate_id":0,"path":["chrono","format","OffsetPrecision","OptionalSeconds"],"kind":"variant"},"14:7:14266":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:3058:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:41663:9222":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:4988:16607":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:2263:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:11493:14386":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:1686:12440":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:1945:1205":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:9060:9523":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:6228:13358":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:5700:11631":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:13146:10797":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:41408:13630":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:15655:11430":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"18:680:10496":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:43637:8959":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:2175:29233":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"13:226:12139":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:10915:42608":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:8271:13275":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:16176:11566":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:15582:11409":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:4743:11671":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:41563:9272":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:7648:14500":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"0:2566:2160":{"crate_id":0,"path":["chrono","format","ParseError"],"kind":"struct"},"17:14177:11016":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"9:330:12198":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"11:787:10082":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:14489:11070":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:9982:13627":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:43322:8954":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:5061:9169":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:8926:13851":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:4641:11669":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:3131:8857":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:11649:13891":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:6385:11768":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:39453:9640":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:7424:3827":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:15023:11255":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:10881:33791":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:1169:15227":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:10459:9199":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:43779:13669":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:3810:11656":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:6066:11729":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:5283:12679":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:41529:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:10987:13850":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:1072:10094":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:8029:13269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13986:10975":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"11:832:10083":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"0:2527:3527":{"crate_id":0,"path":["chrono","format","Item","Literal"],"kind":"variant"},"17:11524:14389":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:3353:9198":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:5914:11710":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:11812:14406":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:45598:13726":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:10818:14365":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:10409:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:11567:14392":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1:909:10083":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"11:2383:9222":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"16:2636:11615":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:10974:13849":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:40686:9028":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:2748:11620":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:2854:11625":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:43238:9046":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:13397:40623":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:1821:9169":{"crate_id":2,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"16:6574:11647":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:45274:13693":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:7481:9013":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:7314:13114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:3193:8847":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:10265:15239":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:12707:14439":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10828:42606":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:5483:12773":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:40334:9070":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:6047:14445":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"0:2403:3471":{"crate_id":0,"path":["chrono","format","Fixed","TimezoneOffset"],"kind":"variant"},"0:2490:3518":{"crate_id":0,"path":["chrono","format","OffsetPrecision","OptionalMinutesAndSeconds"],"kind":"variant"},"1:12034:7605":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:10864:33797":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:6505:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:1040:10091":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:2038:13331":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:4249:16580":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:21502:16659":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:11115:14374":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:7888:11958":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:8006:7612":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:1494:9013":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:1547:12348":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"21:373:10331":{"crate_id":21,"path":["num_traits","ops","checked","CheckedMul"],"kind":"trait"},"17:11755:10676":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:6880:13077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:7364:9006":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:45441:13709":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"5:3871:9009":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:10204:8900":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:32027:9236":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"14:220:12092":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:1517:12328":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:8294:13281":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:11630:13890":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"21:592:10310":{"crate_id":21,"path":["num_traits","NumAssignOps"],"kind":"trait"},"2:40219:13603":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"0:2482:3510":{"crate_id":0,"path":["chrono","format","OffsetPrecision","Minutes"],"kind":"variant"},"2:10193:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:4048:16557":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:40693:9030":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:40150:9057":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:0:537":{"crate_id":2,"path":["core"],"kind":"module"},"0:2510:3524":{"crate_id":0,"path":["chrono","format","Colons","Maybe"],"kind":"variant"},"6:8317:13287":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:15596:11415":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:42751:13650":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:41480:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"11:396:15225":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"21:100:33367":{"crate_id":21,"path":["num_traits","bounds","LowerBounded"],"kind":"trait"},"16:7085:11875":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:5546:12793":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:6519:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:7530:9056":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:22454:16734":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"6:5236:12653":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:10749:9157":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"0:2360:3420":{"crate_id":0,"path":["chrono","format","InternalNumeric"],"kind":"struct"},"6:5472:12770":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:3669:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"11:1891:9011":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:11196:8961":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:13646:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:6738:13038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"5:4073:9011":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:11405:14385":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:16187:11567":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:12077:698":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:46387:13801":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:39130:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:3544:8871":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:12150:10718":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:5528:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:5477:14587":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:9000:16627":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:4897:12531":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:43467:8966":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:16050:10832":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:6821:13065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"14:187:28191":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"18:573:10473":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:14868:11206":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:10155:10619":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:43339:8956":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"14:40:10820":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:11553:14579":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:8310:8963":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"18:96:15785":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:3063:8916":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:40493:9073":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:14847:11196":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:43957:13681":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:8421:14611":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:5219:12644":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13797:10947":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:2690:9183":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:735:33358":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11764:10677":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:9755:29153":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:13375:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:7856:10161":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:1975:713":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:43112:14560":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"5:7100:40979":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:10534:42609":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:35820:8849":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:8118:11999":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:44099:8942":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"21:545:10355":{"crate_id":21,"path":["num_traits","sign","Signed"],"kind":"trait"},"17:16165:11561":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:8001:9103":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:12717:3263":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"11:2562:12157":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"16:5107:11683":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:45583:13725":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13272:10832":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:7570:11642":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"9:447:28099":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"0:2391:3450":{"crate_id":0,"path":["chrono","format","Fixed","Nanosecond9"],"kind":"variant"},"6:5557:12799":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:13899:10962":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12768:29158":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:7546:13228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4891:12528":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:7366:13142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:698:10500":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:4268:9169":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:8248:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:8288:13280":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:5376:12710":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:5846:11700":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"21:4493:9109":{"crate_id":21,"path":["num_traits","ParseFloatError"],"kind":"struct"},"17:14147:10997":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:6670:13014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:1354:10094":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:6069:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:3912:9013":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:2684:11617":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:6317:14470":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"0:2341:3412":{"crate_id":0,"path":["chrono","format","Numeric","Nanosecond"],"kind":"variant"},"1:12088:1652":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:9215:7647":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:6781:9052":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:9232:9542":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"15:0:8712":{"crate_id":15,"path":["addr2line"],"kind":"module"},"21:164:8458":{"crate_id":21,"path":["num_traits","cast","FromPrimitive"],"kind":"trait"},"17:13235:10820":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:3329:11652":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"14:165:28184":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:5835:14594":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:10106:14624":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:4211:15813":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:5707:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:41946:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:4120:16562":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:22777:39212":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:3014:28249":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:41790:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:43163:13352":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:5863:29108":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:15313:11320":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:4771:11672":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"0:2339:3408":{"crate_id":0,"path":["chrono","format","Numeric","Second"],"kind":"variant"},"16:6412:29111":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"0:2589:3562":{"crate_id":0,"path":["chrono","format","ParseErrorKind","Invalid"],"kind":"variant"},"2:45406:13707":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:13877:10961":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13959:10971":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:8934:9222":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:39942:8974":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:40679:13610":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"18:689:10499":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12371:10778":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:2394:11604":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:4782:16609":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:13766:10940":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"18:706:8947":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:46642:13816":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"21:138:10321":{"crate_id":21,"path":["num_traits","cast","ToPrimitive"],"kind":"trait"},"6:4932:12548":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:14111:10991":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"0:2582:3548":{"crate_id":0,"path":["chrono","format","ParseErrorKind"],"kind":"enum"},"17:11743:10674":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:41688:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:11242:14378":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:31939:5942":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:12900:10777":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:6342:42600":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"0:2325:2164":{"crate_id":0,"path":["chrono","format","Numeric","IsoWeek"],"kind":"variant"},"16:6335:14478":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:479:12248":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:46580:13814":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:7061:11874":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:6991:42593":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:12300:29299":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:9169:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:1809:664":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:12535:8981":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:4634:9089":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12328:10726":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"0:2321:3391":{"crate_id":0,"path":["chrono","format","Numeric","WeekFromSun"],"kind":"variant"},"17:14025:10979":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:9737:29155":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:43273:14564":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:39280:13460":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:11084:8976":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:2224:10183":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:5907:14596":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:4070:16559":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:8297:9071":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:12572:10653":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:15301:11319":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:7646:13325":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:8234:9027":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"21:479:10344":{"crate_id":21,"path":["num_traits","ops","saturating","SaturatingSub"],"kind":"trait"},"16:7604:11644":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:43201:14562":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"21:380:10332":{"crate_id":21,"path":["num_traits","ops","checked","CheckedNeg"],"kind":"trait"},"17:10185:10621":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:4903:16570":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:14038:10981":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:12683:14437":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:12783:8945":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:1325:10093":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:43212:13655":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:859:9013":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:8267:9160":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:11353:14637":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:41671:9782":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"0:2480:3507":{"crate_id":0,"path":["chrono","format","OffsetPrecision","Hours"],"kind":"variant"},"1:11490:15240":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:12949:10725":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:15734:11451":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:12831:21802":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:42729:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:10317:10625":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:7598:13322":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11214:14376":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:6379:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:15092:11271":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:3270:9199":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:22639:13365":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"4:0:8705":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:7610:13324":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"21:505:10349":{"crate_id":21,"path":["num_traits","ops","wrapping","WrappingShr"],"kind":"trait"},"16:6278:14452":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:6874:13076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:637:14568":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:10769:42610":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:33425:8844":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:33944:8848":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:3567:39179":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:860:14442":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:8099:14602":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:41985:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:4560:11666":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:30266:9003":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:725:9161":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"11:1883:9222":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:4885:12526":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:12991:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:42523:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:7473:11733":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"9:357:28114":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:15822:11473":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:867:14345":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"5:7393:9011":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:7741:11646":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:8259:13273":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:10198:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:2730:9193":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:6053:13822":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:2781:9161":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:37696:8850":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"0:2591:3564":{"crate_id":0,"path":["chrono","format","ParseErrorKind","TooShort"],"kind":"variant"},"11:687:9782":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:3304:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:42704:9105":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:4876:12521":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10419:10628":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:15078:11267":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:11853:33769":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:31969:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:3634:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:3249:41295":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:12043:14414":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:2037:14351":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:1692:12441":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:2437:9143":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:46300:13798":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:13344:10844":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:5513:14589":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:880:10082":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:37861:8853":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:12519:8979":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:44285:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:21980:13362":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"0:106:1185":{"crate_id":0,"path":["chrono","prelude"],"kind":"module"},"2:12298:1552":{"crate_id":2,"path":["core","str"],"kind":"module"},"17:14855:11199":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:4719:13155":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:6976:11859":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:2668:33780":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:2782:21838":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:3298:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"0:2525:174":{"crate_id":0,"path":["chrono","format","Item"],"kind":"enum"},"1:12092:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:10767:37851":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:22449:16736":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"6:5191:12631":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13497:10869":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:43627:8960":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:6650:13009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"18:608:14339":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:12072:1520":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:6927:11855":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:11380:13884":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:41623:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10137:29154":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:14325:11041":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:10839:9161":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12056:10712":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"0:2583:2209":{"crate_id":0,"path":["chrono","format","ParseErrorKind","OutOfRange"],"kind":"variant"},"2:12496:8982":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:12082:809":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:40233:9063":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:46527:13811":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:5174:12622":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:22189:16738":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:39267:13459":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:8545:7929":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"0:972:2162":{"crate_id":0,"path":["chrono","naive"],"kind":"module"},"11:2423:9013":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"21:481:10343":{"crate_id":21,"path":["num_traits","ops","saturating","SaturatingMul"],"kind":"trait"},"1:2030:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:6532:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:5181:12624":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:31935:3419":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:41907:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:15957:11494":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"6:5617:12827":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:39055:8870":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"9:238:7929":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:1699:12444":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:7423:41296":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:12342:10731":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:11041:8963":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:39882:13586":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4924:12546":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:33111:2338":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:11510:14388":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:6439:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:4952:12557":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:41220:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:5031:12597":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:6787:13346":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:31953:8911":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"5:7731:9010":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:9807:29161":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"0:2508:3522":{"crate_id":0,"path":["chrono","format","Colons","Colon"],"kind":"variant"},"1:5497:14588":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:40735:9039":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:4856:11675":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"11:742:10085":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:1062:40943":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:5210:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:4992:12576":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:14560:11081":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:7583:39204":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"21:344:33376":{"crate_id":21,"path":["num_traits","ops","bytes","NumBytes"],"kind":"trait"},"11:1066:28177":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:15197:11294":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"11:123:12141":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:15222:11299":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:3917:14580":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:14341:11043":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:5665:12847":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:3312:9201":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:5960:11717":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"14:0:8711":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:9054:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:11661:10666":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:5401:40943":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:1478:9782":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:40066:16534":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:6900:13091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:2525:13305":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:3750:16554":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"11:1007:10091":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:9479:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:3614:11654":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:8568:9219":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:1189:15811":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:15356:11335":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:43764:13663":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:4124:16563":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:4:1130":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:31897:12156":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"21:97:10317":{"crate_id":21,"path":["num_traits","bounds","Bounded"],"kind":"trait"},"11:856:10088":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"0:2385:3412":{"crate_id":0,"path":["chrono","format","Fixed","Nanosecond"],"kind":"variant"},"11:2498:28173":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"6:7412:13161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:12039:16517":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:6471:12909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:22718:13372":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:40039:39204":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8104:14603":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:2768:11621":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:7056:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:7554:9532":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:1602:12149":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:6565:9011":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12478:10747":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"11:1107:14508":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10877:14366":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:22762:39219":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"21:461:33377":{"crate_id":21,"path":["num_traits","ops","overflowing","OverflowingAdd"],"kind":"trait"},"1:7646:14289":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:13701:9005":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"6:6689:13019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:5146:12620":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:7381:13316":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:6276:14597":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:21669:9161":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:10212:8903":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:13375:10848":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"11:1887:9013":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:37806:8852":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:1153:15810":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:7461:13173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11574:12151":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"0:2543:2842":{"crate_id":0,"path":["chrono","format","Item","Fixed"],"kind":"variant"},"0:2533:3360":{"crate_id":0,"path":["chrono","format","Item","Space"],"kind":"variant"},"5:1566:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:7816:9027":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:45259:13692":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"0:2389:3448":{"crate_id":0,"path":["chrono","format","Fixed","Nanosecond6"],"kind":"variant"},"2:40028:13598":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:5995:11719":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:10887:42604":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:7453:13318":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:7529:9055":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:11275:8966":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"21:375:10330":{"crate_id":21,"path":["num_traits","ops","checked","CheckedDiv"],"kind":"trait"},"2:41606:9791":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:43988:8949":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:3051:9092":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"12:0:8710":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:41538:9222":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:2458:11607":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:7339:13132":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:7584:13247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:46475:13807":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:10284:10624":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:3396:9187":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:12091:1264":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:30460:39195":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:7590:11643":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:13674:10905":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:40304:9068":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"0:866:3347":{"crate_id":0,"path":["chrono","format","strftime"],"kind":"module"},"1:9491:15238":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"17:11621:10662":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:15760:11460":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:7445:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"0:2304:3372":{"crate_id":0,"path":["chrono","format","Numeric"],"kind":"enum"},"17:13387:10849":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"0:2506:191":{"crate_id":0,"path":["chrono","format","Colons","None"],"kind":"variant"},"16:4424:11662":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"21:493:10345":{"crate_id":21,"path":["num_traits","ops","wrapping","WrappingAdd"],"kind":"trait"},"1:5650:13063":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:6413:16746":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:7509:14492":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:481:33789":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:10661:14363":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:8557:5270":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:465:12240":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"0:3084:4072":{"crate_id":0,"path":["chrono","offset","LocalResult","Ambiguous"],"kind":"variant"},"17:14386:11050":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"18:80:15784":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:16079:11539":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:503:9519":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:7821:16515":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:12083:805":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"18:491:10472":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:12772:8947":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"11:1051:10093":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:14298:11037":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11647:10665":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:15410:11349":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:14575:10742":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:3234:37523":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:6494:11781":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"21:570:10306":{"crate_id":21,"path":["num_traits","Num"],"kind":"trait"},"2:41554:9013":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:3025:9777":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"9:502:12221":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:4651:16600":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:15368:11338":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:2615:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:15814:11470":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:7686:14501":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:6862:2838":{"crate_id":1,"path":["std","time","UNIX_EPOCH"],"kind":"constant"},"2:12273:21937":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:8060:2499":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:5390:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:6756:13046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:4132:16565":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:10358:793":{"crate_id":2,"path":["core","hash"],"kind":"module"},"17:13946:10968":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:10357:14612":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:46466:13806":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:8396:14607":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"}},"external_crates":{"20":{"name":"iana_time_zone","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"num_traits","html_root_url":"https://docs.rs/num-traits/0.2/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}