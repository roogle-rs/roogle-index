{"root":"0:0:2442","crate_version":"0.4.37","includes_private":false,"index":{"0:2596:788":{"id":"0:2596:788","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[398,9],"end":[398,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1998:2370":{"id":"0:1998:2370","crate_id":0,"name":"DurationRound","span":{"filename":"src/round.rs","begin":[106,0],"end":[156,1]},"visibility":"public","docs":"Extension trait for rounding or truncating a DateTime by a TimeDelta.\n\n# Limitations\nBoth rounding and truncating are done via [`TimeDelta::num_nanoseconds`] and\n[`DateTime::timestamp_nanos_opt`]. This means that they will fail if either the\n`TimeDelta` or the `DateTime` are too big to represented as nanoseconds. They\nwill also fail if the `TimeDelta` is bigger than the timestamp.","links":{"`TimeDelta::num_nanoseconds`":"0:56:2701","`DateTime::timestamp_nanos_opt`":"0:347:3172"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:1999:135","0:2000:8614","0:2001:8619"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:2007","0:2002"]}}},"b:2:2908-0:2706:2365":{"id":"b:2:2908-0:2706:2365","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5865:1763":{"id":"5:5865:1763","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2307:3693":{"id":"0:2307:3693","crate_id":0,"name":"IsoYear","span":{"filename":"src/format/mod.rs","begin":[113,4],"end":[113,11]},"visibility":"default","docs":"Year in the ISO week date (FW=4, PW=∞).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:3737-0:2145:2331":{"id":"b:2:3737-0:2145:2331","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32106:236-0:2280:3666":{"id":"a:2:32106:236-0:2280:3666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1945:4121":{"id":"0:1945:4121","crate_id":0,"name":"ymd","span":{"filename":"src/offset/mod.rs","begin":[315,4],"end":[317,5]},"visibility":"default","docs":"Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n\nThe time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),\nbut it will propagate to the `DateTime` values constructed via this date.\n\nPanics on the out-of-range date, invalid month and/or day.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `with_ymd_and_hms()` instead\")]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.23","note":"use `with_ymd_and_hms()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}],["month",{"primitive":"u32"}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1218:3340":{"id":"0:1218:3340","crate_id":0,"name":"from_timestamp_nanos","span":{"filename":"src/naive/datetime/mod.rs","begin":[173,4],"end":[177,5]},"visibility":"public","docs":"Creates a new [NaiveDateTime] from nanoseconds since the UNIX epoch.\n\nThe UNIX epoch starts on midnight, January 1, 1970, UTC.\n\n# Errors\n\nReturns `None` if the number of nanoseconds would be out of range for a `NaiveDateTime`\n(more than ca. 262,000 years away from common era)","links":{"NaiveDateTime":"0:2663:2349"},"attrs":["#[deprecated(since = \"0.4.35\", note =\n\"use `DateTime::from_timestamp_nanos` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.35","note":"use `DateTime::from_timestamp_nanos` instead"},"inner":{"function":{"decl":{"inputs":[["nanos",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1237:3540":{"id":"0:1237:3540","crate_id":0,"name":"checked_sub_offset","span":{"filename":"src/naive/datetime/mod.rs","begin":[595,4],"end":[603,5]},"visibility":"public","docs":"Subtracts given `FixedOffset` from the current datetime.\nReturns `None` if the result would be outside the valid range for [`NaiveDateTime`].\n\nThis method is similar to [`checked_sub_signed`](#method.checked_sub_signed), but preserves\nleap seconds.","links":{"`NaiveDateTime`":"0:2663:2349"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:9507-0:2706:2365":{"id":"a:2:32165:9507-0:2706:2365","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:211:3033":{"id":"0:211:3033","crate_id":0,"name":"ordinal","span":{"filename":"src/date.rs","begin":[414,4],"end":[416,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2139:470":{"id":"0:2139:470","crate_id":0,"name":"cmp","span":{"filename":"src/time_delta.rs","begin":[52,58],"end":[52,61]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3120:4564":{"id":"0:3120:4564","crate_id":0,"name":"Thu","span":{"filename":"src/weekday.rs","begin":[50,4],"end":[50,11]},"visibility":"default","docs":"Thursday.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"3","value":"3"}}}},"0:3242":{"id":"0:3242","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[671,22],"end":[671,26]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3243:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41969:9654-0:2475:3806":{"id":"a:2:41969:9654-0:2475:3806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32106:236-0:2247:2887":{"id":"a:2:32106:236-0:2247:2887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2628-0:3062:2367":{"id":"b:2:2628-0:3062:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2000:8614":{"id":"0:2000:8614","crate_id":0,"name":"duration_round","span":{"filename":"src/round.rs","begin":[134,4],"end":[134,76]},"visibility":"default","docs":"Return a copy rounded by TimeDelta.\n\n# Example\n``` rust\n# use chrono::{DurationRound, TimeDelta, NaiveDate};\nlet dt = NaiveDate::from_ymd_opt(2018, 1, 11)\n    .unwrap()\n    .and_hms_milli_opt(12, 0, 0, 154)\n    .unwrap()\n    .and_utc();\nassert_eq!(\n    dt.duration_round(TimeDelta::try_milliseconds(10).unwrap()).unwrap().to_string(),\n    \"2018-01-11 12:00:00.150 UTC\"\n);\nassert_eq!(\n    dt.duration_round(TimeDelta::try_days(1).unwrap()).unwrap().to_string(),\n    \"2018-01-12 00:00:00 UTC\"\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["duration",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:1998:2370","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:3218":{"id":"0:3218","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,33],"end":[227,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3219:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5863-0:2123:2332":{"id":"b:5:5863-0:2123:2332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5861:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5865:1763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:242":{"id":"0:242","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[484,0],"end":[488,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2711:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:244:470"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1597:7744":{"id":"0:1597:7744","crate_id":0,"name":"offset_from_local_date","span":{"filename":"src/offset/fixed.rs","begin":[134,4],"end":[136,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:736-0:2165:2340":{"id":"b:5:736-0:2165:2340","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2776":{"id":"0:2776","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[22,30],"end":[22,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1948:7692":{"id":"0:1948:7692","crate_id":0,"name":"yo_opt","span":{"filename":"src/offset/mod.rs","begin":[363,4],"end":[368,5]},"visibility":"default","docs":"Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n\nThe time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),\nbut it will propagate to the `DateTime` values constructed via this date.\n\nReturns `None` on the out-of-range date and/or invalid DOY.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"use `from_local_datetime()` with a `NaiveDateTime` instead\")]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.23","note":"use `from_local_datetime()` with a `NaiveDateTime` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:3093:2371":{"id":"b:2:2625-0:3093:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2032:3963":{"id":"0:2032:3963","crate_id":0,"name":"num_days_from_sunday","span":{"filename":"src/weekday.rs","begin":[148,4],"end":[150,5]},"visibility":"public","docs":"Returns a day-of-week number starting from Sunday = 0.\n\n`w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`\n--------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----\n`w.num_days_from_sunday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 0","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:9507-0:2644:5704":{"id":"a:2:32165:9507-0:2644:5704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2620":{"id":"0:2620","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[94,42],"end":[94,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2711:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2621:470"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2625-0:2644:5704":{"id":"b:2:2625-0:2644:5704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1916:2368":{"id":"0:1916:2368","crate_id":0,"name":"MappedLocalTime","span":{"filename":"src/offset/mod.rs","begin":[57,0],"end":[57,45]},"visibility":"public","docs":"The result of mapping a local time to a concrete instant in a given time zone.\n\nThe calculation to go from a local time (wall clock time) to an instant in UTC can end up in\nthree cases:\n* A single, simple result.\n* An ambiguous result when the clock is turned backwards during a transition due to for example\n  DST.\n* No result when the clock is turned forwards during a transition due to for example DST.\n\nWhen the clock is turned backwards it creates a _fold_ in local time, during which the local\ntime is _ambiguous_. When the clock is turned forwards it creates a _gap_ in local time, during\nwhich the local time is _missing_, or does not exist.\n\nChrono does not return a default choice or invalid data during time zone transitions, but has\nthe `MappedLocalTime` type to help deal with the result correctly.\n\nThe type of `T` is usually a [`DateTime`] but may also be only an offset.","links":{"`DateTime`":"0:2165:2340"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"0:3142":{"id":"0:3142","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[32,44],"end":[32,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3143:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32106:236-0:3062:2367":{"id":"a:2:32106:236-0:3062:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2902-0:2145:2331":{"id":"b:2:2902-0:2145:2331","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:402:818":{"id":"0:402:818","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[949,4],"end":[951,5]},"visibility":"default","docs":"Convert this `DateTime<Local>` instance into a `DateTime<FixedOffset>` instance.\n\nConversion is performed via [`DateTime::with_timezone`].","links":{"`DateTime::with_timezone`":"0:353:2987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2654":{"id":"0:2654","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2164,35],"end":[2164,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2710:686":{"id":"0:2710:686","crate_id":0,"name":"eq","span":{"filename":"src/naive/isoweek.rs","begin":[19,9],"end":[19,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3138":{"id":"0:3138","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[32,30],"end":[32,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3139:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2103:3477":{"id":"0:2103:3477","crate_id":0,"name":"second","span":{"filename":"src/traits.rs","begin":[287,4],"end":[287,28]},"visibility":"default","docs":"Returns the second number from 0 to 59.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1085:2374":{"id":"0:1085:2374","crate_id":0,"name":"month","span":{"filename":"src/naive/date/mod.rs","begin":[1471,4],"end":[1473,5]},"visibility":"default","docs":"Returns the month number starting from 1.\n\nThe return value ranges from 1 to 12.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().month(), 9);\nassert_eq!(NaiveDate::from_ymd_opt(-308, 3, 14).unwrap().month(), 3);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:9507-0:3093:2371":{"id":"a:2:32165:9507-0:3093:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2095:3040":{"id":"0:2095:3040","crate_id":0,"name":"with_day0","span":{"filename":"src/traits.rs","begin":[206,4],"end":[206,51]},"visibility":"default","docs":"Makes a new value with the day of month (starting from 0) changed.\n\n# Errors\n\nReturns `None` when:\n\n- The resulting date does not exist (for example `day0(30)` in April).\n- In case of [`DateTime<Tz>`] if the resulting date and time fall within a timezone\n  transition such as from DST to standard time.\n- The value for `day0` is out of range.\n\n[`DateTime<Tz>`]: crate::DateTime","links":{"crate::DateTime":"0:2165:2340"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[72,0],"end":[319,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:159:2921","0:160:2925","0:161:2934","0:162:2938","0:164:2946","0:165:2948","0:167:2955","0:168:2957","0:170:2964","0:171:2966","0:173:2972","0:174:2973","0:176:2979","0:177:2980","0:179:1215","0:180:2928","0:181:2987","0:183:2993","0:184:2995","0:185:3000","0:187:3002","0:188:2927","0:189:3008","0:190:2915","0:191:2918"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:44:2660":{"id":"0:44:2660","crate_id":0,"name":"milliseconds","span":{"filename":"src/time_delta.rs","begin":[230,4],"end":[232,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of milliseconds.\n\n# Panics\n\nPanics when the `TimeDelta` would be out of bounds, i.e. when `milliseconds` is more than\n`i64::MAX` or less than `-i64::MAX`. Notably, this is not the same as `i64::MIN`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["milliseconds",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2697":{"id":"0:55:2697","crate_id":0,"name":"num_microseconds","span":{"filename":"src/time_delta.rs","begin":[333,4],"end":[337,5]},"visibility":"public","docs":"Returns the total number of whole microseconds in the `TimeDelta`,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2152":{"id":"0:2152","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[575,23],"end":[575,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:352:2928":{"id":"0:352:2928","crate_id":0,"name":"timezone","span":{"filename":"src/datetime/mod.rs","begin":[406,4],"end":[408,5]},"visibility":"public","docs":"Retrieves an associated time zone.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Tz"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2913-0:2145:2331":{"id":"b:2:2913-0:2145:2331","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2420:858":{"id":"0:2420:858","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[174,38],"end":[174,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2463:788":{"id":"0:2463:788","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[283,9],"end":[283,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1131":{"id":"0:1131","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2150,0],"end":[2150,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:8283:6366","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2639:1280":{"id":"0:2639:1280","crate_id":0,"name":"partial_cmp","span":{"filename":"src/naive/date/mod.rs","begin":[2128,46],"end":[2128,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1957:7741":{"id":"0:1957:7741","crate_id":0,"name":"datetime_from_str","span":{"filename":"src/offset/mod.rs","begin":[539,4],"end":[543,5]},"visibility":"default","docs":"Parses a string with the specified format string and returns a\n`DateTime` with the current offset.\n\nSee the [`crate::format::strftime`] module on the\nsupported escape sequences.\n\nIf the to-be-parsed string includes an offset, it *must* match the\noffset of the TimeZone, otherwise an error will be returned.\n\nSee also [`DateTime::parse_from_str`] which gives a [`DateTime`] with\nparsed [`FixedOffset`].\n\nSee also [`NaiveDateTime::parse_from_str`] which gives a [`NaiveDateTime`] without\nan offset, but can be converted to a [`DateTime`] with [`NaiveDateTime::and_utc`] or\n[`NaiveDateTime::and_local_timezone`].","links":{"`NaiveDateTime`":"0:2663:2349","`NaiveDateTime::and_local_timezone`":"0:1251:3219","`FixedOffset`":"0:2766:2346","`NaiveDateTime::parse_from_str`":"0:1220:3421","`NaiveDateTime::and_utc`":"0:1253:3308","`crate::format::strftime`":"0:864:3658","`DateTime::parse_from_str`":"0:412:3421","`DateTime`":"0:2165:2340"},"attrs":["#[deprecated(since = \"0.4.29\", note =\n\"use `DateTime::parse_from_str` or `NaiveDateTime::parse_from_str` with `and_utc()` or `and_local_timezone()` instead\")]"],"deprecation":{"since":"0.4.29","note":"use `DateTime::parse_from_str` or `NaiveDateTime::parse_from_str` with `and_utc()` or `and_local_timezone()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:951:2758":{"id":"0:951:2758","crate_id":0,"name":"description","span":{"filename":"src/format/mod.rs","begin":[454,4],"end":[456,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1220:3421":{"id":"0:1220:3421","crate_id":0,"name":"parse_from_str","span":{"filename":"src/naive/datetime/mod.rs","begin":[287,4],"end":[291,5]},"visibility":"public","docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](crate::format::strftime)\n on the supported escape sequences.\n\n # Example\n\n ```\n use chrono::{NaiveDate, NaiveDateTime};\n\n let parse_from_str = NaiveDateTime::parse_from_str;\n\n assert_eq!(\n     parse_from_str(\"2015-09-05 23:56:04\", \"%Y-%m-%d %H:%M:%S\"),\n     Ok(NaiveDate::from_ymd_opt(2015, 9, 5).unwrap().and_hms_opt(23, 56, 4).unwrap())\n );\n assert_eq!(\n     parse_from_str(\"5sep2015pm012345.6789\", \"%d%b%Y%p%I%M%S%.f\"),\n     Ok(NaiveDate::from_ymd_opt(2015, 9, 5)\n         .unwrap()\n         .and_hms_micro_opt(13, 23, 45, 678_900)\n         .unwrap())\n );\n ```\n\n Offset is ignored for the purpose of parsing.\n\n ```\n # use chrono::{NaiveDateTime, NaiveDate};\n # let parse_from_str = NaiveDateTime::parse_from_str;\n assert_eq!(\n     parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),\n     Ok(NaiveDate::from_ymd_opt(2014, 5, 17).unwrap().and_hms_opt(12, 34, 56).unwrap())\n );\n ```\n\n [Leap seconds](./struct.NaiveTime.html#leap-second-handling) are correctly handled by\n treating any time of the form `hh:mm:60` as a leap second.\n (This equally applies to the formatting, so the round trip is possible.)\n\n ```\n # use chrono::{NaiveDateTime, NaiveDate};\n # let parse_from_str = NaiveDateTime::parse_from_str;\n assert_eq!(\n     parse_from_str(\"2015-07-01 08:59:60.123\", \"%Y-%m-%d %H:%M:%S%.f\"),\n     Ok(NaiveDate::from_ymd_opt(2015, 7, 1)\n         .unwrap()\n         .and_hms_milli_opt(8, 59, 59, 1_123)\n         .unwrap())\n );\n ```\n\n Missing seconds are assumed to be zero,\n but out-of-bound times or insufficient fields are errors otherwise.\n\n ```\n # use chrono::{NaiveDateTime, NaiveDate};\n # let parse_from_str = NaiveDateTime::parse_from_str;\n assert_eq!(\n     parse_from_str(\"94/9/4 7:15\", \"%y/%m/%d %H:%M\"),\n     Ok(NaiveDate::from_ymd_opt(1994, 9, 4).unwrap().and_hms_opt(7, 15, 0).unwrap())\n );\n\n assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());\n assert!(parse_from_str(\"94/9/4 12\", \"%y/%m/%d %H\").is_err());\n assert!(parse_from_str(\"94/9/4 17:60\", \"%y/%m/%d %H:%M\").is_err());\n assert!(parse_from_str(\"94/9/4 24:00:00\", \"%y/%m/%d %H:%M:%S\").is_err());\n ```\n\n All parsed fields should be consistent to each other, otherwise it's an error.\n\n ```\n # use chrono::NaiveDateTime;\n # let parse_from_str = NaiveDateTime::parse_from_str;\n let fmt = \"%Y-%m-%d %H:%M:%S = UNIX timestamp %s\";\n assert!(parse_from_str(\"2001-09-09 01:46:39 = UNIX timestamp 999999999\", fmt).is_ok());\n assert!(parse_from_str(\"1970-01-01 00:00:00 = UNIX timestamp 1\", fmt).is_err());\n ```\n\n Years before 1 BCE or after 9999 CE, require an initial sign\n\n```\n # use chrono::NaiveDateTime;\n # let parse_from_str = NaiveDateTime::parse_from_str;\n let fmt = \"%Y-%m-%d %H:%M:%S\";\n assert!(parse_from_str(\"10000-09-09 01:46:39\", fmt).is_err());\n assert!(parse_from_str(\"+10000-09-09 01:46:39\", fmt).is_ok());\n ```","links":{"crate::format::strftime":"0:864:3658"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2706:2365":{"id":"0:2706:2365","crate_id":0,"name":"IsoWeek","span":{"filename":"src/naive/isoweek.rs","begin":[27,0],"end":[32,1]},"visibility":"public","docs":"ISO 8601 week.\n\nThis type, combined with [`Weekday`](../enum.Weekday.html),\nconstitutes the ISO 8601 [week date](./struct.NaiveDate.html#week-date).\nOne can retrieve this type from the existing [`Datelike`](../trait.Datelike.html) types\nvia the [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) method.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1405","a:2:32106:236-0:2706:2365","a:2:3121:246-0:2706:2365","a:2:3156:9919-0:2706:2365","a:2:32165:9507-0:2706:2365","a:2:41968:9655-0:2706:2365","a:2:41969:9654-0:2706:2365","b:2:2913-0:2706:2365","b:2:2898-0:2706:2365","b:2:2625-0:2706:2365","b:2:2902-0:2706:2365","b:2:2628-0:2706:2365","b:2:3737-0:2706:2365","b:2:2908-0:2706:2365","b:5:736-0:2706:2365","0:2708","0:2715","0:2720","0:2718","0:1410","0:2717","0:2711","0:2709","0:2713"]}}},"0:3248":{"id":"0:3248","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[671,39],"end":[671,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:85:637":{"id":"0:85:637","crate_id":0,"name":"div","span":{"filename":"src/time_delta.rs","begin":[503,4],"end":[517,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[578,0],"end":[582,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:98:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2625-0:3062:2367":{"id":"b:2:2625-0:3062:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:115-0:3154:2343":{"id":"0:115-0:3154:2343","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[540,30],"end":[540,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Month","name":"Month","id":"0:3154:2343","glob":false}}},"0:1907:7752":{"id":"0:1907:7752","crate_id":0,"name":"offset_from_utc_date","span":{"filename":"src/offset/utc.rs","begin":[128,4],"end":[130,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1057:2995":{"id":"0:1057:2995","crate_id":0,"name":"checked_sub_signed","span":{"filename":"src/naive/date/mod.rs","begin":[1076,4],"end":[1082,5]},"visibility":"public","docs":"Subtracts the number of whole days in the given `TimeDelta` from the current date.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\nuse chrono::{NaiveDate, TimeDelta};\n\nlet d = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap();\nassert_eq!(\n    d.checked_sub_signed(TimeDelta::try_days(40).unwrap()),\n    Some(NaiveDate::from_ymd_opt(2015, 7, 27).unwrap())\n);\nassert_eq!(\n    d.checked_sub_signed(TimeDelta::try_days(-40).unwrap()),\n    Some(NaiveDate::from_ymd_opt(2015, 10, 15).unwrap())\n);\nassert_eq!(d.checked_sub_signed(TimeDelta::try_days(1_000_000_000).unwrap()), None);\nassert_eq!(d.checked_sub_signed(TimeDelta::try_days(-1_000_000_000).unwrap()), None);\nassert_eq!(NaiveDate::MIN.checked_sub_signed(TimeDelta::try_days(1).unwrap()), None);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2526:3840":{"id":"0:2526:3840","crate_id":0,"name":"OwnedLiteral","span":{"filename":"src/format/mod.rs","begin":[334,4],"end":[334,26]},"visibility":"default","docs":"Same as `Literal` but with the string owned by the item.","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2528:1956"]},"discriminant":null}}},"0:1098:3041":{"id":"0:1098:3041","crate_id":0,"name":"with_ordinal","span":{"filename":"src/naive/date/mod.rs","begin":[1826,4],"end":[1835,5]},"visibility":"default","docs":"Makes a new `NaiveDate` with the day of year (starting from 1) changed.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (`with_ordinal(366)` in a non-leap year).\n- The value for `ordinal` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 1, 1).unwrap().with_ordinal(60),\n           Some(NaiveDate::from_ymd_opt(2015, 3, 1).unwrap()));\nassert_eq!(NaiveDate::from_ymd_opt(2015, 1, 1).unwrap().with_ordinal(366),\n           None); // 2015 had only 365 days\n\nassert_eq!(NaiveDate::from_ymd_opt(2016, 1, 1).unwrap().with_ordinal(60),\n           Some(NaiveDate::from_ymd_opt(2016, 2, 29).unwrap()));\nassert_eq!(NaiveDate::from_ymd_opt(2016, 1, 1).unwrap().with_ordinal(366),\n           Some(NaiveDate::from_ymd_opt(2016, 12, 31).unwrap()));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3098:8623":{"id":"0:3098:8623","crate_id":0,"name":"TimestampExceedsLimit","span":{"filename":"src/round.rs","begin":[282,4],"end":[282,25]},"visibility":"default","docs":"Error when `DateTime.timestamp_nanos` exceeds the limit.\n\n``` rust\n# use chrono::{DurationRound, TimeDelta, RoundingError, TimeZone, Utc};\nlet dt = Utc.with_ymd_and_hms(2300, 12, 12, 0, 0, 0).unwrap();\n\nassert_eq!(\n    dt.duration_round(TimeDelta::try_days(1).unwrap()),\n    Err(RoundingError::TimestampExceedsLimit)\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1447:2950":{"id":"0:1447:2950","crate_id":0,"name":"from_hms_milli_opt","span":{"filename":"src/naive/time/mod.rs","begin":[329,4],"end":[337,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from hour, minute, second and millisecond.\n\nThe millisecond part is allowed to exceed 1,000,000,000 in order to represent a\n[leap second](#leap-second-handling), but only when `sec == 59`.\n\n# Errors\n\nReturns `None` on invalid hour, minute, second and/or millisecond.\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nlet from_hmsm_opt = NaiveTime::from_hms_milli_opt;\n\nassert!(from_hmsm_opt(0, 0, 0, 0).is_some());\nassert!(from_hmsm_opt(23, 59, 59, 999).is_some());\nassert!(from_hmsm_opt(23, 59, 59, 1_999).is_some()); // a leap second after 23:59:59\nassert!(from_hmsm_opt(24, 0, 0, 0).is_none());\nassert!(from_hmsm_opt(23, 60, 0, 0).is_none());\nassert!(from_hmsm_opt(23, 59, 60, 0).is_none());\nassert!(from_hmsm_opt(23, 59, 59, 2_000).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["milli",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2551:686":{"id":"0:2551:686","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[328,16],"end":[328,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1455:3072":{"id":"0:1455:3072","crate_id":0,"name":"parse_and_remainder","span":{"filename":"src/naive/time/mod.rs","begin":[578,4],"end":[582,5]},"visibility":"public","docs":"Parses a string from a user-specified format into a new `NaiveTime` value, and a slice with\nthe remaining portion of the string.\nSee the [`format::strftime` module](crate::format::strftime)\non the supported escape sequences.\n\nSimilar to [`parse_from_str`](#method.parse_from_str).\n\n# Example\n\n```rust\n# use chrono::{NaiveTime};\nlet (time, remainder) =\n    NaiveTime::parse_and_remainder(\"3h4m33s trailing text\", \"%-Hh%-Mm%-Ss\").unwrap();\nassert_eq!(time, NaiveTime::from_hms_opt(3, 4, 33).unwrap());\nassert_eq!(remainder, \" trailing text\");\n```","links":{"crate::format::strftime":"0:864:3658"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1879:7746":{"id":"0:1879:7746","crate_id":0,"name":"offset_from_local_datetime","span":{"filename":"src/offset/local/mod.rs","begin":[178,4],"end":[180,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:9654-0:2165:2340":{"id":"a:2:41969:9654-0:2165:2340","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1935:2966":{"id":"0:1935:2966","crate_id":0,"name":"and_hms_nano_opt","span":{"filename":"src/offset/mod.rs","begin":[230,4],"end":[243,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nPropagates any error. Ambiguous result would be discarded.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:170:2964":{"id":"0:170:2964","crate_id":0,"name":"and_hms_nano","span":{"filename":"src/date.rs","begin":[179,4],"end":[181,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nPanics on invalid hour, minute, second and/or nanosecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"Use and_hms_nano_opt() instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"Use and_hms_nano_opt() instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1929":{"id":"0:1929","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[148,0],"end":[244,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:1931:2925","0:1932:2938","0:1933:2948","0:1934:2957","0:1935:2966"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2197:463":{"id":"0:2197:463","crate_id":0,"name":"clone","span":{"filename":"src/format/formatting.rs","begin":[507,9],"end":[507,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:455:3481":{"id":"0:455:3481","crate_id":0,"name":"with_hour","span":{"filename":"src/datetime/mod.rs","begin":[1361,4],"end":[1363,5]},"visibility":"default","docs":"Makes a new `DateTime` with the hour number changed.\n\nSee also the [`NaiveTime::with_hour`] method.\n\n# Errors\n\nReturns `None` if:\n- The value for `hour` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveTime::with_hour`":"0:1479:3481"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:9507-0:2457:3803":{"id":"a:2:32165:9507-0:2457:3803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3114:4604":{"id":"0:3114:4604","crate_id":0,"name":"Tue","span":{"filename":"src/weekday.rs","begin":[46,4],"end":[46,11]},"visibility":"default","docs":"Tuesday.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"0:160:2925":{"id":"0:160:2925","crate_id":0,"name":"and_time","span":{"filename":"src/date.rs","begin":[87,4],"end":[90,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.\n\nReturns `None` on invalid datetime.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["time",{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:2280:3666":{"id":"b:2:2902-0:2280:3666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3121:246-0:2706:2365":{"id":"a:2:3121:246-0:2706:2365","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13182:34965":{"id":"2:13182:34965","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13183:34966"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1139":{"id":"0:1139","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2184,0],"end":[2184,52]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_empty","len"],"trait":{"name":"ExactSizeIterator","id":"2:8283:6366","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2510":{"id":"0:2510","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[317,16],"end":[317,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2718":{"id":"0:2718","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[19,47],"end":[19,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2719:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2015":{"id":"0:2015","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[285,0],"end":[299,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2016:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2425:788":{"id":"0:2425:788","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[258,9],"end":[258,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:2457:3803":{"id":"a:2:3121:246-0:2457:3803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3156:9919-0:3237:2427":{"id":"a:2:3156:9919-0:3237:2427","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3737-0:3093:2371":{"id":"b:2:3737-0:3093:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2367:686":{"id":"0:2367:686","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[158,26],"end":[158,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:9507-0:2625:5703":{"id":"a:2:32165:9507-0:2625:5703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1232:3163":{"id":"0:1232:3163","crate_id":0,"name":"timestamp_subsec_micros","span":{"filename":"src/naive/datetime/mod.rs","begin":[441,4],"end":[443,5]},"visibility":"public","docs":"Returns the number of microseconds since the last whole non-leap second.\n\nThe return value ranges from 0 to 999,999,\nor for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999.","links":{},"attrs":["#[deprecated(since = \"0.4.35\", note =\n\"use `.and_utc().timestamp_subsec_micros()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.35","note":"use `.and_utc().timestamp_subsec_micros()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13249:41654":{"id":"2:13249:41654","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2913-0:2608:2348":{"id":"b:2:2913-0:2608:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2429":{"id":"0:2429","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[258,23],"end":[258,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2430:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41968:9655-0:3208:2376":{"id":"a:2:41968:9655-0:3208:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2067":{"id":"0:2067","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[251,0],"end":[251,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","source","provide","description","type_id"],"trait":{"name":"Error","id":"2:2961:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13158:983":{"id":"2:13158:983","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12332:459"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1137:1177":{"id":"0:1137:1177","crate_id":0,"name":"next","span":{"filename":"src/naive/date/mod.rs","begin":[2172,4],"end":[2176,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8338:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1486:295":{"id":"0:1486:295","crate_id":0,"name":"add","span":{"filename":"src/naive/time/mod.rs","begin":[1213,4],"end":[1215,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:926-0:620:3662":{"id":"0:926-0:620:3662","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[65,29],"end":[65,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"formatting::format_item","name":"format_item","id":"0:620:3662","glob":false}}},"0:350:3189":{"id":"0:350:3189","crate_id":0,"name":"timestamp_subsec_nanos","span":{"filename":"src/datetime/mod.rs","begin":[392,4],"end":[394,5]},"visibility":"public","docs":"Returns the number of nanoseconds since the last second boundary\n\nIn event of a leap second this may exceed 999,999,999.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:9507-0:2300:3683":{"id":"a:2:32165:9507-0:2300:3683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2465":{"id":"0:2465","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[283,22],"end":[283,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2466:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2134":{"id":"0:2134","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,42],"end":[52,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2319:3704":{"id":"0:2319:3704","crate_id":0,"name":"WeekFromMon","span":{"filename":"src/format/mod.rs","begin":[125,4],"end":[125,15]},"visibility":"default","docs":"Week number, where the week 1 starts at the first Monday of January (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2663:2349":{"id":"0:2663:2349","crate_id":0,"name":"NaiveDateTime","span":{"filename":"src/naive/datetime/mod.rs","begin":[78,0],"end":[81,1]},"visibility":"public","docs":"ISO 8601 combined date and time without timezone.\n\n# Example\n\n`NaiveDateTime` is commonly created from [`NaiveDate`].\n\n```\nuse chrono::{NaiveDate, NaiveDateTime};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2016, 7, 8).unwrap().and_hms_opt(9, 10, 11).unwrap();\n# let _ = dt;\n```\n\nYou can use typical [date-like](Datelike) and [time-like](Timelike) methods,\nprovided that relevant traits are in the scope.\n\n```\n# use chrono::{NaiveDate, NaiveDateTime};\n# let dt: NaiveDateTime = NaiveDate::from_ymd_opt(2016, 7, 8).unwrap().and_hms_opt(9, 10, 11).unwrap();\nuse chrono::{Datelike, Timelike, Weekday};\n\nassert_eq!(dt.weekday(), Weekday::Fri);\nassert_eq!(dt.num_seconds_from_midnight(), 33011);\n```","links":{"Timelike":"0:2099:2344","`NaiveDate`":"0:2608:2348","Datelike":"0:2080:2342"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1213","a:2:32106:236-0:2663:2349","a:2:3121:246-0:2663:2349","a:2:3156:9919-0:2663:2349","a:2:32165:9507-0:2663:2349","a:2:41968:9655-0:2663:2349","a:2:41969:9654-0:2663:2349","b:0:1993-0:2663:2349","b:2:2913-0:2663:2349","b:2:2898-0:2663:2349","b:2:2625-0:2663:2349","b:2:2902-0:2663:2349","b:2:2628-0:2663:2349","b:2:3737-0:2663:2349","b:2:2908-0:2663:2349","b:5:736-0:2663:2349","b:5:5863-0:2663:2349","0:1299","0:2679","0:1302","0:1320","0:2667","0:1322","0:2669","0:1296","0:1283","0:2671","0:1341","0:2007","0:1309","0:1125","0:1306","0:2676","0:1259","0:1315","0:1334","0:1345","0:1337","0:1312","0:1328","0:1339","0:2666","0:1318","0:1257","0:2674","0:1325","0:1304","0:1331","0:2678"]}}},"2:13278:3071":{"id":"2:13278:3071","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12809:135","`FromStr`":"2:12808:3566"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12808:3566","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12808:3566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:236:686":{"id":"0:236:686","crate_id":0,"name":"eq","span":{"filename":"src/date.rs","begin":[471,4],"end":[473,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1493:296":{"id":"0:1493:296","crate_id":0,"name":"add_assign","span":{"filename":"src/naive/time/mod.rs","begin":[1253,4],"end":[1255,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2045":{"id":"0:2045","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[245,0],"end":[249,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2046:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2056:1137":{"id":"0:2056:1137","crate_id":0,"name":"name","span":{"filename":"src/month.rs","begin":[149,4],"end":[164,5]},"visibility":"public","docs":"Get the name of the month\n\n```\nuse chrono::Month;\n\nassert_eq!(Month::January.name(), \"January\")\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":"'static","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2542:136":{"id":"0:2542:136","crate_id":0,"name":"Error","span":{"filename":"src/format/mod.rs","begin":[346,4],"end":[346,9]},"visibility":"default","docs":"Issues a formatting error. Used to signal an invalid format string.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1405":{"id":"0:1405","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[34,0],"end":[118,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1407:3029","0:1408:3962","0:1409:7111"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3737-0:2663:2349":{"id":"b:2:3737-0:2663:2349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1144:788":{"id":"0:1144:788","crate_id":0,"name":"fmt","span":{"filename":"src/naive/date/mod.rs","begin":[2219,4],"end":[2236,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2707":{"id":"0:60:2707","crate_id":0,"name":"min_value","span":{"filename":"src/time_delta.rs","begin":[387,4],"end":[389,5]},"visibility":"public","docs":"The minimum possible `TimeDelta`: `-i64::MAX` milliseconds.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2518":{"id":"0:2518","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[317,44],"end":[317,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2519:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2365":{"id":"0:2365","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[158,26],"end":[158,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2902-0:2521:172":{"id":"b:2:2902-0:2521:172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2621:470":{"id":"0:2621:470","crate_id":0,"name":"cmp","span":{"filename":"src/naive/date/mod.rs","begin":[94,42],"end":[94,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1025:4417":{"id":"0:1025:4417","crate_id":0,"name":"from_isoywd_opt","span":{"filename":"src/naive/date/mod.rs","begin":[314,4],"end":[340,5]},"visibility":"public","docs":"Makes a new `NaiveDate` from the [ISO week date](#week-date)\n(year, week number and day of the week).\nThe resulting `NaiveDate` may have a different year from the input year.\n\n# Errors\n\nReturns `None` if:\n- The specified week does not exist in that year (for example 2023 week 53).\n- The value for `week` is invalid (for example: `0`, `60`).\n- If the resulting date is out of range for `NaiveDate`.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Weekday};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\nlet from_isoywd_opt = NaiveDate::from_isoywd_opt;\n\nassert_eq!(from_isoywd_opt(2015, 0, Weekday::Sun), None);\nassert_eq!(from_isoywd_opt(2015, 10, Weekday::Sun), Some(from_ymd(2015, 3, 8)));\nassert_eq!(from_isoywd_opt(2015, 30, Weekday::Mon), Some(from_ymd(2015, 7, 20)));\nassert_eq!(from_isoywd_opt(2015, 60, Weekday::Mon), None);\n\nassert_eq!(from_isoywd_opt(400000, 10, Weekday::Fri), None);\nassert_eq!(from_isoywd_opt(-400000, 10, Weekday::Sat), None);\n```\n\nThe year number of ISO week date may differ from that of the calendar date.\n\n```\n# use chrono::{NaiveDate, Weekday};\n# let from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n# let from_isoywd_opt = NaiveDate::from_isoywd_opt;\n//           Mo Tu We Th Fr Sa Su\n// 2014-W52  22 23 24 25 26 27 28    has 4+ days of new year,\n// 2015-W01  29 30 31  1  2  3  4 <- so this is the first week\nassert_eq!(from_isoywd_opt(2014, 52, Weekday::Sun), Some(from_ymd(2014, 12, 28)));\nassert_eq!(from_isoywd_opt(2014, 53, Weekday::Mon), None);\nassert_eq!(from_isoywd_opt(2015, 1, Weekday::Mon), Some(from_ymd(2014, 12, 29)));\n\n// 2015-W52  21 22 23 24 25 26 27    has 4+ days of old year,\n// 2015-W53  28 29 30 31  1  2  3 <- so this is the last week\n// 2016-W01   4  5  6  7  8  9 10\nassert_eq!(from_isoywd_opt(2015, 52, Weekday::Sun), Some(from_ymd(2015, 12, 27)));\nassert_eq!(from_isoywd_opt(2015, 53, Weekday::Sun), Some(from_ymd(2016, 1, 3)));\nassert_eq!(from_isoywd_opt(2015, 54, Weekday::Mon), None);\nassert_eq!(from_isoywd_opt(2016, 1, Weekday::Mon), Some(from_ymd(2016, 1, 4)));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"i32"}],["week",{"primitive":"u32"}],["weekday",{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2668:686":{"id":"0:2668:686","crate_id":0,"name":"eq","span":{"filename":"src/naive/datetime/mod.rs","begin":[69,9],"end":[69,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:9507-0:2766:2346":{"id":"a:2:32165:9507-0:2766:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3094:8628":{"id":"0:3094:8628","crate_id":0,"name":"DurationExceedsTimestamp","span":{"filename":"src/round.rs","begin":[252,4],"end":[252,28]},"visibility":"default","docs":"Error when the TimeDelta exceeds the TimeDelta from or until the Unix epoch.\n\nNote: this error is not produced anymore.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2913-0:3228:2375":{"id":"b:2:2913-0:3228:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2080:2342":{"id":"0:2080:2342","crate_id":0,"name":"Datelike","span":{"filename":"src/traits.rs","begin":[31,0],"end":[264,1]},"visibility":"public","docs":"The common set of methods for date component.\n\nMethods such as [`year`], [`month`], [`day`] and [`weekday`] can be used to get basic\ninformation about the date.\n\nThe `with_*` methods can change the date.\n\n# Warning\n\nThe `with_*` methods can be convenient to change a single component of a date, but they must be\nused with some care. Examples to watch out for:\n\n- [`with_year`] changes the year component of a year-month-day value. Don't use this method if\n  you want the ordinal to stay the same after changing the year, of if you want the week and\n  weekday values to stay the same.\n- Don't combine two `with_*` methods to change two components of the date. For example to\n  change both the year and month components of a date. This could fail because an intermediate\n  value does not exist, while the final date would be valid.\n\nFor more complex changes to a date, it is best to use the methods on [`NaiveDate`] to create a\nnew value instead of altering an existing date.\n\n[`year`]: Datelike::year\n[`month`]: Datelike::month\n[`day`]: Datelike::day\n[`weekday`]: Datelike::weekday\n[`with_year`]: Datelike::with_year\n[`NaiveDate`]: crate::NaiveDate","links":{"Datelike::weekday":"0:2089:2372","Datelike::month":"0:2083:2374","Datelike::with_year":"0:2091:3036","Datelike::year":"0:2081:3029","crate::NaiveDate":"0:2608:2348","Datelike::day":"0:2085:3031"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:2081:3029","0:2082:8933","0:2083:2374","0:2084:3030","0:2085:3031","0:2086:3032","0:2087:3033","0:2088:3034","0:2089:2372","0:2090:3035","0:2091:3036","0:2092:3037","0:2093:3038","0:2094:3039","0:2095:3040","0:2096:3041","0:2097:3042","0:2098:3140"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:204","0:424","0:1083","0:1259"]}}},"0:1026:5905":{"id":"0:1026:5905","crate_id":0,"name":"from_num_days_from_ce","span":{"filename":"src/naive/date/mod.rs","begin":[351,4],"end":[353,5]},"visibility":"public","docs":"Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\nJanuary 1, 1 being day 1.\n\n# Panics\n\nPanics if the date is out of range.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"use `from_num_days_from_ce_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_num_days_from_ce_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["days",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:2625:5703":{"id":"b:2:2628-0:2625:5703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1029:5930":{"id":"0:1029:5930","crate_id":0,"name":"from_weekday_of_month_opt","span":{"filename":"src/naive/date/mod.rs","begin":[431,4],"end":[444,5]},"visibility":"public","docs":"Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\nsince the beginning of the given month. For instance, if you want the 2nd Friday of March\n2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.\n\n`n` is 1-indexed.\n\n# Errors\n\nReturns `None` if:\n- The specified day does not exist in that month (for example the 5th Monday of Apr. 2023).\n- The value for `month` or `n` is invalid.\n- `year` is out of range for `NaiveDate`.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Weekday};\nassert_eq!(\n    NaiveDate::from_weekday_of_month_opt(2017, 3, Weekday::Fri, 2),\n    NaiveDate::from_ymd_opt(2017, 3, 10)\n)\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"i32"}],["month",{"primitive":"u32"}],["weekday",{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["n",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:424":{"id":"0:424","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1175,0],"end":[1330,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["num_days_from_ce","year_ce"],"trait":{"name":"Datelike","id":"0:2080:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:426:3029","0:427:2374","0:428:3030","0:429:3031","0:430:3032","0:431:3033","0:432:3034","0:433:2372","0:434:3035","0:435:3036","0:437:3037","0:439:3038","0:441:3039","0:443:3040","0:445:3041","0:447:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2765:470":{"id":"0:2765:470","crate_id":0,"name":"cmp","span":{"filename":"src/naive/mod.rs","begin":[134,62],"end":[134,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1060:3015":{"id":"0:1060:3015","crate_id":0,"name":"format_with_items","span":{"filename":"src/naive/date/mod.rs","begin":[1185,4],"end":[1191,5]},"visibility":"public","docs":"Formats the date with the specified formatting items.\nOtherwise it is the same as the ordinary `format` method.\n\nThe `Iterator` of items should be `Clone`able,\nsince the resulting `DelayedFormat` value may be formatted multiple times.\n\n# Example\n\n```\nuse chrono::format::strftime::StrftimeItems;\nuse chrono::NaiveDate;\n\nlet fmt = StrftimeItems::new(\"%Y-%m-%d\");\nlet d = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap();\nassert_eq!(d.format_with_items(fmt.clone()).to_string(), \"2015-09-05\");\nassert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");\n```\n\nThe resulting `DelayedFormat` can be formatted directly via the `Display` trait.\n\n```\n# use chrono::NaiveDate;\n# use chrono::format::strftime::StrftimeItems;\n# let fmt = StrftimeItems::new(\"%Y-%m-%d\").clone();\n# let d = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap();\nassert_eq!(format!(\"{}\", d.format_with_items(fmt)), \"2015-09-05\");\n```","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:2644:5704":{"id":"b:2:2628-0:2644:5704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41968:9655-0:2766:2346":{"id":"a:2:41968:9655-0:2766:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13172:34936":{"id":"2:13172:34936","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41876:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:9654-0:2663:2349":{"id":"a:2:41969:9654-0:2663:2349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:273-0:2158:2335":{"id":"0:273-0:2158:2335","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[548,0],"end":[548,19]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"date::Date","name":"Date","id":"0:2158:2335","glob":false}}},"0:2241:60":{"id":"0:2241:60","crate_id":0,"name":"default","span":{"filename":"src/format/parsed.rs","begin":[128,38],"end":[128,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2519:858":{"id":"0:2519:858","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[317,44],"end":[317,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:2980":{"id":"0:177:2980","crate_id":0,"name":"pred_opt","span":{"filename":"src/date.rs","begin":[234,4],"end":[236,5]},"visibility":"public","docs":"Makes a new `Date` for the prior date.\n\nReturns `None` when `self` is the first representable date.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:348:3155":{"id":"0:348:3155","crate_id":0,"name":"timestamp_subsec_millis","span":{"filename":"src/datetime/mod.rs","begin":[374,4],"end":[376,5]},"visibility":"public","docs":"Returns the number of milliseconds since the last second boundary.\n\nIn event of a leap second this may exceed 999.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2572":{"id":"0:2572","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[386,34],"end":[386,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2574":{"id":"0:2574","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[386,38],"end":[386,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3110:2345":{"id":"0:3110:2345","crate_id":0,"name":"Weekday","span":{"filename":"src/weekday.rs","begin":[42,0],"end":[57,1]},"visibility":"public","docs":"The day of week.\n\nThe order of the days of week depends on the context.\n(This is why this type does *not* implement `PartialOrd` or `Ord` traits.)\nOne should prefer `*_from_monday` or `*_from_sunday` methods to get the correct result.\n\n# Example\n```\nuse chrono::Weekday;\n\nlet monday = \"Monday\".parse::<Weekday>().unwrap();\nassert_eq!(monday, Weekday::Mon);\n\nlet sunday = Weekday::try_from(6).unwrap();\nassert_eq!(sunday, Weekday::Sun);\n\nassert_eq!(sunday.num_days_from_monday(), 6); // starts counting with Monday = 0\nassert_eq!(sunday.number_from_monday(), 7); // starts counting with Monday = 1\nassert_eq!(sunday.num_days_from_sunday(), 0); // starts counting with Sunday = 0\nassert_eq!(sunday.number_from_sunday(), 1); // starts counting with Sunday = 1\n\nassert_eq!(sunday.succ(), monday);\nassert_eq!(sunday.pred(), Weekday::Sat);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:3111:3959","0:3114:4604","0:3117:4569","0:3120:4564","0:3123:4557","0:3126:4558","0:3129:3957"],"impls":["0:2026","a:2:32106:236-0:3110:2345","a:2:3121:246-0:3110:2345","a:2:3156:9919-0:3110:2345","a:2:32165:9507-0:3110:2345","a:2:41968:9655-0:3110:2345","a:2:41969:9654-0:3110:2345","b:2:2913-0:3110:2345","b:2:2898-0:3110:2345","b:2:2625-0:3110:2345","b:2:2902-0:3110:2345","b:2:2628-0:3110:2345","b:2:3737-0:3110:2345","b:2:2908-0:3110:2345","b:5:736-0:3110:2345","b:5:5863-0:3110:2345","0:3142","0:3140","0:2036","0:2039","0:3138","0:3137","0:2034","0:3133","0:3132","0:3135","0:959"]}}},"0:483:295":{"id":"0:483:295","crate_id":0,"name":"add","span":{"filename":"src/datetime/mod.rs","begin":[1475,4],"end":[1477,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:433:2372":{"id":"0:433:2372","crate_id":0,"name":"weekday","span":{"filename":"src/datetime/mod.rs","begin":[1205,4],"end":[1207,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2415":{"id":"0:2415","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[174,27],"end":[174,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1519:135":{"id":"0:1519:135","crate_id":0,"name":"Err","span":{"filename":"src/naive/time/mod.rs","begin":[1605,4],"end":[1605,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2763:1280":{"id":"0:2763:1280","crate_id":0,"name":"partial_cmp","span":{"filename":"src/naive/mod.rs","begin":[134,50],"end":[134,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:432:3034":{"id":"0:432:3034","crate_id":0,"name":"ordinal0","span":{"filename":"src/datetime/mod.rs","begin":[1201,4],"end":[1203,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:9655-0:3110:2345":{"id":"a:2:41968:9655-0:3110:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3231:463":{"id":"0:3231:463","crate_id":0,"name":"clone","span":{"filename":"src/month.rs","begin":[245,9],"end":[245,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2088:3034":{"id":"0:2088:3034","crate_id":0,"name":"ordinal0","span":{"filename":"src/traits.rs","begin":[75,4],"end":[75,30]},"visibility":"default","docs":"Returns the day of year starting from 0.\n\nThe return value ranges from 0 to 365. (The last day of year differs by years.)","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:510":{"id":"0:510","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1631,0],"end":[1639,1]},"visibility":"default","docs":"Subtract-assign `TimeDelta` from `DateTime`.\n\nThis is the same as the addition with a negated `TimeDelta`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `DateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`DateTime<Tz>::checked_sub_signed`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_sub_signed`":"0:359:2995"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33400:2567","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:512:1722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:167:2955":{"id":"0:167:2955","crate_id":0,"name":"and_hms_micro","span":{"filename":"src/date.rs","begin":[150,4],"end":[152,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nPanics on invalid hour, minute, second and/or microsecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"Use and_hms_micro_opt() instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"Use and_hms_micro_opt() instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["micro",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:9655-0:2280:3666":{"id":"a:2:41968:9655-0:2280:3666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41968:9655-0:3154:2343":{"id":"a:2:41968:9655-0:3154:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5863-0:3228:2375":{"id":"b:5:5863-0:3228:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5861:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5865:1763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5632:36205":{"id":"5:5632:36205","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13284:34833"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1530-0:2644:5704":{"id":"0:1530-0:2644:5704","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[18,55],"end":[18,77]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::date::NaiveDateWeeksIterator","name":"NaiveDateWeeksIterator","id":"0:2644:5704","glob":false}}},"2:13178:41646":{"id":"2:13178:41646","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12338:1704","str::slice_mut_unchecked":"2:13179:41647","crate::ops::Index":"2:39420:9159"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:244:470":{"id":"0:244:470","crate_id":0,"name":"cmp","span":{"filename":"src/date.rs","begin":[485,4],"end":[487,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1153:60":{"id":"0:1153:60","crate_id":0,"name":"default","span":{"filename":"src/naive/date/mod.rs","begin":[2315,4],"end":[2317,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:198":{"id":"0:81:198","crate_id":0,"name":"Output","span":{"filename":"src/time_delta.rs","begin":[489,4],"end":[489,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1337":{"id":"0:1337","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[2050,0],"end":[2056,1]},"visibility":"default","docs":"The `Debug` output of the naive date and time `dt` is the same as\n[`dt.format(\"%Y-%m-%dT%H:%M:%S%.f\")`](crate::format::strftime).\n\nThe string printed can be readily parsed via the `parse` method on `str`.\n\nIt should be noted that, for leap seconds not on the minute boundary,\nit may print a representation not distinguishable from non-leap seconds.\nThis doesn't matter in practice, since such leap seconds never happened.\n(By the time of the first leap second on 1972-06-30,\nevery time zone offset around the world has standardized to the 5-minute alignment.)\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet dt = NaiveDate::from_ymd_opt(2016, 11, 15).unwrap().and_hms_opt(7, 39, 24).unwrap();\nassert_eq!(format!(\"{:?}\", dt), \"2016-11-15T07:39:24\");\n```\n\nLeap seconds may also be used.\n\n```\n# use chrono::NaiveDate;\nlet dt =\n    NaiveDate::from_ymd_opt(2015, 6, 30).unwrap().and_hms_milli_opt(23, 59, 59, 1_500).unwrap();\nassert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:59:60.500\");\n```","links":{"crate::format::strftime":"0:864:3658"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1338:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2591:3879":{"id":"0:2591:3879","crate_id":0,"name":"BadFormat","span":{"filename":"src/format/mod.rs","begin":[426,4],"end":[426,13]},"visibility":"default","docs":"There was an error on the formatting string, or there were non-supported formating items.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1544:2633":{"id":"0:1544:2633","crate_id":0,"name":"days","span":{"filename":"src/naive/mod.rs","begin":[123,4],"end":[125,5]},"visibility":"public","docs":"Returns a [`RangeInclusive<T>`] representing the whole week bounded by\n[first_day](NaiveWeek::first_day) and [last_day](NaiveWeek::last_day) functions.\n\n# Panics\n\nPanics if the either the first or last day of the week happens to fall just out of range of\n`NaiveDate` (more than ca. 262,000 years away from common era).\n\n# Examples\n\n```\nuse chrono::{NaiveDate, Weekday};\n\nlet date = NaiveDate::from_ymd_opt(2022, 4, 18).unwrap();\nlet week = date.week(Weekday::Mon);\nlet days = week.days();\nassert!(days.contains(&date));\n```","links":{"NaiveWeek::first_day":"0:1542:5716","`RangeInclusive<T>`":"2:39512:213","NaiveWeek::last_day":"0:1543:5723"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RangeInclusive","id":"2:39512:213","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:715:4376":{"id":"0:715:4376","crate_id":0,"name":"set_timestamp","span":{"filename":"src/format/parsed.rs","begin":[529,4],"end":[531,5]},"visibility":"public","docs":"Set the [`timestamp`](Parsed::timestamp) field to the given value.\n\nA Unix timestamp is defined as the number of non-leap seconds since midnight UTC on\nJanuary 1, 1970.\n\n# Errors\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::timestamp":"0:755:3138"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2389:3764":{"id":"0:2389:3764","crate_id":0,"name":"TimezoneName","span":{"filename":"src/format/mod.rs","begin":[213,4],"end":[213,16]},"visibility":"default","docs":"Timezone name.\n\nIt does not support parsing, its use in the parser is an immediate failure.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1262:3030":{"id":"0:1262:3030","crate_id":0,"name":"month0","span":{"filename":"src/naive/datetime/mod.rs","begin":[1025,4],"end":[1027,5]},"visibility":"default","docs":"Returns the month number starting from 0.\n\nThe return value ranges from 0 to 11.\n\nSee also the [`NaiveDate::month0`] method.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, NaiveDateTime};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.month0(), 8);\n```","links":{"`NaiveDate::month0`":"0:1086:3030"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:408":{"id":"0:408","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[964,0],"end":[1097,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:409:3387","0:411:3403","0:412:3421","0:413:3072"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3191":{"id":"0:3191","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,9],"end":[31,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3737-0:2457:3803":{"id":"b:2:3737-0:2457:3803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32106:236-0:2521:172":{"id":"a:2:32106:236-0:2521:172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:451:2935":{"id":"0:451:2935","crate_id":0,"name":"hour","span":{"filename":"src/datetime/mod.rs","begin":[1334,4],"end":[1336,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2656:686":{"id":"0:2656:686","crate_id":0,"name":"eq","span":{"filename":"src/naive/date/mod.rs","begin":[2164,35],"end":[2164,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:556":{"id":"0:556","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1858,0],"end":[1862,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SystemTime","id":"1:9445:3069","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:557:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:746:2413":{"id":"0:746:2413","crate_id":0,"name":"isoweek","span":{"filename":"src/format/parsed.rs","begin":[1053,4],"end":[1055,5]},"visibility":"public","docs":"Get the `isoweek` field that is part of an [ISO 8601 week date] if set.\n\nSee also [`set_isoweek()`](Parsed::set_isoweek).\n\n[ISO 8601 week date]: crate::NaiveDate#week-date","links":{"Parsed::set_isoweek":"0:705:4337","crate::NaiveDate#week-date":"0:2608:2348"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1933:2948":{"id":"0:1933:2948","crate_id":0,"name":"and_hms_milli_opt","span":{"filename":"src/offset/mod.rs","begin":[186,4],"end":[199,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nPropagates any error. Ambiguous result would be discarded.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["milli",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2913-0:3110:2345":{"id":"b:2:2913-0:3110:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2164:463":{"id":"0:2164:463","crate_id":0,"name":"clone","span":{"filename":"src/date.rs","begin":[56,9],"end":[56,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1315":{"id":"0:1315","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1835,0],"end":[1844,1]},"visibility":"default","docs":"Subtract `std::time::Duration` from `NaiveDateTime`.\n\nAs a part of Chrono's [leap second handling] the subtraction assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_sub_signed`] to get an `Option` instead.","links":{"`NaiveDateTime::checked_sub_signed`":"0:1240:2995"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1316:198","0:1317:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1297:198":{"id":"0:1297:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[1629,4],"end":[1629,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:463":{"id":"0:463","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1414,0],"end":[1418,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"Tz2","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:466:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32106:236-0:2625:5703":{"id":"a:2:32106:236-0:2625:5703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2628-0:2368:3074":{"id":"b:2:2628-0:2368:3074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1290:3485":{"id":"0:1290:3485","crate_id":0,"name":"with_minute","span":{"filename":"src/naive/datetime/mod.rs","begin":[1489,4],"end":[1491,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the minute number changed.\n\nSee also the [`NaiveTime::with_minute`] method.\n\n# Errors\n\nReturns `None` if the value for `minute` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Timelike};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 34, 56, 789).unwrap();\nassert_eq!(\n    dt.with_minute(45),\n    Some(\n        NaiveDate::from_ymd_opt(2015, 9, 8)\n            .unwrap()\n            .and_hms_milli_opt(12, 45, 56, 789)\n            .unwrap()\n    )\n);\nassert_eq!(dt.with_minute(60), None);\n```","links":{"`NaiveTime::with_minute`":"0:1480:3485"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["min",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:2562:2361":{"id":"b:2:2908-0:2562:2361","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:554":{"id":"0:554","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1838,0],"end":[1855,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"SystemTime","id":"1:9445:3069","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:555:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1942:2351":{"id":"0:1942:2351","crate_id":0,"name":"Offset","span":{"filename":"src/offset/mod.rs","begin":[283,4],"end":[283,24]},"visibility":"default","docs":"An associated offset type.\nThis type is used to store the actual offset in date and time types.\nThe original `TimeZone` value can be recovered via `TimeZone::from_offset`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Offset","id":"0:1939:2351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}}},"b:2:2898-0:2562:2361":{"id":"b:2:2898-0:2562:2361","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:966-0:2562:2361":{"id":"0:966-0:2562:2361","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[565,17],"end":[565,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"format::ParseError","name":"ParseError","id":"0:2562:2361","glob":false}}},"0:546":{"id":"0:546","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1807,0],"end":[1813,1]},"visibility":"default","docs":"Accepts a relaxed form of RFC3339.\nA space or a 'T' are accepted as the separator between the date and time\nparts.\n\nAll of these examples are equivalent:\n```\n# use chrono::{DateTime, Utc};\n\"2012-12-12T12:12:12Z\".parse::<DateTime<Utc>>()?;\n\"2012-12-12 12:12:12Z\".parse::<DateTime<Utc>>()?;\n\"2012-12-12 12:12:12+0000\".parse::<DateTime<Utc>>()?;\n\"2012-12-12 12:12:12+00:00\".parse::<DateTime<Utc>>()?;\n# Ok::<(), chrono::ParseError>(())\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12808:3566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:547:135","0:548:3567"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:112-0:2183:2341":{"id":"0:112-0:2183:2341","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[539,30],"end":[539,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::SecondsFormat","name":"SecondsFormat","id":"0:2183:2341","glob":false}}},"0:749:3031":{"id":"0:749:3031","crate_id":0,"name":"day","span":{"filename":"src/format/parsed.rs","begin":[1077,4],"end":[1079,5]},"visibility":"public","docs":"Get the `day` of the month field if set.\n\nSee also [`set_day()`](Parsed::set_day).","links":{"Parsed::set_day":"0:708:4346"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3241":{"id":"0:3241","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[671,16],"end":[671,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2287":{"id":"0:2287","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[78,9],"end":[78,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2298:858":{"id":"0:2298:858","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[78,44],"end":[78,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:788":{"id":"0:96:788","crate_id":0,"name":"fmt","span":{"filename":"src/time_delta.rs","begin":[536,4],"end":[566,5]},"visibility":"default","docs":"Format a `TimeDelta` using the [ISO 8601] format\n\n[ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601#Durations","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2587:3875":{"id":"0:2587:3875","crate_id":0,"name":"TooShort","span":{"filename":"src/format/mod.rs","begin":[420,4],"end":[420,12]},"visibility":"default","docs":"The input string has been prematurely ended.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:3225:1280":{"id":"0:3225:1280","crate_id":0,"name":"partial_cmp","span":{"filename":"src/month.rs","begin":[227,50],"end":[227,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:3110:2345":{"id":"b:2:2908-0:3110:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1899":{"id":"0:1899","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[55,0],"end":[112,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"now\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1900:3050","0:1901:1971"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32106:236-0:2723:2350":{"id":"a:2:32106:236-0:2723:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:221:3039":{"id":"0:221:3039","crate_id":0,"name":"with_day","span":{"filename":"src/date.rs","begin":[446,4],"end":[448,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1411:788":{"id":"0:1411:788","crate_id":0,"name":"fmt","span":{"filename":"src/naive/isoweek.rs","begin":[151,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3197":{"id":"0:3197","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,30],"end":[31,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3198:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13287:34837":{"id":"2:13287:34837","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:8037"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:712:4363":{"id":"0:712:4363","crate_id":0,"name":"set_minute","span":{"filename":"src/format/parsed.rs","begin":[479,4],"end":[484,5]},"visibility":"public","docs":"Set the [`minute`](Parsed::minute) field to the given value.\n\n# Errors\n\nReturns `OUT_OF_RANGE` if `value` is not in the range 0-59.\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::minute":"0:752:3476"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:738:10056":{"id":"5:738:10056","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:2731":{"id":"0:2731","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[215,24],"end":[215,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2732:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2898-0:3062:2367":{"id":"b:2:2898-0:3062:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1271:3037":{"id":"0:1271:3037","crate_id":0,"name":"with_month","span":{"filename":"src/naive/datetime/mod.rs","begin":[1191,4],"end":[1193,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the month number (starting from 1) changed.\n\nDon't combine multiple `Datelike::with_*` methods. The intermediate value may not exist.\n\nSee also the [`NaiveDate::with_month`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (for example `month(4)` when day of the month is 31).\n- The value for `month` is invalid.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, NaiveDateTime};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 30).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(\n    dt.with_month(10),\n    Some(NaiveDate::from_ymd_opt(2015, 10, 30).unwrap().and_hms_opt(12, 34, 56).unwrap())\n);\nassert_eq!(dt.with_month(13), None); // No month 13\nassert_eq!(dt.with_month(2), None); // No February 30\n```","links":{"`NaiveDate::with_month`":"0:1094:3037"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:733:3391":{"id":"0:733:3391","crate_id":0,"name":"to_datetime","span":{"filename":"src/format/parsed.rs","begin":[882,4],"end":[897,5]},"visibility":"public","docs":"Returns a parsed timezone-aware date and time out of given fields.\n\nThis method is able to determine the combined date and time from date, time and offset\nfields, and/or from a single timestamp field. It checks all fields are consistent with each\nother.\n\n# Errors\n\nThis method returns:\n- `IMPOSSIBLE`  if any of the date fields conflict, or if a timestamp conflicts with any of\n  the other fields.\n- `NOT_ENOUGH` if there are not enough fields set in `Parsed` for a complete datetime\n  including offset from UTC.\n- `OUT_OF_RANGE`\n  - if any of the fields of `Parsed` are set to a value beyond their acceptable\n  range.\n  - if the value would be outside the range of a [`NaiveDateTime`] or [`FixedOffset`].\n  - if the date does not exist.","links":{"`NaiveDateTime`":"0:2663:2349","`FixedOffset`":"0:2766:2346"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1497":{"id":"0:1497","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1331,0],"end":[1338,1]},"visibility":"default","docs":"Subtract `TimeDelta` from `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the subtraction ignores integral number of days.\nThis is the same as addition with a negated `TimeDelta`.\n\nAs a part of Chrono's [leap second handling], the subtraction assumes that **there is no leap\nsecond ever**, except when the `NaiveTime` itself represents a leap second in which case the\nassumption becomes that **there is exactly a single leap second ever**.\n\n# Example\n\n```\nuse chrono::{NaiveTime, TimeDelta};\n\nlet from_hmsm = |h, m, s, milli| NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap();\n\nassert_eq!(from_hmsm(3, 5, 7, 0) - TimeDelta::zero(), from_hmsm(3, 5, 7, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) - TimeDelta::try_seconds(1).unwrap(), from_hmsm(3, 5, 6, 0));\nassert_eq!(\n    from_hmsm(3, 5, 7, 0) - TimeDelta::try_seconds(60 + 5).unwrap(),\n    from_hmsm(3, 4, 2, 0)\n);\nassert_eq!(\n    from_hmsm(3, 5, 7, 0) - TimeDelta::try_seconds(2 * 60 * 60 + 6 * 60).unwrap(),\n    from_hmsm(0, 59, 7, 0)\n);\nassert_eq!(\n    from_hmsm(3, 5, 7, 0) - TimeDelta::try_milliseconds(80).unwrap(),\n    from_hmsm(3, 5, 6, 920)\n);\nassert_eq!(\n    from_hmsm(3, 5, 7, 950) - TimeDelta::try_milliseconds(280).unwrap(),\n    from_hmsm(3, 5, 7, 670)\n);\n```\n\nThe subtraction wraps around.\n\n```\n# use chrono::{TimeDelta, NaiveTime};\n# let from_hmsm = |h, m, s, milli| { NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap() };\nassert_eq!(from_hmsm(3, 5, 7, 0) - TimeDelta::try_seconds(8*60*60).unwrap(), from_hmsm(19, 5, 7, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) - TimeDelta::try_days(800).unwrap(), from_hmsm(3, 5, 7, 0));\n```\n\nLeap seconds are handled, but the subtraction assumes that it is the only leap second happened.\n\n```\n# use chrono::{TimeDelta, NaiveTime};\n# let from_hmsm = |h, m, s, milli| { NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap() };\nlet leap = from_hmsm(3, 5, 59, 1_300);\nassert_eq!(leap - TimeDelta::zero(), from_hmsm(3, 5, 59, 1_300));\nassert_eq!(leap - TimeDelta::try_milliseconds(200).unwrap(), from_hmsm(3, 5, 59, 1_100));\nassert_eq!(leap - TimeDelta::try_milliseconds(500).unwrap(), from_hmsm(3, 5, 59, 800));\nassert_eq!(leap - TimeDelta::try_seconds(60).unwrap(), from_hmsm(3, 5, 0, 300));\nassert_eq!(leap - TimeDelta::try_days(1).unwrap(), from_hmsm(3, 6, 0, 300));\n```\n\n[leap second handling]: crate::NaiveTime#leap-second-handling","links":{"crate::NaiveTime#leap-second-handling":"0:2723:2350"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1498:198","0:1499:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3156:9919-0:2183:2341":{"id":"a:2:3156:9919-0:2183:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:191:2918":{"id":"0:191:2918","crate_id":0,"name":"MAX_UTC","span":{"filename":"src/date.rs","begin":[318,4],"end":[318,78]},"visibility":"public","docs":"The maximum possible `Date`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"default":"_"}}},"b:2:2902-0:2422:3788":{"id":"b:2:2902-0:2422:3788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5863-0:2723:2350":{"id":"b:5:5863-0:2723:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5861:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5865:1763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2913-0:2578:3859":{"id":"b:2:2913-0:2578:3859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3156:9919-0:3093:2371":{"id":"a:2:3156:9919-0:3093:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:427:2374":{"id":"0:427:2374","crate_id":0,"name":"month","span":{"filename":"src/datetime/mod.rs","begin":[1181,4],"end":[1183,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:9655-0:2578:3859":{"id":"a:2:41968:9655-0:2578:3859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2902-0:3042:2336":{"id":"b:2:2902-0:3042:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:422:801":{"id":"0:422:801","crate_id":0,"name":"format","span":{"filename":"src/datetime/mod.rs","begin":[1131,4],"end":[1133,5]},"visibility":"public","docs":"Formats the combined date and time per the specified format string.\n\nSee the [`crate::format::strftime`] module for the supported escape sequences.\n\n# Example\n```rust\nuse chrono::prelude::*;\n\nlet date_time: DateTime<Utc> = Utc.with_ymd_and_hms(2017, 04, 02, 12, 50, 32).unwrap();\nlet formatted = format!(\"{}\", date_time.format(\"%d/%m/%Y %H:%M\"));\nassert_eq!(formatted, \"02/04/2017 12:50\");\n```","links":{"`crate::format::strftime`":"0:864:3658"},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:736-0:2562:2361":{"id":"b:5:736-0:2562:2361","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2300:3683":{"id":"0:2300:3683","crate_id":0,"name":"Numeric","span":{"filename":"src/format/mod.rs","begin":[103,0],"end":[155,1]},"visibility":"public","docs":"Numeric item types.\nThey have associated formatting width (FW) and parsing width (PW).\n\nThe **formatting width** is the minimal width to be formatted.\nIf the number is too short, and the padding is not [`Pad::None`](./enum.Pad.html#variant.None),\nthen it is left-padded.\nIf the number is too long or (in some cases) negative, it is printed as is.\n\nThe **parsing width** is the maximal width to be scanned.\nThe parser only tries to consume from one to given number of digits (greedily).\nIt also trims the preceding whitespace if any.\nIt cannot parse the negative number, so some date and time cannot be formatted then\nparsed with the same formatting items.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:2301:3686","0:2303:3688","0:2305:3690","0:2307:3693","0:2309:3695","0:2311:3697","0:2313:2343","0:2315:3700","0:2317:3702","0:2319:3704","0:2321:2365","0:2323:3707","0:2325:3709","0:2327:3711","0:2329:3713","0:2331:3715","0:2333:3717","0:2335:3719","0:2337:3723","0:2339:3726","0:2341:3730"],"impls":["a:2:32106:236-0:2300:3683","a:2:3121:246-0:2300:3683","a:2:3156:9919-0:2300:3683","a:2:32165:9507-0:2300:3683","a:2:41968:9655-0:2300:3683","a:2:41969:9654-0:2300:3683","b:2:2913-0:2300:3683","b:2:2898-0:2300:3683","b:2:2625-0:2300:3683","b:2:2902-0:2300:3683","b:2:2628-0:2300:3683","b:2:3737-0:2300:3683","b:2:2908-0:2300:3683","b:5:736-0:2300:3683","0:2353","0:2349","0:2351","0:2344","0:2347","0:2346"]}}},"0:2337:3723":{"id":"0:2337:3723","crate_id":0,"name":"Nanosecond","span":{"filename":"src/format/mod.rs","begin":[145,4],"end":[145,14]},"visibility":"default","docs":"The number of nanoseconds since the last whole second (FW=PW=9).\nNote that this is *not* left-aligned;\nsee also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:32165:9507-0:2663:2349":{"id":"a:2:32165:9507-0:2663:2349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:256":{"id":"0:256","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[512,0],"end":[519,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:258:198","0:259:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1140":{"id":"0:1140","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2186,0],"end":[2192,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["nth_back","rfold","advance_back_by","try_rfold","rfind"],"trait":{"name":"DoubleEndedIterator","id":"2:8230:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1141:6367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2628-0:2247:2887":{"id":"b:2:2628-0:2247:2887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1227:3153":{"id":"0:1227:3153","crate_id":0,"name":"timestamp_millis","span":{"filename":"src/naive/datetime/mod.rs","begin":[369,4],"end":[371,5]},"visibility":"public","docs":"Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.\n\nNote that this does *not* account for the timezone!\nThe true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","links":{},"attrs":["#[deprecated(since = \"0.4.35\", note =\n\"use `.and_utc().timestamp_millis()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.35","note":"use `.and_utc().timestamp_millis()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1454:3421":{"id":"0:1454:3421","crate_id":0,"name":"parse_from_str","span":{"filename":"src/naive/time/mod.rs","begin":[556,4],"end":[560,5]},"visibility":"public","docs":"Parses a string with the specified format string and returns a new `NaiveTime`.\nSee the [`format::strftime` module](crate::format::strftime)\non the supported escape sequences.\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nlet parse_from_str = NaiveTime::parse_from_str;\n\nassert_eq!(\n    parse_from_str(\"23:56:04\", \"%H:%M:%S\"),\n    Ok(NaiveTime::from_hms_opt(23, 56, 4).unwrap())\n);\nassert_eq!(\n    parse_from_str(\"pm012345.6789\", \"%p%I%M%S%.f\"),\n    Ok(NaiveTime::from_hms_micro_opt(13, 23, 45, 678_900).unwrap())\n);\n```\n\nDate and offset is ignored for the purpose of parsing.\n\n```\n# use chrono::NaiveTime;\n# let parse_from_str = NaiveTime::parse_from_str;\nassert_eq!(\n    parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),\n    Ok(NaiveTime::from_hms_opt(12, 34, 56).unwrap())\n);\n```\n\n[Leap seconds](#leap-second-handling) are correctly handled by\ntreating any time of the form `hh:mm:60` as a leap second.\n(This equally applies to the formatting, so the round trip is possible.)\n\n```\n# use chrono::NaiveTime;\n# let parse_from_str = NaiveTime::parse_from_str;\nassert_eq!(\n    parse_from_str(\"08:59:60.123\", \"%H:%M:%S%.f\"),\n    Ok(NaiveTime::from_hms_milli_opt(8, 59, 59, 1_123).unwrap())\n);\n```\n\nMissing seconds are assumed to be zero,\nbut out-of-bound times or insufficient fields are errors otherwise.\n\n```\n# use chrono::NaiveTime;\n# let parse_from_str = NaiveTime::parse_from_str;\nassert_eq!(parse_from_str(\"7:15\", \"%H:%M\"), Ok(NaiveTime::from_hms_opt(7, 15, 0).unwrap()));\n\nassert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());\nassert!(parse_from_str(\"12\", \"%H\").is_err());\nassert!(parse_from_str(\"17:60\", \"%H:%M\").is_err());\nassert!(parse_from_str(\"24:00:00\", \"%H:%M:%S\").is_err());\n```\n\nAll parsed fields should be consistent to each other, otherwise it's an error.\nHere `%H` is for 24-hour clocks, unlike `%I`,\nand thus can be independently determined without AM/PM.\n\n```\n# use chrono::NaiveTime;\n# let parse_from_str = NaiveTime::parse_from_str;\nassert!(parse_from_str(\"13:07 AM\", \"%H:%M %p\").is_err());\n```","links":{"crate::format::strftime":"0:864:3658"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2048-0:3110:2345":{"id":"0:2048-0:3110:2345","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[588,0],"end":[588,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"weekday::Weekday","name":"Weekday","id":"0:3110:2345","glob":false}}},"0:1445:2941":{"id":"0:1445:2941","crate_id":0,"name":"from_hms_opt","span":{"filename":"src/naive/time/mod.rs","begin":[284,4],"end":[286,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from hour, minute and second.\n\nThe millisecond part is allowed to exceed 1,000,000,000 in order to represent a\n[leap second](#leap-second-handling), but only when `sec == 59`.\n\n# Errors\n\nReturns `None` on invalid hour, minute and/or second.\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nlet from_hms_opt = NaiveTime::from_hms_opt;\n\nassert!(from_hms_opt(0, 0, 0).is_some());\nassert!(from_hms_opt(23, 59, 59).is_some());\nassert!(from_hms_opt(24, 0, 0).is_none());\nassert!(from_hms_opt(23, 60, 0).is_none());\nassert!(from_hms_opt(23, 59, 60).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1309":{"id":"0:1309","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1752,0],"end":[1758,1]},"visibility":"default","docs":"Add `Months` to `NaiveDateTime`.\n\nThe result will be clamped to valid days in the resulting month, see `checked_add_months` for\ndetails.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `checked_add_months` to get an `Option` instead.\n\n# Example\n\n```\nuse chrono::{Months, NaiveDate};\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1).unwrap().and_hms_opt(1, 0, 0).unwrap() + Months::new(1),\n    NaiveDate::from_ymd_opt(2014, 2, 1).unwrap().and_hms_opt(1, 0, 0).unwrap()\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1).unwrap().and_hms_opt(0, 2, 0).unwrap()\n        + Months::new(11),\n    NaiveDate::from_ymd_opt(2014, 12, 1).unwrap().and_hms_opt(0, 2, 0).unwrap()\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1).unwrap().and_hms_opt(0, 0, 3).unwrap()\n        + Months::new(12),\n    NaiveDate::from_ymd_opt(2015, 1, 1).unwrap().and_hms_opt(0, 0, 3).unwrap()\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1).unwrap().and_hms_opt(0, 0, 4).unwrap()\n        + Months::new(13),\n    NaiveDate::from_ymd_opt(2015, 2, 1).unwrap().and_hms_opt(0, 0, 4).unwrap()\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 31).unwrap().and_hms_opt(0, 5, 0).unwrap()\n        + Months::new(1),\n    NaiveDate::from_ymd_opt(2014, 2, 28).unwrap().and_hms_opt(0, 5, 0).unwrap()\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2020, 1, 31).unwrap().and_hms_opt(6, 0, 0).unwrap()\n        + Months::new(1),\n    NaiveDate::from_ymd_opt(2020, 2, 29).unwrap().and_hms_opt(6, 0, 0).unwrap()\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1310:198","0:1311:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1599:7752":{"id":"0:1599:7752","crate_id":0,"name":"offset_from_utc_date","span":{"filename":"src/offset/fixed.rs","begin":[141,4],"end":[143,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:736-0:2706:2365":{"id":"b:5:736-0:2706:2365","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1974-0:2766:2346":{"id":"0:1974-0:2766:2346","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[580,17],"end":[580,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"offset::FixedOffset","name":"FixedOffset","id":"0:2766:2346","glob":false}}},"b:5:736-0:2368:3074":{"id":"b:5:736-0:2368:3074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41968:9655-0:2247:2887":{"id":"a:2:41968:9655-0:2247:2887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2661":{"id":"0:2661","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2164,62],"end":[2164,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2711:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2662:470"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:377:2915":{"id":"0:377:2915","crate_id":0,"name":"MIN_UTC","span":{"filename":"src/datetime/mod.rs","begin":[713,4],"end":[713,94]},"visibility":"public","docs":"The minimum possible `DateTime<Utc>`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"default":"_"}}},"a:2:3121:246-0:2723:2350":{"id":"a:2:3121:246-0:2723:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1049:2966":{"id":"0:1049:2966","crate_id":0,"name":"and_hms_nano_opt","span":{"filename":"src/naive/date/mod.rs","begin":[909,4],"end":[918,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.\n\nThe nanosecond part is allowed to exceed 1,000,000,000 in order to represent a [leap second](\n./struct.NaiveTime.html#leap-second-handling), but only when `sec == 59`.\n\n# Errors\n\nReturns `None` on invalid hour, minute, second and/or nanosecond.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet d = NaiveDate::from_ymd_opt(2015, 6, 3).unwrap();\nassert!(d.and_hms_nano_opt(12, 34, 56, 789_012_345).is_some());\nassert!(d.and_hms_nano_opt(12, 34, 59, 1_789_012_345).is_some()); // leap second\nassert!(d.and_hms_nano_opt(12, 34, 59, 2_789_012_345).is_none());\nassert!(d.and_hms_nano_opt(12, 34, 60, 789_012_345).is_none());\nassert!(d.and_hms_nano_opt(12, 60, 56, 789_012_345).is_none());\nassert!(d.and_hms_nano_opt(24, 34, 56, 789_012_345).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2735:1280":{"id":"0:2735:1280","crate_id":0,"name":"partial_cmp","span":{"filename":"src/naive/time/mod.rs","begin":[215,30],"end":[215,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:2746:2364":{"id":"a:2:3121:246-0:2746:2364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2913-0:3042:2336":{"id":"b:2:2913-0:3042:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3105":{"id":"0:3105","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[247,23],"end":[247,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3106:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2898-0:3145:2373":{"id":"b:2:2898-0:3145:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2652:858":{"id":"0:2652:858","crate_id":0,"name":"hash","span":{"filename":"src/naive/date/mod.rs","begin":[2164,29],"end":[2164,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1975-0:1939:2351":{"id":"0:1975-0:1939:2351","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[580,30],"end":[580,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"offset::Offset","name":"Offset","id":"0:1939:2351","glob":false}}},"0:2714:1280":{"id":"0:2714:1280","crate_id":0,"name":"partial_cmp","span":{"filename":"src/naive/isoweek.rs","begin":[19,24],"end":[19,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:509:1721":{"id":"0:509:1721","crate_id":0,"name":"sub","span":{"filename":"src/datetime/mod.rs","begin":[1612,4],"end":[1616,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:744:3955":{"id":"0:744:3955","crate_id":0,"name":"week_from_sun","span":{"filename":"src/format/parsed.rs","begin":[1035,4],"end":[1037,5]},"visibility":"public","docs":"Get the `week_from_sun` field if set.\n\nSee also [`set_week_from_sun()`](Parsed::set_week_from_sun).","links":{"Parsed::set_week_from_sun":"0:703:4329"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2115":{"id":"0:2115","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[682,0],"end":[686,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2116:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2913-0:2741:2366":{"id":"b:2:2913-0:2741:2366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2741:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1904:2984":{"id":"0:1904:2984","crate_id":0,"name":"from_offset","span":{"filename":"src/offset/utc.rs","begin":[117,4],"end":[119,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_state",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1500":{"id":"0:1500","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1344,0],"end":[1349,1]},"visibility":"default","docs":"Subtract-assign `TimeDelta` from `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the subtraction ignores integral number of days.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33400:2567","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1501:1722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1148":{"id":"0:1148","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2283,0],"end":[2302,1]},"visibility":"default","docs":"Parsing a `str` into a `NaiveDate` uses the same format,\n[`%Y-%m-%d`](crate::format::strftime), as in `Debug` and `Display`.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet d = NaiveDate::from_ymd_opt(2015, 9, 18).unwrap();\nassert_eq!(\"2015-09-18\".parse::<NaiveDate>(), Ok(d));\n\nlet d = NaiveDate::from_ymd_opt(12345, 6, 7).unwrap();\nassert_eq!(\"+12345-6-7\".parse::<NaiveDate>(), Ok(d));\n\nassert!(\"foo\".parse::<NaiveDate>().is_err());\n```","links":{"crate::format::strftime":"0:864:3658"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12808:3566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1149:135","0:1150:3567"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2769":{"id":"0:2769","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[22,9],"end":[22,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2770:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41969:9654-0:3145:2373":{"id":"a:2:41969:9654-0:3145:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:400:818":{"id":"0:400:818","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[938,4],"end":[940,5]},"visibility":"default","docs":"Convert this `DateTime<Local>` instance into a `DateTime<Utc>` instance.\n\nConversion is performed via [`DateTime::with_timezone`], accounting for the difference in\ntimezones.","links":{"`DateTime::with_timezone`":"0:353:2987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:2174:2886":{"id":"a:2:3121:246-0:2174:2886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2341:3730":{"id":"0:2341:3730","crate_id":0,"name":"Internal","span":{"filename":"src/format/mod.rs","begin":[154,4],"end":[154,29]},"visibility":"default","docs":"Internal uses only.\n\nThis item exists so that one can add additional internal-only formatting\nwithout breaking major compatibility (as enum variants cannot be selectively private).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2343:1956"]},"discriminant":null}}},"0:1932:2938":{"id":"0:1932:2938","crate_id":0,"name":"and_hms_opt","span":{"filename":"src/offset/mod.rs","begin":[170,4],"end":[177,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.\n\nPropagates any error. Ambiguous result would be discarded.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1910:3112":{"id":"0:1910:3112","crate_id":0,"name":"fix","span":{"filename":"src/offset/utc.rs","begin":[137,4],"end":[139,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:2625:5703":{"id":"b:2:2902-0:2625:5703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2031:5212":{"id":"0:2031:5212","crate_id":0,"name":"num_days_from_monday","span":{"filename":"src/weekday.rs","begin":[138,4],"end":[140,5]},"visibility":"public","docs":"Returns a day-of-week number starting from Monday = 0.\n\n`w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`\n--------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----\n`w.num_days_from_monday()`: | 0     | 1     | 2     | 3     | 4     | 5     | 6\n\n# Example\n\n```\n# #[cfg(feature = \"clock\")] {\n# use chrono::{Local, Datelike};\n// MTWRFSU is occasionally used as a single-letter abbreviation of the weekdays.\n// Use `num_days_from_monday` to index into the array.\nconst MTWRFSU: [char; 7] = ['M', 'T', 'W', 'R', 'F', 'S', 'U'];\n\nlet today = Local::now().weekday();\nprintln!(\"{}\", MTWRFSU[today.num_days_from_monday() as usize]);\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:2676":{"id":"0:47:2676","crate_id":0,"name":"nanoseconds","span":{"filename":"src/time_delta.rs","begin":[272,4],"end":[275,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of nanoseconds.\n\nThe number of nanoseconds acceptable by this constructor is less than\nthe total number that can actually be stored in a `TimeDelta`, so it is\nnot possible to specify a value that would be out of bounds. This\nfunction is therefore infallible.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["nanos",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2669":{"id":"0:2669","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[69,20],"end":[69,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32165:9507-0:2158:2335":{"id":"a:2:32165:9507-0:2158:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2913-0:3154:2343":{"id":"b:2:2913-0:3154:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2625-0:2158:2335":{"id":"b:2:2625-0:2158:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2902-0:2608:2348":{"id":"b:2:2902-0:2608:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1595:2351":{"id":"0:1595:2351","crate_id":0,"name":"Offset","span":{"filename":"src/offset/fixed.rs","begin":[128,4],"end":[128,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:32106:236-0:3228:2375":{"id":"a:2:32106:236-0:3228:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:418:3015":{"id":"0:418:3015","crate_id":0,"name":"format_with_items","span":{"filename":"src/datetime/mod.rs","begin":[1107,4],"end":[1114,5]},"visibility":"public","docs":"Formats the combined date and time with the specified formatting items.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2360":{"id":"0:2360","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[158,16],"end":[158,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1279:3041":{"id":"0:1279:3041","crate_id":0,"name":"with_ordinal","span":{"filename":"src/naive/datetime/mod.rs","begin":[1315,4],"end":[1317,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.\n\nSee also the [`NaiveDate::with_ordinal`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (`with_ordinal(366)` in a non-leap year).\n- The value for `ordinal` is invalid.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, NaiveDateTime};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(\n    dt.with_ordinal(60),\n    Some(NaiveDate::from_ymd_opt(2015, 3, 1).unwrap().and_hms_opt(12, 34, 56).unwrap())\n);\nassert_eq!(dt.with_ordinal(366), None); // 2015 had only 365 days\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2016, 9, 8).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(\n    dt.with_ordinal(60),\n    Some(NaiveDate::from_ymd_opt(2016, 2, 29).unwrap().and_hms_opt(12, 34, 56).unwrap())\n);\nassert_eq!(\n    dt.with_ordinal(366),\n    Some(NaiveDate::from_ymd_opt(2016, 12, 31).unwrap().and_hms_opt(12, 34, 56).unwrap())\n);\n```","links":{"`NaiveDate::with_ordinal`":"0:1098:3041"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:447:3042":{"id":"0:447:3042","crate_id":0,"name":"with_ordinal0","span":{"filename":"src/datetime/mod.rs","begin":[1327,4],"end":[1329,5]},"visibility":"default","docs":"Makes a new `DateTime` with the day of year (starting from 0) changed.\n\nSee also the [`NaiveDate::with_ordinal0`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (`with_ordinal0(365)` in a non-leap year).\n- The value for `ordinal0` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveDate::with_ordinal0`":"0:1099:3042"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2595":{"id":"0:2595","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[398,9],"end":[398,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2596:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2569":{"id":"0:2569","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[386,23],"end":[386,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:566:801":{"id":"0:566:801","crate_id":0,"name":"format","span":{"filename":"src/format/mod.rs","begin":[4,0],"end":[555,1]},"visibility":"public","docs":"Formatting (and parsing) utilities for date and time.\n\nThis module provides the common types and routines to implement,\nfor example, [`DateTime::format`](../struct.DateTime.html#method.format) or\n[`DateTime::parse_from_str`](../struct.DateTime.html#method.parse_from_str) methods.\nFor most cases you should use these high-level interfaces.\n\nInternally the formatting and parsing shares the same abstract **formatting items**,\nwhich are just an [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) of\nthe [`Item`](./enum.Item.html) type.\nThey are generated from more readable **format strings**;\ncurrently Chrono supports a built-in syntax closely resembling\nC's `strftime` format. The available options can be found [here](./strftime/index.html).\n\n# Example\n```\n# #[cfg(feature = \"alloc\")] {\nuse chrono::{NaiveDateTime, TimeZone, Utc};\n\nlet date_time = Utc.with_ymd_and_hms(2020, 11, 10, 0, 1, 32).unwrap();\n\nlet formatted = format!(\"{}\", date_time.format(\"%Y-%m-%d %H:%M:%S\"));\nassert_eq!(formatted, \"2020-11-10 00:01:32\");\n\nlet parsed = NaiveDateTime::parse_from_str(&formatted, \"%Y-%m-%d %H:%M:%S\")?.and_utc();\nassert_eq!(parsed, date_time);\n# }\n# Ok::<(), chrono::ParseError>(())\n```","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:864:3658","0:923-0:2183:2341","0:925-0:616:801","0:926-0:620:3662","0:927-0:2174:2886","0:930-0:793:3071","0:931-0:797:3072","0:932-0:2209:3075","0:933-0:2247:2887","0:2280:3666","0:2300:3683","0:2356:3731","0:2368:3074","0:2422:3788","0:2457:3803","0:2475:3806","0:2501:3809","0:2521:172","0:2562:2361","0:2578:3859","0:946:2362"],"is_stripped":false}}},"0:3158:3918":{"id":"0:3158:3918","crate_id":0,"name":"February","span":{"filename":"src/month.rs","begin":[45,4],"end":[45,16]},"visibility":"default","docs":"February","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"1","value":"1"}}}},"a:2:3121:246-0:2145:2331":{"id":"a:2:3121:246-0:2145:2331","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1976-0:1941:2352":{"id":"0:1976-0:1941:2352","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[580,38],"end":[580,46]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"offset::TimeZone","name":"TimeZone","id":"0:1941:2352","glob":false}}},"0:2468":{"id":"0:2468","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[283,29],"end":[283,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2469:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2608:2348":{"id":"0:2608:2348","crate_id":0,"name":"NaiveDate","span":{"filename":"src/naive/date/mod.rs","begin":[102,0],"end":[104,1]},"visibility":"public","docs":"ISO 8601 calendar date without timezone.\nAllows for every [proleptic Gregorian date] from Jan 1, 262145 BCE to Dec 31, 262143 CE.\nAlso supports the conversion from ISO 8601 ordinal and week date.\n\n# Calendar Date\n\nThe ISO 8601 **calendar date** follows the proleptic Gregorian calendar.\nIt is like a normal civil calendar but note some slight differences:\n\n* Dates before the Gregorian calendar's inception in 1582 are defined via the extrapolation.\n  Be careful, as historical dates are often noted in the Julian calendar and others\n  and the transition to Gregorian may differ across countries (as late as early 20C).\n\n  (Some example: Both Shakespeare from Britain and Cervantes from Spain seemingly died\n  on the same calendar date---April 23, 1616---but in the different calendar.\n  Britain used the Julian calendar at that time, so Shakespeare's death is later.)\n\n* ISO 8601 calendars has the year 0, which is 1 BCE (a year before 1 CE).\n  If you need a typical BCE/BC and CE/AD notation for year numbers,\n  use the [`Datelike::year_ce`] method.\n\n# Week Date\n\nThe ISO 8601 **week date** is a triple of year number, week number\nand [day of the week](Weekday) with the following rules:\n\n* A week consists of Monday through Sunday, and is always numbered within some year.\n  The week number ranges from 1 to 52 or 53 depending on the year.\n\n* The week 1 of given year is defined as the first week containing January 4 of that year,\n  or equivalently, the first week containing four or more days in that year.\n\n* The year number in the week date may *not* correspond to the actual Gregorian year.\n  For example, January 3, 2016 (Sunday) was on the last (53rd) week of 2015.\n\nChrono's date types default to the ISO 8601 [calendar date](#calendar-date), but\n[`Datelike::iso_week`] and [`Datelike::weekday`] methods can be used to get the corresponding\nweek date.\n\n# Ordinal Date\n\nThe ISO 8601 **ordinal date** is a pair of year number and day of the year (\"ordinal\").\nThe ordinal number ranges from 1 to 365 or 366 depending on the year.\nThe year number is the same as that of the [calendar date](#calendar-date).\n\nThis is currently the internal format of Chrono's date types.\n\n[proleptic Gregorian date]: crate::NaiveDate#calendar-date","links":{"`Datelike::iso_week`":"0:2090:3035","crate::NaiveDate#calendar-date":"0:2608:2348","`Datelike::weekday`":"0:2089:2372","`Datelike::year_ce`":"0:2082:8933","Weekday":"0:3110:2345"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1016","a:2:32106:236-0:2608:2348","a:2:3121:246-0:2608:2348","a:2:3156:9919-0:2608:2348","a:2:32165:9507-0:2608:2348","a:2:41968:9655-0:2608:2348","a:2:41969:9654-0:2608:2348","b:2:2913-0:2608:2348","b:2:2898-0:2608:2348","b:2:2625-0:2608:2348","b:2:2902-0:2608:2348","b:2:2628-0:2608:2348","b:2:3737-0:2608:2348","b:2:2908-0:2608:2348","b:5:736-0:2608:2348","b:5:5863-0:2608:2348","0:1146","0:2610","0:1111","0:2623","0:1103","0:1100","0:1083","0:2618","0:1125","0:1143","0:2622","0:1114","0:1108","0:1120","0:1122","0:1117","0:1105","0:2613","0:2611","0:1152","0:1257","0:1148","0:2620","0:2615"]}}},"0:1317:1721":{"id":"0:1317:1721","crate_id":0,"name":"sub","span":{"filename":"src/naive/datetime/mod.rs","begin":[1839,4],"end":[1843,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:412:3421":{"id":"0:412:3421","crate_id":0,"name":"parse_from_str","span":{"filename":"src/datetime/mod.rs","begin":[1055,4],"end":[1059,5]},"visibility":"public","docs":"Parses a string from a user-specified format into a `DateTime<FixedOffset>` value.\n\nNote that this method *requires a timezone* in the input string. See\n[`NaiveDateTime::parse_from_str`](./naive/struct.NaiveDateTime.html#method.parse_from_str)\nfor a version that does not require a timezone in the to-be-parsed str. The returned\n[`DateTime`] value will have a [`FixedOffset`] reflecting the parsed timezone.\n\nSee the [`format::strftime` module](./format/strftime/index.html) for supported format\nsequences.\n\n# Example\n\n```rust\nuse chrono::{DateTime, FixedOffset, NaiveDate, TimeZone};\n\nlet dt = DateTime::parse_from_str(\"1983 Apr 13 12:09:14.274 +0000\", \"%Y %b %d %H:%M:%S%.3f %z\");\nassert_eq!(\n    dt,\n    Ok(FixedOffset::east_opt(0)\n        .unwrap()\n        .from_local_datetime(\n            &NaiveDate::from_ymd_opt(1983, 4, 13)\n                .unwrap()\n                .and_hms_milli_opt(12, 9, 14, 274)\n                .unwrap()\n        )\n        .unwrap())\n);\n```","links":{"`DateTime`":"0:2165:2340","`FixedOffset`":"0:2766:2346"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2397:3779":{"id":"0:2397:3779","crate_id":0,"name":"TimezoneOffsetColonZ","span":{"filename":"src/format/mod.rs","begin":[238,4],"end":[238,24]},"visibility":"default","docs":"Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).\n\nIn the parser, the colon can be omitted and/or surrounded with any amount of whitespace,\nand `Z` can be either in upper case or in lower case.\nThe offset is limited from `-24:00` to `+24:00`,\nwhich is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2040:8773":{"id":"0:2040:8773","crate_id":0,"name":"from_i64","span":{"filename":"src/weekday.rs","begin":[202,4],"end":[213,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["n",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3188:3929":{"id":"0:3188:3929","crate_id":0,"name":"December","span":{"filename":"src/month.rs","begin":[65,4],"end":[65,17]},"visibility":"default","docs":"December","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"11","value":"11"}}}},"0:2675:1280":{"id":"0:2675:1280","crate_id":0,"name":"partial_cmp","span":{"filename":"src/naive/datetime/mod.rs","begin":[69,30],"end":[69,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:3093:2371":{"id":"b:2:2902-0:3093:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:445:3041":{"id":"0:445:3041","crate_id":0,"name":"with_ordinal","span":{"filename":"src/datetime/mod.rs","begin":[1311,4],"end":[1313,5]},"visibility":"default","docs":"Makes a new `DateTime` with the day of year (starting from 1) changed.\n\nSee also the [`NaiveDate::with_ordinal`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (`with_ordinal(366)` in a non-leap year).\n- The value for `ordinal` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveDate::with_ordinal`":"0:1098:3041"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:941":{"id":"0:941","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[369,0],"end":[383,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:943:3854"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2327:3711":{"id":"0:2327:3711","crate_id":0,"name":"Ordinal","span":{"filename":"src/format/mod.rs","begin":[133,4],"end":[133,11]},"visibility":"default","docs":"Day of the year (FW=PW=3).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1484":{"id":"0:1484","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1209,0],"end":[1216,1]},"visibility":"default","docs":"Add `TimeDelta` to `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the addition ignores integral number of days.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveTime` itself represents a leap second in which case the\nassumption becomes that **there is exactly a single leap second ever**.\n\n# Example\n\n```\nuse chrono::{NaiveTime, TimeDelta};\n\nlet from_hmsm = |h, m, s, milli| NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap();\n\nassert_eq!(from_hmsm(3, 5, 7, 0) + TimeDelta::zero(), from_hmsm(3, 5, 7, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) + TimeDelta::try_seconds(1).unwrap(), from_hmsm(3, 5, 8, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) + TimeDelta::try_seconds(-1).unwrap(), from_hmsm(3, 5, 6, 0));\nassert_eq!(\n    from_hmsm(3, 5, 7, 0) + TimeDelta::try_seconds(60 + 4).unwrap(),\n    from_hmsm(3, 6, 11, 0)\n);\nassert_eq!(\n    from_hmsm(3, 5, 7, 0) + TimeDelta::try_seconds(7 * 60 * 60 - 6 * 60).unwrap(),\n    from_hmsm(9, 59, 7, 0)\n);\nassert_eq!(\n    from_hmsm(3, 5, 7, 0) + TimeDelta::try_milliseconds(80).unwrap(),\n    from_hmsm(3, 5, 7, 80)\n);\nassert_eq!(\n    from_hmsm(3, 5, 7, 950) + TimeDelta::try_milliseconds(280).unwrap(),\n    from_hmsm(3, 5, 8, 230)\n);\nassert_eq!(\n    from_hmsm(3, 5, 7, 950) + TimeDelta::try_milliseconds(-980).unwrap(),\n    from_hmsm(3, 5, 6, 970)\n);\n```\n\nThe addition wraps around.\n\n```\n# use chrono::{TimeDelta, NaiveTime};\n# let from_hmsm = |h, m, s, milli| { NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap() };\nassert_eq!(from_hmsm(3, 5, 7, 0) + TimeDelta::try_seconds(22*60*60).unwrap(), from_hmsm(1, 5, 7, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) + TimeDelta::try_seconds(-8*60*60).unwrap(), from_hmsm(19, 5, 7, 0));\nassert_eq!(from_hmsm(3, 5, 7, 0) + TimeDelta::try_days(800).unwrap(), from_hmsm(3, 5, 7, 0));\n```\n\nLeap seconds are handled, but the addition assumes that it is the only leap second happened.\n\n```\n# use chrono::{TimeDelta, NaiveTime};\n# let from_hmsm = |h, m, s, milli| { NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap() };\nlet leap = from_hmsm(3, 5, 59, 1_300);\nassert_eq!(leap + TimeDelta::zero(), from_hmsm(3, 5, 59, 1_300));\nassert_eq!(leap + TimeDelta::try_milliseconds(-500).unwrap(), from_hmsm(3, 5, 59, 800));\nassert_eq!(leap + TimeDelta::try_milliseconds(500).unwrap(), from_hmsm(3, 5, 59, 1_800));\nassert_eq!(leap + TimeDelta::try_milliseconds(800).unwrap(), from_hmsm(3, 6, 0, 100));\nassert_eq!(leap + TimeDelta::try_seconds(10).unwrap(), from_hmsm(3, 6, 9, 300));\nassert_eq!(leap + TimeDelta::try_seconds(-10).unwrap(), from_hmsm(3, 5, 50, 300));\nassert_eq!(leap + TimeDelta::try_days(1).unwrap(), from_hmsm(3, 5, 59, 300));\n```\n\n[leap second handling]: crate::NaiveTime#leap-second-handling","links":{"crate::NaiveTime#leap-second-handling":"0:2723:2350"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1485:198","0:1486:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[445,0],"end":[456,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Neg","id":"2:3182:2565","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:198","0:69:1153"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2732:858":{"id":"0:2732:858","crate_id":0,"name":"hash","span":{"filename":"src/naive/time/mod.rs","begin":[215,24],"end":[215,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2662:470":{"id":"0:2662:470","crate_id":0,"name":"cmp","span":{"filename":"src/naive/date/mod.rs","begin":[2164,62],"end":[2164,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:9507-0:2165:2340":{"id":"a:2:32165:9507-0:2165:2340","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13186:14050":{"id":"2:13186:14050","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12332:459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43732:9255","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1969:3199":{"id":"0:1969:3199","crate_id":0,"name":"from_utc_datetime","span":{"filename":"src/offset/mod.rs","begin":[593,4],"end":[595,5]},"visibility":"default","docs":"Converts the UTC `NaiveDateTime` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:611":{"id":"0:611","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[118,0],"end":[138,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"super::Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["0:615:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1555:1215":{"id":"0:1555:1215","crate_id":0,"name":"offset","span":{"filename":"src/offset/mod.rs","begin":[4,0],"end":[695,1]},"visibility":"public","docs":"The time zone, which calculates offsets from the local time to UTC.\n\nThere are four operations provided by the `TimeZone` trait:\n\n1. Converting the local `NaiveDateTime` to `DateTime<Tz>`\n2. Converting the UTC `NaiveDateTime` to `DateTime<Tz>`\n3. Converting `DateTime<Tz>` to the local `NaiveDateTime`\n4. Constructing `DateTime<Tz>` objects from various offsets\n\n1 is used for constructors. 2 is used for the `with_timezone` method of date and time types.\n3 is used for other methods, e.g. `year()` or `format()`, and provided by an associated type\nwhich implements `Offset` (which then passed to `TimeZone` for actual implementations).\nTechnically speaking `TimeZone` has a total knowledge about given timescale,\nbut `Offset` is used as a cache to avoid the repeated conversion\nand provides implementations for 1 and 3.\nAn `TimeZone` instance can be reconstructed from the corresponding `Offset` instance.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1607-0:2766:2346","0:1882-0:3042:2336","0:1915-0:3049:2347","0:1916:2368","0:3062:2367","0:1939:2351","0:1941:2352"],"is_stripped":false}}},"0:1499:1721":{"id":"0:1499:1721","crate_id":0,"name":"sub","span":{"filename":"src/naive/time/mod.rs","begin":[1335,4],"end":[1337,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:702:4325":{"id":"0:702:4325","crate_id":0,"name":"set_month","span":{"filename":"src/format/parsed.rs","begin":[318,4],"end":[323,5]},"visibility":"public","docs":"Set the [`month`](Parsed::month) field to the given value.\n\n# Errors\n\nReturns `OUT_OF_RANGE` if `value` is not in the range 1-12.\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::month":"0:743:2374"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2387:3761":{"id":"0:2387:3761","crate_id":0,"name":"Nanosecond9","span":{"filename":"src/format/mod.rs","begin":[209,4],"end":[209,15]},"visibility":"default","docs":"Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:41969:9654-0:2521:172":{"id":"a:2:41969:9654-0:2521:172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2913-0:2766:2346":{"id":"b:2:2913-0:2766:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:736-0:3208:2376":{"id":"b:5:736-0:3208:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1265:3033":{"id":"0:1265:3033","crate_id":0,"name":"ordinal","span":{"filename":"src/naive/datetime/mod.rs","begin":[1085,4],"end":[1087,5]},"visibility":"default","docs":"Returns the day of year starting from 1.\n\nThe return value ranges from 1 to 366. (The last day of year differs by years.)\n\nSee also the [`NaiveDate::ordinal`](./struct.NaiveDate.html#method.ordinal) method.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, NaiveDateTime};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.ordinal(), 268);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:9655-0:3049:2347":{"id":"a:2:41968:9655-0:3049:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1876:2351":{"id":"0:1876:2351","crate_id":0,"name":"Offset","span":{"filename":"src/offset/local/mod.rs","begin":[166,4],"end":[166,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:3219:858":{"id":"0:3219:858","crate_id":0,"name":"hash","span":{"filename":"src/month.rs","begin":[227,33],"end":[227,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1321:1722":{"id":"0:1321:1722","crate_id":0,"name":"sub_assign","span":{"filename":"src/naive/datetime/mod.rs","begin":[1877,4],"end":[1879,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1241:3223":{"id":"0:1241:3223","crate_id":0,"name":"checked_sub_months","span":{"filename":"src/naive/datetime/mod.rs","begin":[750,4],"end":[752,5]},"visibility":"public","docs":"Subtracts given `Months` from the current date and time.\n\nUses the last day of the month if the day does not exist in the resulting month.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\nuse chrono::{Months, NaiveDate};\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1)\n        .unwrap()\n        .and_hms_opt(1, 0, 0)\n        .unwrap()\n        .checked_sub_months(Months::new(1)),\n    Some(NaiveDate::from_ymd_opt(2013, 12, 1).unwrap().and_hms_opt(1, 0, 0).unwrap())\n);\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1)\n        .unwrap()\n        .and_hms_opt(1, 0, 0)\n        .unwrap()\n        .checked_sub_months(Months::new(core::i32::MAX as u32 + 1)),\n    None\n);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1881:4477":{"id":"0:1881:4477","crate_id":0,"name":"offset_from_utc_datetime","span":{"filename":"src/offset/local/mod.rs","begin":[188,4],"end":[190,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3230":{"id":"0:3230","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[245,9],"end":[245,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3231:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2414:686":{"id":"0:2414:686","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[174,16],"end":[174,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1091:2372":{"id":"0:1091:2372","crate_id":0,"name":"weekday","span":{"filename":"src/naive/date/mod.rs","begin":[1616,4],"end":[1618,5]},"visibility":"default","docs":"Returns the day of week.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, Weekday};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().weekday(), Weekday::Tue);\nassert_eq!(NaiveDate::from_ymd_opt(-308, 3, 14).unwrap().weekday(), Weekday::Fri);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1409:7111":{"id":"0:1409:7111","crate_id":0,"name":"week0","span":{"filename":"src/naive/isoweek.rs","begin":[115,4],"end":[117,5]},"visibility":"public","docs":"Returns the ISO week number starting from 0.\n\nThe return value ranges from 0 to 52. (The last week of year differs by years.)\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, Weekday};\n\nlet d = NaiveDate::from_isoywd_opt(2015, 15, Weekday::Mon).unwrap();\nassert_eq!(d.iso_week().week0(), 14);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1872":{"id":"0:1872","crate_id":0,"name":null,"span":{"filename":"src/offset/local/mod.rs","begin":[124,0],"end":[163,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1873:3050","0:1874:1971"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:466:686":{"id":"0:466:686","crate_id":0,"name":"eq","span":{"filename":"src/datetime/mod.rs","begin":[1415,4],"end":[1417,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2242":{"id":"0:2242","crate_id":0,"name":null,"span":{"filename":"src/format/parsed.rs","begin":[128,47],"end":[128,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2243:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1275:3039":{"id":"0:1275:3039","crate_id":0,"name":"with_day","span":{"filename":"src/naive/datetime/mod.rs","begin":[1248,4],"end":[1250,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.\n\nSee also the [`NaiveDate::with_day`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (for example `day(31)` in April).\n- The value for `day` is invalid.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, NaiveDateTime};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(\n    dt.with_day(30),\n    Some(NaiveDate::from_ymd_opt(2015, 9, 30).unwrap().and_hms_opt(12, 34, 56).unwrap())\n);\nassert_eq!(dt.with_day(31), None); // no September 31\n```","links":{"`NaiveDate::with_day`":"0:1096:3039"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:342:2415":{"id":"0:342:2415","crate_id":0,"name":"time","span":{"filename":"src/datetime/mod.rs","begin":[183,4],"end":[185,5]},"visibility":"public","docs":"Retrieves the time component.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:387":{"id":"0:387","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[874,0],"end":[878,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2950:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:388:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1105":{"id":"0:1105","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[1953,0],"end":[1959,1]},"visibility":"default","docs":"Add `Months` to `NaiveDate`.\n\nThe result will be clamped to valid days in the resulting month, see `checked_add_months` for\ndetails.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `NaiveDate::checked_add_months` to get an `Option` instead.\n\n# Example\n\n```\nuse chrono::{Months, NaiveDate};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nassert_eq!(from_ymd(2014, 1, 1) + Months::new(1), from_ymd(2014, 2, 1));\nassert_eq!(from_ymd(2014, 1, 1) + Months::new(11), from_ymd(2014, 12, 1));\nassert_eq!(from_ymd(2014, 1, 1) + Months::new(12), from_ymd(2015, 1, 1));\nassert_eq!(from_ymd(2014, 1, 1) + Months::new(13), from_ymd(2015, 2, 1));\nassert_eq!(from_ymd(2014, 1, 31) + Months::new(1), from_ymd(2014, 2, 28));\nassert_eq!(from_ymd(2020, 1, 31) + Months::new(1), from_ymd(2020, 2, 29));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1106:198","0:1107:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1956:3161":{"id":"0:1956:3161","crate_id":0,"name":"timestamp_micros","span":{"filename":"src/offset/mod.rs","begin":[513,4],"end":[518,5]},"visibility":"default","docs":"Makes a new `DateTime` from the number of non-leap microseconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").\n\n# Example\n\n```\nuse chrono::{TimeZone, Utc};\n\nassert_eq!(Utc.timestamp_micros(1431648000000).unwrap().timestamp(), 1431648);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["micros",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:736-0:3093:2371":{"id":"b:5:736-0:3093:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:62:2710":{"id":"0:62:2710","crate_id":0,"name":"zero","span":{"filename":"src/time_delta.rs","begin":[399,4],"end":[401,5]},"visibility":"public","docs":"A `TimeDelta` where the stored seconds and nanoseconds are equal to zero.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:500:198":{"id":"0:500:198","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1570,4],"end":[1570,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:3194":{"id":"0:3194","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,20],"end":[31,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3192":{"id":"0:3192","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,9],"end":[31,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3193:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:750:4285":{"id":"0:750:4285","crate_id":0,"name":"hour_div_12","span":{"filename":"src/format/parsed.rs","begin":[1087,4],"end":[1089,5]},"visibility":"public","docs":"Get the `hour_div_12` field (am/pm) if set.\n\n0 indicates AM and 1 indicates PM.\n\nSee also [`set_ampm()`](Parsed::set_ampm) and [`set_hour()`](Parsed::set_hour).","links":{"Parsed::set_ampm":"0:709:4349","Parsed::set_hour":"0:711:4360"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:482:198":{"id":"0:482:198","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1472,4],"end":[1472,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"b:5:736-0:2158:2335":{"id":"b:5:736-0:2158:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2902-0:2209:3075":{"id":"b:2:2902-0:2209:3075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1598:7746":{"id":"0:1598:7746","crate_id":0,"name":"offset_from_local_datetime","span":{"filename":"src/offset/fixed.rs","begin":[137,4],"end":[139,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:2356:3731":{"id":"b:2:2898-0:2356:3731","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:339:3110":{"id":"0:339:3110","crate_id":0,"name":"from_local","span":{"filename":"src/datetime/mod.rs","begin":[129,4],"end":[133,5]},"visibility":"public","docs":"Makes a new `DateTime` from a `NaiveDateTime` in *local* time and an `Offset`.\n\n# Panics\n\nPanics if the local datetime can't be converted to UTC because it would be out of range.\n\nThis can happen if `datetime` is near the end of the representable range of `NaiveDateTime`,\nand the offset from UTC pushes it beyond that.","links":{},"attrs":["#[inline]","#[must_use]","#[deprecated(since = \"0.4.27\", note =\n\"Use TimeZone::from_local_datetime() or NaiveDateTime::and_local_timezone instead\")]"],"deprecation":{"since":"0.4.27","note":"Use TimeZone::from_local_datetime() or NaiveDateTime::and_local_timezone instead"},"inner":{"function":{"decl":{"inputs":[["datetime",{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["offset",{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1941:2352","args":null}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1542:5716":{"id":"0:1542:5716","crate_id":0,"name":"first_day","span":{"filename":"src/naive/mod.rs","begin":[65,4],"end":[73,5]},"visibility":"public","docs":"Returns a date representing the first day of the week.\n\n# Panics\n\nPanics if the first day of the week happens to fall just out of range of `NaiveDate`\n(more than ca. 262,000 years away from common era).\n\n# Examples\n\n```\nuse chrono::{NaiveDate, Weekday};\n\nlet date = NaiveDate::from_ymd_opt(2022, 4, 18).unwrap();\nlet week = date.week(Weekday::Mon);\nassert!(week.first_day() <= date);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:2165:2340":{"id":"b:2:2908-0:2165:2340","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:736-0:2145:2331":{"id":"b:5:736-0:2145:2331","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:214:3035":{"id":"0:214:3035","crate_id":0,"name":"iso_week","span":{"filename":"src/date.rs","begin":[426,4],"end":[428,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2236":{"id":"0:2236","crate_id":0,"name":null,"span":{"filename":"src/format/parsed.rs","begin":[128,27],"end":[128,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2234":{"id":"0:2234","crate_id":0,"name":null,"span":{"filename":"src/format/parsed.rs","begin":[128,16],"end":[128,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2235:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1066:6136":{"id":"0:1066:6136","crate_id":0,"name":"iter_days","span":{"filename":"src/naive/date/mod.rs","begin":[1290,4],"end":[1292,5]},"visibility":"public","docs":"Returns an iterator that steps by days across all representable dates.\n\n# Example\n\n```\n# use chrono::NaiveDate;\n\nlet expected = [\n    NaiveDate::from_ymd_opt(2016, 2, 27).unwrap(),\n    NaiveDate::from_ymd_opt(2016, 2, 28).unwrap(),\n    NaiveDate::from_ymd_opt(2016, 2, 29).unwrap(),\n    NaiveDate::from_ymd_opt(2016, 3, 1).unwrap(),\n];\n\nlet mut count = 0;\nfor (idx, d) in NaiveDate::from_ymd_opt(2016, 2, 27).unwrap().iter_days().take(4).enumerate() {\n    assert_eq!(d, expected[idx]);\n    count += 1;\n}\nassert_eq!(count, 4);\n\nfor d in NaiveDate::from_ymd_opt(2016, 3, 1).unwrap().iter_days().rev().take(4) {\n    count -= 1;\n    assert_eq!(d, expected[count]);\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13255:41656":{"id":"2:13255:41656","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:385":{"id":"0:385","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[867,0],"end":[871,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2950:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:386:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1121:1722":{"id":"0:1121:1722","crate_id":0,"name":"sub_assign","span":{"filename":"src/naive/date/mod.rs","begin":[2077,4],"end":[2079,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1125":{"id":"0:1125","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2121,0],"end":[2125,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1126:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3121:246-0:2280:3666":{"id":"a:2:3121:246-0:2280:3666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2460:3811":{"id":"0:2460:3811","crate_id":0,"name":"allow_zulu","span":{"filename":"src/format/mod.rs","begin":[290,4],"end":[290,24]},"visibility":"public","docs":"Represent `+00:00` as `Z`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"primitive":"bool"}}},"b:2:2625-0:2521:172":{"id":"b:2:2625-0:2521:172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1480:3485":{"id":"0:1480:3485","crate_id":0,"name":"with_minute","span":{"filename":"src/naive/time/mod.rs","begin":[1040,4],"end":[1046,5]},"visibility":"default","docs":"Makes a new `NaiveTime` with the minute number changed.\n\n# Errors\n\nReturns `None` if the value for `minute` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nlet dt = NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap();\nassert_eq!(\n    dt.with_minute(45),\n    Some(NaiveTime::from_hms_nano_opt(23, 45, 4, 12_345_678).unwrap())\n);\nassert_eq!(dt.with_minute(60), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["min",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1514:788":{"id":"0:1514:788","crate_id":0,"name":"fmt","span":{"filename":"src/naive/time/mod.rs","begin":[1508,4],"end":[1532,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1533-0:1014:2355":{"id":"0:1533-0:1014:2355","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[20,31],"end":[20,39]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"self::date::MIN_DATE","name":"MIN_DATE","id":"0:1014:2355","glob":false}}},"0:3071:190":{"id":"0:3071:190","crate_id":0,"name":"None","span":{"filename":"src/offset/mod.rs","begin":[74,4],"end":[74,8]},"visibility":"default","docs":"The local time does not exist because there is a _gap_ in the local time.\n\nThis variant may also be returned if there was an error while resolving the local time,\ncaused by for example missing time zone data files, an error in an OS API, or overflow.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:32106:236-0:2165:2340":{"id":"a:2:32106:236-0:2165:2340","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3228:2375":{"id":"0:3228:2375","crate_id":0,"name":"ParseMonthError","span":{"filename":"src/month.rs","begin":[246,0],"end":[248,1]},"visibility":"public","docs":"An error resulting from reading `<Month>` value with `FromStr`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32106:236-0:3228:2375","a:2:3121:246-0:3228:2375","a:2:3156:9919-0:3228:2375","a:2:32165:9507-0:3228:2375","a:2:41968:9655-0:3228:2375","a:2:41969:9654-0:3228:2375","b:2:2913-0:3228:2375","b:2:2898-0:3228:2375","b:2:2625-0:3228:2375","b:2:2902-0:3228:2375","b:2:2628-0:3228:2375","b:2:3737-0:3228:2375","b:2:2908-0:3228:2375","b:5:736-0:3228:2375","b:5:5863-0:3228:2375","0:3230","0:2070","0:3232","0:3233","0:3235","0:2068","0:2067"]}}},"b:2:2898-0:2475:3806":{"id":"b:2:2898-0:2475:3806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1931:2925":{"id":"0:1931:2925","crate_id":0,"name":"and_time","span":{"filename":"src/offset/mod.rs","begin":[155,4],"end":[162,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.\n\nPropagates any error. Ambiguous result would be discarded.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["time",{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2086:3032":{"id":"0:2086:3032","crate_id":0,"name":"day0","span":{"filename":"src/traits.rs","begin":[65,4],"end":[65,26]},"visibility":"default","docs":"Returns the day of month starting from 0.\n\nThe return value ranges from 0 to 30. (The last day of month differs by months.)","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13283:34832":{"id":"2:13283:34832","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:9655-0:2501:3809":{"id":"a:2:41968:9655-0:2501:3809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2913-0:2422:3788":{"id":"b:2:2913-0:2422:3788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2908-0:3093:2371":{"id":"b:2:2908-0:3093:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3126:4558":{"id":"0:3126:4558","crate_id":0,"name":"Sat","span":{"filename":"src/weekday.rs","begin":[54,4],"end":[54,11]},"visibility":"default","docs":"Saturday.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"5","value":"5"}}}},"0:2475:3806":{"id":"0:2475:3806","crate_id":0,"name":"OffsetPrecision","span":{"filename":"src/format/mod.rs","begin":[297,0],"end":[314,1]},"visibility":"public","docs":"The precision of an offset from UTC formatting item.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:2476:3818","0:2478:3821","0:2480:3823","0:2482:3825","0:2484:3827","0:2486:3829"],"impls":["a:2:32106:236-0:2475:3806","a:2:3121:246-0:2475:3806","a:2:3156:9919-0:2475:3806","a:2:32165:9507-0:2475:3806","a:2:41968:9655-0:2475:3806","a:2:41969:9654-0:2475:3806","b:2:2913-0:2475:3806","b:2:2898-0:2475:3806","b:2:2625-0:2475:3806","b:2:2902-0:2475:3806","b:2:2628-0:2475:3806","b:2:3737-0:2475:3806","b:2:2908-0:2475:3806","b:5:736-0:2475:3806","0:2494","0:2498","0:2493","0:2491","0:2496","0:2488","0:2490"]}}},"0:741:4283":{"id":"0:741:4283","crate_id":0,"name":"isoyear_div_100","span":{"filename":"src/format/parsed.rs","begin":[1009,4],"end":[1011,5]},"visibility":"public","docs":"Get the `isoyear_div_100` field that is part of an [ISO 8601 week date] if set.\n\nSee also [`set_isoyear_div_100()`](Parsed::set_isoyear_div_100).\n\n[ISO 8601 week date]: crate::NaiveDate#week-date","links":{"crate::NaiveDate#week-date":"0:2608:2348","Parsed::set_isoyear_div_100":"0:700:4317"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2754":{"id":"0:2754","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[134,29],"end":[134,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2898-0:3110:2345":{"id":"b:2:2898-0:3110:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2602":{"id":"0:2602","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[398,34],"end":[398,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2046:788":{"id":"0:2046:788","crate_id":0,"name":"fmt","span":{"filename":"src/weekday.rs","begin":[246,4],"end":[248,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:3208:2376":{"id":"b:2:2898-0:3208:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2628-0:3049:2347":{"id":"b:2:2628-0:3049:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1545":{"id":"0:1545","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[137,0],"end":[142,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1546:1163"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13213:34969":{"id":"2:13213:34969","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:9229"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12663:9275","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2190:4004":{"id":"0:2190:4004","crate_id":0,"name":"Nanos","span":{"filename":"src/format/formatting.rs","begin":[520,4],"end":[520,9]},"visibility":"default","docs":"Use fixed 9 subsecond digits. This corresponds to [Fixed::Nanosecond9].","links":{"Fixed::Nanosecond9":"0:2387:3761"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:213:2372":{"id":"0:213:2372","crate_id":0,"name":"weekday","span":{"filename":"src/date.rs","begin":[422,4],"end":[424,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:334:2358":{"id":"0:334:2358","crate_id":0,"name":"MAX_DATETIME","span":{"filename":"src/datetime/mod.rs","begin":[69,0],"end":[69,65]},"visibility":"public","docs":"The maximum possible `DateTime<Utc>`.","links":{},"attrs":["#[deprecated(since = \"0.4.20\", note = \"Use DateTime::MAX_UTC instead\")]"],"deprecation":{"since":"0.4.20","note":"Use DateTime::MAX_UTC instead"},"inner":{"constant":{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"expr":"DateTime<Utc>::MAX_UTC","value":null,"is_literal":false}}},"0:2206":{"id":"0:2206","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[507,44],"end":[507,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2207:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2913-0:2280:3666":{"id":"b:2:2913-0:2280:3666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2913-0:2521:172":{"id":"b:2:2913-0:2521:172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2734":{"id":"0:2734","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[215,30],"end":[215,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","gt","lt","le"],"trait":{"name":"PartialOrd","id":"2:2717:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2735:1280"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2674":{"id":"0:2674","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[69,30],"end":[69,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","gt","lt","le"],"trait":{"name":"PartialOrd","id":"2:2717:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2675:1280"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41968:9655-0:2422:3788":{"id":"a:2:41968:9655-0:2422:3788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1306":{"id":"0:1306","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1698,0],"end":[1705,1]},"visibility":"default","docs":"Add `FixedOffset` to `NaiveDateTime`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `checked_add_offset` to get an `Option` instead.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1307:198","0:1308:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2007":{"id":"0:2007","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[170,0],"end":[180,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DurationRound","id":"0:1998:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2008:135","0:2009:8614","0:2010:8619"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1304":{"id":"0:1304","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1685,0],"end":[1690,1]},"visibility":"default","docs":"Add-assign `std::time::Duration` to `NaiveDateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_add_signed`] to get an `Option` instead.","links":{"`NaiveDateTime::checked_add_signed`":"0:1234:2993"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33333:2562","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1305:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2708":{"id":"0:2708","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[19,9],"end":[19,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2908-0:2247:2887":{"id":"b:2:2908-0:2247:2887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41968:9655-0:2174:2886":{"id":"a:2:41968:9655-0:2174:2886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3100":{"id":"0:3100","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[247,9],"end":[247,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3101:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:259:1721":{"id":"0:259:1721","crate_id":0,"name":"sub","span":{"filename":"src/date.rs","begin":[516,4],"end":[518,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:459:3491":{"id":"0:459:3491","crate_id":0,"name":"with_second","span":{"filename":"src/datetime/mod.rs","begin":[1393,4],"end":[1395,5]},"visibility":"default","docs":"Makes a new `DateTime` with the second number changed.\n\nAs with the [`second`](#method.second) method,\nthe input range is restricted to 0 through 59.\n\nSee also the [`NaiveTime::with_second`] method.\n\n# Errors\n\nReturns `None` if:\n- The value for `second` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveTime::with_second`":"0:1481:3491"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:249":{"id":"0:249","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[496,0],"end":[503,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:251:198","0:252:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:949:788":{"id":"0:949:788","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[437,4],"end":[448,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1094:3037":{"id":"0:1094:3037","crate_id":0,"name":"with_month","span":{"filename":"src/naive/date/mod.rs","begin":[1721,4],"end":[1723,5]},"visibility":"default","docs":"Makes a new `NaiveDate` with the month number (starting from 1) changed.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (for example `month(4)` when day of the month is 31).\n- The value for `month` is invalid.\n\n# Examples\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_month(10),\n    Some(NaiveDate::from_ymd_opt(2015, 10, 8).unwrap())\n);\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_month(13), None); // No month 13\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 30).unwrap().with_month(2), None); // No Feb 30\n```\n\nDon't combine multiple `Datelike::with_*` methods. The intermediate value may not exist.\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nfn with_year_month(date: NaiveDate, year: i32, month: u32) -> Option<NaiveDate> {\n    date.with_year(year)?.with_month(month)\n}\nlet d = NaiveDate::from_ymd_opt(2020, 2, 29).unwrap();\nassert!(with_year_month(d, 2019, 1).is_none()); // fails because of invalid intermediate value\n\n// Correct version:\nfn with_year_month_fixed(date: NaiveDate, year: i32, month: u32) -> Option<NaiveDate> {\n    NaiveDate::from_ymd_opt(year, month, date.day())\n}\nlet d = NaiveDate::from_ymd_opt(2020, 2, 29).unwrap();\nassert_eq!(with_year_month_fixed(d, 2019, 1), NaiveDate::from_ymd_opt(2019, 1, 29));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1219:6535":{"id":"0:1219:6535","crate_id":0,"name":"from_timestamp_opt","span":{"filename":"src/naive/datetime/mod.rs","begin":[196,4],"end":[198,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` corresponding to a UTC date and time,\nfrom the number of non-leap seconds\nsince the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\nand the number of nanoseconds since the last whole non-leap second.\n\nThe nanosecond part can exceed 1,000,000,000 in order to represent a\n[leap second](NaiveTime#leap-second-handling), but only when `secs % 60 == 59`.\n(The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)\n\n# Errors\n\nReturns `None` if the number of seconds would be out of range for a `NaiveDateTime` (more\nthan ca. 262,000 years away from common era), and panics on an invalid nanosecond\n(2 seconds or more).","links":{"NaiveTime#leap-second-handling":"0:2723:2350"},"attrs":["#[deprecated(since = \"0.4.35\", note =\n\"use `DateTime::from_timestamp` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.35","note":"use `DateTime::from_timestamp` instead"},"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"i64"}],["nsecs",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2094:3039":{"id":"0:2094:3039","crate_id":0,"name":"with_day","span":{"filename":"src/traits.rs","begin":[192,4],"end":[192,49]},"visibility":"default","docs":"Makes a new value with the day of month (starting from 1) changed.\n\n# Errors\n\nReturns `None` when:\n\n- The resulting date does not exist (for example `day(31)` in April).\n- In case of [`DateTime<Tz>`] if the resulting date and time fall within a timezone\n  transition such as from DST to standard time.\n- The value for `day` is out of range.\n\n[`DateTime<Tz>`]: crate::DateTime","links":{"crate::DateTime":"0:2165:2340"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2908-0:3237:2427":{"id":"b:2:2908-0:3237:2427","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2902-0:2746:2364":{"id":"b:2:2902-0:2746:2364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2459:3808":{"id":"0:2459:3808","crate_id":0,"name":"colons","span":{"filename":"src/format/mod.rs","begin":[288,4],"end":[288,22]},"visibility":"public","docs":"Separator between hours, minutes and seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:45:2661":{"id":"0:45:2661","crate_id":0,"name":"try_milliseconds","span":{"filename":"src/time_delta.rs","begin":[241,4],"end":[250,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of milliseconds.\n\n# Errors\n\nReturns `None` the `TimeDelta` would be out of bounds, i.e. when `milliseconds` is more\nthan `i64::MAX` or less than `-i64::MAX`. Notably, this is not the same as `i64::MIN`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["milliseconds",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:736-0:2608:2348":{"id":"b:5:736-0:2608:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32165:9507-0:3208:2376":{"id":"a:2:32165:9507-0:3208:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:181:2987":{"id":"0:181:2987","crate_id":0,"name":"with_timezone","span":{"filename":"src/date.rs","begin":[256,4],"end":[258,5]},"visibility":"public","docs":"Changes the associated time zone.\nThis does not change the actual `Date` (but will change the string representation).","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tz",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Tz2"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Tz2","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2746:2364":{"id":"0:2746:2364","crate_id":0,"name":"Days","span":{"filename":"src/naive/mod.rs","begin":[135,0],"end":[135,32]},"visibility":"public","docs":"A duration in calendar days.\n\nThis is useful because when using `TimeDelta` it is possible that adding `TimeDelta::days(1)`\ndoesn't increment the day value as expected due to it being a fixed number of seconds. This\ndifference applies only when dealing with `DateTime<TimeZone>` data types and in other cases\n`TimeDelta::days(n)` and `Days::new(n)` are equivalent.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:1545","a:2:32106:236-0:2746:2364","a:2:3121:246-0:2746:2364","a:2:3156:9919-0:2746:2364","a:2:32165:9507-0:2746:2364","a:2:41968:9655-0:2746:2364","a:2:41969:9654-0:2746:2364","b:2:2913-0:2746:2364","b:2:2898-0:2746:2364","b:2:2625-0:2746:2364","b:2:2902-0:2746:2364","b:2:2628-0:2746:2364","b:2:3737-0:2746:2364","b:2:2908-0:2746:2364","b:5:736-0:2746:2364","0:1111","0:2749","0:2751","0:532","0:2764","0:2752","0:1334","0:536","0:1114","0:2754","0:2762","0:2756","0:2760","0:2759","0:1331"]}}},"a:2:3121:246-0:3062:2367":{"id":"a:2:3121:246-0:3062:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:934":{"id":"0:934","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[163,0],"end":[167,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:935:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2610":{"id":"0:2610","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[94,9],"end":[94,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:207:2374":{"id":"0:207:2374","crate_id":0,"name":"month","span":{"filename":"src/date.rs","begin":[398,4],"end":[400,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:1993-0:2723:2350":{"id":"b:0:1993-0:2723:2350","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[52,0],"end":[80,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Timelike","id":"0:2099:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"SubsecRound","id":"0:1990:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1995:8591","0:1996:8596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2126":{"id":"0:2126","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,9],"end":[52,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2127:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2137:1280":{"id":"0:2137:1280","crate_id":0,"name":"partial_cmp","span":{"filename":"src/time_delta.rs","begin":[52,46],"end":[52,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1450:7310":{"id":"0:1450:7310","crate_id":0,"name":"from_hms_nano","span":{"filename":"src/naive/time/mod.rs","begin":[401,4],"end":[403,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from hour, minute, second and nanosecond.\n\nThe nanosecond part is allowed to exceed 1,000,000,000 in order to represent a\n[leap second](#leap-second-handling), but only when `sec == 59`.\n\n# Panics\n\nPanics on invalid hour, minute, second and/or nanosecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `from_hms_nano_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_hms_nano_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2764":{"id":"0:2764","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[134,62],"end":[134,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2711:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2765:470"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2646":{"id":"0:2646","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2164,9],"end":[2164,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2647:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2672:858":{"id":"0:2672:858","crate_id":0,"name":"hash","span":{"filename":"src/naive/datetime/mod.rs","begin":[69,24],"end":[69,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:233":{"id":"0:233","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[470,0],"end":[474,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"Tz2","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:236:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2105:3481":{"id":"0:2105:3481","crate_id":0,"name":"with_hour","span":{"filename":"src/traits.rs","begin":[297,4],"end":[297,51]},"visibility":"default","docs":"Makes a new value with the hour number changed.\n\nReturns `None` when the resulting value would be invalid.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:5:736-0:3237:2427":{"id":"b:5:736-0:3237:2427","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1255:2612":{"id":"0:1255:2612","crate_id":0,"name":"MAX","span":{"filename":"src/naive/datetime/mod.rs","begin":[947,4],"end":[947,78]},"visibility":"public","docs":"The maximum possible `NaiveDateTime`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"b:2:2913-0:2706:2365":{"id":"b:2:2913-0:2706:2365","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2898-0:3154:2343":{"id":"b:2:2898-0:3154:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:429:3031":{"id":"0:429:3031","crate_id":0,"name":"day","span":{"filename":"src/datetime/mod.rs","begin":[1189,4],"end":[1191,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:883:1163":{"id":"0:883:1163","crate_id":0,"name":"new","span":{"filename":"src/format/strftime.rs","begin":[226,4],"end":[235,5]},"visibility":"public","docs":"Creates a new parsing iterator from a `strftime`-like format string.\n\n# Errors\n\nWhile iterating [`Item::Error`] will be returned if the format string contains an invalid\nor unrecognized formatting specifier.\n\n# Example\n\n```\nuse chrono::format::*;\n\nlet strftime_parser = StrftimeItems::new(\"%F\"); // %F: year-month-day (ISO 8601)\n\nconst ISO8601_YMD_ITEMS: &[Item<'static>] = &[\n    Item::Numeric(Numeric::Year, Pad::Zero),\n    Item::Literal(\"-\"),\n    Item::Numeric(Numeric::Month, Pad::Zero),\n    Item::Literal(\"-\"),\n    Item::Numeric(Numeric::Day, Pad::Zero),\n];\nassert!(strftime_parser.eq(ISO8601_YMD_ITEMS.iter().cloned()));\n```","links":{"`Item::Error`":"0:2542:136"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:2356:3731":{"id":"b:2:2902-0:2356:3731","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2902-0:2578:3859":{"id":"b:2:2902-0:2578:3859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:736-0:3042:2336":{"id":"b:5:736-0:3042:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2913-0:3093:2371":{"id":"b:2:2913-0:3093:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3150":{"id":"0:3150","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[231,16],"end":[231,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3151:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3152":{"id":"0:3152","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[231,27],"end":[231,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13187:2881":{"id":"2:13187:2881","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43742:9254","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3052":{"id":"0:3052","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[43,15],"end":[43,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3053:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32165:9507-0:2741:2366":{"id":"a:2:32165:9507-0:2741:2366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2741:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2913-0:2663:2349":{"id":"b:2:2913-0:2663:2349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2898-0:3228:2375":{"id":"b:2:2898-0:3228:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:409:3387":{"id":"0:409:3387","crate_id":0,"name":"parse_from_rfc2822","span":{"filename":"src/datetime/mod.rs","begin":[997,4],"end":[1002,5]},"visibility":"public","docs":"Parses an RFC 2822 date-and-time string into a `DateTime<FixedOffset>` value.\n\nThis parses valid RFC 2822 datetime strings (such as `Tue, 1 Jul 2003 10:52:37 +0200`)\nand returns a new [`DateTime`] instance with the parsed timezone as the [`FixedOffset`].\n\nRFC 2822 is the internet message standard that specifies the representation of times in HTTP\nand email headers. It is the 2001 revision of RFC 822, and is itself revised as RFC 5322 in\n2008.\n\n# Support for the obsolete date format\n\n- A 2-digit year is interpreted to be a year in 1950-2049.\n- The standard allows comments and whitespace between many of the tokens. See [4.3] and\n  [Appendix A.5]\n- Single letter 'military' time zone names are parsed as a `-0000` offset.\n  They were defined with the wrong sign in RFC 822 and corrected in RFC 2822. But because\n  the meaning is now ambiguous, the standard says they should be be considered as `-0000`\n  unless there is out-of-band information confirming their meaning.\n  The exception is `Z`, which remains identical to `+0000`.\n\n[4.3]: https://www.rfc-editor.org/rfc/rfc2822#section-4.3\n[Appendix A.5]: https://www.rfc-editor.org/rfc/rfc2822#appendix-A.5\n\n# Example\n\n```\n# use chrono::{DateTime, FixedOffset, TimeZone};\nassert_eq!(\n    DateTime::parse_from_rfc2822(\"Wed, 18 Feb 2015 23:16:09 GMT\").unwrap(),\n    FixedOffset::east_opt(0).unwrap().with_ymd_and_hms(2015, 2, 18, 23, 16, 9).unwrap()\n);\n```","links":{"`DateTime`":"0:2165:2340","`FixedOffset`":"0:2766:2346"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2325:3709":{"id":"0:2325:3709","crate_id":0,"name":"WeekdayFromMon","span":{"filename":"src/format/mod.rs","begin":[131,4],"end":[131,18]},"visibility":"default","docs":"Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1014:2355":{"id":"0:1014:2355","crate_id":0,"name":"MIN_DATE","span":{"filename":"src/naive/date/mod.rs","begin":[108,0],"end":[108,47]},"visibility":"public","docs":"The minimum possible `NaiveDate` (January 1, 262145 BCE).","links":{},"attrs":["#[deprecated(since = \"0.4.20\", note = \"Use NaiveDate::MIN instead\")]"],"deprecation":{"since":"0.4.20","note":"Use NaiveDate::MIN instead"},"inner":{"constant":{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"NaiveDate::MIN","value":null,"is_literal":false}}},"0:2065:1163":{"id":"0:2065:1163","crate_id":0,"name":"new","span":{"filename":"src/month.rs","begin":[233,4],"end":[235,5]},"visibility":"public","docs":"Construct a new `Months` from a number of months","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["num",{"primitive":"u32"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2491":{"id":"0:2491","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[296,22],"end":[296,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2492:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:229":{"id":"0:229","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[467,0],"end":[467,76]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13190:16073":{"id":"2:13190:16073","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44010:9257","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2006:8619":{"id":"0:2006:8619","crate_id":0,"name":"duration_trunc","span":{"filename":"src/round.rs","begin":[165,4],"end":[167,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["duration",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:1998:2370","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50:2683":{"id":"0:50:2683","crate_id":0,"name":"num_hours","span":{"filename":"src/time_delta.rs","begin":[290,4],"end":[292,5]},"visibility":"public","docs":"Returns the total number of whole hours in the `TimeDelta`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2140":{"id":"0:2140","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,63],"end":[52,68]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2141:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2142":{"id":"0:2142","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,70],"end":[52,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2143:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2628-0:2183:2341":{"id":"b:2:2628-0:2183:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32106:236-0:2422:3788":{"id":"a:2:32106:236-0:2422:3788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2628-0:2521:172":{"id":"b:2:2628-0:2521:172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1099:3042":{"id":"0:1099:3042","crate_id":0,"name":"with_ordinal0","span":{"filename":"src/naive/date/mod.rs","begin":[1861,4],"end":[1864,5]},"visibility":"default","docs":"Makes a new `NaiveDate` with the day of year (starting from 0) changed.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (`with_ordinal0(365)` in a non-leap year).\n- The value for `ordinal0` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Datelike};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 1, 1).unwrap().with_ordinal0(59),\n           Some(NaiveDate::from_ymd_opt(2015, 3, 1).unwrap()));\nassert_eq!(NaiveDate::from_ymd_opt(2015, 1, 1).unwrap().with_ordinal0(365),\n           None); // 2015 had only 365 days\n\nassert_eq!(NaiveDate::from_ymd_opt(2016, 1, 1).unwrap().with_ordinal0(59),\n           Some(NaiveDate::from_ymd_opt(2016, 2, 29).unwrap()));\nassert_eq!(NaiveDate::from_ymd_opt(2016, 1, 1).unwrap().with_ordinal0(365),\n           Some(NaiveDate::from_ymd_opt(2016, 12, 31).unwrap()));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:9507-0:3237:2427":{"id":"a:2:32165:9507-0:3237:2427","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2904:818":{"id":"2:2904:818","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:2679":{"id":"0:49:2679","crate_id":0,"name":"num_days","span":{"filename":"src/time_delta.rs","begin":[284,4],"end":[286,5]},"visibility":"public","docs":"Returns the total number of whole days in the `TimeDelta`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:797:3072":{"id":"0:797:3072","crate_id":0,"name":"parse_and_remainder","span":{"filename":"src/format/parse.rs","begin":[271,0],"end":[281,1]},"visibility":"public","docs":"Tries to parse given string into `parsed` with given formatting items.\nReturns `Ok` with a slice of the unparsed remainder.\n\nThis particular date and time parser is:\n\n- Greedy. It will consume the longest possible prefix.\n  For example, `April` is always consumed entirely when the long month name is requested;\n  it equally accepts `Apr`, but prefers the longer prefix in this case.\n\n- Padding-agnostic (for numeric items).\n  The [`Pad`](./enum.Pad.html) field is completely ignored,\n  so one can prepend any number of zeroes before numbers.\n\n- (Still) obeying the intrinsic parsing width. This allows, for example, parsing `HHMMSS`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["parsed",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"super::Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["s",{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"primitive":"str"}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"super::ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'b","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"super::Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2628:788":{"id":"0:2628:788","crate_id":0,"name":"fmt","span":{"filename":"src/naive/date/mod.rs","begin":[2128,9],"end":[2128,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:2183:2341":{"id":"a:2:3121:246-0:2183:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3737-0:2300:3683":{"id":"b:2:3737-0:2300:3683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2913-0:2183:2341":{"id":"b:2:2913-0:2183:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32106:236-0:3237:2427":{"id":"a:2:32106:236-0:3237:2427","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:361:3226":{"id":"0:361:3226","crate_id":0,"name":"checked_add_days","span":{"filename":"src/datetime/mod.rs","begin":[519,4],"end":[530,5]},"visibility":"public","docs":"Add a duration in [`Days`] to the date part of the `DateTime`.\n\n# Errors\n\nReturns `None` if:\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.\n- The resulting UTC datetime would be out of range.\n- The resulting local datetime would be out of range (unless `days` is zero).","links":{"`Days`":"0:2746:2364"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3084":{"id":"0:3084","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[58,34],"end":[58,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:127-0:1941:2352":{"id":"0:127-0:1941:2352","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[543,28],"end":[543,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::TimeZone","name":"TimeZone","id":"0:1941:2352","glob":false}}},"0:2636":{"id":"0:2636","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2128,35],"end":[2128,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2637:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13228:34975":{"id":"2:13228:34975","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12332:459","str::splitn":"2:13225:34973","self::pattern":"2:12848:9229"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43878:9264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:9245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:9919-0:3154:2343":{"id":"a:2:3156:9919-0:3154:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1539-0:2723:2350":{"id":"0:1539-0:2723:2350","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[27,0],"end":[27,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::time::NaiveTime","name":"NaiveTime","id":"0:2723:2350","glob":false}}},"0:475:470":{"id":"0:475:470","crate_id":0,"name":"cmp","span":{"filename":"src/datetime/mod.rs","begin":[1450,4],"end":[1452,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3053:463":{"id":"0:3053:463","crate_id":0,"name":"clone","span":{"filename":"src/offset/utc.rs","begin":[43,15],"end":[43,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3101:788":{"id":"0:3101:788","crate_id":0,"name":"fmt","span":{"filename":"src/round.rs","begin":[247,9],"end":[247,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:1153":{"id":"0:69:1153","crate_id":0,"name":"neg","span":{"filename":"src/time_delta.rs","begin":[449,4],"end":[455,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2291":{"id":"0:2291","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[78,22],"end":[78,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2292:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1268:3035":{"id":"0:1268:3035","crate_id":0,"name":"iso_week","span":{"filename":"src/naive/datetime/mod.rs","begin":[1128,4],"end":[1130,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2001:8619":{"id":"0:2001:8619","crate_id":0,"name":"duration_trunc","span":{"filename":"src/round.rs","begin":[155,4],"end":[155,76]},"visibility":"default","docs":"Return a copy truncated by TimeDelta.\n\n# Example\n``` rust\n# use chrono::{DurationRound, TimeDelta, NaiveDate};\nlet dt = NaiveDate::from_ymd_opt(2018, 1, 11)\n    .unwrap()\n    .and_hms_milli_opt(12, 0, 0, 154)\n    .unwrap()\n    .and_utc();\nassert_eq!(\n    dt.duration_trunc(TimeDelta::try_milliseconds(10).unwrap()).unwrap().to_string(),\n    \"2018-01-11 12:00:00.150 UTC\"\n);\nassert_eq!(\n    dt.duration_trunc(TimeDelta::try_days(1).unwrap()).unwrap().to_string(),\n    \"2018-01-11 00:00:00 UTC\"\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["duration",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:1998:2370","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:3121:246-0:2368:3074":{"id":"a:2:3121:246-0:2368:3074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2898-0:2723:2350":{"id":"b:2:2898-0:2723:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:251:198":{"id":"0:251:198","crate_id":0,"name":"Output","span":{"filename":"src/date.rs","begin":[497,4],"end":[497,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:1443":{"id":"0:1443","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[244,0],"end":[903,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1444:7272","0:1445:2941","0:1446:7286","0:1447:2950","0:1448:7298","0:1449:2959","0:1450:7310","0:1451:2968","0:1452:7324","0:1453:3307","0:1454:3421","0:1455:3072","0:1458:6646","0:1459:6681","0:1460:3000","0:1463:3015","0:1467:801","0:1472:2611"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2055:8853":{"id":"0:2055:8853","crate_id":0,"name":"number_from_month","span":{"filename":"src/month.rs","begin":[124,4],"end":[139,5]},"visibility":"public","docs":"Returns a month-of-year number starting from January = 1.\n\n`m`:                     | `January` | `February` | `...` | `December`\n-------------------------| --------- | ---------- | --- | -----\n`m.number_from_month()`: | 1         | 2          | `...` | 12","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:736-0:2280:3666":{"id":"b:5:736-0:2280:3666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32106:236-0:2356:3731":{"id":"a:2:32106:236-0:2356:3731","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2908-0:2746:2364":{"id":"b:2:2908-0:2746:2364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32165:9507-0:2723:2350":{"id":"a:2:32165:9507-0:2723:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1021:3057":{"id":"0:1021:3057","crate_id":0,"name":"from_ymd_opt","span":{"filename":"src/naive/date/mod.rs","begin":[196,4],"end":[204,5]},"visibility":"public","docs":"Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n(year, month and day).\n\n# Errors\n\nReturns `None` if:\n- The specified calendar day does not exist (for example 2023-04-31).\n- The value for `month` or `day` is invalid.\n- `year` is out of range for `NaiveDate`.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet from_ymd_opt = NaiveDate::from_ymd_opt;\n\nassert!(from_ymd_opt(2015, 3, 14).is_some());\nassert!(from_ymd_opt(2015, 0, 14).is_none());\nassert!(from_ymd_opt(2015, 2, 29).is_none());\nassert!(from_ymd_opt(-4, 2, 29).is_some()); // 5 BCE is a leap year\nassert!(from_ymd_opt(400000, 1, 1).is_none());\nassert!(from_ymd_opt(-400000, 1, 1).is_none());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"i32"}],["month",{"primitive":"u32"}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620:3984":{"id":"5:5620:3984","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:9507-0:3154:2343":{"id":"a:2:32165:9507-0:3154:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3143:858":{"id":"0:3143:858","crate_id":0,"name":"hash","span":{"filename":"src/weekday.rs","begin":[32,44],"end":[32,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2059:1788":{"id":"0:2059:1788","crate_id":0,"name":"try_from","span":{"filename":"src/month.rs","begin":[170,4],"end":[186,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:2882:256","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2391:3769":{"id":"0:2391:3769","crate_id":0,"name":"TimezoneOffsetColon","span":{"filename":"src/format/mod.rs","begin":[219,4],"end":[219,23]},"visibility":"default","docs":"Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).\n\nIn the parser, the colon can be omitted and/or surrounded with any amount of whitespace.\nThe offset is limited from `-24:00` to `+24:00`,\nwhich is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2898-0:3237:2427":{"id":"b:2:2898-0:3237:2427","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2628-0:2578:3859":{"id":"b:2:2628-0:2578:3859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5612":{"id":"5:5612","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5613:42356","5:5614:9803","5:5617:42357","5:5620:3984","5:5628:42358","5:5629:42359","5:5630:8268","5:5631:36204","5:5632:36205"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2041:8774":{"id":"0:2041:8774","crate_id":0,"name":"from_u64","span":{"filename":"src/weekday.rs","begin":[216,4],"end":[227,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["n",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:4681":{"id":"2:13282:4681","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:2247:2887":{"id":"b:2:2898-0:2247:2887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3212:463":{"id":"0:3212:463","crate_id":0,"name":"clone","span":{"filename":"src/month.rs","begin":[227,9],"end":[227,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2165:2340":{"id":"0:2165:2340","crate_id":0,"name":"DateTime","span":{"filename":"src/datetime/mod.rs","begin":[59,0],"end":[62,1]},"visibility":"public","docs":"ISO 8601 combined date and time with time zone.\n\nThere are some constructors implemented here (the `from_*` methods), but\nthe general-purpose constructors are all via the methods on the\n[`TimeZone`](./offset/trait.TimeZone.html) implementations.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:335","0:379","0:408","0:416","a:2:32106:236-0:2165:2340","a:2:3121:246-0:2165:2340","a:2:3156:9919-0:2165:2340","a:2:32165:9507-0:2165:2340","a:2:41968:9655-0:2165:2340","a:2:41969:9654-0:2165:2340","b:0:1993-0:2165:2340","b:2:2913-0:2165:2340","b:2:2898-0:2165:2340","b:2:2625-0:2165:2340","b:2:2902-0:2165:2340","b:2:2628-0:2165:2340","b:2:3737-0:2165:2340","b:2:2908-0:2165:2340","b:5:736-0:2165:2340","b:5:5863-0:2165:2340","0:811","0:556","0:476","0:498","0:2171","0:540","0:424","0:484","0:510","0:543","0:399","0:469","0:480","0:532","0:554","0:395","0:546","0:550","0:467","0:2169","0:506","0:463","0:389","0:397","0:536","0:387","0:385","0:391","0:449","0:2002","0:502","0:520","0:488","0:494","0:516","0:558","0:524","0:513","0:473","0:528","0:393","0:491","0:401"]}}},"0:2029:3964":{"id":"0:2029:3964","crate_id":0,"name":"number_from_monday","span":{"filename":"src/weekday.rs","begin":[104,4],"end":[106,5]},"visibility":"public","docs":"Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)\n\n`w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`\n------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----\n`w.number_from_monday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 7","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:736-0:2625:5703":{"id":"b:5:736-0:2625:5703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2383:3757":{"id":"0:2383:3757","crate_id":0,"name":"Nanosecond3","span":{"filename":"src/format/mod.rs","begin":[205,4],"end":[205,15]},"visibility":"default","docs":"Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:3145:2373":{"id":"0:3145:2373","crate_id":0,"name":"ParseWeekdayError","span":{"filename":"src/weekday.rs","begin":[232,0],"end":[234,1]},"visibility":"public","docs":"An error resulting from reading `Weekday` value with `FromStr`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32106:236-0:3145:2373","a:2:3121:246-0:3145:2373","a:2:3156:9919-0:3145:2373","a:2:32165:9507-0:3145:2373","a:2:41968:9655-0:3145:2373","a:2:41969:9654-0:3145:2373","b:2:2913-0:3145:2373","b:2:2898-0:3145:2373","b:2:2625-0:3145:2373","b:2:2902-0:3145:2373","b:2:2628-0:3145:2373","b:2:3737-0:3145:2373","b:2:2908-0:3145:2373","b:5:736-0:3145:2373","b:5:5863-0:3145:2373","0:3149","0:2045","0:2042","0:3150","0:2043","0:3152","0:3147"]}}},"2:13169:34939":{"id":"2:13169:34939","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12351:1833"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:396:818":{"id":"0:396:818","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[914,4],"end":[916,5]},"visibility":"default","docs":"Convert this `DateTime<FixedOffset>` instance into a `DateTime<Utc>` instance.\n\nConversion is performed via [`DateTime::with_timezone`], accounting for the timezone\ndifference.","links":{"`DateTime::with_timezone`":"0:353:2987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2243:858":{"id":"0:2243:858","crate_id":0,"name":"hash","span":{"filename":"src/format/parsed.rs","begin":[128,47],"end":[128,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2353":{"id":"0:2353","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[102,38],"end":[102,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2354:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1489":{"id":"0:1489","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1233,0],"end":[1245,1]},"visibility":"default","docs":"Add `std::time::Duration` to `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the addition ignores integral number of days.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1490:198","0:1491:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2625:5703":{"id":"0:2625:5703","crate_id":0,"name":"NaiveDateDaysIterator","span":{"filename":"src/naive/date/mod.rs","begin":[2129,0],"end":[2131,1]},"visibility":"public","docs":"Iterator over `NaiveDate` with a step size of one day.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32106:236-0:2625:5703","a:2:3121:246-0:2625:5703","a:2:3156:9919-0:2625:5703","a:2:32165:9507-0:2625:5703","a:2:41968:9655-0:2625:5703","a:2:41969:9654-0:2625:5703","b:2:2913-0:2625:5703","b:2:2898-0:2625:5703","b:2:2625-0:2625:5703","b:2:8196-0:2625:5703","b:2:2902-0:2625:5703","b:2:2628-0:2625:5703","b:2:3737-0:2625:5703","b:2:2908-0:2625:5703","b:5:736-0:2625:5703","0:2632","0:2636","0:2640","0:2630","0:1134","0:2629","0:2627","0:1131","0:2638","0:1127","0:1132","0:2642","0:2635"]}}},"0:1498:198":{"id":"0:1498:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/time/mod.rs","begin":[1332,4],"end":[1332,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2628-0:2174:2886":{"id":"b:2:2628-0:2174:2886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3737-0:2174:2886":{"id":"b:2:3737-0:2174:2886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1100":{"id":"0:1100","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[1904,0],"end":[1911,1]},"visibility":"default","docs":"Add `TimeDelta` to `NaiveDate`.\n\nThis discards the fractional days in `TimeDelta`, rounding to the closest integral number of\ndays towards `TimeDelta::zero()`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDate::checked_add_signed`] to get an `Option` instead.\n\n# Example\n\n```\nuse chrono::{NaiveDate, TimeDelta};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nassert_eq!(from_ymd(2014, 1, 1) + TimeDelta::zero(), from_ymd(2014, 1, 1));\nassert_eq!(from_ymd(2014, 1, 1) + TimeDelta::try_seconds(86399).unwrap(), from_ymd(2014, 1, 1));\nassert_eq!(\n    from_ymd(2014, 1, 1) + TimeDelta::try_seconds(-86399).unwrap(),\n    from_ymd(2014, 1, 1)\n);\nassert_eq!(from_ymd(2014, 1, 1) + TimeDelta::try_days(1).unwrap(), from_ymd(2014, 1, 2));\nassert_eq!(from_ymd(2014, 1, 1) + TimeDelta::try_days(-1).unwrap(), from_ymd(2013, 12, 31));\nassert_eq!(from_ymd(2014, 1, 1) + TimeDelta::try_days(364).unwrap(), from_ymd(2014, 12, 31));\nassert_eq!(\n    from_ymd(2014, 1, 1) + TimeDelta::try_days(365 * 4 + 1).unwrap(),\n    from_ymd(2018, 1, 1)\n);\nassert_eq!(\n    from_ymd(2014, 1, 1) + TimeDelta::try_days(365 * 400 + 97).unwrap(),\n    from_ymd(2414, 1, 1)\n);\n```\n\n[`NaiveDate::checked_add_signed`]: crate::NaiveDate::checked_add_signed","links":{"crate::NaiveDate::checked_add_signed":"0:1056:2993"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1101:198","0:1102:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41969:9654-0:3062:2367":{"id":"a:2:41969:9654-0:3062:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:530:198":{"id":"0:530:198","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1707,4],"end":[1707,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2534:1956":{"id":"0:2534:1956","crate_id":0,"name":"0","span":{"filename":"src/format/mod.rs","begin":[339,15],"end":[339,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Box","id":"5:304:3655","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}},"0:1491:295":{"id":"0:1491:295","crate_id":0,"name":"add","span":{"filename":"src/naive/time/mod.rs","begin":[1237,4],"end":[1244,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:8198:172":{"id":"2:8198:172","crate_id":2,"name":"Item","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"a:2:3156:9919-0:2578:3859":{"id":"a:2:3156:9919-0:2578:3859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:100:2758":{"id":"0:100:2758","crate_id":0,"name":"description","span":{"filename":"src/time_delta.rs","begin":[587,4],"end":[589,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1230:3172":{"id":"0:1230:3172","crate_id":0,"name":"timestamp_nanos_opt","span":{"filename":"src/naive/datetime/mod.rs","begin":[419,4],"end":[421,5]},"visibility":"public","docs":"Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.\n\nNote that this does *not* account for the timezone!\nThe true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.\n\n# Errors\n\nAn `i64` with nanosecond precision can span a range of ~584 years. This function returns\n`None` on an out of range `NaiveDateTime`.\n\nThe dates that can be represented as nanoseconds are between 1677-09-21T00:12:43.145224192\nand 2262-04-11T23:47:16.854775807.","links":{},"attrs":["#[deprecated(since = \"0.4.35\", note =\n\"use `.and_utc().timestamp_nanos_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.35","note":"use `.and_utc().timestamp_nanos_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:2625:5703":{"id":"a:2:3121:246-0:2625:5703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3121:246-0:2663:2349":{"id":"a:2:3121:246-0:2663:2349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:173:2972":{"id":"0:173:2972","crate_id":0,"name":"succ","span":{"filename":"src/date.rs","begin":[206,4],"end":[208,5]},"visibility":"public","docs":"Makes a new `Date` for the next date.\n\nPanics when `self` is the last representable date.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"Use succ_opt() instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"Use succ_opt() instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1152":{"id":"0:1152","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2314,0],"end":[2318,1]},"visibility":"default","docs":"The default value for a NaiveDate is 1st of January 1970.\n\n# Example\n\n```rust\nuse chrono::NaiveDate;\n\nlet default_date = NaiveDate::default();\nassert_eq!(default_date, NaiveDate::from_ymd_opt(1970, 1, 1).unwrap());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2950:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1153:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1517:788":{"id":"0:1517:788","crate_id":0,"name":"fmt","span":{"filename":"src/naive/time/mod.rs","begin":[1576,4],"end":[1578,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2627:2885":{"id":"2:2627:2885","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:2457:3803":{"id":"b:2:2898-0:2457:3803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1027:3306":{"id":"0:1027:3306","crate_id":0,"name":"from_num_days_from_ce_opt","span":{"filename":"src/naive/date/mod.rs","begin":[378,4],"end":[385,5]},"visibility":"public","docs":"Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\nJanuary 1, 1 being day 1.\n\n# Errors\n\nReturns `None` if the date is out of range.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet from_ndays_opt = NaiveDate::from_num_days_from_ce_opt;\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nassert_eq!(from_ndays_opt(730_000), Some(from_ymd(1999, 9, 3)));\nassert_eq!(from_ndays_opt(1), Some(from_ymd(1, 1, 1)));\nassert_eq!(from_ndays_opt(0), Some(from_ymd(0, 12, 31)));\nassert_eq!(from_ndays_opt(-1), Some(from_ymd(0, 12, 30)));\nassert_eq!(from_ndays_opt(100_000_000), None);\nassert_eq!(from_ndays_opt(-100_000_000), None);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["days",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:2475:3806":{"id":"b:2:2902-0:2475:3806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1918":{"id":"0:1918","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[77,0],"end":[145,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1920:2930","0:1921:7654","0:1922:7656","0:1923:1040"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3121:246-0:3145:2373":{"id":"a:2:3121:246-0:3145:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1212:2358":{"id":"0:1212:2358","crate_id":0,"name":"MAX_DATETIME","span":{"filename":"src/naive/datetime/mod.rs","begin":[42,0],"end":[42,59]},"visibility":"public","docs":"The maximum possible `NaiveDateTime`.","links":{},"attrs":["#[deprecated(since = \"0.4.20\", note = \"Use NaiveDateTime::MAX instead\")]"],"deprecation":{"since":"0.4.20","note":"Use NaiveDateTime::MAX instead"},"inner":{"constant":{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"NaiveDateTime::MAX","value":null,"is_literal":false}}},"0:59:2706":{"id":"0:59:2706","crate_id":0,"name":"abs","span":{"filename":"src/time_delta.rs","begin":[377,4],"end":[383,5]},"visibility":"public","docs":"Returns the `TimeDelta` as an absolute (non-negative) value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:9655-0:2123:2332":{"id":"a:2:41968:9655-0:2123:2332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41969:9654-0:2174:2886":{"id":"a:2:41969:9654-0:2174:2886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1538-0:2706:2365":{"id":"0:1538-0:2706:2365","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[26,0],"end":[26,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::isoweek::IsoWeek","name":"IsoWeek","id":"0:2706:2365","glob":false}}},"b:2:2913-0:3049:2347":{"id":"b:2:2913-0:3049:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:219:3038":{"id":"0:219:3038","crate_id":0,"name":"with_month0","span":{"filename":"src/date.rs","begin":[441,4],"end":[443,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:2644:5704":{"id":"b:2:2908-0:2644:5704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3235":{"id":"0:3235","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[245,27],"end":[245,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2655":{"id":"0:2655","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2164,35],"end":[2164,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2656:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3137":{"id":"0:3137","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[32,24],"end":[32,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2251":{"id":"0:2251","crate_id":0,"name":null,"span":{"filename":"src/format/strftime.rs","begin":[188,9],"end":[188,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2253:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1325":{"id":"0:1325","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1928,0],"end":[1934,1]},"visibility":"default","docs":"Subtract `Months` from `NaiveDateTime`.\n\nThe result will be clamped to valid days in the resulting month, see\n[`NaiveDateTime::checked_sub_months`] for details.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_sub_months`] to get an `Option` instead.\n\n# Example\n\n```\nuse chrono::{Months, NaiveDate};\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 01, 01).unwrap().and_hms_opt(01, 00, 00).unwrap()\n        - Months::new(11),\n    NaiveDate::from_ymd_opt(2013, 02, 01).unwrap().and_hms_opt(01, 00, 00).unwrap()\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 01, 01).unwrap().and_hms_opt(00, 02, 00).unwrap()\n        - Months::new(12),\n    NaiveDate::from_ymd_opt(2013, 01, 01).unwrap().and_hms_opt(00, 02, 00).unwrap()\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 01, 01).unwrap().and_hms_opt(00, 00, 03).unwrap()\n        - Months::new(13),\n    NaiveDate::from_ymd_opt(2012, 12, 01).unwrap().and_hms_opt(00, 00, 03).unwrap()\n);\n```","links":{"`NaiveDateTime::checked_sub_months`":"0:1241:3223"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1326:198","0:1327:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1108":{"id":"0:1108","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[1982,0],"end":[1988,1]},"visibility":"default","docs":"Subtract `Months` from `NaiveDate`.\n\nThe result will be clamped to valid days in the resulting month, see `checked_sub_months` for\ndetails.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `NaiveDate::checked_sub_months` to get an `Option` instead.\n\n# Example\n\n```\nuse chrono::{Months, NaiveDate};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nassert_eq!(from_ymd(2014, 1, 1) - Months::new(11), from_ymd(2013, 2, 1));\nassert_eq!(from_ymd(2014, 1, 1) - Months::new(12), from_ymd(2013, 1, 1));\nassert_eq!(from_ymd(2014, 1, 1) - Months::new(13), from_ymd(2012, 12, 1));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1109:198","0:1110:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1136:172":{"id":"0:1136:172","crate_id":0,"name":"Item","span":{"filename":"src/naive/date/mod.rs","begin":[2170,4],"end":[2170,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2729":{"id":"0:2729","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[215,20],"end":[215,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:793:3071":{"id":"0:793:3071","crate_id":0,"name":"parse","span":{"filename":"src/format/parse.rs","begin":[245,0],"end":[255,1]},"visibility":"public","docs":"Tries to parse given string into `parsed` with given formatting items.\nReturns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\nThere should be no trailing string after parsing;\nuse a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.\n\nThis particular date and time parser is:\n\n- Greedy. It will consume the longest possible prefix.\n  For example, `April` is always consumed entirely when the long month name is requested;\n  it equally accepts `Apr`, but prefers the longer prefix in this case.\n\n- Padding-agnostic (for numeric items).\n  The [`Pad`](./enum.Pad.html) field is completely ignored,\n  so one can prepend any number of whitespace then any number of zeroes before numbers.\n\n- (Still) obeying the intrinsic parsing width. This allows, for example, parsing `HHMMSS`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["parsed",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"super::Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"super::ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"super::Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1540":{"id":"0:1540","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[41,0],"end":[126,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2741:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1542:5716","0:1543:5723","0:1544:2633"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1906:7746":{"id":"0:1906:7746","crate_id":0,"name":"offset_from_local_datetime","span":{"filename":"src/offset/utc.rs","begin":[124,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1228:3161":{"id":"0:1228:3161","crate_id":0,"name":"timestamp_micros","span":{"filename":"src/naive/datetime/mod.rs","begin":[380,4],"end":[382,5]},"visibility":"public","docs":"Returns the number of non-leap *microseconds* since midnight on January 1, 1970.\n\nNote that this does *not* account for the timezone!\nThe true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","links":{},"attrs":["#[deprecated(since = \"0.4.35\", note =\n\"use `.and_utc().timestamp_micros()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.35","note":"use `.and_utc().timestamp_micros()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2722":{"id":"0:65:2722","crate_id":0,"name":"to_std","span":{"filename":"src/time_delta.rs","begin":[428,4],"end":[433,5]},"visibility":"public","docs":"Creates a `std::time::Duration` object from a `TimeDelta`.\n\nThis function errors when duration is less than zero. As standard\nlibrary implementation is limited to non-negative values.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:225:3041":{"id":"0:225:3041","crate_id":0,"name":"with_ordinal","span":{"filename":"src/date.rs","begin":[456,4],"end":[458,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3155:3917":{"id":"0:3155:3917","crate_id":0,"name":"January","span":{"filename":"src/month.rs","begin":[43,4],"end":[43,15]},"visibility":"default","docs":"January","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"0:2112-0:2099:2344":{"id":"0:2112-0:2099:2344","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[596,27],"end":[596,35]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"traits::Timelike","name":"Timelike","id":"0:2099:2344","glob":false}}},"b:2:2913-0:2174:2886":{"id":"b:2:2913-0:2174:2886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:275-0:156:2354":{"id":"0:275-0:156:2354","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[551,15],"end":[551,23]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"date::MAX_DATE","name":"MAX_DATE","id":"0:156:2354","glob":false}}},"0:2171":{"id":"0:2171","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[52,15],"end":[52,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1941:2352","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:2173:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:923-0:2183:2341":{"id":"0:923-0:2183:2341","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[62,0],"end":[62,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"formatting::SecondsFormat","name":"SecondsFormat","id":"0:2183:2341","glob":false}}},"a:2:3121:246-0:3237:2427":{"id":"a:2:3121:246-0:3237:2427","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:736-0:3228:2375":{"id":"b:5:736-0:3228:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:187:3002":{"id":"0:187:3002","crate_id":0,"name":"naive_utc","span":{"filename":"src/date.rs","begin":[294,4],"end":[296,5]},"visibility":"public","docs":"Returns a view to the naive UTC date.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2627":{"id":"0:2627","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2128,9],"end":[2128,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2628:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3737-0:2521:172":{"id":"b:2:3737-0:2521:172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3156:9919-0:3049:2347":{"id":"a:2:3156:9919-0:3049:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3149":{"id":"0:3149","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[231,16],"end":[231,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:48:2678":{"id":"0:48:2678","crate_id":0,"name":"num_weeks","span":{"filename":"src/time_delta.rs","begin":[279,4],"end":[281,5]},"visibility":"public","docs":"Returns the total number of whole weeks in the `TimeDelta`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2133:686":{"id":"0:2133:686","crate_id":0,"name":"eq","span":{"filename":"src/time_delta.rs","begin":[52,31],"end":[52,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1920:2930":{"id":"0:1920:2930","crate_id":0,"name":"single","span":{"filename":"src/offset/mod.rs","begin":[85,4],"end":[90,5]},"visibility":"public","docs":"Returns `Some` if the time zone mapping has a single result.\n\n# Errors\n\nReturns `None` if local time falls in a _fold_ or _gap_ in the local time, or if there was\nan error.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1107:295":{"id":"0:1107:295","crate_id":0,"name":"add","span":{"filename":"src/naive/date/mod.rs","begin":[1956,4],"end":[1958,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["months",{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3167:2561","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1299":{"id":"0:1299","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1647,0],"end":[1656,1]},"visibility":"default","docs":"Add `std::time::Duration` to `NaiveDateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_add_signed`] to get an `Option` instead.","links":{"`NaiveDateTime::checked_add_signed`":"0:1234:2993"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1300:198","0:1301:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3091:858":{"id":"0:3091:858","crate_id":0,"name":"hash","span":{"filename":"src/offset/mod.rs","begin":[58,44],"end":[58,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13166:4633":{"id":"2:13166:4633","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12395:8273"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:2663:2349":{"id":"b:2:2908-0:2663:2349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2625-0:2368:3074":{"id":"b:2:2625-0:2368:3074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2472":{"id":"0:2472","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[283,44],"end":[283,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2473:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1233:3189":{"id":"0:1233:3189","crate_id":0,"name":"timestamp_subsec_nanos","span":{"filename":"src/naive/datetime/mod.rs","begin":[450,4],"end":[452,5]},"visibility":"public","docs":"Returns the number of nanoseconds since the last whole non-leap second.\n\nThe return value ranges from 0 to 999,999,999,\nor for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999,999.","links":{},"attrs":["#[deprecated(since = \"0.4.36\", note =\n\"use `.and_utc().timestamp_subsec_nanos()` instead\")]"],"deprecation":{"since":"0.4.36","note":"use `.and_utc().timestamp_subsec_nanos()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:3015":{"id":"0:198:3015","crate_id":0,"name":"format_with_items","span":{"filename":"src/date.rs","begin":[337,4],"end":[343,5]},"visibility":"public","docs":"Formats the date with the specified formatting items.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272:788":{"id":"0:272:788","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[548,4],"end":[551,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:1993-0:2165:2340":{"id":"b:0:1993-0:2165:2340","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[52,0],"end":[80,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Timelike","id":"0:2099:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"SubsecRound","id":"0:1990:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:1995:8591","0:1996:8596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:398:818":{"id":"0:398:818","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[926,4],"end":[928,5]},"visibility":"default","docs":"Convert this `DateTime<FixedOffset>` instance into a `DateTime<Local>` instance.\n\nConversion is performed via [`DateTime::with_timezone`]. Returns the equivalent value in local\ntime.","links":{"`DateTime::with_timezone`":"0:353:2987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2511":{"id":"0:2511","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[317,22],"end":[317,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2512:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1134":{"id":"0:1134","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2161,0],"end":[2161,47]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:8647:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1305:296":{"id":"0:1305:296","crate_id":0,"name":"add_assign","span":{"filename":"src/naive/datetime/mod.rs","begin":[1687,4],"end":[1689,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2717":{"id":"0:2717","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[19,41],"end":[19,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1472:2611":{"id":"0:1472:2611","crate_id":0,"name":"MIN","span":{"filename":"src/naive/time/mod.rs","begin":[901,4],"end":[901,52]},"visibility":"public","docs":"The earliest possible `NaiveTime`","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"0:557:818":{"id":"0:557:818","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[1859,4],"end":[1861,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"resolved_path":{"name":"SystemTime","id":"1:9445:3069","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:439:3038":{"id":"0:439:3038","crate_id":0,"name":"with_month0","span":{"filename":"src/datetime/mod.rs","begin":[1263,4],"end":[1265,5]},"visibility":"default","docs":"Makes a new `DateTime` with the month number (starting from 0) changed.\n\nSee also the [`NaiveDate::with_month0`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (for example `month0(3)` when day of the month is 31).\n- The value for `month0` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveDate::with_month0`":"0:1095:3038"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2560:858":{"id":"0:2560:858","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[328,38],"end":[328,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2753:788":{"id":"0:2753:788","crate_id":0,"name":"fmt","span":{"filename":"src/naive/mod.rs","begin":[134,22],"end":[134,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1584":{"id":"0:1584","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[34,0],"end":[116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1585:7800","0:1586:3060","0:1587:7809","0:1588:3061","0:1589:3966","0:1590:7815"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1605":{"id":"0:1605","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[171,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1606:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32106:236-0:3049:2347":{"id":"a:2:32106:236-0:3049:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1588:3061":{"id":"0:1588:3061","crate_id":0,"name":"west_opt","span":{"filename":"src/offset/fixed.rs","begin":[97,4],"end":[103,5]},"visibility":"public","docs":"Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.\n\nReturns `None` on the out-of-bound `secs`.\n\n# Example\n\n```\n# #[cfg(feature = \"alloc\")] {\nuse chrono::{FixedOffset, TimeZone};\nlet hour = 3600;\nlet datetime =\n    FixedOffset::west_opt(5 * hour).unwrap().with_ymd_and_hms(2016, 11, 08, 0, 0, 0).unwrap();\nassert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00-05:00\")\n# }\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3073":{"id":"0:3073","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[58,9],"end":[58,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3075:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41969:9654-0:3208:2376":{"id":"a:2:41969:9654-0:3208:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1995:8591":{"id":"0:1995:8591","crate_id":0,"name":"round_subsecs","span":{"filename":"src/round.rs","begin":[56,4],"end":[69,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["digits",{"primitive":"u16"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:9654-0:3228:2375":{"id":"a:2:41969:9654-0:3228:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2116:788":{"id":"0:2116:788","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[683,4],"end":[685,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3237:2427":{"id":"0:3237:2427","crate_id":0,"name":"OutOfRange","span":{"filename":"src/lib.rs","begin":[672,0],"end":[674,1]},"visibility":"public","docs":"Out of range error type used in various converting APIs","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32106:236-0:3237:2427","a:2:3121:246-0:3237:2427","a:2:3156:9919-0:3237:2427","a:2:32165:9507-0:3237:2427","a:2:41968:9655-0:3237:2427","a:2:41969:9654-0:3237:2427","b:2:2913-0:3237:2427","b:2:2898-0:3237:2427","b:2:2625-0:3237:2427","b:2:2902-0:3237:2427","b:2:2628-0:3237:2427","b:2:3737-0:3237:2427","b:2:2908-0:3237:2427","b:5:736-0:3237:2427","b:5:5863-0:3237:2427","0:3241","0:3246","0:2119","0:2115","0:3245","0:3239","0:3248","0:2117","0:3242"]}}},"0:2424":{"id":"0:2424","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[258,9],"end":[258,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2425:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:58:2704":{"id":"0:58:2704","crate_id":0,"name":"checked_sub","span":{"filename":"src/time_delta.rs","begin":[363,4],"end":[373,5]},"visibility":"public","docs":"Subtract two `TimeDelta`s, returning `None` if overflow occurred.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119-0:2766:2346":{"id":"0:119-0:2766:2346","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[541,20],"end":[541,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::FixedOffset","name":"FixedOffset","id":"0:2766:2346","glob":false}}},"0:706:4339":{"id":"0:706:4339","crate_id":0,"name":"set_weekday","span":{"filename":"src/format/parsed.rs","begin":[383,4],"end":[385,5]},"visibility":"public","docs":"Set the [`weekday`](Parsed::weekday) field to the given value.\n\n# Errors\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::weekday":"0:747:2372"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1042:2934":{"id":"0:1042:2934","crate_id":0,"name":"and_hms","span":{"filename":"src/naive/date/mod.rs","begin":[725,4],"end":[727,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date, hour, minute and second.\n\nNo [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;\nuse `NaiveDate::and_hms_*` methods with a subsecond parameter instead.\n\n# Panics\n\nPanics on invalid hour, minute and/or second.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `and_hms_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `and_hms_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35:2623":{"id":"0:35:2623","crate_id":0,"name":"try_weeks","span":{"filename":"src/time_delta.rs","begin":[118,4],"end":[120,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of weeks.\n\nEquivalent to `TimeDelta::try_seconds(weeks * 7 * 24 * 60 * 60)` with\noverflow checks.\n\n# Errors\n\nReturns `None` when the `TimeDelta` would be out of bounds.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["weeks",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1016":{"id":"0:1016","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[123,0],"end":[1440,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1020:5831","0:1021:3057","0:1022:5848","0:1023:4415","0:1024:5865","0:1025:4417","0:1026:5905","0:1027:3306","0:1028:5929","0:1029:5930","0:1030:3421","0:1031:3072","0:1034:3216","0:1035:3223","0:1037:3226","0:1038:3230","0:1041:2925","0:1042:2934","0:1043:2938","0:1044:2946","0:1045:2948","0:1046:2955","0:1047:2957","0:1048:2964","0:1049:2966","0:1052:2972","0:1053:2973","0:1054:2979","0:1055:2980","0:1056:2993","0:1057:2995","0:1058:3000","0:1059:3008","0:1060:3015","0:1064:801","0:1066:6136","0:1067:6143","0:1068:3962","0:1069:5987","0:1079:2611","0:1080:2612"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3051":{"id":"0:3051","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[43,9],"end":[43,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13237:8146":{"id":"2:13237:8146","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12848:9229","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::rmatches":"2:13240:41651"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43960:9266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:9507-0:2578:3859":{"id":"a:2:32165:9507-0:2578:3859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1996:8596":{"id":"0:1996:8596","crate_id":0,"name":"trunc_subsecs","span":{"filename":"src/round.rs","begin":[71,4],"end":[79,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["digits",{"primitive":"u16"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:2368:3074":{"id":"b:2:2898-0:2368:3074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1024:5865":{"id":"0:1024:5865","crate_id":0,"name":"from_isoywd","span":{"filename":"src/naive/date/mod.rs","begin":[260,4],"end":[262,5]},"visibility":"public","docs":"Makes a new `NaiveDate` from the [ISO week date](#week-date)\n(year, week number and day of the week).\nThe resulting `NaiveDate` may have a different year from the input year.\n\n# Panics\n\nPanics if the specified week does not exist in that year, on invalid values for `week`, or\nif the resulting date is out of range for `NaiveDate`.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `from_isoywd_opt()` instead\")]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_isoywd_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"i32"}],["week",{"primitive":"u32"}],["weekday",{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1446:7286":{"id":"0:1446:7286","crate_id":0,"name":"from_hms_milli","span":{"filename":"src/naive/time/mod.rs","begin":[299,4],"end":[301,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from hour, minute, second and millisecond.\n\nThe millisecond part can exceed 1,000\nin order to represent the [leap second](#leap-second-handling).\n\n# Panics\n\nPanics on invalid hour, minute, second and/or millisecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `from_hms_milli_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_hms_milli_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["milli",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1966:7752":{"id":"0:1966:7752","crate_id":0,"name":"offset_from_utc_date","span":{"filename":"src/offset/mod.rs","begin":[576,4],"end":[576,68]},"visibility":"default","docs":"Creates the offset for given UTC `NaiveDate`. This cannot fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:1941:2352","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13225:34973":{"id":"2:13225:34973","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:9229","str::rsplitn":"2:13228:34975"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43860:9265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:437:3037":{"id":"0:437:3037","crate_id":0,"name":"with_month","span":{"filename":"src/datetime/mod.rs","begin":[1247,4],"end":[1249,5]},"visibility":"default","docs":"Makes a new `DateTime` with the month number (starting from 1) changed.\n\nDon't combine multiple `Datelike::with_*` methods. The intermediate value may not exist.\n\nSee also the [`NaiveDate::with_month`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (for example `month(4)` when day of the month is 31).\n- The value for `month` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveDate::with_month`":"0:1094:3037"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:701:4322":{"id":"0:701:4322","crate_id":0,"name":"set_isoyear_mod_100","span":{"filename":"src/format/parsed.rs","begin":[303,4],"end":[308,5]},"visibility":"public","docs":"Set the [`isoyear_mod_100`](Parsed::isoyear_mod_100) field, that is part of an\n[ISO 8601 week date], to the given value.\n\nWhen set it implies that the year is not negative.\n\nIf this field is set while the [`isoyear_div_100`](Parsed::isoyear_div_100) field is missing\n(and the full [`isoyear`](Parsed::isoyear) field is also not set), it assumes a default\nvalue for the [`isoyear_div_100`](Parsed::isoyear_div_100) field.\nThe default is 19 when `year_mod_100 >= 70` and 20 otherwise.\n\n[ISO 8601 week date]: crate::NaiveDate#week-date\n\n# Errors\n\nReturns `OUT_OF_RANGE` if `value` is negative or if it is greater than 99.\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::isoyear_div_100":"0:741:4283","Parsed::isoyear_mod_100":"0:742:4284","crate::NaiveDate#week-date":"0:2608:2348","Parsed::isoyear":"0:740:4282"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:394:818":{"id":"0:394:818","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[903,4],"end":[905,5]},"visibility":"default","docs":"Convert this `DateTime<Utc>` instance into a `DateTime<Local>` instance.\n\nConversion is performed via [`DateTime::with_timezone`], accounting for the difference in timezones.","links":{"`DateTime::with_timezone`":"0:353:2987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2749":{"id":"0:2749","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[134,9],"end":[134,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2750:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2042":{"id":"0:2042","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[237,0],"end":[237,47]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","source","provide","description","type_id"],"trait":{"name":"Error","id":"2:2961:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:963:135":{"id":"0:963:135","crate_id":0,"name":"Err","span":{"filename":"src/format/mod.rs","begin":[532,4],"end":[532,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:441:3039":{"id":"0:441:3039","crate_id":0,"name":"with_day","span":{"filename":"src/datetime/mod.rs","begin":[1279,4],"end":[1281,5]},"visibility":"default","docs":"Makes a new `DateTime` with the day of month (starting from 1) changed.\n\nSee also the [`NaiveDate::with_day`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (for example `day(31)` in April).\n- The value for `day` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveDate::with_day`":"0:1096:3039"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:698:4314":{"id":"0:698:4314","crate_id":0,"name":"set_isoyear","span":{"filename":"src/format/parsed.rs","begin":[263,4],"end":[265,5]},"visibility":"public","docs":"Set the [`isoyear`](Parsed::isoyear) field, that is part of an [ISO 8601 week date], to the\ngiven value.\n\nThe value can be negative, unlike the [`isoyear_div_100`](Parsed::isoyear_div_100) and\n[`isoyear_mod_100`](Parsed::isoyear_mod_100) fields.\n\n[ISO 8601 week date]: crate::NaiveDate#week-date\n\n# Errors\n\nReturns `OUT_OF_RANGE` if `value` is outside the range of an `i32`.\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::isoyear_div_100":"0:741:4283","crate::NaiveDate#week-date":"0:2608:2348","Parsed::isoyear_mod_100":"0:742:4284","Parsed::isoyear":"0:740:4282"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:3154:2343":{"id":"b:2:2625-0:3154:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1592:135":{"id":"0:1592:135","crate_id":0,"name":"Err","span":{"filename":"src/offset/fixed.rs","begin":[120,4],"end":[120,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:126-0:1939:2351":{"id":"0:126-0:1939:2351","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[543,20],"end":[543,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Offset","name":"Offset","id":"0:1939:2351","glob":false}}},"0:1101:198":{"id":"0:1101:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/date/mod.rs","begin":[1905,4],"end":[1905,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2158:2335":{"id":"0:2158:2335","crate_id":0,"name":"Date","span":{"filename":"src/date.rs","begin":[58,0],"end":[61,1]},"visibility":"public","docs":"ISO 8601 calendar date with time zone.\n\nYou almost certainly want to be using a [`NaiveDate`] instead of this type.\n\nThis type primarily exists to aid in the construction of DateTimes that\nhave a timezone by way of the [`TimeZone`] datelike constructors (e.g.\n[`TimeZone::ymd`]).\n\nThis type should be considered ambiguous at best, due to the inherent lack\nof precision required for the time zone resolution.\n\nThere are some guarantees on the usage of `Date<Tz>`:\n\n- If properly constructed via [`TimeZone::ymd`] and others without an error,\n  the corresponding local date should exist for at least a moment.\n  (It may still have a gap from the offset changes.)\n\n- The `TimeZone` is free to assign *any* [`Offset`](crate::offset::Offset) to the\n  local date, as long as that offset did occur in given day.\n\n  For example, if `2015-03-08T01:59-08:00` is followed by `2015-03-08T03:00-07:00`,\n  it may produce either `2015-03-08-08:00` or `2015-03-08-07:00`\n  but *not* `2015-03-08+00:00` and others.\n\n- Once constructed as a full `DateTime`, [`DateTime::date`] and other associated\n  methods should return those for the original `Date`. For example, if `dt =\n  tz.ymd_opt(y,m,d).unwrap().hms(h,n,s)` were valid, `dt.date() == tz.ymd_opt(y,m,d).unwrap()`.\n\n- The date is timezone-agnostic up to one day (i.e. practically always),\n  so the local date and UTC date should be equal for most cases\n  even though the raw calculation between `NaiveDate` and `TimeDelta` may not.","links":{"crate::offset::Offset":"0:1939:2351","`DateTime::date`":"0:340:2353","`TimeZone`":"0:1941:2352","`NaiveDate`":"0:2608:2348","`TimeZone::ymd`":"0:1945:4121"},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"Use `NaiveDate` or `DateTime<Tz>` instead\")]"],"deprecation":{"since":"0.4.23","note":"Use `NaiveDate` or `DateTime<Tz>` instead"},"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:157","0:196","a:2:3121:246-0:2158:2335","a:2:3156:9919-0:2158:2335","a:2:32165:9507-0:2158:2335","a:2:41968:9655-0:2158:2335","a:2:41969:9654-0:2158:2335","b:2:2913-0:2158:2335","b:2:2898-0:2158:2335","b:2:2625-0:2158:2335","b:2:2902-0:2158:2335","b:2:2628-0:2158:2335","b:2:3737-0:2158:2335","b:2:2908-0:2158:2335","b:5:736-0:2158:2335","b:5:5863-0:2158:2335","0:260","0:204","0:233","0:2162","0:253","0:242","0:256","0:245","0:239","0:237","0:229","0:249","0:267","0:263","0:231","0:270"]}}},"0:2061:8774":{"id":"0:2061:8774","crate_id":0,"name":"from_u64","span":{"filename":"src/month.rs","begin":[197,4],"end":[199,5]},"visibility":"default","docs":"Returns an `Option<Month>` from a i64, assuming a 1-index, January = 1.\n\n`Month::from_i64(n: i64)`: | `1`                  | `2`                   | ... | `12`\n---------------------------| -------------------- | --------------------- | ... | -----\n``:                        | Some(Month::January) | Some(Month::February) | ... | Some(Month::December)","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["n",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2021-0:3093:2371":{"id":"0:2021-0:3093:2371","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[583,31],"end":[583,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"round::RoundingError","name":"RoundingError","id":"0:3093:2371","glob":false}}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[887,0],"end":[895,1]},"visibility":"default","docs":"Convert a `DateTime<Utc>` instance into a `DateTime<FixedOffset>` instance.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:392:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32165:9507-0:2280:3666":{"id":"a:2:32165:9507-0:2280:3666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:734:4475":{"id":"0:734:4475","crate_id":0,"name":"to_datetime_with_timezone","span":{"filename":"src/format/parsed.rs","begin":[924,4],"end":[967,5]},"visibility":"public","docs":"Returns a parsed timezone-aware date and time out of given fields,\nwith an additional [`TimeZone`] used to interpret and validate the local date.\n\nThis method is able to determine the combined date and time from date and time, and/or from\na single timestamp field. It checks all fields are consistent with each other.\n\nIf the parsed fields include an UTC offset, it also has to be consistent with the offset in\nthe provided `tz` time zone for that datetime.\n\n# Errors\n\nThis method returns:\n- `IMPOSSIBLE`\n  - if any of the date fields conflict, if a timestamp conflicts with any of the other\n    fields, or if the offset field is set but differs from the offset at that time in the\n    `tz` time zone.\n  - if the local datetime does not exists in the provided time zone (because it falls in a\n    transition due to for example DST).\n- `NOT_ENOUGH` if there are not enough fields set in `Parsed` for a complete datetime, or if\n  the local time in the provided time zone is ambiguous (because it falls in a transition\n  due to for example DST) while there is no offset field or timestamp field set.\n- `OUT_OF_RANGE`\n  - if the value would be outside the range of a [`NaiveDateTime`] or [`FixedOffset`].\n  - if any of the fields of `Parsed` are set to a value beyond their acceptable range.\n  - if the date does not exist.","links":{"`NaiveDateTime`":"0:2663:2349","`TimeZone`":"0:1941:2352","`FixedOffset`":"0:2766:2346"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tz",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Tz"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1258:818":{"id":"0:1258:818","crate_id":0,"name":"from","span":{"filename":"src/naive/datetime/mod.rs","begin":[965,4],"end":[967,5]},"visibility":"default","docs":"Converts a `NaiveDate` to a `NaiveDateTime` of the same date but at midnight.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime};\n\nlet nd = NaiveDate::from_ymd_opt(2016, 5, 28).unwrap();\nlet ndt = NaiveDate::from_ymd_opt(2016, 5, 28).unwrap().and_hms_opt(0, 0, 0).unwrap();\nassert_eq!(ndt, NaiveDateTime::from(nd));","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:8196-0:2644:5704":{"id":"b:2:8196-0:2644:5704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8192:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:8198:172","2:8199:10015","2:8200:941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:1587:7809":{"id":"0:1587:7809","crate_id":0,"name":"west","span":{"filename":"src/offset/fixed.rs","begin":[76,4],"end":[78,5]},"visibility":"public","docs":"Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.\n\nPanics on the out-of-bound `secs`.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `west_opt()` instead\")]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `west_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:9919-0:3208:2376":{"id":"a:2:3156:9919-0:3208:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3059":{"id":"0:3059","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[43,37],"end":[43,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3060:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2628-0:2608:2348":{"id":"b:2:2628-0:2608:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2494":{"id":"0:2494","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[296,29],"end":[296,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2495:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:374:3255":{"id":"0:374:3255","crate_id":0,"name":"to_rfc3339","span":{"filename":"src/datetime/mod.rs","begin":[636,4],"end":[644,5]},"visibility":"public","docs":"Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1329:198":{"id":"0:1329:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[1986,4],"end":[1986,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:3737-0:3237:2427":{"id":"b:2:3737-0:3237:2427","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:393":{"id":"0:393","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[899,0],"end":[906,1]},"visibility":"default","docs":"Convert a `DateTime<Utc>` instance into a `DateTime<Local>` instance.","links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:394:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13191:41648":{"id":"2:13191:41648","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44020:9259","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2410":{"id":"0:2410","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[174,9],"end":[174,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2411:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:528":{"id":"0:528","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1706,0],"end":[1713,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:530:198","0:531:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2568:463":{"id":"0:2568:463","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[386,16],"end":[386,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1550-0:2663:2349":{"id":"0:1550-0:2663:2349","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[569,33],"end":[569,46]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"naive::NaiveDateTime","name":"NaiveDateTime","id":"0:2663:2349","glob":false}}},"0:1589:3966":{"id":"0:1589:3966","crate_id":0,"name":"local_minus_utc","span":{"filename":"src/offset/fixed.rs","begin":[107,4],"end":[109,5]},"visibility":"public","docs":"Returns the number of seconds to add to convert from UTC to the local time.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:562-0:2165:2340":{"id":"0:562-0:2165:2340","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[556,0],"end":[556,27]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"datetime::DateTime","name":"DateTime","id":"0:2165:2340","glob":false}}},"0:748:3033":{"id":"0:748:3033","crate_id":0,"name":"ordinal","span":{"filename":"src/format/parsed.rs","begin":[1069,4],"end":[1071,5]},"visibility":"public","docs":"Get the `ordinal` (day of the year) field if set.\n\nSee also [`set_ordinal()`](Parsed::set_ordinal).","links":{"Parsed::set_ordinal":"0:707:4342"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:265:198":{"id":"0:265:198","crate_id":0,"name":"Output","span":{"filename":"src/date.rs","begin":[529,4],"end":[529,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:716:4380":{"id":"0:716:4380","crate_id":0,"name":"set_offset","span":{"filename":"src/format/parsed.rs","begin":[543,4],"end":[545,5]},"visibility":"public","docs":"Set the [`offset`](Parsed::offset) field to the given value.\n\nThe offset is in seconds from local time to UTC.\n\n# Errors\n\nReturns `OUT_OF_RANGE` if `value` is ouside the range of an `i32`.\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::offset":"0:756:1215"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:726:4428":{"id":"0:726:4428","crate_id":0,"name":"to_naive_time","span":{"filename":"src/format/parsed.rs","begin":[728,4],"end":[761,5]},"visibility":"public","docs":"Returns a parsed naive time out of given fields.\n\nThis method is able to determine the time from given subset of fields:\n\n- Hour, minute. (second and nanosecond assumed to be 0)\n- Hour, minute, second. (nanosecond assumed to be 0)\n- Hour, minute, second, nanosecond.\n\nIt is able to handle leap seconds when given second is 60.\n\n# Errors\n\nThis method returns:\n- `OUT_OF_RANGE` if any of the time fields of `Parsed` are set to a value beyond\n  their acceptable range.\n- `NOT_ENOUGH` if an hour field is missing, if AM/PM is missing in a 12-hour clock,\n  if minutes are missing, or if seconds are missing while the nanosecond field is present.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:9919-0:2209:3075":{"id":"a:2:3156:9919-0:2209:3075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2401:3784":{"id":"0:2401:3784","crate_id":0,"name":"TimezoneOffsetZ","span":{"filename":"src/format/mod.rs","begin":[244,4],"end":[244,19]},"visibility":"default","docs":"Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\nParsing allows an optional colon.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:159:2921":{"id":"0:159:2921","crate_id":0,"name":"from_utc","span":{"filename":"src/date.rs","begin":[77,4],"end":[79,5]},"visibility":"public","docs":"Makes a new `Date` with given *UTC* date and offset.\nThe local date should be constructed via the `TimeZone` trait.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["offset",{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1941:2352","args":null}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2913-0:2300:3683":{"id":"b:2:2913-0:2300:3683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2368:3074":{"id":"0:2368:3074","crate_id":0,"name":"Fixed","span":{"filename":"src/format/mod.rs","begin":[175,0],"end":[255,1]},"visibility":"public","docs":"Fixed-format item types.\n\nThey have their own rules of formatting and parsing.\nOtherwise noted, they print in the specified cases but parse case-insensitively.","links":{},"attrs":["#[non_exhaustive]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:2369:3740","0:2371:3743","0:2373:3745","0:2375:3747","0:2377:3750","0:2379:3752","0:2381:3723","0:2383:3757","0:2385:3759","0:2387:3761","0:2389:3764","0:2391:3769","0:2393:3772","0:2395:3775","0:2397:3779","0:2399:3782","0:2401:3784","0:2403:3389","0:2405:3787","0:2407:3730"],"impls":["a:2:32106:236-0:2368:3074","a:2:3121:246-0:2368:3074","a:2:3156:9919-0:2368:3074","a:2:32165:9507-0:2368:3074","a:2:41968:9655-0:2368:3074","a:2:41969:9654-0:2368:3074","b:2:2913-0:2368:3074","b:2:2898-0:2368:3074","b:2:2625-0:2368:3074","b:2:2902-0:2368:3074","b:2:2628-0:2368:3074","b:2:3737-0:2368:3074","b:2:2908-0:2368:3074","b:5:736-0:2368:3074","0:2412","0:2419","0:2417","0:2410","0:2415","0:2413"]}}},"0:2721:858":{"id":"0:2721:858","crate_id":0,"name":"hash","span":{"filename":"src/naive/isoweek.rs","begin":[19,54],"end":[19,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1286:3477":{"id":"0:1286:3477","crate_id":0,"name":"second","span":{"filename":"src/naive/datetime/mod.rs","begin":[1410,4],"end":[1412,5]},"visibility":"default","docs":"Returns the second number from 0 to 59.\n\nSee also the [`NaiveTime::second`] method.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Timelike};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 34, 56, 789).unwrap();\nassert_eq!(dt.second(), 56);\n```","links":{"`NaiveTime::second`":"0:1477:3477"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13285:34835":{"id":"2:13285:34835","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:8037"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:2622":{"id":"0:34:2622","crate_id":0,"name":"weeks","span":{"filename":"src/time_delta.rs","begin":[105,4],"end":[107,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of weeks.\n\nEquivalent to `TimeDelta::seconds(weeks * 7 * 24 * 60 * 60)` with\noverflow checks.\n\n# Panics\n\nPanics when the duration is out of bounds.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["weeks",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:523:1721":{"id":"0:523:1721","crate_id":0,"name":"sub","span":{"filename":"src/datetime/mod.rs","begin":[1692,4],"end":[1694,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3172:2566","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3208:2376":{"id":"0:3208:2376","crate_id":0,"name":"Months","span":{"filename":"src/month.rs","begin":[229,0],"end":[229,34]},"visibility":"public","docs":"A duration in calendar months","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:2064","a:2:32106:236-0:3208:2376","a:2:3121:246-0:3208:2376","a:2:3156:9919-0:3208:2376","a:2:32165:9507-0:3208:2376","a:2:41968:9655-0:3208:2376","a:2:41969:9654-0:3208:2376","b:2:2913-0:3208:2376","b:2:2898-0:3208:2376","b:2:2625-0:3208:2376","b:2:2902-0:3208:2376","b:2:2628-0:3208:2376","b:2:3737-0:3208:2376","b:2:2908-0:3208:2376","b:5:736-0:3208:2376","0:3224","0:3216","0:498","0:3226","0:3211","0:3214","0:3222","0:1309","0:3218","0:3221","0:1108","0:520","0:1105","0:1325","0:3213"]}}},"0:443:3040":{"id":"0:443:3040","crate_id":0,"name":"with_day0","span":{"filename":"src/datetime/mod.rs","begin":[1295,4],"end":[1297,5]},"visibility":"default","docs":"Makes a new `DateTime` with the day of month (starting from 0) changed.\n\nSee also the [`NaiveDate::with_day0`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (for example `day(30)` in April).\n- The value for `day0` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveDate::with_day0`":"0:1097:3040"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:527:1721":{"id":"0:527:1721","crate_id":0,"name":"sub","span":{"filename":"src/datetime/mod.rs","begin":[1701,4],"end":[1703,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1324:1721":{"id":"0:1324:1721","crate_id":0,"name":"sub","span":{"filename":"src/naive/datetime/mod.rs","begin":[1892,4],"end":[1894,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196":{"id":"0:196","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[329,0],"end":[390,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1941:2352","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:198:3015","0:202:801"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:707:4342":{"id":"0:707:4342","crate_id":0,"name":"set_ordinal","span":{"filename":"src/format/parsed.rs","begin":[395,4],"end":[400,5]},"visibility":"public","docs":"Set the [`ordinal`](Parsed::ordinal) (day of the year) field to the given value.\n\n# Errors\n\nReturns `OUT_OF_RANGE` if `value` is not in the range 1-366.\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::ordinal":"0:748:3033"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:493:296":{"id":"0:493:296","crate_id":0,"name":"add_assign","span":{"filename":"src/datetime/mod.rs","begin":[1533,4],"end":[1537,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:2145:2331":{"id":"b:2:2898-0:2145:2331","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2346":{"id":"0:2346","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[102,16],"end":[102,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41968:9655-0:2644:5704":{"id":"a:2:41968:9655-0:2644:5704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3156:9919-0:2521:172":{"id":"a:2:3156:9919-0:2521:172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1520:3567":{"id":"0:1520:3567","crate_id":0,"name":"from_str","span":{"filename":"src/naive/time/mod.rs","begin":[1607,4],"end":[1629,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3047":{"id":"0:3047","crate_id":0,"name":null,"span":{"filename":"src/offset/local/mod.rs","begin":[113,22],"end":[113,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3048:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3134:686":{"id":"0:3134:686","crate_id":0,"name":"eq","span":{"filename":"src/weekday.rs","begin":[32,9],"end":[32,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1410":{"id":"0:1410","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[150,0],"end":[161,1]},"visibility":"default","docs":"The `Debug` output of the ISO week `w` is the same as\n[`d.format(\"%G-W%V\")`](../format/strftime/index.html)\nwhere `d` is any `NaiveDate` value in that week.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nassert_eq!(\n    format!(\"{:?}\", NaiveDate::from_ymd_opt(2015, 9, 5).unwrap().iso_week()),\n    \"2015-W36\"\n);\nassert_eq!(format!(\"{:?}\", NaiveDate::from_ymd_opt(0, 1, 3).unwrap().iso_week()), \"0000-W01\");\nassert_eq!(\n    format!(\"{:?}\", NaiveDate::from_ymd_opt(9999, 12, 31).unwrap().iso_week()),\n    \"9999-W52\"\n);\n```\n\nISO 8601 requires an explicit sign for years before 1 BCE or after 9999 CE.\n\n```\n# use chrono::{NaiveDate, Datelike};\nassert_eq!(format!(\"{:?}\", NaiveDate::from_ymd_opt(0, 1, 2).unwrap().iso_week()), \"-0001-W52\");\nassert_eq!(\n    format!(\"{:?}\", NaiveDate::from_ymd_opt(10000, 12, 31).unwrap().iso_week()),\n    \"+10000-W52\"\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1411:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3222":{"id":"0:3222","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,39],"end":[227,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3223:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:104:130":{"id":"0:104:130","crate_id":0,"name":"Duration","span":{"filename":"src/lib.rs","begin":[526,0],"end":[526,30]},"visibility":"public","docs":"Alias of [`TimeDelta`].","links":{"`TimeDelta`":"0:2123:2332"},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:2:41968:9655-0:3145:2373":{"id":"a:2:41968:9655-0:3145:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1901:1971":{"id":"0:1901:1971","crate_id":0,"name":"now","span":{"filename":"src/offset/utc.rs","begin":[95,4],"end":[99,5]},"visibility":"public","docs":"Returns a `DateTime<Utc>` which corresponds to the current date and time in UTC.\n\nSee also the similar [`Local::now()`] which returns `DateTime<Local>`, i.e. the local date\nand time including offset from UTC.\n\n[`Local::now()`]: crate::Local::now\n\n# Example\n\n```\n# #![allow(unused_variables)]\n# use chrono::{FixedOffset, Utc};\n// Current time in UTC\nlet now_utc = Utc::now();\n\n// Current date in UTC\nlet today_utc = now_utc.date_naive();\n\n// Current time in some timezone (let's use +05:00)\nlet offset = FixedOffset::east_opt(5 * 60 * 60).unwrap();\nlet now_with_offset = Utc::now().with_timezone(&offset);\n```","links":{"crate::Local::now":"0:1874:1971"},"attrs":["#[cfg(not(all(target_arch = \"wasm32\", feature = \"wasmbind\",\nnot(any(target_os = \"emscripten\", target_os = \"wasi\")))))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:2174:2886":{"id":"b:2:2902-0:2174:2886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32165:9507-0:3042:2336":{"id":"a:2:32165:9507-0:3042:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2908-0:2368:3074":{"id":"b:2:2908-0:2368:3074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:950":{"id":"0:950","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[452,0],"end":[457,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","source","provide","description","type_id"],"trait":{"name":"Error","id":"2:2961:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:951:2758"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2155:686":{"id":"0:2155:686","crate_id":0,"name":"eq","span":{"filename":"src/time_delta.rs","begin":[575,29],"end":[575,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:3031":{"id":"0:209:3031","crate_id":0,"name":"day","span":{"filename":"src/date.rs","begin":[406,4],"end":[408,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1236:3237":{"id":"0:1236:3237","crate_id":0,"name":"checked_add_offset","span":{"filename":"src/naive/datetime/mod.rs","begin":[580,4],"end":[588,5]},"visibility":"public","docs":"Adds given `FixedOffset` to the current datetime.\nReturns `None` if the result would be outside the valid range for [`NaiveDateTime`].\n\nThis method is similar to [`checked_add_signed`](#method.checked_add_offset), but preserves\nleap seconds.","links":{"`NaiveDateTime`":"0:2663:2349"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2373:3745":{"id":"0:2373:3745","crate_id":0,"name":"ShortWeekdayName","span":{"filename":"src/format/mod.rs","begin":[187,4],"end":[187,20]},"visibility":"default","docs":"Abbreviated day of the week names.\n\nPrints a three-letter-long name in the title case, reads the same name in any case.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1536-0:1212:2358":{"id":"0:1536-0:1212:2358","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[25,40],"end":[25,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"self::datetime::MAX_DATETIME","name":"MAX_DATETIME","id":"0:1212:2358","glob":false}}},"0:2480:3823":{"id":"0:2480:3823","crate_id":0,"name":"Seconds","span":{"filename":"src/format/mod.rs","begin":[306,4],"end":[306,11]},"visibility":"default","docs":"Format offset from UTC as hours, minutes and seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:945:970":{"id":"0:945:970","crate_id":0,"name":"kind","span":{"filename":"src/format/mod.rs","begin":[391,4],"end":[393,5]},"visibility":"public","docs":"The category of parse error","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2778:463":{"id":"0:2778:463","crate_id":0,"name":"clone","span":{"filename":"src/offset/fixed.rs","begin":[22,36],"end":[22,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13192:40071":{"id":"2:13192:40071","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44048:9270","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1940:3112":{"id":"0:1940:3112","crate_id":0,"name":"fix","span":{"filename":"src/offset/mod.rs","begin":[273,4],"end":[273,33]},"visibility":"default","docs":"Returns the fixed offset from UTC to the local time stored.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2908-0:3062:2367":{"id":"b:2:2908-0:3062:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:52:2681":{"id":"0:52:2681","crate_id":0,"name":"num_seconds","span":{"filename":"src/time_delta.rs","begin":[301,4],"end":[308,5]},"visibility":"public","docs":"Returns the total number of whole seconds in the `TimeDelta`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:333:2359":{"id":"0:333:2359","crate_id":0,"name":"MIN_DATETIME","span":{"filename":"src/datetime/mod.rs","begin":[66,0],"end":[66,65]},"visibility":"public","docs":"The minimum possible `DateTime<Utc>`.","links":{},"attrs":["#[deprecated(since = \"0.4.20\", note = \"Use DateTime::MIN_UTC instead\")]"],"deprecation":{"since":"0.4.20","note":"Use DateTime::MIN_UTC instead"},"inner":{"constant":{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"expr":"DateTime<Utc>::MIN_UTC","value":null,"is_literal":false}}},"b:2:3737-0:2422:3788":{"id":"b:2:3737-0:2422:3788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1109:198":{"id":"0:1109:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/date/mod.rs","begin":[1983,4],"end":[1983,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2625-0:2706:2365":{"id":"b:2:2625-0:2706:2365","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1217:3329":{"id":"0:1217:3329","crate_id":0,"name":"from_timestamp_micros","span":{"filename":"src/naive/datetime/mod.rs","begin":[156,4],"end":[160,5]},"visibility":"public","docs":"Creates a new [NaiveDateTime] from microseconds since the UNIX epoch.\n\nThe UNIX epoch starts on midnight, January 1, 1970, UTC.\n\n# Errors\n\nReturns `None` if the number of microseconds would be out of range for a `NaiveDateTime`\n(more than ca. 262,000 years away from common era)","links":{"NaiveDateTime":"0:2663:2349"},"attrs":["#[deprecated(since = \"0.4.35\", note =\n\"use `DateTime::from_timestamp_micros` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.35","note":"use `DateTime::from_timestamp_micros` instead"},"inner":{"function":{"decl":{"inputs":[["micros",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3170:3922":{"id":"0:3170:3922","crate_id":0,"name":"June","span":{"filename":"src/month.rs","begin":[53,4],"end":[53,12]},"visibility":"default","docs":"June","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"5","value":"5"}}}},"0:3151:686":{"id":"0:3151:686","crate_id":0,"name":"eq","span":{"filename":"src/weekday.rs","begin":[231,16],"end":[231,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:2562:2361":{"id":"a:2:3121:246-0:2562:2361","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41969:9654-0:2280:3666":{"id":"a:2:41969:9654-0:2280:3666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2908-0:2174:2886":{"id":"b:2:2908-0:2174:2886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:171:2966":{"id":"0:171:2966","crate_id":0,"name":"and_hms_nano_opt","span":{"filename":"src/date.rs","begin":[190,4],"end":[198,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nReturns `None` on invalid hour, minute, second and/or nanosecond.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:472:1280":{"id":"0:472:1280","crate_id":0,"name":"partial_cmp","span":{"filename":"src/datetime/mod.rs","begin":[1444,4],"end":[1446,5]},"visibility":"default","docs":"Compare two DateTimes based on their true time, ignoring time zones\n\n# Example\n\n```\nuse chrono::prelude::*;\n\nlet earlier = Utc\n    .with_ymd_and_hms(2015, 5, 15, 2, 0, 0)\n    .unwrap()\n    .with_timezone(&FixedOffset::west_opt(1 * 3600).unwrap());\nlet later = Utc\n    .with_ymd_and_hms(2015, 5, 15, 3, 0, 0)\n    .unwrap()\n    .with_timezone(&FixedOffset::west_opt(5 * 3600).unwrap());\n\nassert_eq!(earlier.to_string(), \"2015-05-15 01:00:00 -01:00\");\nassert_eq!(later.to_string(), \"2015-05-14 22:00:00 -05:00\");\n\nassert!(later > earlier);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:2247:2887":{"id":"b:2:2902-0:2247:2887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13251:4619":{"id":"2:13251:4619","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:2706:2365":{"id":"b:2:3737-0:2706:2365","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2484:3827":{"id":"0:2484:3827","crate_id":0,"name":"OptionalSeconds","span":{"filename":"src/format/mod.rs","begin":[311,4],"end":[311,19]},"visibility":"default","docs":"Format offset from UTC as hours and minutes, and optionally seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:3046:463":{"id":"0:3046:463","crate_id":0,"name":"clone","span":{"filename":"src/offset/local/mod.rs","begin":[113,15],"end":[113,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1318":{"id":"0:1318","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1858,0],"end":[1863,1]},"visibility":"default","docs":"Subtract-assign `TimeDelta` from `NaiveDateTime`.\n\nThis is the same as the addition with a negated `TimeDelta`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_sub_signed`] to get an `Option` instead.","links":{"`NaiveDateTime::checked_sub_signed`":"0:1240:2995"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33400:2567","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1319:1722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:360:3223":{"id":"0:360:3223","crate_id":0,"name":"checked_sub_months","span":{"filename":"src/datetime/mod.rs","begin":[499,4],"end":[507,5]},"visibility":"public","docs":"Subtracts given `Months` from the current date and time.\n\nUses the last day of the month if the day does not exist in the resulting month.\n\nSee [`NaiveDate::checked_sub_months`] for more details on behavior.\n\n# Errors\n\nReturns `None` if:\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.\n- The resulting UTC datetime would be out of range.\n- The resulting local datetime would be out of range (unless `months` is zero).","links":{"`NaiveDate::checked_sub_months`":"0:1035:3223"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["months",{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1914:788":{"id":"0:1914:788","crate_id":0,"name":"fmt","span":{"filename":"src/offset/utc.rs","begin":[149,4],"end":[151,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1096:3039":{"id":"0:1096:3039","crate_id":0,"name":"with_day","span":{"filename":"src/naive/date/mod.rs","begin":[1772,4],"end":[1774,5]},"visibility":"default","docs":"Makes a new `NaiveDate` with the day of month (starting from 1) changed.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (for example `day(31)` in April).\n- The value for `day` is invalid.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_day(30),\n    Some(NaiveDate::from_ymd_opt(2015, 9, 30).unwrap())\n);\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_day(31), None);\n// no September 31\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1492":{"id":"0:1492","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1251,0],"end":[1256,1]},"visibility":"default","docs":"Add-assign `std::time::Duration` to `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the addition ignores integral number of days.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33333:2562","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1493:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:347:3172":{"id":"0:347:3172","crate_id":0,"name":"timestamp_nanos_opt","span":{"filename":"src/datetime/mod.rs","begin":[353,4],"end":[367,5]},"visibility":"public","docs":"Returns the number of non-leap-nanoseconds since January 1, 1970 UTC.\n\n# Errors\n\nAn `i64` with nanosecond precision can span a range of ~584 years. This function returns\n`None` on an out of range `DateTime`.\n\nThe dates that can be represented as nanoseconds are between 1677-09-21T00:12:43.145224192\nand 2262-04-11T23:47:16.854775807.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Utc};\n\nlet dt = NaiveDate::from_ymd_opt(1970, 1, 1)\n    .unwrap()\n    .and_hms_nano_opt(0, 0, 1, 444)\n    .unwrap()\n    .and_local_timezone(Utc)\n    .unwrap();\nassert_eq!(dt.timestamp_nanos_opt(), Some(1_000_000_444));\n\nlet dt = NaiveDate::from_ymd_opt(2001, 9, 9)\n    .unwrap()\n    .and_hms_nano_opt(1, 46, 40, 555)\n    .unwrap()\n    .and_local_timezone(Utc)\n    .unwrap();\nassert_eq!(dt.timestamp_nanos_opt(), Some(1_000_000_000_000_000_555));\n\nlet dt = NaiveDate::from_ymd_opt(1677, 9, 21)\n    .unwrap()\n    .and_hms_nano_opt(0, 12, 43, 145_224_192)\n    .unwrap()\n    .and_local_timezone(Utc)\n    .unwrap();\nassert_eq!(dt.timestamp_nanos_opt(), Some(-9_223_372_036_854_775_808));\n\nlet dt = NaiveDate::from_ymd_opt(2262, 4, 11)\n    .unwrap()\n    .and_hms_nano_opt(23, 47, 16, 854_775_807)\n    .unwrap()\n    .and_local_timezone(Utc)\n    .unwrap();\nassert_eq!(dt.timestamp_nanos_opt(), Some(9_223_372_036_854_775_807));\n\nlet dt = NaiveDate::from_ymd_opt(1677, 9, 21)\n    .unwrap()\n    .and_hms_nano_opt(0, 12, 43, 145_224_191)\n    .unwrap()\n    .and_local_timezone(Utc)\n    .unwrap();\nassert_eq!(dt.timestamp_nanos_opt(), None);\n\nlet dt = NaiveDate::from_ymd_opt(2262, 4, 11)\n    .unwrap()\n    .and_hms_nano_opt(23, 47, 16, 854_775_808)\n    .unwrap()\n    .and_local_timezone(Utc)\n    .unwrap();\nassert_eq!(dt.timestamp_nanos_opt(), None);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2531:1956":{"id":"0:2531:1956","crate_id":0,"name":"0","span":{"filename":"src/format/mod.rs","begin":[336,10],"end":[336,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"0:1079:2611":{"id":"0:1079:2611","crate_id":0,"name":"MIN","span":{"filename":"src/naive/date/mod.rs","begin":[1429,4],"end":[1429,95]},"visibility":"public","docs":"The minimum possible `NaiveDate` (January 1, 262144 BCE).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"0:1993":{"id":"0:1993","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[52,0],"end":[80,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Timelike","id":"0:2099:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"SubsecRound","id":"0:1990:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"T"},"items":["0:1995:8591","0:1996:8596"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3132":{"id":"0:3132","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[32,9],"end":[32,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3154:2343":{"id":"0:3154:2343","crate_id":0,"name":"Month","span":{"filename":"src/month.rs","begin":[41,0],"end":[66,1]},"visibility":"public","docs":"The month of the year.\n\nThis enum is just a convenience implementation.\nThe month in dates created by DateLike objects does not return this enum.\n\nIt is possible to convert from a date to a month independently\n```\nuse chrono::prelude::*;\nlet date = Utc.with_ymd_and_hms(2019, 10, 28, 9, 10, 11).unwrap();\n// `2019-10-28T09:10:11Z`\nlet month = Month::try_from(u8::try_from(date.month()).unwrap()).ok();\nassert_eq!(month, Some(Month::October))\n```\nOr from a Month to an integer usable by dates\n```\n# use chrono::prelude::*;\nlet month = Month::January;\nlet dt = Utc.with_ymd_and_hms(2019, month.number_from_month(), 28, 9, 10, 11).unwrap();\nassert_eq!((dt.year(), dt.month(), dt.day()), (2019, 1, 28));\n```\nAllows mapping from and to month, from 1-January to 12-December.\nCan be Serialized/Deserialized with serde","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:3155:3917","0:3158:3918","0:3161:3919","0:3164:3920","0:3167:3921","0:3170:3922","0:3173:3923","0:3176:3924","0:3179:3925","0:3182:3926","0:3185:3927","0:3188:3929"],"impls":["0:2052","a:2:32106:236-0:3154:2343","a:2:3121:246-0:3154:2343","a:2:3156:9919-0:3154:2343","a:2:32165:9507-0:3154:2343","a:2:41968:9655-0:3154:2343","a:2:41969:9654-0:3154:2343","b:2:2913-0:3154:2343","b:2:2898-0:3154:2343","b:2:2625-0:3154:2343","b:2:2902-0:3154:2343","b:2:2628-0:3154:2343","b:2:3737-0:3154:2343","b:2:2908-0:3154:2343","b:5:736-0:3154:2343","0:2060","0:962","0:3194","0:3191","0:3201","0:3199","0:3196","0:3204","0:3206","0:2057","0:3197","0:3192"]}}},"0:1900:3050":{"id":"0:1900:3050","crate_id":0,"name":"today","span":{"filename":"src/offset/utc.rs","begin":[63,4],"end":[65,5]},"visibility":"public","docs":"Returns a `Date` which corresponds to the current date.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"use `Utc::now()` instead, potentially with `.date_naive()`\")]","#[allow(deprecated)]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `Utc::now()` instead, potentially with `.date_naive()`"},"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:2165:2340":{"id":"b:2:3737-0:2165:2340","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2902-0:2123:2332":{"id":"b:2:2902-0:2123:2332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32165:9507-0:2521:172":{"id":"a:2:32165:9507-0:2521:172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41969:9654-0:2368:3074":{"id":"a:2:41969:9654-0:2368:3074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2902-0:2663:2349":{"id":"b:2:2902-0:2663:2349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2898-0:2158:2335":{"id":"b:2:2898-0:2158:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:545:788":{"id":"0:545:788","crate_id":0,"name":"fmt","span":{"filename":"src/datetime/mod.rs","begin":[1787,4],"end":[1791,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1495:198":{"id":"0:1495:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/time/mod.rs","begin":[1263,4],"end":[1263,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2625-0:2422:3788":{"id":"b:2:2625-0:2422:3788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2101:3965":{"id":"0:2101:3965","crate_id":0,"name":"hour12","span":{"filename":"src/traits.rs","begin":[274,4],"end":[281,5]},"visibility":"default","docs":"Returns the hour number from 1 to 12 with a boolean flag,\nwhich is false for AM and true for PM.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"bool"},{"primitive":"u32"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:736-0:2247:2887":{"id":"b:5:736-0:2247:2887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32106:236-0:3093:2371":{"id":"a:2:32106:236-0:3093:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32106:236-0:2746:2364":{"id":"a:2:32106:236-0:2746:2364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2098:3140":{"id":"0:2098:3140","crate_id":0,"name":"num_days_from_ce","span":{"filename":"src/traits.rs","begin":[248,4],"end":[263,5]},"visibility":"default","docs":"Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.\n\n# Examples\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nassert_eq!(NaiveDate::from_ymd_opt(1970, 1, 1).unwrap().num_days_from_ce(), 719_163);\nassert_eq!(NaiveDate::from_ymd_opt(2, 1, 1).unwrap().num_days_from_ce(), 366);\nassert_eq!(NaiveDate::from_ymd_opt(1, 1, 1).unwrap().num_days_from_ce(), 1);\nassert_eq!(NaiveDate::from_ymd_opt(0, 1, 1).unwrap().num_days_from_ce(), -365);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:2625:5703":{"id":"b:2:3737-0:2625:5703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:411:3403":{"id":"0:411:3403","crate_id":0,"name":"parse_from_rfc3339","span":{"filename":"src/datetime/mod.rs","begin":[1017,4],"end":[1024,5]},"visibility":"public","docs":"Parses an RFC 3339 date-and-time string into a `DateTime<FixedOffset>` value.\n\nParses all valid RFC 3339 values (as well as the subset of valid ISO 8601 values that are\nalso valid RFC 3339 date-and-time values) and returns a new [`DateTime`] with a\n[`FixedOffset`] corresponding to the parsed timezone. While RFC 3339 values come in a wide\nvariety of shapes and sizes, `1996-12-19T16:39:57-08:00` is an example of the most commonly\nencountered variety of RFC 3339 formats.\n\nWhy isn't this named `parse_from_iso8601`? That's because ISO 8601 allows representing\nvalues in a wide range of formats, only some of which represent actual date-and-time\ninstances (rather than periods, ranges, dates, or times). Some valid ISO 8601 values are\nalso simultaneously valid RFC 3339 values, but not all RFC 3339 values are valid ISO 8601\nvalues (or the other way around).","links":{"`DateTime`":"0:2165:2340","`FixedOffset`":"0:2766:2346"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2253:463":{"id":"0:2253:463","crate_id":0,"name":"clone","span":{"filename":"src/format/strftime.rs","begin":[188,9],"end":[188,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2461:3813":{"id":"0:2461:3813","crate_id":0,"name":"padding","span":{"filename":"src/format/mod.rs","begin":[292,4],"end":[292,20]},"visibility":"public","docs":"Pad the hour value to two digits.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:5:736-0:2521:172":{"id":"b:5:736-0:2521:172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5617:42357":{"id":"5:5617:42357","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:262:1722":{"id":"0:262:1722","crate_id":0,"name":"sub_assign","span":{"filename":"src/date.rs","begin":[523,4],"end":[525,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2622":{"id":"0:2622","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[94,47],"end":[94,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5863-0:2158:2335":{"id":"b:5:5863-0:2158:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5861:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["5:5865:1763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[392,0],"end":[464,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["num_days_from_ce","year_ce"],"trait":{"name":"Datelike","id":"0:2080:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:206:3029","0:207:2374","0:208:3030","0:209:3031","0:210:3032","0:211:3033","0:212:3034","0:213:2372","0:214:3035","0:215:3036","0:217:3037","0:219:3038","0:221:3039","0:223:3040","0:225:3041","0:227:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:247:858":{"id":"0:247:858","crate_id":0,"name":"hash","span":{"filename":"src/date.rs","begin":[491,4],"end":[493,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:755:3138":{"id":"0:755:3138","crate_id":0,"name":"timestamp","span":{"filename":"src/format/parsed.rs","begin":[1126,4],"end":[1128,5]},"visibility":"public","docs":"Get the `timestamp` field if set.\n\nSee also [`set_timestamp()`](Parsed::set_timestamp).","links":{"Parsed::set_timestamp":"0:715:4376"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:2457:3803":{"id":"b:2:2625-0:2457:3803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41969:9654-0:3110:2345":{"id":"a:2:41969:9654-0:3110:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:736-0:2300:3683":{"id":"b:5:736-0:2300:3683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1135":{"id":"0:1135","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2169,0],"end":[2182,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["partial_cmp","find","position","try_for_each","rev","try_collect","copied","map_while","intersperse_with","min_by","size_hint","cmp","le","is_sorted","lt","unzip","take","reduce","collect_into","all","flatten","cloned","for_each","min_by_key","next_chunk","gt","collect","chain","any","ge","array_chunks","is_sorted_by","enumerate","try_reduce","partition","map_windows","sum","filter_map","max_by","advance_by","flat_map","last","is_sorted_by_key","product","find_map","partition_in_place","fuse","eq","peekable","max_by_key","nth","filter","map","__iterator_get_unchecked","cmp_by","try_find","min","count","is_partitioned","inspect","fold","skip_while","zip","step_by","cycle","skip","partial_cmp_by","max","rposition","ne","try_fold","by_ref","take_while","intersperse","scan","eq_by"],"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1136:172","0:1137:1177","0:1138:6364"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2154":{"id":"0:2154","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[575,29],"end":[575,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2155:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3737-0:2723:2350":{"id":"b:2:3737-0:2723:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:961:3567":{"id":"0:961:3567","crate_id":0,"name":"from_str","span":{"filename":"src/format/mod.rs","begin":[497,4],"end":[503,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:12808:3566","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2303:3688":{"id":"0:2303:3688","crate_id":0,"name":"YearDiv100","span":{"filename":"src/format/mod.rs","begin":[108,4],"end":[108,14]},"visibility":"default","docs":"Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1149:135":{"id":"0:1149:135","crate_id":0,"name":"Err","span":{"filename":"src/naive/date/mod.rs","begin":[2284,4],"end":[2284,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:3156:9919-0:3042:2336":{"id":"a:2:3156:9919-0:3042:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3156:9919-0:2741:2366":{"id":"a:2:3156:9919-0:2741:2366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2741:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:709:4349":{"id":"0:709:4349","crate_id":0,"name":"set_ampm","span":{"filename":"src/format/parsed.rs","begin":[425,4],"end":[427,5]},"visibility":"public","docs":"Set the [`hour_div_12`](Parsed::hour_div_12) am/pm field to the given value.\n\n`false` indicates AM and `true` indicates PM.\n\n# Errors\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::hour_div_12":"0:750:4285"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:9655-0:3042:2336":{"id":"a:2:41968:9655-0:3042:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1408:3962":{"id":"0:1408:3962","crate_id":0,"name":"week","span":{"filename":"src/naive/isoweek.rs","begin":[98,4],"end":[100,5]},"visibility":"public","docs":"Returns the ISO week number starting from 1.\n\nThe return value ranges from 1 to 53. (The last week of year differs by years.)\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, Weekday};\n\nlet d = NaiveDate::from_isoywd_opt(2015, 15, Weekday::Mon).unwrap();\nassert_eq!(d.iso_week().week(), 15);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:727:4441":{"id":"0:727:4441","crate_id":0,"name":"to_naive_datetime_with_offset","span":{"filename":"src/format/parsed.rs","begin":[782,4],"end":[851,5]},"visibility":"public","docs":"Returns a parsed naive date and time out of given fields, except for the offset field.\n\nThe offset is assumed to have a given value. It is not compared against the offset field set\nin the `Parsed` type, so it is allowed to be inconsistent.\n\nThis method is able to determine the combined date and time from date and time fields or\nfrom a single timestamp field. It checks all fields are consistent with each other.\n\n# Errors\n\nThis method returns:\n- `IMPOSSIBLE`  if any of the date fields conflict, or if a timestamp conflicts with any of\n  the other fields.\n- `NOT_ENOUGH` if there are not enough fields set in `Parsed` for a complete datetime.\n- `OUT_OF_RANGE`\n  - if any of the date or time fields of `Parsed` are set to a value beyond their acceptable\n    range.\n  - if the value would be outside the range of a [`NaiveDateTime`].\n  - if the date does not exist.","links":{"`NaiveDateTime`":"0:2663:2349"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["offset",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2379:3752":{"id":"0:2379:3752","crate_id":0,"name":"UpperAmPm","span":{"filename":"src/format/mod.rs","begin":[199,4],"end":[199,13]},"visibility":"default","docs":"AM/PM.\n\nPrints in upper case, reads in any case.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1037:3226":{"id":"0:1037:3226","crate_id":0,"name":"checked_add_days","span":{"filename":"src/naive/date/mod.rs","begin":[633,4],"end":[638,5]},"visibility":"public","docs":"Add a duration in [`Days`] to the date\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\n# use chrono::{NaiveDate, Days};\nassert_eq!(\n    NaiveDate::from_ymd_opt(2022, 2, 20).unwrap().checked_add_days(Days::new(9)),\n    Some(NaiveDate::from_ymd_opt(2022, 3, 1).unwrap())\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2022, 7, 31).unwrap().checked_add_days(Days::new(2)),\n    Some(NaiveDate::from_ymd_opt(2022, 8, 2).unwrap())\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2022, 7, 31).unwrap().checked_add_days(Days::new(1000000000000)),\n    None\n);\n```","links":{"`Days`":"0:2746:2364"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:1722":{"id":"0:79:1722","crate_id":0,"name":"sub_assign","span":{"filename":"src/time_delta.rs","begin":[482,4],"end":[485,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:3042:2336":{"id":"b:2:2628-0:3042:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:61:2708":{"id":"0:61:2708","crate_id":0,"name":"max_value","span":{"filename":"src/time_delta.rs","begin":[393,4],"end":[395,5]},"visibility":"public","docs":"The maximum possible `TimeDelta`: `i64::MAX` milliseconds.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:165:2948":{"id":"0:165:2948","crate_id":0,"name":"and_hms_milli_opt","span":{"filename":"src/date.rs","begin":[132,4],"end":[140,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nReturns `None` on invalid hour, minute, second and/or millisecond.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["milli",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:176:2979":{"id":"0:176:2979","crate_id":0,"name":"pred","span":{"filename":"src/date.rs","begin":[225,4],"end":[227,5]},"visibility":"public","docs":"Makes a new `Date` for the prior date.\n\nPanics when `self` is the first representable date.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"Use pred_opt() instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"Use pred_opt() instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:3228:2375":{"id":"b:2:2908-0:3228:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1955:3171":{"id":"0:1955:3171","crate_id":0,"name":"timestamp_nanos","span":{"filename":"src/offset/mod.rs","begin":[499,4],"end":[501,5]},"visibility":"default","docs":"Makes a new `DateTime` from the number of non-leap nanoseconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").\n\nUnlike [`timestamp_millis_opt`](#method.timestamp_millis_opt), this never fails.\n\n# Example\n\n```\nuse chrono::{TimeZone, Utc};\n\nassert_eq!(Utc.timestamp_nanos(1431648000000000).timestamp(), 1431648);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["nanos",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:426:3029":{"id":"0:426:3029","crate_id":0,"name":"year","span":{"filename":"src/datetime/mod.rs","begin":[1177,4],"end":[1179,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2087:3033":{"id":"0:2087:3033","crate_id":0,"name":"ordinal","span":{"filename":"src/traits.rs","begin":[70,4],"end":[70,29]},"visibility":"default","docs":"Returns the day of year starting from 1.\n\nThe return value ranges from 1 to 366. (The last day of year differs by years.)","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:925-0:616:801":{"id":"0:925-0:616:801","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[65,21],"end":[65,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"formatting::format","name":"format","id":"0:616:801","glob":false}}},"b:2:2902-0:2501:3809":{"id":"b:2:2902-0:2501:3809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1046:2955":{"id":"0:1046:2955","crate_id":0,"name":"and_hms_micro","span":{"filename":"src/naive/date/mod.rs","begin":[831,4],"end":[833,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.\n\nThe microsecond part is allowed to exceed 1,000,000,000 in order to represent a [leap second](\n./struct.NaiveTime.html#leap-second-handling), but only when `sec == 59`.\n\n# Panics\n\nPanics on invalid hour, minute, second and/or microsecond.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, NaiveDateTime, Timelike, Weekday};\n\nlet d = NaiveDate::from_ymd_opt(2015, 6, 3).unwrap();\n\nlet dt: NaiveDateTime = d.and_hms_micro_opt(12, 34, 56, 789_012).unwrap();\nassert_eq!(dt.year(), 2015);\nassert_eq!(dt.weekday(), Weekday::Wed);\nassert_eq!(dt.second(), 56);\nassert_eq!(dt.nanosecond(), 789_012_000);\n```","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `and_hms_micro_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `and_hms_micro_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["micro",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2744":{"id":"0:2744","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[35,9],"end":[35,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2741:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2745:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:231":{"id":"0:231","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[468,0],"end":[468,83]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2247:2887":{"id":"0:2247:2887","crate_id":0,"name":"StrftimeItems","span":{"filename":"src/format/strftime.rs","begin":[189,0],"end":[199,1]},"visibility":"public","docs":"Parsing iterator for `strftime`-like format strings.\n\nSee the [`format::strftime` module](crate::format::strftime) for supported formatting\nspecifiers.\n\n`StrftimeItems` is used in combination with more low-level methods such as [`format::parse()`]\nor [`format_with_items`].\n\nIf formatting or parsing date and time values is not performance-critical, the methods\n[`parse_from_str`] and [`format`] on types such as [`DateTime`](crate::DateTime) are easier to\nuse.\n\n[`format`]: crate::DateTime::format\n[`format_with_items`]: crate::DateTime::format\n[`parse_from_str`]: crate::DateTime::parse_from_str\n[`DateTime`]: crate::DateTime\n[`format::parse()`]: crate::format::parse()","links":{"crate::DateTime::parse_from_str":"0:412:3421","crate::DateTime::format":"0:422:801","crate::format::strftime":"0:864:3658","crate::format::parse()":"0:793:3071","crate::DateTime":"0:2165:2340"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:881","a:2:32106:236-0:2247:2887","a:2:3121:246-0:2247:2887","a:2:3156:9919-0:2247:2887","a:2:32165:9507-0:2247:2887","a:2:41968:9655-0:2247:2887","a:2:41969:9654-0:2247:2887","b:2:2913-0:2247:2887","b:2:2898-0:2247:2887","b:2:2625-0:2247:2887","b:2:8196-0:2247:2887","b:2:2902-0:2247:2887","b:2:2628-0:2247:2887","b:2:3737-0:2247:2887","b:2:2908-0:2247:2887","b:5:736-0:2247:2887","0:2251","0:2254","0:889"]}}},"0:2309:3695":{"id":"0:2309:3695","crate_id":0,"name":"IsoYearDiv100","span":{"filename":"src/format/mod.rs","begin":[115,4],"end":[115,17]},"visibility":"default","docs":"Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2908-0:2741:2366":{"id":"b:2:2908-0:2741:2366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2741:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:335":{"id":"0:335","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[71,0],"end":[716,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:337:3102","0:338:2921","0:339:3110","0:340:2353","0:341:3128","0:342:2415","0:343:3138","0:344:3153","0:345:3161","0:346:3171","0:347:3172","0:348:3155","0:349:3163","0:350:3189","0:351:1215","0:352:2928","0:353:2987","0:355:3202","0:356:3205","0:357:2993","0:358:3216","0:359:2995","0:360:3223","0:361:3226","0:364:3230","0:367:3000","0:369:3002","0:370:2927","0:372:3008","0:373:3251","0:374:3255","0:375:3275","0:376:3288","0:377:2915","0:378:2918"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2345:463":{"id":"0:2345:463","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[102,9],"end":[102,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2514":{"id":"0:2514","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[317,29],"end":[317,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2515:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1912:788":{"id":"0:1912:788","crate_id":0,"name":"fmt","span":{"filename":"src/offset/utc.rs","begin":[143,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1269:3036":{"id":"0:1269:3036","crate_id":0,"name":"with_year","span":{"filename":"src/naive/datetime/mod.rs","begin":[1160,4],"end":[1162,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the year number changed, while keeping the same month and\nday.\n\nSee also the [`NaiveDate::with_year`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (February 29 in a non-leap year).\n- The year is out of range for a `NaiveDate`.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, NaiveDateTime};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(\n    dt.with_year(2016),\n    Some(NaiveDate::from_ymd_opt(2016, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap())\n);\nassert_eq!(\n    dt.with_year(-308),\n    Some(NaiveDate::from_ymd_opt(-308, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap())\n);\n```","links":{"`NaiveDate::with_year`":"0:1093:3036"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3076":{"id":"0:3076","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[58,16],"end":[58,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2017":{"id":"0:2017","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[302,0],"end":[307,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","source","provide","description","type_id"],"trait":{"name":"Error","id":"2:2961:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2018:2758"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13157":{"id":"2:13157","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13158:983","2:13159:3404","2:13160:41642","2:13161:41643","2:13163:41644","2:13166:4633","2:13167:41645","2:13168:334","2:13169:34939","2:13170:6168","2:13172:34936","2:13174:34937","2:13176:34938","2:13178:41646","2:13179:41647","2:13180:34961","2:13181:34962","2:13182:34965","2:13183:34966","2:13185:3982","2:13186:14050","2:13187:2881","2:13188:39905","2:13189:39901","2:13190:16073","2:13191:41648","2:13192:40071","2:13193:3969","2:13196:4621","2:13199:8274","2:13202:5437","2:13206:10011","2:13210:34967","2:13213:34969","2:13216:34971","2:13219:41649","2:13222:41650","2:13225:34973","2:13228:34975","2:13231:34977","2:13234:34978","2:13237:8146","2:13240:41651","2:13243:41652","2:13246:41653","2:13249:41654","2:13251:4619","2:13253:41655","2:13255:41656","2:13256:41657","2:13257:8036","2:13260:4661","2:13263:34467","2:13266:34979","2:13269:41658","2:13272:41659","2:13275:41660","2:13278:3071","2:13280:34829","2:13281:34830","2:13282:4681","2:13283:34832","2:13284:34833","2:13285:34835","2:13286:34836","2:13287:34837","2:13288:41661","2:13290:16920","2:13291:41662"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2898-0:2746:2364":{"id":"b:2:2898-0:2746:2364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2902-0:2644:5704":{"id":"b:2:2902-0:2644:5704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2908-0:2123:2332":{"id":"b:2:2908-0:2123:2332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:212:3034":{"id":"0:212:3034","crate_id":0,"name":"ordinal0","span":{"filename":"src/date.rs","begin":[418,4],"end":[420,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1141:6367":{"id":"0:1141:6367","crate_id":0,"name":"next_back","span":{"filename":"src/naive/date/mod.rs","begin":[2187,4],"end":[2191,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8338:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13170:6168":{"id":"2:13170:6168","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41876:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:390:60":{"id":"0:390:60","crate_id":0,"name":"default","span":{"filename":"src/datetime/mod.rs","begin":[881,4],"end":[883,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:237":{"id":"0:237","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[476,0],"end":[476,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:891:172":{"id":"0:891:172","crate_id":0,"name":"Item","span":{"filename":"src/format/strftime.rs","begin":[389,4],"end":[389,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}},"0:516":{"id":"0:516","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1665,0],"end":[1674,1]},"visibility":"default","docs":"Subtract `FixedOffset` from the datetime value of `DateTime` (offset remains unchanged).\n\n# Panics\n\nPanics if the resulting date would be out of range.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:518:198","0:519:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3737-0:3049:2347":{"id":"b:2:3737-0:3049:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2431":{"id":"0:2431","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[258,34],"end":[258,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41968:9655-0:2562:2361":{"id":"a:2:41968:9655-0:2562:2361","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1507":{"id":"0:1507","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1384,0],"end":[1391,1]},"visibility":"default","docs":"Subtract `FixedOffset` from `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the subtraction ignores integral number of days.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1508:198","0:1509:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1284:2935":{"id":"0:1284:2935","crate_id":0,"name":"hour","span":{"filename":"src/naive/datetime/mod.rs","begin":[1374,4],"end":[1376,5]},"visibility":"default","docs":"Returns the hour number from 0 to 23.\n\nSee also the [`NaiveTime::hour`] method.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Timelike};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 34, 56, 789).unwrap();\nassert_eq!(dt.hour(), 12);\n```","links":{"`NaiveTime::hour`":"0:1475:2935"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:9919-0:2562:2361":{"id":"a:2:3156:9919-0:2562:2361","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1505":{"id":"0:1505","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1373,0],"end":[1378,1]},"visibility":"default","docs":"Subtract-assign `std::time::Duration` from `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the subtraction ignores integral number of days.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33400:2567","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1506:1722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2625-0:2766:2346":{"id":"b:2:2625-0:2766:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1941:2352":{"id":"0:1941:2352","crate_id":0,"name":"TimeZone","span":{"filename":"src/offset/mod.rs","begin":[279,0],"end":[596,1]},"visibility":"public","docs":"The time zone.\n\nThe methods here are the primary constructors for the [`DateTime`] type.","links":{"`DateTime`":"0:2165:2340"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:1942:2351","0:1943:3605","0:1945:4121","0:1946:7686","0:1947:7691","0:1948:7692","0:1949:7698","0:1950:7699","0:1951:3138","0:1952:3577","0:1953:3153","0:1954:3582","0:1955:3171","0:1956:3161","0:1957:7741","0:1958:2984","0:1959:7744","0:1960:7746","0:1961:3013","0:1963:2929","0:1966:7752","0:1967:4477","0:1968:2990","0:1969:3199"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:1594","0:1875","0:1902"]}}},"0:608:1163":{"id":"0:608:1163","crate_id":0,"name":"new","span":{"filename":"src/format/formatting.rs","begin":[54,4],"end":[63,5]},"visibility":"public","docs":"Makes a new `DelayedFormat` value out of local date and time.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}],["time",{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2467":{"id":"0:2467","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[283,29],"end":[283,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41968:9655-0:2706:2365":{"id":"a:2:41968:9655-0:2706:2365","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2037:136":{"id":"0:2037:136","crate_id":0,"name":"Error","span":{"filename":"src/weekday.rs","begin":[181,4],"end":[181,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2136":{"id":"0:2136","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,46],"end":[52,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","gt","lt","le"],"trait":{"name":"PartialOrd","id":"2:2717:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2137:1280"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2476:3818":{"id":"0:2476:3818","crate_id":0,"name":"Hours","span":{"filename":"src/format/mod.rs","begin":[301,4],"end":[301,9]},"visibility":"default","docs":"Format offset from UTC as only hours. Not recommended, it is not uncommon for timezones to\nhave an offset of 30 minutes, 15 minutes, etc.\nAny minutes and seconds get truncated.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2292:686":{"id":"0:2292:686","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[78,22],"end":[78,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:467":{"id":"0:467","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1420,0],"end":[1420,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:522:198":{"id":"0:522:198","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1690,4],"end":[1690,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"a:2:3121:246-0:2209:3075":{"id":"a:2:3121:246-0:2209:3075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1525":{"id":"0:1525","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1642,0],"end":[1646,1]},"visibility":"default","docs":"The default value for a NaiveTime is midnight, 00:00:00 exactly.\n\n# Example\n\n```rust\nuse chrono::NaiveTime;\n\nlet default_time = NaiveTime::default();\nassert_eq!(default_time, NaiveTime::from_hms_opt(0, 0, 0).unwrap());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2950:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1526:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3737-0:2501:3809":{"id":"b:2:3737-0:2501:3809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:558":{"id":"0:558","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1865,0],"end":[1876,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"std::time::SystemTime","id":"1:9445:3069","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:560:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2106:3485":{"id":"0:2106:3485","crate_id":0,"name":"with_minute","span":{"filename":"src/traits.rs","begin":[302,4],"end":[302,52]},"visibility":"default","docs":"Makes a new value with the minute number changed.\n\nReturns `None` when the resulting value would be invalid.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["min",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2628-0:2165:2340":{"id":"b:2:2628-0:2165:2340","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2908-0:2608:2348":{"id":"b:2:2908-0:2608:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1083":{"id":"0:1083","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[1442,0],"end":[1865,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["num_days_from_ce","year_ce"],"trait":{"name":"Datelike","id":"0:2080:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1084:3029","0:1085:2374","0:1086:3030","0:1087:3031","0:1088:3032","0:1089:3033","0:1090:3034","0:1091:2372","0:1092:3035","0:1093:3036","0:1094:3037","0:1095:3038","0:1096:3039","0:1097:3040","0:1098:3041","0:1099:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2082:8933":{"id":"0:2082:8933","crate_id":0,"name":"year_ce","span":{"filename":"src/traits.rs","begin":[38,4],"end":[45,5]},"visibility":"default","docs":"Returns the absolute year number starting from 1 with a boolean flag,\nwhich is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"bool"},{"primitive":"u32"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:2746:2364":{"id":"b:2:2628-0:2746:2364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2148":{"id":"0:2148","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[575,9],"end":[575,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2149:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:864:3658":{"id":"0:864:3658","crate_id":0,"name":"strftime","span":{"filename":"src/format/strftime.rs","begin":[4,0],"end":[1135,1]},"visibility":"public","docs":"`strftime`/`strptime`-inspired date and time formatting syntax.\n\n## Specifiers\n\nThe following specifiers are available both to formatting and parsing.\n\n| Spec. | Example  | Description                                                                |\n|-------|----------|----------------------------------------------------------------------------|\n|       |          | **DATE SPECIFIERS:**                                                       |\n| `%Y`  | `2001`   | The full proleptic Gregorian year, zero-padded to 4 digits. chrono supports years from -262144 to 262143. Note: years before 1 BCE or after 9999 CE, require an initial sign (+/-).|\n| `%C`  | `20`     | The proleptic Gregorian year divided by 100, zero-padded to 2 digits. [^1] |\n| `%y`  | `01`     | The proleptic Gregorian year modulo 100, zero-padded to 2 digits. [^1]     |\n|       |          |                                                                            |\n| `%m`  | `07`     | Month number (01--12), zero-padded to 2 digits.                            |\n| `%b`  | `Jul`    | Abbreviated month name. Always 3 letters.                                  |\n| `%B`  | `July`   | Full month name. Also accepts corresponding abbreviation in parsing.       |\n| `%h`  | `Jul`    | Same as `%b`.                                                              |\n|       |          |                                                                            |\n| `%d`  | `08`     | Day number (01--31), zero-padded to 2 digits.                              |\n| `%e`  | ` 8`     | Same as `%d` but space-padded. Same as `%_d`.                              |\n|       |          |                                                                            |\n| `%a`  | `Sun`    | Abbreviated weekday name. Always 3 letters.                                |\n| `%A`  | `Sunday` | Full weekday name. Also accepts corresponding abbreviation in parsing.     |\n| `%w`  | `0`      | Sunday = 0, Monday = 1, ..., Saturday = 6.                                 |\n| `%u`  | `7`      | Monday = 1, Tuesday = 2, ..., Sunday = 7. (ISO 8601)                       |\n|       |          |                                                                            |\n| `%U`  | `28`     | Week number starting with Sunday (00--53), zero-padded to 2 digits. [^2]   |\n| `%W`  | `27`     | Same as `%U`, but week 1 starts with the first Monday in that year instead.|\n|       |          |                                                                            |\n| `%G`  | `2001`   | Same as `%Y` but uses the year number in ISO 8601 week date. [^3]          |\n| `%g`  | `01`     | Same as `%y` but uses the year number in ISO 8601 week date. [^3]          |\n| `%V`  | `27`     | Same as `%U` but uses the week number in ISO 8601 week date (01--53). [^3] |\n|       |          |                                                                            |\n| `%j`  | `189`    | Day of the year (001--366), zero-padded to 3 digits.                       |\n|       |          |                                                                            |\n| `%D`  | `07/08/01`    | Month-day-year format. Same as `%m/%d/%y`.                            |\n| `%x`  | `07/08/01`    | Locale's date representation (e.g., 12/31/99).                        |\n| `%F`  | `2001-07-08`  | Year-month-day format (ISO 8601). Same as `%Y-%m-%d`.                 |\n| `%v`  | ` 8-Jul-2001` | Day-month-year format. Same as `%e-%b-%Y`.                            |\n|       |          |                                                                            |\n|       |          | **TIME SPECIFIERS:**                                                       |\n| `%H`  | `00`     | Hour number (00--23), zero-padded to 2 digits.                             |\n| `%k`  | ` 0`     | Same as `%H` but space-padded. Same as `%_H`.                              |\n| `%I`  | `12`     | Hour number in 12-hour clocks (01--12), zero-padded to 2 digits.           |\n| `%l`  | `12`     | Same as `%I` but space-padded. Same as `%_I`.                              |\n|       |          |                                                                            |\n| `%P`  | `am`     | `am` or `pm` in 12-hour clocks.                                            |\n| `%p`  | `AM`     | `AM` or `PM` in 12-hour clocks.                                            |\n|       |          |                                                                            |\n| `%M`  | `34`     | Minute number (00--59), zero-padded to 2 digits.                           |\n| `%S`  | `60`     | Second number (00--60), zero-padded to 2 digits. [^4]                      |\n| `%f`  | `26490000`    | Number of nanoseconds since last whole second. [^7]                   |\n| `%.f` | `.026490`| Decimal fraction of a second. Consumes the leading dot. [^7]               |\n| `%.3f`| `.026`        | Decimal fraction of a second with a fixed length of 3.                |\n| `%.6f`| `.026490`     | Decimal fraction of a second with a fixed length of 6.                |\n| `%.9f`| `.026490000`  | Decimal fraction of a second with a fixed length of 9.                |\n| `%3f` | `026`         | Decimal fraction of a second like `%.3f` but without the leading dot. |\n| `%6f` | `026490`      | Decimal fraction of a second like `%.6f` but without the leading dot. |\n| `%9f` | `026490000`   | Decimal fraction of a second like `%.9f` but without the leading dot. |\n|       |               |                                                                       |\n| `%R`  | `00:34`       | Hour-minute format. Same as `%H:%M`.                                  |\n| `%T`  | `00:34:60`    | Hour-minute-second format. Same as `%H:%M:%S`.                        |\n| `%X`  | `00:34:60`    | Locale's time representation (e.g., 23:13:48).                        |\n| `%r`  | `12:34:60 AM` | Locale's 12 hour clock time. (e.g., 11:11:04 PM). Falls back to `%X` if the locale does not have a 12 hour clock format. |\n|       |          |                                                                            |\n|       |          | **TIME ZONE SPECIFIERS:**                                                  |\n| `%Z`  | `ACST`   | Local time zone name. Skips all non-whitespace characters during parsing. Identical to `%:z` when formatting. [^8] |\n| `%z`  | `+0930`  | Offset from the local time to UTC (with UTC being `+0000`).                |\n| `%:z` | `+09:30` | Same as `%z` but with a colon.                                             |\n|`%::z`|`+09:30:00`| Offset from the local time to UTC with seconds.                            |\n|`%:::z`| `+09`    | Offset from the local time to UTC without minutes.                         |\n| `%#z` | `+09`    | *Parsing only:* Same as `%z` but allows minutes to be missing or present.  |\n|       |          |                                                                            |\n|       |          | **DATE & TIME SPECIFIERS:**                                                |\n|`%c`|`Sun Jul  8 00:34:60 2001`|Locale's date and time (e.g., Thu Mar  3 23:05:25 2005).       |\n| `%+`  | `2001-07-08T00:34:60.026490+09:30` | ISO 8601 / RFC 3339 date & time format. [^5]     |\n|       |               |                                                                       |\n| `%s`  | `994518299`   | UNIX timestamp, the number of seconds since 1970-01-01 00:00 UTC. [^6]|\n|       |          |                                                                            |\n|       |          | **SPECIAL SPECIFIERS:**                                                    |\n| `%t`  |          | Literal tab (`\\t`).                                                        |\n| `%n`  |          | Literal newline (`\\n`).                                                    |\n| `%%`  |          | Literal percent sign.                                                      |\n\nIt is possible to override the default padding behavior of numeric specifiers `%?`.\nThis is not allowed for other specifiers and will result in the `BAD_FORMAT` error.\n\nModifier | Description\n-------- | -----------\n`%-?`    | Suppresses any padding including spaces and zeroes. (e.g. `%j` = `012`, `%-j` = `12`)\n`%_?`    | Uses spaces as a padding. (e.g. `%j` = `012`, `%_j` = ` 12`)\n`%0?`    | Uses zeroes as a padding. (e.g. `%e` = ` 9`, `%0e` = `09`)\n\nNotes:\n\n[^1]: `%C`, `%y`:\n   This is floor division, so 100 BCE (year number -99) will print `-1` and `99` respectively.\n\n[^2]: `%U`:\n   Week 1 starts with the first Sunday in that year.\n   It is possible to have week 0 for days before the first Sunday.\n\n[^3]: `%G`, `%g`, `%V`:\n   Week 1 is the first week with at least 4 days in that year.\n   Week 0 does not exist, so this should be used with `%G` or `%g`.\n\n[^4]: `%S`:\n   It accounts for leap seconds, so `60` is possible.\n\n[^5]: `%+`: Same as `%Y-%m-%dT%H:%M:%S%.f%:z`, i.e. 0, 3, 6 or 9 fractional\n   digits for seconds and colons in the time zone offset.\n   <br>\n   <br>\n   This format also supports having a `Z` or `UTC` in place of `%:z`. They\n   are equivalent to `+00:00`.\n   <br>\n   <br>\n   Note that all `T`, `Z`, and `UTC` are parsed case-insensitively.\n   <br>\n   <br>\n   The typical `strftime` implementations have different (and locale-dependent)\n   formats for this specifier. While Chrono's format for `%+` is far more\n   stable, it is best to avoid this specifier if you want to control the exact\n   output.\n\n[^6]: `%s`:\n   This is not padded and can be negative.\n   For the purpose of Chrono, it only accounts for non-leap seconds\n   so it slightly differs from ISO C `strftime` behavior.\n\n[^7]: `%f`, `%.f`:\n   <br>\n   `%f` and `%.f` are notably different formatting specifiers.<br>\n   `%f` counts the number of nanoseconds since the last whole second, while `%.f` is a fraction of a\n   second.<br>\n   Example: 7μs is formatted as `7000` with `%f`, and formatted as `.000007` with `%.f`.\n\n[^8]: `%Z`:\n   Since `chrono` is not aware of timezones beyond their offsets, this specifier\n   **only prints the offset** when used for formatting. The timezone abbreviation\n   will NOT be printed. See [this issue](https://github.com/chronotope/chrono/issues/960)\n   for more information.\n   <br>\n   <br>\n   Offset will not be populated from the parsed data, nor will it be validated.\n   Timezone is completely ignored. Similar to the glibc `strptime` treatment of\n   this format code.\n   <br>\n   <br>\n   It is not possible to reliably convert from an abbreviation to an offset,\n   for example CDT can mean either Central Daylight Time (North America) or\n   China Daylight Time.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:2247:2887"],"is_stripped":false}}},"a:2:41969:9654-0:2562:2361":{"id":"a:2:41969:9654-0:2562:2361","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3201":{"id":"0:3201","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,44],"end":[31,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3202:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3164:3920":{"id":"0:3164:3920","crate_id":0,"name":"April","span":{"filename":"src/month.rs","begin":[49,4],"end":[49,13]},"visibility":"default","docs":"April","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"3","value":"3"}}}},"0:753:3477":{"id":"0:753:3477","crate_id":0,"name":"second","span":{"filename":"src/format/parsed.rs","begin":[1110,4],"end":[1112,5]},"visibility":"public","docs":"Get the `second` field if set.\n\nSee also [`set_second()`](Parsed::set_second).","links":{"Parsed::set_second":"0:713:4367"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:2706:2365":{"id":"b:2:2628-0:2706:2365","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41969:9654-0:2706:2365":{"id":"a:2:41969:9654-0:2706:2365","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:736-0:2766:2346":{"id":"b:5:736-0:2766:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32165:9507-0:2183:2341":{"id":"a:2:32165:9507-0:2183:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[481,0],"end":[486,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33400:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:1722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:747:2372":{"id":"0:747:2372","crate_id":0,"name":"weekday","span":{"filename":"src/format/parsed.rs","begin":[1061,4],"end":[1063,5]},"visibility":"public","docs":"Get the `weekday` field if set.\n\nSee also [`set_weekday()`](Parsed::set_weekday).","links":{"Parsed::set_weekday":"0:706:4339"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:930-0:793:3071":{"id":"0:930-0:793:3071","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[69,16],"end":[69,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"parse::parse","name":"parse","id":"0:793:3071","glob":false}}},"0:1331":{"id":"0:1331","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[2000,0],"end":[2006,1]},"visibility":"default","docs":"Add `Days` to `NaiveDateTime`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `checked_add_days` to get an `Option` instead.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1332:198","0:1333:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1537-0:1211:2359":{"id":"0:1537-0:1211:2359","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[25,54],"end":[25,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"self::datetime::MIN_DATETIME","name":"MIN_DATETIME","id":"0:1211:2359","glob":false}}},"0:1602:3112":{"id":"0:1602:3112","crate_id":0,"name":"fix","span":{"filename":"src/offset/fixed.rs","begin":[150,4],"end":[152,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13253:41655":{"id":"2:13253:41655","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1022:5848":{"id":"0:1022:5848","crate_id":0,"name":"from_yo","span":{"filename":"src/naive/date/mod.rs","begin":[215,4],"end":[217,5]},"visibility":"public","docs":"Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n(year and day of the year).\n\n# Panics\n\nPanics if the specified ordinal day does not exist, on invalid values for `ordinal`, or if\n`year` is out of range for `NaiveDate`.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `from_yo_opt()` instead\")]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_yo_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"i32"}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3083:788":{"id":"0:3083:788","crate_id":0,"name":"fmt","span":{"filename":"src/offset/mod.rs","begin":[58,27],"end":[58,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2027:2972":{"id":"0:2027:2972","crate_id":0,"name":"succ","span":{"filename":"src/weekday.rs","begin":[67,4],"end":[77,5]},"visibility":"public","docs":"The next day in the week.\n\n`w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`\n----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----\n`w.succ()`: | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun` | `Mon`","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:392:818":{"id":"0:392:818","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[892,4],"end":[894,5]},"visibility":"default","docs":"Convert this `DateTime<Utc>` instance into a `DateTime<FixedOffset>` instance.\n\nConversion is done via [`DateTime::with_timezone`]. Note that the converted value returned by\nthis will be created with a fixed timezone offset of 0.","links":{"`DateTime::with_timezone`":"0:353:2987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2347":{"id":"0:2347","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[102,16],"end":[102,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2348:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3221":{"id":"0:3221","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,39],"end":[227,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1093:3036":{"id":"0:1093:3036","crate_id":0,"name":"with_year","span":{"filename":"src/naive/date/mod.rs","begin":[1670,4],"end":[1679,5]},"visibility":"default","docs":"Makes a new `NaiveDate` with the year number changed, while keeping the same month and day.\n\nThis method assumes you want to work on the date as a year-month-day value. Don't use it if\nyou want the ordinal to stay the same after changing the year, of if you want the week and\nweekday values to stay the same.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (February 29 in a non-leap year).\n- The year is out of range for a `NaiveDate`.\n\n# Examples\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_year(2016),\n    Some(NaiveDate::from_ymd_opt(2016, 9, 8).unwrap())\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_year(-308),\n    Some(NaiveDate::from_ymd_opt(-308, 9, 8).unwrap())\n);\n```\n\nA leap day (February 29) is a case where this method can return `None`.\n\n```\n# use chrono::{NaiveDate, Datelike};\nassert!(NaiveDate::from_ymd_opt(2016, 2, 29).unwrap().with_year(2015).is_none());\nassert!(NaiveDate::from_ymd_opt(2016, 2, 29).unwrap().with_year(2020).is_some());\n```\n\nDon't use `with_year` if you want the ordinal date to stay the same:\n\n```\n# use chrono::{Datelike, NaiveDate};\nassert_ne!(\n    NaiveDate::from_yo_opt(2020, 100).unwrap().with_year(2023).unwrap(),\n    NaiveDate::from_yo_opt(2023, 100).unwrap() // result is 2023-101\n);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2075-0:3208:2376":{"id":"0:2075-0:3208:2376","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[593,23],"end":[593,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"month::Months","name":"Months","id":"0:3208:2376","glob":false}}},"0:2186:4000":{"id":"0:2186:4000","crate_id":0,"name":"Millis","span":{"filename":"src/format/formatting.rs","begin":[514,4],"end":[514,10]},"visibility":"default","docs":"Use fixed 3 subsecond digits. This corresponds to [Fixed::Nanosecond3].","links":{"Fixed::Nanosecond3":"0:2383:3757"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:82:1128":{"id":"0:82:1128","crate_id":0,"name":"mul","span":{"filename":"src/time_delta.rs","begin":[491,4],"end":[497,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1508:198":{"id":"0:1508:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/time/mod.rs","begin":[1385,4],"end":[1385,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:270":{"id":"0:270","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[544,0],"end":[552,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1941:2352","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:272:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:713:4367":{"id":"0:713:4367","crate_id":0,"name":"set_second","span":{"filename":"src/format/parsed.rs","begin":[496,4],"end":[501,5]},"visibility":"public","docs":"Set the [`second`](Parsed::second) field to the given value.\n\nThe value can be 60 in the case of a leap second.\n\n# Errors\n\nReturns `OUT_OF_RANGE` if `value` is not in the range 0-60.\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::second":"0:753:3477"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2072-0:3228:2375":{"id":"0:2072-0:3228:2375","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[592,0],"end":[592,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"month::ParseMonthError","name":"ParseMonthError","id":"0:3228:2375","glob":false}}},"0:2317:3702":{"id":"0:2317:3702","crate_id":0,"name":"WeekFromSun","span":{"filename":"src/format/mod.rs","begin":[123,4],"end":[123,15]},"visibility":"default","docs":"Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2417":{"id":"0:2417","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[174,31],"end":[174,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2418:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2898-0:2608:2348":{"id":"b:2:2898-0:2608:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2430:686":{"id":"0:2430:686","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[258,23],"end":[258,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2750:463":{"id":"0:2750:463","crate_id":0,"name":"clone","span":{"filename":"src/naive/mod.rs","begin":[134,9],"end":[134,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2913-0:2475:3806":{"id":"b:2:2913-0:2475:3806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:5863-0:3145:2373":{"id":"b:5:5863-0:3145:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5861:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5865:1763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2902-0:3145:2373":{"id":"b:2:2902-0:3145:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2323:3707":{"id":"0:2323:3707","crate_id":0,"name":"NumDaysFromSun","span":{"filename":"src/format/mod.rs","begin":[129,4],"end":[129,18]},"visibility":"default","docs":"Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1015:2354":{"id":"0:1015:2354","crate_id":0,"name":"MAX_DATE","span":{"filename":"src/naive/date/mod.rs","begin":[111,0],"end":[111,47]},"visibility":"public","docs":"The maximum possible `NaiveDate` (December 31, 262143 CE).","links":{},"attrs":["#[deprecated(since = \"0.4.20\", note = \"Use NaiveDate::MAX instead\")]"],"deprecation":{"since":"0.4.20","note":"Use NaiveDate::MAX instead"},"inner":{"constant":{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"NaiveDate::MAX","value":null,"is_literal":false}}},"0:2508":{"id":"0:2508","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[317,9],"end":[317,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2509:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3121:246-0:2475:3806":{"id":"a:2:3121:246-0:2475:3806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1905:7744":{"id":"0:1905:7744","crate_id":0,"name":"offset_from_local_date","span":{"filename":"src/offset/utc.rs","begin":[121,4],"end":[123,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:2457:3803":{"id":"b:2:2908-0:2457:3803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:751:4286":{"id":"0:751:4286","crate_id":0,"name":"hour_mod_12","span":{"filename":"src/format/parsed.rs","begin":[1094,4],"end":[1096,5]},"visibility":"public","docs":"Get the `hour_mod_12` field if set.\n\nSee also [`set_hour12()`](Parsed::set_hour12) and [`set_hour()`](Parsed::set_hour).","links":{"Parsed::set_hour":"0:711:4360","Parsed::set_hour12":"0:710:4354"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:736-0:2501:3809":{"id":"b:5:736-0:2501:3809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2566:788":{"id":"0:2566:788","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[386,9],"end":[386,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[521,0],"end":[526,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33400:2567","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:262:1722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:386:60":{"id":"0:386:60","crate_id":0,"name":"default","span":{"filename":"src/datetime/mod.rs","begin":[868,4],"end":[870,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1339":{"id":"0:1339","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[2084,0],"end":[2090,1]},"visibility":"default","docs":"The `Display` output of the naive date and time `dt` is the same as\n[`dt.format(\"%Y-%m-%d %H:%M:%S%.f\")`](crate::format::strftime).\n\nIt should be noted that, for leap seconds not on the minute boundary,\nit may print a representation not distinguishable from non-leap seconds.\nThis doesn't matter in practice, since such leap seconds never happened.\n(By the time of the first leap second on 1972-06-30,\nevery time zone offset around the world has standardized to the 5-minute alignment.)\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet dt = NaiveDate::from_ymd_opt(2016, 11, 15).unwrap().and_hms_opt(7, 39, 24).unwrap();\nassert_eq!(format!(\"{}\", dt), \"2016-11-15 07:39:24\");\n```\n\nLeap seconds may also be used.\n\n```\n# use chrono::NaiveDate;\nlet dt =\n    NaiveDate::from_ymd_opt(2015, 6, 30).unwrap().and_hms_milli_opt(23, 59, 59, 1_500).unwrap();\nassert_eq!(format!(\"{}\", dt), \"2015-06-30 23:59:60.500\");\n```","links":{"crate::format::strftime":"0:864:3658"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1340:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32106:236-0:2706:2365":{"id":"a:2:32106:236-0:2706:2365","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2908-0:3154:2343":{"id":"b:2:2908-0:3154:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2283:3669":{"id":"0:2283:3669","crate_id":0,"name":"Zero","span":{"filename":"src/format/mod.rs","begin":[83,4],"end":[83,8]},"visibility":"default","docs":"Zero (`0`) padding.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1235:3216":{"id":"0:1235:3216","crate_id":0,"name":"checked_add_months","span":{"filename":"src/naive/datetime/mod.rs","begin":[570,4],"end":[572,5]},"visibility":"public","docs":"Adds given `Months` to the current date and time.\n\nUses the last day of the month if the day does not exist in the resulting month.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\nuse chrono::{Months, NaiveDate};\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1)\n        .unwrap()\n        .and_hms_opt(1, 0, 0)\n        .unwrap()\n        .checked_add_months(Months::new(1)),\n    Some(NaiveDate::from_ymd_opt(2014, 2, 1).unwrap().and_hms_opt(1, 0, 0).unwrap())\n);\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1)\n        .unwrap()\n        .and_hms_opt(1, 0, 0)\n        .unwrap()\n        .checked_add_months(Months::new(core::i32::MAX as u32 + 1)),\n    None\n);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2381:3723":{"id":"0:2381:3723","crate_id":0,"name":"Nanosecond","span":{"filename":"src/format/mod.rs","begin":[203,4],"end":[203,14]},"visibility":"default","docs":"An optional dot plus one or more digits for left-aligned nanoseconds.\nMay print nothing, 3, 6 or 9 digits according to the available accuracy.\nSee also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1043:2938":{"id":"0:1043:2938","crate_id":0,"name":"and_hms_opt","span":{"filename":"src/naive/date/mod.rs","begin":[751,4],"end":[754,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date, hour, minute and second.\n\nNo [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;\nuse `NaiveDate::and_hms_*_opt` methods with a subsecond parameter instead.\n\n# Errors\n\nReturns `None` on invalid hour, minute and/or second.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet d = NaiveDate::from_ymd_opt(2015, 6, 3).unwrap();\nassert!(d.and_hms_opt(12, 34, 56).is_some());\nassert!(d.and_hms_opt(12, 34, 60).is_none()); // use `and_hms_milli_opt` instead\nassert!(d.and_hms_opt(12, 60, 56).is_none());\nassert!(d.and_hms_opt(24, 34, 56).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179:1215":{"id":"0:179:1215","crate_id":0,"name":"offset","span":{"filename":"src/date.rs","begin":[241,4],"end":[243,5]},"visibility":"public","docs":"Retrieves an associated offset from UTC.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1941:2352","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1307:198":{"id":"0:1307:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[1699,4],"end":[1699,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:3211":{"id":"0:3211","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,9],"end":[227,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3212:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3213":{"id":"0:3213","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,16],"end":[227,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:931-0:797:3072":{"id":"0:931-0:797:3072","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[69,23],"end":[69,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"parse::parse_and_remainder","name":"parse_and_remainder","id":"0:797:3072","glob":false}}},"0:962":{"id":"0:962","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[531,0],"end":[555,1]},"visibility":"default","docs":"Parsing a `str` into a `Month` uses the format [`%B`](./format/strftime/index.html).\n\n# Example\n\n```\nuse chrono::Month;\n\nassert_eq!(\"January\".parse::<Month>(), Ok(Month::January));\nassert!(\"any day\".parse::<Month>().is_err());\n```\n\nThe parsing is case-insensitive.\n\n```\n# use chrono::Month;\nassert_eq!(\"fEbruARy\".parse::<Month>(), Ok(Month::February));\n```\n\nOnly the shortest form (e.g. `jan`) and the longest form (e.g. `january`) is accepted.\n\n```\n# use chrono::Month;\nassert!(\"septem\".parse::<Month>().is_err());\nassert!(\"Augustin\".parse::<Month>().is_err());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12808:3566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:963:135","0:964:3567"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2583:3871":{"id":"0:2583:3871","crate_id":0,"name":"NotEnough","span":{"filename":"src/format/mod.rs","begin":[414,4],"end":[414,13]},"visibility":"default","docs":"Given set of fields is not enough to make a requested date and time value.\n\nNote that there *may* be a case that given fields constrain the possible values so much\nthat there is a unique possible value. Chrono only tries to be correct for\nmost useful sets of fields however, as such constraint solving can be expensive.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:111-0:2165:2340":{"id":"0:111-0:2165:2340","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[539,20],"end":[539,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::DateTime","name":"DateTime","id":"0:2165:2340","glob":false}}},"0:355:3202":{"id":"0:355:3202","crate_id":0,"name":"fixed_offset","span":{"filename":"src/datetime/mod.rs","begin":[423,4],"end":[425,5]},"visibility":"public","docs":"Fix the offset from UTC to its current value, dropping the associated timezone information.\nThis it useful for converting a generic `DateTime<Tz: Timezone>` to `DateTime<FixedOffset>`.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1990:2339":{"id":"0:1990:2339","crate_id":0,"name":"SubsecRound","span":{"filename":"src/round.rs","begin":[17,0],"end":[50,1]},"visibility":"public","docs":"Extension trait for subsecond rounding or truncation to a maximum number\nof digits. Rounding can be used to decrease the error variance when\nserializing/persisting to lower precision. Truncation is the default\nbehavior in Chrono display formatting.  Either can be used to guarantee\nequality (e.g. for testing) when round-tripping through a lower precision\nformat.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:1991:8591","0:1992:8596"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:1993"]}}},"0:1120":{"id":"0:1120","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2075,0],"end":[2080,1]},"visibility":"default","docs":"Subtract-assign `TimeDelta` from `NaiveDate`.\n\nThis discards the fractional days in `TimeDelta`, rounding to the closest integral number of\ndays towards `TimeDelta::zero()`.\nIt is the same as the addition with a negated `TimeDelta`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDate::checked_sub_signed`] to get an `Option` instead.","links":{"`NaiveDate::checked_sub_signed`":"0:1057:2995"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33400:2567","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1121:1722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41969:9654-0:2422:3788":{"id":"a:2:41969:9654-0:2422:3788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2612:686":{"id":"0:2612:686","crate_id":0,"name":"eq","span":{"filename":"src/naive/date/mod.rs","begin":[94,9],"end":[94,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1877:2984":{"id":"0:1877:2984","crate_id":0,"name":"from_offset","span":{"filename":"src/offset/local/mod.rs","begin":[168,4],"end":[170,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["_offset",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1946:7686":{"id":"0:1946:7686","crate_id":0,"name":"ymd_opt","span":{"filename":"src/offset/mod.rs","begin":[328,4],"end":[333,5]},"visibility":"default","docs":"Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n\nThe time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),\nbut it will propagate to the `DateTime` values constructed via this date.\n\nReturns `None` on the out-of-range date, invalid month and/or day.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `with_ymd_and_hms()` instead\")]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.23","note":"use `with_ymd_and_hms()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}],["month",{"primitive":"u32"}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:736-0:2422:3788":{"id":"b:5:736-0:2422:3788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3156:9919-0:2706:2365":{"id":"a:2:3156:9919-0:2706:2365","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:36:2633":{"id":"0:36:2633","crate_id":0,"name":"days","span":{"filename":"src/time_delta.rs","begin":[132,4],"end":[134,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of days.\n\nEquivalent to `TimeDelta::seconds(days * 24 * 60 * 60)` with overflow\nchecks.\n\n# Panics\n\nPanics when the `TimeDelta` would be out of bounds.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["days",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3133":{"id":"0:3133","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[32,9],"end":[32,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3134:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2296:788":{"id":"0:2296:788","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[78,37],"end":[78,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2083:2374":{"id":"0:2083:2374","crate_id":0,"name":"month","span":{"filename":"src/traits.rs","begin":[50,4],"end":[50,27]},"visibility":"default","docs":"Returns the month number starting from 1.\n\nThe return value ranges from 1 to 12.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:3200:788":{"id":"0:3200:788","crate_id":0,"name":"fmt","span":{"filename":"src/month.rs","begin":[31,37],"end":[31,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:367:3000":{"id":"0:367:3000","crate_id":0,"name":"signed_duration_since","span":{"filename":"src/datetime/mod.rs","begin":[556,4],"end":[561,5]},"visibility":"public","docs":"Subtracts another `DateTime` from the current date and time.\nThis does not overflow or underflow at all.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"impl_trait":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Tz2","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"impl Borrow<DateTime<Tz2>>","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:498":{"id":"0:498","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1569,0],"end":[1575,1]},"visibility":"default","docs":"Add `Months` to `DateTime`.\n\nThe result will be clamped to valid days in the resulting month, see `checked_add_months` for\ndetails.\n\n# Panics\n\nPanics if:\n- The resulting date would be out of range.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.\n\nStrongly consider using [`DateTime<Tz>::checked_add_months`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_add_months`":"0:358:3216"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:500:198","0:501:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13216:34971":{"id":"2:13216:34971","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12848:9229","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::split":"2:13210:34967"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43774:9260","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:9245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:2634":{"id":"0:37:2634","crate_id":0,"name":"try_days","span":{"filename":"src/time_delta.rs","begin":[145,4],"end":[147,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of days.\n\nEquivalent to `TimeDelta::try_seconds(days * 24 * 60 * 60)` with overflow\nchecks.\n\n# Errors\n\nReturns `None` when the `TimeDelta` would be out of bounds.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["days",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1044:2946":{"id":"0:1044:2946","crate_id":0,"name":"and_hms_milli","span":{"filename":"src/naive/date/mod.rs","begin":[767,4],"end":[769,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.\n\nThe millisecond part is allowed to exceed 1,000,000,000 in order to represent a [leap second](\n./struct.NaiveTime.html#leap-second-handling), but only when `sec == 59`.\n\n# Panics\n\nPanics on invalid hour, minute, second and/or millisecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `and_hms_milli_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `and_hms_milli_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["milli",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2434:858":{"id":"0:2434:858","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[258,38],"end":[258,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:3093:2371":{"id":"a:2:3121:246-0:3093:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[500,0],"end":[518,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Div","id":"2:32849:2563","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:198","0:85:637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1991:8591":{"id":"0:1991:8591","crate_id":0,"name":"round_subsecs","span":{"filename":"src/round.rs","begin":[33,4],"end":[33,48]},"visibility":"default","docs":"Return a copy rounded to the specified number of subsecond digits. With\n9 or more digits, self is returned unmodified. Halfway values are\nrounded up (away from zero).\n\n# Example\n``` rust\n# use chrono::{SubsecRound, Timelike, NaiveDate};\nlet dt = NaiveDate::from_ymd_opt(2018, 1, 11)\n    .unwrap()\n    .and_hms_milli_opt(12, 0, 0, 154)\n    .unwrap()\n    .and_utc();\nassert_eq!(dt.round_subsecs(2).nanosecond(), 150_000_000);\nassert_eq!(dt.round_subsecs(1).nanosecond(), 200_000_000);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["digits",{"primitive":"u16"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:3156:9919-0:2663:2349":{"id":"a:2:3156:9919-0:2663:2349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1343:3567":{"id":"0:1343:3567","crate_id":0,"name":"from_str","span":{"filename":"src/naive/datetime/mod.rs","begin":[2111,4],"end":[2136,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1936":{"id":"0:1936","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[246,0],"end":[268,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:1938:1887"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2486:3829":{"id":"0:2486:3829","crate_id":0,"name":"OptionalMinutesAndSeconds","span":{"filename":"src/format/mod.rs","begin":[313,4],"end":[313,29]},"visibility":"default","docs":"Format offset from UTC as hours and optionally minutes and seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:3199":{"id":"0:3199","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,37],"end":[31,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3200:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32106:236-0:2644:5704":{"id":"a:2:32106:236-0:2644:5704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32165:9507-0:2174:2886":{"id":"a:2:32165:9507-0:2174:2886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3064:4457":{"id":"0:3064:4457","crate_id":0,"name":"Single","span":{"filename":"src/offset/mod.rs","begin":[63,4],"end":[63,13]},"visibility":"default","docs":"The local time maps to a single unique result.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:3066:1956"]},"discriminant":null}}},"0:1992:8596":{"id":"0:1992:8596","crate_id":0,"name":"trunc_subsecs","span":{"filename":"src/round.rs","begin":[49,4],"end":[49,48]},"visibility":"default","docs":"Return a copy truncated to the specified number of subsecond\ndigits. With 9 or more digits, self is returned unmodified.\n\n# Example\n``` rust\n# use chrono::{SubsecRound, Timelike, NaiveDate};\nlet dt = NaiveDate::from_ymd_opt(2018, 1, 11)\n    .unwrap()\n    .and_hms_milli_opt(12, 0, 0, 154)\n    .unwrap()\n    .and_utc();\nassert_eq!(dt.trunc_subsecs(2).nanosecond(), 150_000_000);\nassert_eq!(dt.trunc_subsecs(1).nanosecond(), 100_000_000);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["digits",{"primitive":"u16"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:32106:236-0:3154:2343":{"id":"a:2:32106:236-0:3154:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:227:3042":{"id":"0:227:3042","crate_id":0,"name":"with_ordinal0","span":{"filename":"src/date.rs","begin":[461,4],"end":[463,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2315:3700":{"id":"0:2315:3700","crate_id":0,"name":"Day","span":{"filename":"src/format/mod.rs","begin":[121,4],"end":[121,7]},"visibility":"default","docs":"Day of the month (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:534:198":{"id":"0:534:198","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1726,4],"end":[1726,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:2002":{"id":"0:2002","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[158,0],"end":[168,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DurationRound","id":"0:1998:2370","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:2004:135","0:2005:8614","0:2006:8619"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2913-0:2457:3803":{"id":"b:2:2913-0:2457:3803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:736-0:2663:2349":{"id":"b:5:736-0:2663:2349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2709":{"id":"0:2709","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[19,9],"end":[19,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2710:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41969:9654-0:2766:2346":{"id":"a:2:41969:9654-0:2766:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3093:2371":{"id":"0:3093:2371","crate_id":0,"name":"RoundingError","span":{"filename":"src/round.rs","begin":[248,0],"end":[283,1]},"visibility":"public","docs":"An error from rounding by `TimeDelta`\n\nSee: [`DurationRound`]","links":{"`DurationRound`":"0:1998:2370"},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:3094:8628","0:3096:8621","0:3098:8623"],"impls":["a:2:32106:236-0:3093:2371","a:2:3121:246-0:3093:2371","a:2:3156:9919-0:3093:2371","a:2:32165:9507-0:3093:2371","a:2:41968:9655-0:3093:2371","a:2:41969:9654-0:3093:2371","b:2:2913-0:3093:2371","b:2:2898-0:3093:2371","b:2:2625-0:3093:2371","b:2:2902-0:3093:2371","b:2:2628-0:3093:2371","b:2:3737-0:3093:2371","b:2:2908-0:3093:2371","b:5:736-0:3093:2371","b:5:5863-0:3093:2371","0:3105","0:2015","0:3100","0:3102","0:3109","0:3104","0:3107","0:2017"]}}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[945,0],"end":[952,1]},"visibility":"default","docs":"Convert a `DateTime<Local>` instance into a `DateTime<FixedOffset>` instance.","links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:402:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:710:4354":{"id":"0:710:4354","crate_id":0,"name":"set_hour12","span":{"filename":"src/format/parsed.rs","begin":[441,4],"end":[449,5]},"visibility":"public","docs":"Set the [`hour_mod_12`](Parsed::hour_mod_12) field, for the hour number in 12-hour clocks,\nto the given value.\n\nValue must be in the canonical range of 1-12.\nIt will internally be stored as 0-11 (`value % 12`).\n\n# Errors\n\nReturns `OUT_OF_RANGE` if `value` is not in the range 1-12.\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::hour_mod_12":"0:751:4286"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2538:1957":{"id":"0:2538:1957","crate_id":0,"name":"1","span":{"filename":"src/format/mod.rs","begin":[342,21],"end":[342,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"a:2:3121:246-0:2741:2366":{"id":"a:2:3121:246-0:2741:2366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2741:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3042:2336":{"id":"0:3042:2336","crate_id":0,"name":"Local","span":{"filename":"src/offset/local/mod.rs","begin":[122,0],"end":[122,17]},"visibility":"public","docs":"The local timescale.\n\nUsing the [`TimeZone`](./trait.TimeZone.html) methods\non the Local struct is the preferred way to construct `DateTime<Local>`\ninstances.\n\n# Example\n\n```\nuse chrono::{DateTime, Local, TimeZone};\n\nlet dt1: DateTime<Local> = Local::now();\nlet dt2: DateTime<Local> = Local.timestamp_opt(0, 0).unwrap();\nassert!(dt1 >= dt2);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["0:1872","a:2:32106:236-0:3042:2336","a:2:3121:246-0:3042:2336","a:2:3156:9919-0:3042:2336","a:2:32165:9507-0:3042:2336","a:2:41968:9655-0:3042:2336","a:2:41969:9654-0:3042:2336","b:2:2913-0:3042:2336","b:2:2898-0:3042:2336","b:2:2625-0:3042:2336","b:2:2902-0:3042:2336","b:2:2628-0:3042:2336","b:2:3737-0:3042:2336","b:2:2908-0:3042:2336","b:5:736-0:3042:2336","0:3047","0:3045","0:1875","0:3044"]}}},"0:3198:463":{"id":"0:3198:463","crate_id":0,"name":"clone","span":{"filename":"src/month.rs","begin":[31,30],"end":[31,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2913-0:2356:3731":{"id":"b:2:2913-0:2356:3731","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:736-0:2356:3731":{"id":"b:5:736-0:2356:3731","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32106:236-0:3042:2336":{"id":"a:2:32106:236-0:3042:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13222:41650":{"id":"2:13222:41650","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12848:9229","str::split":"2:13210:34967","prim@char":"1:12332:459","str::split_terminator":"2:13219:41649"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43824:9261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:9245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:9919-0:2356:3731":{"id":"a:2:3156:9919-0:2356:3731","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41968:9655-0:2521:172":{"id":"a:2:41968:9655-0:2521:172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2571:686":{"id":"0:2571:686","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[386,23],"end":[386,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:478:858":{"id":"0:478:858","crate_id":0,"name":"hash","span":{"filename":"src/datetime/mod.rs","begin":[1456,4],"end":[1458,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1960:7746":{"id":"0:1960:7746","crate_id":0,"name":"offset_from_local_datetime","span":{"filename":"src/offset/mod.rs","begin":[552,4],"end":[552,97]},"visibility":"default","docs":"Creates the offset(s) for given local `NaiveDateTime` if possible.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:1941:2352","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:564-0:334:2358":{"id":"0:564-0:334:2358","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[559,19],"end":[559,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"datetime::MAX_DATETIME","name":"MAX_DATETIME","id":"0:334:2358","glob":false}}},"5:5630:8268":{"id":"5:5630:8268","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:3145:2373":{"id":"b:2:2908-0:3145:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2898-0:2663:2349":{"id":"b:2:2898-0:2663:2349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[458,0],"end":[464,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:198","0:72:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2200:788":{"id":"0:2200:788","crate_id":0,"name":"fmt","span":{"filename":"src/format/formatting.rs","begin":[507,22],"end":[507,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13280:34829":{"id":"2:13280:34829","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2333:3717":{"id":"0:2333:3717","crate_id":0,"name":"Minute","span":{"filename":"src/format/mod.rs","begin":[139,4],"end":[139,10]},"visibility":"default","docs":"The number of minutes since the last whole hour (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:3156:9919-0:2608:2348":{"id":"a:2:3156:9919-0:2608:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1142":{"id":"0:1142","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2194,0],"end":[2194,48]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"2:8647:148","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3737-0:2766:2346":{"id":"b:2:3737-0:2766:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32165:9507-0:3145:2373":{"id":"a:2:32165:9507-0:3145:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5863-0:2562:2361":{"id":"b:5:5863-0:2562:2361","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5861:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5865:1763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:117-0:3110:2345":{"id":"0:117-0:3110:2345","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[540,47],"end":[540,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Weekday","name":"Weekday","id":"0:3110:2345","glob":false}}},"0:2739":{"id":"0:2739","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[215,53],"end":[215,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2740:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2523:3838":{"id":"0:2523:3838","crate_id":0,"name":"Literal","span":{"filename":"src/format/mod.rs","begin":[331,4],"end":[331,20]},"visibility":"default","docs":"A literally printed and parsed text.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2525:1956"]},"discriminant":null}}},"0:2034":{"id":"0:2034","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[163,0],"end":[175,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2035:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1045:2948":{"id":"0:1045:2948","crate_id":0,"name":"and_hms_milli_opt","span":{"filename":"src/naive/date/mod.rs","begin":[795,4],"end":[804,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.\n\nThe millisecond part is allowed to exceed 1,000,000,000 in order to represent a [leap second](\n./struct.NaiveTime.html#leap-second-handling), but only when `sec == 59`.\n\n# Errors\n\nReturns `None` on invalid hour, minute, second and/or millisecond.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet d = NaiveDate::from_ymd_opt(2015, 6, 3).unwrap();\nassert!(d.and_hms_milli_opt(12, 34, 56, 789).is_some());\nassert!(d.and_hms_milli_opt(12, 34, 59, 1_789).is_some()); // leap second\nassert!(d.and_hms_milli_opt(12, 34, 59, 2_789).is_none());\nassert!(d.and_hms_milli_opt(12, 34, 60, 789).is_none());\nassert!(d.and_hms_milli_opt(12, 60, 56, 789).is_none());\nassert!(d.and_hms_milli_opt(24, 34, 56, 789).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["milli",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1126:818":{"id":"0:1126:818","crate_id":0,"name":"from","span":{"filename":"src/naive/date/mod.rs","begin":[2122,4],"end":[2124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["naive_datetime",{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:535:295":{"id":"0:535:295","crate_id":0,"name":"add","span":{"filename":"src/datetime/mod.rs","begin":[1728,4],"end":[1730,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3167:2561","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1147:788":{"id":"0:1147:788","crate_id":0,"name":"fmt","span":{"filename":"src/naive/date/mod.rs","begin":[2262,4],"end":[2264,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1953:3153":{"id":"0:1953:3153","crate_id":0,"name":"timestamp_millis","span":{"filename":"src/offset/mod.rs","begin":[459,4],"end":[461,5]},"visibility":"default","docs":"Makes a new `DateTime` from the number of non-leap milliseconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").\n\nPanics on out-of-range number of milliseconds for a non-panicking\nversion see [`timestamp_millis_opt`](#method.timestamp_millis_opt).","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `timestamp_millis_opt()` instead\")]"],"deprecation":{"since":"0.4.23","note":"use `timestamp_millis_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["millis",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2188:4002":{"id":"0:2188:4002","crate_id":0,"name":"Micros","span":{"filename":"src/format/formatting.rs","begin":[517,4],"end":[517,10]},"visibility":"default","docs":"Use fixed 6 subsecond digits. This corresponds to [Fixed::Nanosecond6].","links":{"Fixed::Nanosecond6":"0:2385:3759"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:3060:858":{"id":"0:3060:858","crate_id":0,"name":"hash","span":{"filename":"src/offset/utc.rs","begin":[43,37],"end":[43,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:2183:2341":{"id":"b:2:2898-0:2183:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1943:3605":{"id":"0:1943:3605","crate_id":0,"name":"with_ymd_and_hms","span":{"filename":"src/offset/mod.rs","begin":[290,4],"end":[304,5]},"visibility":"default","docs":"Make a new `DateTime` from year, month, day, time components and current time zone.\n\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n\nReturns `MappedLocalTime::None` on invalid input data.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}],["month",{"primitive":"u32"}],["day",{"primitive":"u32"}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3107":{"id":"0:3107","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[247,34],"end":[247,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:959":{"id":"0:959","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[494,0],"end":[504,1]},"visibility":"default","docs":"Parsing a `str` into a `Weekday` uses the format [`%A`](./format/strftime/index.html).\n\n# Example\n\n```\nuse chrono::Weekday;\n\nassert_eq!(\"Sunday\".parse::<Weekday>(), Ok(Weekday::Sun));\nassert!(\"any day\".parse::<Weekday>().is_err());\n```\n\nThe parsing is case-insensitive.\n\n```\n# use chrono::Weekday;\nassert_eq!(\"mON\".parse::<Weekday>(), Ok(Weekday::Mon));\n```\n\nOnly the shortest form (e.g. `sun`) and the longest form (e.g. `sunday`) is accepted.\n\n```\n# use chrono::Weekday;\nassert!(\"thurs\".parse::<Weekday>().is_err());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12808:3566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:960:135","0:961:3567"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3234:686":{"id":"0:3234:686","crate_id":0,"name":"eq","span":{"filename":"src/month.rs","begin":[245,16],"end":[245,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1257":{"id":"0:1257","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[954,0],"end":[968,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1258:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:740:4282":{"id":"0:740:4282","crate_id":0,"name":"isoyear","span":{"filename":"src/format/parsed.rs","begin":[999,4],"end":[1001,5]},"visibility":"public","docs":"Get the `isoyear` field that is part of an [ISO 8601 week date] if set.\n\nSee also [`set_isoyear()`](Parsed::set_isoyear).\n\n[ISO 8601 week date]: crate::NaiveDate#week-date","links":{"crate::NaiveDate#week-date":"0:2608:2348","Parsed::set_isoyear":"0:698:4314"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1501:1722":{"id":"0:1501:1722","crate_id":0,"name":"sub_assign","span":{"filename":"src/naive/time/mod.rs","begin":[1346,4],"end":[1348,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32106:236-0:2145:2331":{"id":"a:2:32106:236-0:2145:2331","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41969:9654-0:3049:2347":{"id":"a:2:41969:9654-0:3049:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:430:3032":{"id":"0:430:3032","crate_id":0,"name":"day0","span":{"filename":"src/datetime/mod.rs","begin":[1193,4],"end":[1195,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2117":{"id":"0:2117","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[688,0],"end":[692,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2118:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[532,0],"end":[567,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:96:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2628-0:3145:2373":{"id":"b:2:2628-0:3145:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2030:8753":{"id":"0:2030:8753","crate_id":0,"name":"number_from_sunday","span":{"filename":"src/weekday.rs","begin":[114,4],"end":[116,5]},"visibility":"public","docs":"Returns a day-of-week number starting from Sunday = 1.\n\n`w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`\n------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----\n`w.number_from_sunday()`: | 2     | 3     | 4     | 5     | 6     | 7     | 1","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1448:7298":{"id":"0:1448:7298","crate_id":0,"name":"from_hms_micro","span":{"filename":"src/naive/time/mod.rs","begin":[350,4],"end":[352,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from hour, minute, second and microsecond.\n\nThe microsecond part is allowed to exceed 1,000,000,000 in order to represent a\n[leap second](#leap-second-handling), but only when `sec == 59`.\n\n# Panics\n\nPanics on invalid hour, minute, second and/or microsecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `from_hms_micro_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_hms_micro_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["micro",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1923:1040":{"id":"0:1923:1040","crate_id":0,"name":"map","span":{"filename":"src/offset/mod.rs","begin":[120,4],"end":[126,5]},"visibility":"public","docs":"Maps a `MappedLocalTime<T>` into `MappedLocalTime<U>` with given function.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["f",{"generic":"F"}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3365:140","args":{"parenthesized":{"inputs":[{"generic":"T"}],"output":{"generic":"U"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2565":{"id":"0:2565","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[386,9],"end":[386,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2566:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1509:1721":{"id":"0:1509:1721","crate_id":0,"name":"sub","span":{"filename":"src/naive/time/mod.rs","begin":[1388,4],"end":[1390,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1502":{"id":"0:1502","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1355,0],"end":[1367,1]},"visibility":"default","docs":"Subtract `std::time::Duration` from `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the subtraction ignores integral number of days.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1503:198","0:1504:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5863-0:2766:2346":{"id":"b:5:5863-0:2766:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5861:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5865:1763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1244:3000":{"id":"0:1244:3000","crate_id":0,"name":"signed_duration_since","span":{"filename":"src/naive/datetime/mod.rs","begin":[820,4],"end":[827,5]},"visibility":"public","docs":"Subtracts another `NaiveDateTime` from the current date and time.\nThis does not overflow or underflow at all.\n\nAs a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),\nthe subtraction assumes that **there is no leap second ever**,\nexcept when any of the `NaiveDateTime`s themselves represents a leap second\nin which case the assumption becomes that\n**there are exactly one (or two) leap second(s) ever**.\n\n# Example\n\n```\nuse chrono::{NaiveDate, TimeDelta};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nlet d = from_ymd(2016, 7, 8);\nassert_eq!(\n    d.and_hms_opt(3, 5, 7).unwrap().signed_duration_since(d.and_hms_opt(2, 4, 6).unwrap()),\n    TimeDelta::try_seconds(3600 + 60 + 1).unwrap()\n);\n\n// July 8 is 190th day in the year 2016\nlet d0 = from_ymd(2016, 1, 1);\nassert_eq!(\n    d.and_hms_milli_opt(0, 7, 6, 500)\n        .unwrap()\n        .signed_duration_since(d0.and_hms_opt(0, 0, 0).unwrap()),\n    TimeDelta::try_seconds(189 * 86_400 + 7 * 60 + 6).unwrap()\n        + TimeDelta::try_milliseconds(500).unwrap()\n);\n```\n\nLeap seconds are handled, but the subtraction assumes that\nthere were no other leap seconds happened.\n\n```\n# use chrono::{TimeDelta, NaiveDate};\n# let from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\nlet leap = from_ymd(2015, 6, 30).and_hms_milli_opt(23, 59, 59, 1_500).unwrap();\nassert_eq!(\n    leap.signed_duration_since(from_ymd(2015, 6, 30).and_hms_opt(23, 0, 0).unwrap()),\n    TimeDelta::try_seconds(3600).unwrap() + TimeDelta::try_milliseconds(500).unwrap()\n);\nassert_eq!(\n    from_ymd(2015, 7, 1).and_hms_opt(1, 0, 0).unwrap().signed_duration_since(leap),\n    TimeDelta::try_seconds(3600).unwrap() - TimeDelta::try_milliseconds(500).unwrap()\n);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:933-0:2247:2887":{"id":"0:933-0:2247:2887","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[71,0],"end":[71,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"strftime::StrftimeItems","name":"StrftimeItems","id":"0:2247:2887","glob":false}}},"0:505:1721":{"id":"0:505:1721","crate_id":0,"name":"sub","span":{"filename":"src/datetime/mod.rs","begin":[1593,4],"end":[1595,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3080:686":{"id":"0:3080:686","crate_id":0,"name":"eq","span":{"filename":"src/offset/mod.rs","begin":[58,16],"end":[58,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2064":{"id":"0:2064","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[231,0],"end":[242,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2065:1163","0:2066:8864"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2462":{"id":"0:2462","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[283,9],"end":[283,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2463:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2644:5704":{"id":"0:2644:5704","crate_id":0,"name":"NaiveDateWeeksIterator","span":{"filename":"src/naive/date/mod.rs","begin":[2165,0],"end":[2167,1]},"visibility":"public","docs":"Iterator over `NaiveDate` with a step size of one week.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32106:236-0:2644:5704","a:2:3121:246-0:2644:5704","a:2:3156:9919-0:2644:5704","a:2:32165:9507-0:2644:5704","a:2:41968:9655-0:2644:5704","a:2:41969:9654-0:2644:5704","b:2:2913-0:2644:5704","b:2:2898-0:2644:5704","b:2:2625-0:2644:5704","b:2:8196-0:2644:5704","b:2:2902-0:2644:5704","b:2:2628-0:2644:5704","b:2:3737-0:2644:5704","b:2:2908-0:2644:5704","b:5:736-0:2644:5704","0:2649","0:2661","0:1140","0:2655","0:1135","0:2648","0:2659","0:2651","0:2654","0:2657","0:2646","0:1139","0:1142"]}}},"0:3096:8621":{"id":"0:3096:8621","crate_id":0,"name":"DurationExceedsLimit","span":{"filename":"src/round.rs","begin":[269,4],"end":[269,24]},"visibility":"default","docs":"Error when `TimeDelta.num_nanoseconds` exceeds the limit.\n\n``` rust\n# use chrono::{DurationRound, TimeDelta, RoundingError, NaiveDate};\nlet dt = NaiveDate::from_ymd_opt(2260, 12, 31)\n    .unwrap()\n    .and_hms_nano_opt(23, 59, 59, 1_75_500_000)\n    .unwrap()\n    .and_utc();\n\nassert_eq!(\n    dt.duration_round(TimeDelta::try_days(300 * 365).unwrap()),\n    Err(RoundingError::DurationExceedsLimit)\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1970-0:3042:2336":{"id":"0:1970-0:3042:2336","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[575,0],"end":[575,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"clock\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"offset::Local","name":"Local","id":"0:3042:2336","glob":false}}},"0:2009:8614":{"id":"0:2009:8614","crate_id":0,"name":"duration_round","span":{"filename":"src/round.rs","begin":[173,4],"end":[175,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["duration",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:1998:2370","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:9654-0:3093:2371":{"id":"a:2:41969:9654-0:3093:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2635":{"id":"0:2635","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2128,35],"end":[2128,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2633:858":{"id":"0:2633:858","crate_id":0,"name":"hash","span":{"filename":"src/naive/date/mod.rs","begin":[2128,29],"end":[2128,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3069:1956":{"id":"0:3069:1956","crate_id":0,"name":"0","span":{"filename":"src/offset/mod.rs","begin":[68,14],"end":[68,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"T"}}},"a:2:3156:9919-0:2247:2887":{"id":"a:2:3156:9919-0:2247:2887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:532":{"id":"0:532","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1725,0],"end":[1731,1]},"visibility":"default","docs":"Add `Days` to `NaiveDateTime`.\n\n# Panics\n\nPanics if:\n- The resulting date would be out of range.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.\n\nStrongly consider using `DateTime<Tz>::checked_sub_days` to get an `Option` instead.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:534:198","0:535:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:484":{"id":"0:484","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1490,0],"end":[1499,1]},"visibility":"default","docs":"Add `std::time::Duration` to `DateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`DateTime<Tz>::checked_add_signed`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_add_signed`":"0:357:2993"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:486:198","0:487:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3121:246-0:3154:2343":{"id":"a:2:3121:246-0:3154:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:932-0:2209:3075":{"id":"0:932-0:2209:3075","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[70,0],"end":[70,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"parsed::Parsed","name":"Parsed","id":"0:2209:3075","glob":false}}},"0:2362":{"id":"0:2362","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[158,20],"end":[158,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2363:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13272:41659":{"id":"2:13272:41659","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:9229"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:2501:3809":{"id":"b:2:2898-0:2501:3809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1102:295":{"id":"0:1102:295","crate_id":0,"name":"add","span":{"filename":"src/naive/date/mod.rs","begin":[1908,4],"end":[1910,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2555":{"id":"0:2555","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[328,31],"end":[328,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2557:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:74:198":{"id":"0:74:198","crate_id":0,"name":"Output","span":{"filename":"src/time_delta.rs","begin":[467,4],"end":[467,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2597":{"id":"0:2597","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[398,16],"end":[398,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2598:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1543:5723":{"id":"0:1543:5723","crate_id":0,"name":"last_day","span":{"filename":"src/naive/mod.rs","begin":[93,4],"end":[101,5]},"visibility":"public","docs":"Returns a date representing the last day of the week.\n\n# Panics\n\nPanics if the last day of the week happens to fall just out of range of `NaiveDate`\n(more than ca. 262,000 years away from common era).\n\n# Examples\n\n```\nuse chrono::{NaiveDate, Weekday};\n\nlet date = NaiveDate::from_ymd_opt(2022, 4, 18).unwrap();\nlet week = date.week(Weekday::Mon);\nassert!(week.last_day() >= date);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:3042:2336":{"id":"a:2:3121:246-0:3042:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3075:463":{"id":"0:3075:463","crate_id":0,"name":"clone","span":{"filename":"src/offset/mod.rs","begin":[58,9],"end":[58,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32106:236-0:2475:3806":{"id":"a:2:32106:236-0:2475:3806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1496:295":{"id":"0:1496:295","crate_id":0,"name":"add","span":{"filename":"src/naive/time/mod.rs","begin":[1266,4],"end":[1268,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2740:463":{"id":"0:2740:463","crate_id":0,"name":"clone","span":{"filename":"src/naive/time/mod.rs","begin":[215,53],"end":[215,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:2158:2335":{"id":"b:2:2628-0:2158:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:736-0:3145:2373":{"id":"b:5:736-0:3145:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3121:246-0:2123:2332":{"id":"a:2:3121:246-0:2123:2332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2579:2427":{"id":"0:2579:2427","crate_id":0,"name":"OutOfRange","span":{"filename":"src/format/mod.rs","begin":[401,4],"end":[401,14]},"visibility":"default","docs":"Given field is out of permitted range.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[933,0],"end":[941,1]},"visibility":"default","docs":"Convert a `DateTime<Local>` instance into a `DateTime<Utc>` instance.","links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:400:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3737-0:3110:2345":{"id":"b:2:3737-0:3110:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2902-0:2706:2365":{"id":"b:2:2902-0:2706:2365","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1488:296":{"id":"0:1488:296","crate_id":0,"name":"add_assign","span":{"filename":"src/naive/time/mod.rs","begin":[1224,4],"end":[1226,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2716:470":{"id":"0:2716:470","crate_id":0,"name":"cmp","span":{"filename":"src/naive/isoweek.rs","begin":[19,36],"end":[19,39]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1526:60":{"id":"0:1526:60","crate_id":0,"name":"default","span":{"filename":"src/naive/time/mod.rs","begin":[1643,4],"end":[1645,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:346:3171":{"id":"0:346:3171","crate_id":0,"name":"timestamp_nanos","span":{"filename":"src/datetime/mod.rs","begin":[281,4],"end":[286,5]},"visibility":"public","docs":"Returns the number of non-leap-nanoseconds since January 1, 1970 UTC.\n\n# Panics\n\nAn `i64` with nanosecond precision can span a range of ~584 years. This function panics on\nan out of range `DateTime`.\n\nThe dates that can be represented as nanoseconds are between 1677-09-21T00:12:43.145224192\nand 2262-04-11T23:47:16.854775807.","links":{},"attrs":["#[deprecated(since = \"0.4.31\", note = \"use `timestamp_nanos_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.31","note":"use `timestamp_nanos_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:384:3070":{"id":"0:384:3070","crate_id":0,"name":"UNIX_EPOCH","span":{"filename":"src/datetime/mod.rs","begin":[864,4],"end":[864,91]},"visibility":"public","docs":"The Unix Epoch, 1970-01-01 00:00:00 UTC.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"a:2:3121:246-0:2766:2346":{"id":"a:2:3121:246-0:2766:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2504:3833":{"id":"0:2504:3833","crate_id":0,"name":"Colon","span":{"filename":"src/format/mod.rs","begin":[322,4],"end":[322,9]},"visibility":"default","docs":"Colon (`:`) as separator","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:5:736-0:2578:3859":{"id":"b:5:736-0:2578:3859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2071:788":{"id":"0:2071:788","crate_id":0,"name":"fmt","span":{"filename":"src/month.rs","begin":[260,4],"end":[262,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5863-0:3049:2347":{"id":"b:5:5863-0:3049:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5861:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5865:1763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:376:3288":{"id":"0:376:3288","crate_id":0,"name":"with_time","span":{"filename":"src/datetime/mod.rs","begin":[708,4],"end":[710,5]},"visibility":"public","docs":"Set the time to a new fixed time on the existing date.\n\n# Errors\n\nReturns `LocalResult::None` if the datetime is at the edge of the representable range for a\n`DateTime`, and `with_time` would push the value in UTC out of range.\n\n# Example\n\n```\n# #[cfg(feature = \"clock\")] {\nuse chrono::{Local, NaiveTime};\n\nlet noon = NaiveTime::from_hms_opt(12, 0, 0).unwrap();\nlet today_noon = Local::now().with_time(noon);\nlet today_midnight = Local::now().with_time(NaiveTime::MIN);\n\nassert_eq!(today_noon.single().unwrap().time(), noon);\nassert_eq!(today_midnight.single().unwrap().time(), NaiveTime::MIN);\n# }\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["time",{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3204":{"id":"0:3204","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,50],"end":[31,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","gt","lt","le"],"trait":{"name":"PartialOrd","id":"2:2717:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3205:1280"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2898-0:2706:2365":{"id":"b:2:2898-0:2706:2365","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:496:198":{"id":"0:496:198","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1546,4],"end":[1546,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:43:2627":{"id":"0:43:2627","crate_id":0,"name":"try_seconds","span":{"filename":"src/time_delta.rs","begin":[219,4],"end":[221,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of seconds.\n\n# Errors\n\nReturns `None` when `seconds` is more than `i64::MAX / 1_000` or less than\n`-i64::MAX / 1_000` (in this context, this is the same as `i64::MIN / 1_000` due to\nrounding).","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seconds",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:296":{"id":"0:77:296","crate_id":0,"name":"add_assign","span":{"filename":"src/time_delta.rs","begin":[475,4],"end":[478,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[474,0],"end":[479,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33333:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:77:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:68:198":{"id":"0:68:198","crate_id":0,"name":"Output","span":{"filename":"src/time_delta.rs","begin":[446,4],"end":[446,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:206:3029":{"id":"0:206:3029","crate_id":0,"name":"year","span":{"filename":"src/date.rs","begin":[394,4],"end":[396,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2680:463":{"id":"0:2680:463","crate_id":0,"name":"clone","span":{"filename":"src/naive/datetime/mod.rs","begin":[69,53],"end":[69,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1334":{"id":"0:1334","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[2014,0],"end":[2020,1]},"visibility":"default","docs":"Subtract `Days` from `NaiveDateTime`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `checked_sub_days` to get an `Option` instead.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1335:198","0:1336:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3156:9919-0:3228:2375":{"id":"a:2:3156:9919-0:3228:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2908-0:2183:2341":{"id":"b:2:2908-0:2183:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2093:3038":{"id":"0:2093:3038","crate_id":0,"name":"with_month0","span":{"filename":"src/traits.rs","begin":[178,4],"end":[178,55]},"visibility":"default","docs":"Makes a new value with the month number (starting from 0) changed.\n\n# Errors\n\nReturns `None` when:\n\n- The resulting date does not exist (for example `month0(3)` when day of the month is 31).\n- In case of [`DateTime<Tz>`] if the resulting date and time fall within a timezone\n  transition such as from DST to standard time.\n- The value for `month0` is out of range.\n\n[`DateTime<Tz>`]: crate::DateTime","links":{"crate::DateTime":"0:2165:2340"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:41969:9654-0:2145:2331":{"id":"a:2:41969:9654-0:2145:2331","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3737-0:2475:3806":{"id":"b:2:3737-0:2475:3806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2908-0:2501:3809":{"id":"b:2:2908-0:2501:3809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2377:3750":{"id":"0:2377:3750","crate_id":0,"name":"LowerAmPm","span":{"filename":"src/format/mod.rs","begin":[195,4],"end":[195,13]},"visibility":"default","docs":"AM/PM.\n\nPrints in lower case, reads in any case.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:609:3018":{"id":"0:609:3018","crate_id":0,"name":"new_with_offset","span":{"filename":"src/format/formatting.rs","begin":[67,4],"end":[85,5]},"visibility":"public","docs":"Makes a new `DelayedFormat` value out of local date and time and UTC offset.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}],["time",{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}],["offset",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Off"}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Off","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"Off"},"bounds":[{"trait_bound":{"trait":{"name":"Offset","id":"0:1939:2351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2104:3196":{"id":"0:2104:3196","crate_id":0,"name":"nanosecond","span":{"filename":"src/traits.rs","begin":[292,4],"end":[292,32]},"visibility":"default","docs":"Returns the number of nanoseconds since the whole non-leap second.\nThe range from 1,000,000,000 to 1,999,999,999 represents\nthe [leap second](./naive/struct.NaiveTime.html#leap-second-handling).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2902-0:2183:2341":{"id":"b:2:2902-0:2183:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2737:470":{"id":"0:2737:470","crate_id":0,"name":"cmp","span":{"filename":"src/naive/time/mod.rs","begin":[215,42],"end":[215,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2913-0:2123:2332":{"id":"b:2:2913-0:2123:2332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1119:1721":{"id":"0:1119:1721","crate_id":0,"name":"sub","span":{"filename":"src/naive/date/mod.rs","begin":[2060,4],"end":[2062,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1878:7744":{"id":"0:1878:7744","crate_id":0,"name":"offset_from_local_date","span":{"filename":"src/offset/local/mod.rs","begin":[173,4],"end":[176,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1261:2374":{"id":"0:1261:2374","crate_id":0,"name":"month","span":{"filename":"src/naive/datetime/mod.rs","begin":[1005,4],"end":[1007,5]},"visibility":"default","docs":"Returns the month number starting from 1.\n\nThe return value ranges from 1 to 12.\n\nSee also the [`NaiveDate::month`](./struct.NaiveDate.html#method.month) method.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, NaiveDateTime};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.month(), 9);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:2562:2361":{"id":"b:2:2625-0:2562:2361","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1225:2415":{"id":"0:1225:2415","crate_id":0,"name":"time","span":{"filename":"src/naive/datetime/mod.rs","begin":[347,4],"end":[349,5]},"visibility":"public","docs":"Retrieves a time component.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveTime};\n\nlet dt = NaiveDate::from_ymd_opt(2016, 7, 8).unwrap().and_hms_opt(9, 10, 11).unwrap();\nassert_eq!(dt.time(), NaiveTime::from_hms_opt(9, 10, 11).unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:3208:2376":{"id":"b:2:2908-0:3208:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:560:818":{"id":"0:560:818","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[1866,4],"end":[1875,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["dt",{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"SystemTime","id":"1:9445:3069","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:3228:2375":{"id":"b:2:3737-0:3228:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2741:2366":{"id":"0:2741:2366","crate_id":0,"name":"NaiveWeek","span":{"filename":"src/naive/mod.rs","begin":[36,0],"end":[39,1]},"visibility":"public","docs":"A week represented by a [`NaiveDate`] and a [`Weekday`] which is the first\nday of the week.","links":{"`NaiveDate`":"0:2608:2348","`Weekday`":"0:3110:2345"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1540","a:2:32106:236-0:2741:2366","a:2:3121:246-0:2741:2366","a:2:3156:9919-0:2741:2366","a:2:32165:9507-0:2741:2366","a:2:41968:9655-0:2741:2366","a:2:41969:9654-0:2741:2366","b:2:2913-0:2741:2366","b:2:2898-0:2741:2366","b:2:2625-0:2741:2366","b:2:2902-0:2741:2366","b:2:2628-0:2741:2366","b:2:3737-0:2741:2366","b:2:2908-0:2741:2366","0:2744"]}}},"0:2107:3491":{"id":"0:2107:3491","crate_id":0,"name":"with_second","span":{"filename":"src/traits.rs","begin":[309,4],"end":[309,52]},"visibility":"default","docs":"Makes a new value with the second number changed.\n\nReturns `None` when the resulting value would be invalid.\nAs with the [`second`](#tymethod.second) method,\nthe input range is restricted to 0 through 59.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:5:736-0:2209:3075":{"id":"b:5:736-0:2209:3075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2053:2972":{"id":"0:2053:2972","crate_id":0,"name":"succ","span":{"filename":"src/month.rs","begin":[76,4],"end":[91,5]},"visibility":"public","docs":"The next month.\n\n`m`:        | `January`  | `February` | `...` | `December`\n----------- | ---------  | ---------- | --- | ---------\n`m.succ()`: | `February` | `March`    | `...` | `January`","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2409:1956":{"id":"0:2409:1956","crate_id":0,"name":"0","span":{"filename":"src/format/mod.rs","begin":[254,13],"end":[254,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:13256:41657":{"id":"2:13256:41657","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180:2928":{"id":"0:180:2928","crate_id":0,"name":"timezone","span":{"filename":"src/date.rs","begin":[248,4],"end":[250,5]},"visibility":"public","docs":"Retrieves an associated time zone.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"Tz"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2358":{"id":"0:2358","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[158,9],"end":[158,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2359:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1300:198":{"id":"0:1300:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[1648,4],"end":[1648,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:3232":{"id":"0:3232","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[245,16],"end":[245,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41969:9654-0:2608:2348":{"id":"a:2:41969:9654-0:2608:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3737-0:3208:2376":{"id":"b:2:3737-0:3208:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2745:788":{"id":"0:2745:788","crate_id":0,"name":"fmt","span":{"filename":"src/naive/mod.rs","begin":[35,9],"end":[35,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1327:1721":{"id":"0:1327:1721","crate_id":0,"name":"sub","span":{"filename":"src/naive/datetime/mod.rs","begin":[1931,4],"end":[1933,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3172:2566","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:788":{"id":"0:269:788","crate_id":0,"name":"fmt","span":{"filename":"src/date.rs","begin":[538,4],"end":[541,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:378:2918":{"id":"0:378:2918","crate_id":0,"name":"MAX_UTC","span":{"filename":"src/datetime/mod.rs","begin":[715,4],"end":[715,94]},"visibility":"public","docs":"The maximum possible `DateTime<Utc>`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"default":"_"}}},"0:124-0:2723:2350":{"id":"0:124-0:2723:2350","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[542,46],"end":[542,55]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::NaiveTime","name":"NaiveTime","id":"0:2723:2350","glob":false}}},"0:1320":{"id":"0:1320","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1875,0],"end":[1880,1]},"visibility":"default","docs":"Subtract-assign `std::time::Duration` from `NaiveDateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_sub_signed`] to get an `Option` instead.","links":{"`NaiveDateTime::checked_sub_signed`":"0:1240:2995"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33400:2567","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1321:1722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1322":{"id":"0:1322","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1888,0],"end":[1895,1]},"visibility":"default","docs":"Subtract `FixedOffset` from `NaiveDateTime`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `checked_sub_offset` to get an `Option` instead.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1323:198","0:1324:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1476:3476":{"id":"0:1476:3476","crate_id":0,"name":"minute","span":{"filename":"src/naive/time/mod.rs","begin":[932,4],"end":[934,5]},"visibility":"default","docs":"Returns the minute number from 0 to 59.\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nassert_eq!(NaiveTime::from_hms_opt(0, 0, 0).unwrap().minute(), 0);\nassert_eq!(NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap().minute(), 56);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2726":{"id":"0:2726","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[215,9],"end":[215,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2757:858":{"id":"0:2757:858","crate_id":0,"name":"hash","span":{"filename":"src/naive/mod.rs","begin":[134,33],"end":[134,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1604:788":{"id":"0:1604:788","crate_id":0,"name":"fmt","span":{"filename":"src/offset/fixed.rs","begin":[156,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3196":{"id":"0:3196","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,24],"end":[31,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:51:2685":{"id":"0:51:2685","crate_id":0,"name":"num_minutes","span":{"filename":"src/time_delta.rs","begin":[296,4],"end":[298,5]},"visibility":"public","docs":"Returns the total number of whole minutes in the `TimeDelta`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5629:42359":{"id":"5:5629:42359","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:3655","`String`":"5:7642:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:3655","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:948":{"id":"0:948","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[436,0],"end":[449,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:949:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1111":{"id":"0:1111","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[1996,0],"end":[2002,1]},"visibility":"default","docs":"Add `Days` to `NaiveDate`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `NaiveDate::checked_add_days` to get an `Option` instead.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1112:198","0:1113:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1211:2359":{"id":"0:1211:2359","crate_id":0,"name":"MIN_DATETIME","span":{"filename":"src/naive/datetime/mod.rs","begin":[39,0],"end":[39,59]},"visibility":"public","docs":"The minimum possible `NaiveDateTime`.","links":{},"attrs":["#[deprecated(since = \"0.4.20\", note = \"Use NaiveDateTime::MIN instead\")]"],"deprecation":{"since":"0.4.20","note":"Use NaiveDateTime::MIN instead"},"inner":{"constant":{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"expr":"NaiveDateTime::MIN","value":null,"is_literal":false}}},"0:2238":{"id":"0:2238","crate_id":0,"name":null,"span":{"filename":"src/format/parsed.rs","begin":[128,31],"end":[128,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2239:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2529:3671":{"id":"0:2529:3671","crate_id":0,"name":"Space","span":{"filename":"src/format/mod.rs","begin":[336,4],"end":[336,18]},"visibility":"default","docs":"Whitespace. Prints literally but reads zero or more whitespace.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2531:1956"]},"discriminant":null}}},"0:943:3854":{"id":"0:943:3854","crate_id":0,"name":"to_owned","span":{"filename":"src/format/mod.rs","begin":[372,4],"end":[382,5]},"visibility":"public","docs":"Convert items that contain a reference to the format string into an owned variant.","links":{},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:9655-0:2723:2350":{"id":"a:2:41968:9655-0:2723:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2192:3256":{"id":"0:2192:3256","crate_id":0,"name":"AutoSi","span":{"filename":"src/format/formatting.rs","begin":[524,4],"end":[524,10]},"visibility":"default","docs":"Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to display all available\nnon-zero sub-second digits.  This corresponds to [Fixed::Nanosecond].","links":{"Fixed::Nanosecond":"0:2381:3723"},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1939:2351":{"id":"0:1939:2351","crate_id":0,"name":"Offset","span":{"filename":"src/offset/mod.rs","begin":[271,0],"end":[274,1]},"visibility":"public","docs":"The offset from the local time to UTC.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:1940:3112"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:1601","0:1909"]}}},"b:2:3737-0:3154:2343":{"id":"b:2:3737-0:3154:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1288:3481":{"id":"0:1288:3481","crate_id":0,"name":"with_hour","span":{"filename":"src/naive/datetime/mod.rs","begin":[1458,4],"end":[1460,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the hour number changed.\n\nSee also the [`NaiveTime::with_hour`] method.\n\n# Errors\n\nReturns `None` if the value for `hour` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Timelike};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 34, 56, 789).unwrap();\nassert_eq!(\n    dt.with_hour(7),\n    Some(\n        NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(7, 34, 56, 789).unwrap()\n    )\n);\nassert_eq!(dt.with_hour(24), None);\n```","links":{"`NaiveTime::with_hour`":"0:1479:3481"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:245":{"id":"0:245","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[490,0],"end":[494,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:247:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2285:3671":{"id":"0:2285:3671","crate_id":0,"name":"Space","span":{"filename":"src/format/mod.rs","begin":[85,4],"end":[85,9]},"visibility":"default","docs":"Space padding.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:41968:9655-0:2300:3683":{"id":"a:2:41968:9655-0:2300:3683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1127":{"id":"0:1127","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2133,0],"end":[2148,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["partial_cmp","find","position","try_for_each","rev","try_collect","copied","map_while","intersperse_with","min_by","size_hint","cmp","le","is_sorted","lt","unzip","take","reduce","collect_into","all","flatten","cloned","for_each","min_by_key","next_chunk","gt","collect","chain","any","ge","array_chunks","is_sorted_by","enumerate","try_reduce","partition","map_windows","sum","filter_map","max_by","advance_by","flat_map","last","is_sorted_by_key","product","find_map","partition_in_place","fuse","eq","peekable","max_by_key","nth","filter","map","__iterator_get_unchecked","cmp_by","try_find","min","count","is_partitioned","inspect","fold","skip_while","zip","step_by","cycle","skip","partial_cmp_by","max","rposition","ne","try_fold","by_ref","take_while","intersperse","scan","eq_by"],"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1128:172","0:1129:1177","0:1130:6364"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1452:7324":{"id":"0:1452:7324","crate_id":0,"name":"from_num_seconds_from_midnight","span":{"filename":"src/naive/time/mod.rs","begin":[453,4],"end":[455,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.\n\nThe nanosecond part is allowed to exceed 1,000,000,000 in order to represent a\n[leap second](#leap-second-handling), but only when `secs % 60 == 59`.\n\n# Panics\n\nPanics on invalid number of seconds and/or nanosecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"use `from_num_seconds_from_midnight_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_num_seconds_from_midnight_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1097:3040":{"id":"0:1097:3040","crate_id":0,"name":"with_day0","span":{"filename":"src/naive/date/mod.rs","begin":[1797,4],"end":[1800,5]},"visibility":"default","docs":"Makes a new `NaiveDate` with the day of month (starting from 0) changed.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (for example `day(30)` in April).\n- The value for `day0` is invalid.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_day0(29),\n    Some(NaiveDate::from_ymd_opt(2015, 9, 30).unwrap())\n);\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_day0(30), None);\n// no September 31\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:736-0:3154:2343":{"id":"b:5:736-0:3154:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2902-0:3228:2375":{"id":"b:2:2902-0:3228:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2099:2344":{"id":"0:2099:2344","crate_id":0,"name":"Timelike","span":{"filename":"src/traits.rs","begin":[267,0],"end":[328,1]},"visibility":"public","docs":"The common set of methods for time component.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:2100:2935","0:2101:3965","0:2102:3476","0:2103:3477","0:2104:3196","0:2105:3481","0:2106:3485","0:2107:3491","0:2108:3498","0:2109:3142"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:1283","0:1474","0:449"]}}},"0:2375:3747":{"id":"0:2375:3747","crate_id":0,"name":"LongWeekdayName","span":{"filename":"src/format/mod.rs","begin":[191,4],"end":[191,19]},"visibility":"default","docs":"Full day of the week names.\n\nPrints a full name in the title case, reads either a short or full name in any case.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2081:3029":{"id":"0:2081:3029","crate_id":0,"name":"year","span":{"filename":"src/traits.rs","begin":[33,4],"end":[33,26]},"visibility":"default","docs":"Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:700:4317":{"id":"0:700:4317","crate_id":0,"name":"set_isoyear_div_100","span":{"filename":"src/format/parsed.rs","begin":[278,4],"end":[283,5]},"visibility":"public","docs":"Set the [`isoyear_div_100`](Parsed::isoyear_div_100) field, that is part of an\n[ISO 8601 week date], to the given value.\n\n[ISO 8601 week date]: crate::NaiveDate#week-date\n\n# Errors\n\nReturns `OUT_OF_RANGE` if `value` is negative or if it is greater than `i32::MAX`.\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::isoyear_div_100":"0:741:4283","crate::NaiveDate#week-date":"0:2608:2348"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:886:5403":{"id":"0:886:5403","crate_id":0,"name":"parse_to_owned","span":{"filename":"src/format/strftime.rs","begin":[376,4],"end":[383,5]},"visibility":"public","docs":"Parse format string into a `Vec` of [`Item`]'s that contain no references to slices of the\nformat string.\n\nA `Vec` created with [`StrftimeItems::parse`] contains references to the format string,\nbinding the lifetime of the `Vec` to that string. [`StrftimeItems::parse_to_owned`] will\nconvert the references to owned types.\n\n# Errors\n\nReturns an error if the format string contains an invalid or unrecognized formatting\nspecifier.\n\n# Example\n\n```\nuse chrono::format::{Item, ParseError, StrftimeItems};\nuse chrono::NaiveDate;\n\nfn format_items(date_fmt: &str, time_fmt: &str) -> Result<Vec<Item<'static>>, ParseError> {\n    // `fmt_string` is dropped at the end of this function.\n    let fmt_string = format!(\"{} {}\", date_fmt, time_fmt);\n    StrftimeItems::new(&fmt_string).parse_to_owned()\n}\n\nlet fmt_items = format_items(\"%e %b %Y\", \"%k.%M\")?;\nlet datetime = NaiveDate::from_ymd_opt(2023, 7, 11).unwrap().and_hms_opt(9, 0, 0).unwrap();\n\nassert_eq!(\n    datetime.format_with_items(fmt_items.as_slice().iter()).to_string(),\n    \"11 Jul 2023  9.00\"\n);\n# Ok::<(), ParseError>(())\n```","links":{"`Item`":"0:2521:172","`StrftimeItems::parse`":"0:884:3071","`StrftimeItems::parse_to_owned`":"0:886:5403"},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7056:263","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'static"}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1596:2984":{"id":"0:1596:2984","crate_id":0,"name":"from_offset","span":{"filename":"src/offset/fixed.rs","begin":[130,4],"end":[132,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["offset",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:2209:3075":{"id":"b:2:2908-0:2209:3075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2515:686":{"id":"0:2515:686","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[317,29],"end":[317,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:752:3476":{"id":"0:752:3476","crate_id":0,"name":"minute","span":{"filename":"src/format/parsed.rs","begin":[1102,4],"end":[1104,5]},"visibility":"public","docs":"Get the `minute` field if set.\n\nSee also [`set_minute()`](Parsed::set_minute).","links":{"Parsed::set_minute":"0:712:4363"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2756":{"id":"0:2756","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[134,33],"end":[134,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2757:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13176:34938":{"id":"2:13176:34938","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13202:5437":{"id":"2:13202:5437","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41876:190","prim@char":"1:12332:459","self::pattern":"2:12848:9229"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2604":{"id":"0:2604","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[398,38],"end":[398,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1319:1722":{"id":"0:1319:1722","crate_id":0,"name":"sub_assign","span":{"filename":"src/naive/datetime/mod.rs","begin":[1860,4],"end":[1862,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1328":{"id":"0:1328","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1985,0],"end":[1992,1]},"visibility":"default","docs":"Subtracts another `NaiveDateTime` from the current date and time.\nThis does not overflow or underflow at all.\n\nAs a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),\nthe subtraction assumes that **there is no leap second ever**,\nexcept when any of the `NaiveDateTime`s themselves represents a leap second\nin which case the assumption becomes that\n**there are exactly one (or two) leap second(s) ever**.\n\nThe implementation is a wrapper around [`NaiveDateTime::signed_duration_since`].\n\n# Example\n\n```\nuse chrono::{NaiveDate, TimeDelta};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nlet d = from_ymd(2016, 7, 8);\nassert_eq!(\n    d.and_hms_opt(3, 5, 7).unwrap() - d.and_hms_opt(2, 4, 6).unwrap(),\n    TimeDelta::try_seconds(3600 + 60 + 1).unwrap()\n);\n\n// July 8 is 190th day in the year 2016\nlet d0 = from_ymd(2016, 1, 1);\nassert_eq!(\n    d.and_hms_milli_opt(0, 7, 6, 500).unwrap() - d0.and_hms_opt(0, 0, 0).unwrap(),\n    TimeDelta::try_seconds(189 * 86_400 + 7 * 60 + 6).unwrap()\n        + TimeDelta::try_milliseconds(500).unwrap()\n);\n```\n\nLeap seconds are handled, but the subtraction assumes that no other leap\nseconds happened.\n\n```\n# use chrono::{TimeDelta, NaiveDate};\n# let from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\nlet leap = from_ymd(2015, 6, 30).and_hms_milli_opt(23, 59, 59, 1_500).unwrap();\nassert_eq!(\n    leap - from_ymd(2015, 6, 30).and_hms_opt(23, 0, 0).unwrap(),\n    TimeDelta::try_seconds(3600).unwrap() + TimeDelta::try_milliseconds(500).unwrap()\n);\nassert_eq!(\n    from_ymd(2015, 7, 1).and_hms_opt(1, 0, 0).unwrap() - leap,\n    TimeDelta::try_seconds(3600).unwrap() - TimeDelta::try_milliseconds(500).unwrap()\n);\n```","links":{"`NaiveDateTime::signed_duration_since`":"0:1244:3000"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1329:198","0:1330:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2492:463":{"id":"0:2492:463","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[296,22],"end":[296,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1407:3029":{"id":"0:1407:3029","crate_id":0,"name":"year","span":{"filename":"src/naive/isoweek.rs","begin":[81,4],"end":[83,5]},"visibility":"public","docs":"Returns the year number for this ISO week.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, Weekday};\n\nlet d = NaiveDate::from_isoywd_opt(2015, 1, Weekday::Mon).unwrap();\nassert_eq!(d.iso_week().year(), 2015);\n```\n\nThis year number might not match the calendar year number.\nContinuing the example...\n\n```\n# use chrono::{NaiveDate, Datelike, Weekday};\n# let d = NaiveDate::from_isoywd_opt(2015, 1, Weekday::Mon).unwrap();\nassert_eq!(d.year(), 2014);\nassert_eq!(d, NaiveDate::from_ymd_opt(2014, 12, 29).unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1292:3491":{"id":"0:1292:3491","crate_id":0,"name":"with_second","span":{"filename":"src/naive/datetime/mod.rs","begin":[1523,4],"end":[1525,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the second number changed.\n\nAs with the [`second`](#method.second) method,\nthe input range is restricted to 0 through 59.\n\nSee also the [`NaiveTime::with_second`] method.\n\n# Errors\n\nReturns `None` if the value for `second` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Timelike};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 34, 56, 789).unwrap();\nassert_eq!(\n    dt.with_second(17),\n    Some(\n        NaiveDate::from_ymd_opt(2015, 9, 8)\n            .unwrap()\n            .and_hms_milli_opt(12, 34, 17, 789)\n            .unwrap()\n    )\n);\nassert_eq!(dt.with_second(60), None);\n```","links":{"`NaiveTime::with_second`":"0:1481:3491"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:3000":{"id":"0:185:3000","crate_id":0,"name":"signed_duration_since","span":{"filename":"src/date.rs","begin":[287,4],"end":[289,5]},"visibility":"public","docs":"Subtracts another `Date` from the current date.\nReturns a `TimeDelta` of integral numbers.\n\nThis does not overflow or underflow at all,\nas all possible output fits in the range of `TimeDelta`.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Tz2","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1143":{"id":"0:1143","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2218,0],"end":[2237,1]},"visibility":"default","docs":"The `Debug` output of the naive date `d` is the same as\n[`d.format(\"%Y-%m-%d\")`](crate::format::strftime).\n\nThe string printed can be readily parsed via the `parse` method on `str`.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nassert_eq!(format!(\"{:?}\", NaiveDate::from_ymd_opt(2015, 9, 5).unwrap()), \"2015-09-05\");\nassert_eq!(format!(\"{:?}\", NaiveDate::from_ymd_opt(0, 1, 1).unwrap()), \"0000-01-01\");\nassert_eq!(format!(\"{:?}\", NaiveDate::from_ymd_opt(9999, 12, 31).unwrap()), \"9999-12-31\");\n```\n\nISO 8601 requires an explicit sign for years before 1 BCE or after 9999 CE.\n\n```\n# use chrono::NaiveDate;\nassert_eq!(format!(\"{:?}\", NaiveDate::from_ymd_opt(-1, 1, 1).unwrap()), \"-0001-01-01\");\nassert_eq!(format!(\"{:?}\", NaiveDate::from_ymd_opt(10000, 12, 31).unwrap()), \"+10000-12-31\");\n```","links":{"crate::format::strftime":"0:864:3658"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1144:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2760":{"id":"0:2760","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[134,39],"end":[134,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2761:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2640":{"id":"0:2640","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2128,58],"end":[2128,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2016:788":{"id":"0:2016:788","crate_id":0,"name":"fmt","span":{"filename":"src/round.rs","begin":[286,4],"end":[298,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1117":{"id":"0:1117","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2056,0],"end":[2063,1]},"visibility":"default","docs":"Subtract `TimeDelta` from `NaiveDate`.\n\nThis discards the fractional days in `TimeDelta`, rounding to the closest integral number of\ndays towards `TimeDelta::zero()`.\nIt is the same as the addition with a negated `TimeDelta`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDate::checked_sub_signed`] to get an `Option` instead.\n\n# Example\n\n```\nuse chrono::{NaiveDate, TimeDelta};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nassert_eq!(from_ymd(2014, 1, 1) - TimeDelta::zero(), from_ymd(2014, 1, 1));\nassert_eq!(from_ymd(2014, 1, 1) - TimeDelta::try_seconds(86399).unwrap(), from_ymd(2014, 1, 1));\nassert_eq!(\n    from_ymd(2014, 1, 1) - TimeDelta::try_seconds(-86399).unwrap(),\n    from_ymd(2014, 1, 1)\n);\nassert_eq!(from_ymd(2014, 1, 1) - TimeDelta::try_days(1).unwrap(), from_ymd(2013, 12, 31));\nassert_eq!(from_ymd(2014, 1, 1) - TimeDelta::try_days(-1).unwrap(), from_ymd(2014, 1, 2));\nassert_eq!(from_ymd(2014, 1, 1) - TimeDelta::try_days(364).unwrap(), from_ymd(2013, 1, 2));\nassert_eq!(\n    from_ymd(2014, 1, 1) - TimeDelta::try_days(365 * 4 + 1).unwrap(),\n    from_ymd(2010, 1, 1)\n);\nassert_eq!(\n    from_ymd(2014, 1, 1) - TimeDelta::try_days(365 * 400 + 97).unwrap(),\n    from_ymd(1614, 1, 1)\n);\n```\n\n[`NaiveDate::checked_sub_signed`]: crate::NaiveDate::checked_sub_signed","links":{"crate::NaiveDate::checked_sub_signed":"0:1057:2995"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1118:198","0:1119:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2736":{"id":"0:2736","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[215,42],"end":[215,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2711:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2737:470"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2676":{"id":"0:2676","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[69,42],"end":[69,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2711:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2677:470"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2393:3772":{"id":"0:2393:3772","crate_id":0,"name":"TimezoneOffsetDoubleColon","span":{"filename":"src/format/mod.rs","begin":[225,4],"end":[225,29]},"visibility":"default","docs":"Offset from the local time to UTC with seconds (`+09:00:00` or `-04:00:00` or `+00:00:00`).\n\nIn the parser, the colon can be omitted and/or surrounded with any amount of whitespace.\nThe offset is limited from `-24:00:00` to `+24:00:00`,\nwhich is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13266:34979":{"id":"2:13266:34979","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:9229"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:9245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:2300:3683":{"id":"b:2:2625-0:2300:3683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32165:9507-0:3049:2347":{"id":"a:2:32165:9507-0:3049:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2908-0:2422:3788":{"id":"b:2:2908-0:2422:3788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:373:3251":{"id":"0:373:3251","crate_id":0,"name":"to_rfc2822","span":{"filename":"src/datetime/mod.rs","begin":[626,4],"end":[631,5]},"visibility":"public","docs":"Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.\n\n# Panics\n\nPanics if the date can not be represented in this format: the year may not be negative and\ncan not have more than 4 digits.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2205:686":{"id":"0:2205:686","crate_id":0,"name":"eq","span":{"filename":"src/format/formatting.rs","begin":[507,33],"end":[507,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:431:3033":{"id":"0:431:3033","crate_id":0,"name":"ordinal","span":{"filename":"src/datetime/mod.rs","begin":[1197,4],"end":[1199,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:2625:5703":{"id":"b:2:2908-0:2625:5703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3227:470":{"id":"0:3227:470","crate_id":0,"name":"cmp","span":{"filename":"src/month.rs","begin":[227,62],"end":[227,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3141:788":{"id":"0:3141:788","crate_id":0,"name":"fmt","span":{"filename":"src/weekday.rs","begin":[32,37],"end":[32,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:9507-0:2422:3788":{"id":"a:2:32165:9507-0:2422:3788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3102":{"id":"0:3102","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[247,16],"end":[247,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3103:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2058:136":{"id":"0:2058:136","crate_id":0,"name":"Error","span":{"filename":"src/month.rs","begin":[168,4],"end":[168,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:351:1215":{"id":"0:351:1215","crate_id":0,"name":"offset","span":{"filename":"src/datetime/mod.rs","begin":[399,4],"end":[401,5]},"visibility":"public","docs":"Retrieves an associated offset from UTC.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1941:2352","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2281:190":{"id":"0:2281:190","crate_id":0,"name":"None","span":{"filename":"src/format/mod.rs","begin":[81,4],"end":[81,8]},"visibility":"default","docs":"No padding.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2495:686":{"id":"0:2495:686","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[296,29],"end":[296,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3111:3959":{"id":"0:3111:3959","crate_id":0,"name":"Mon","span":{"filename":"src/weekday.rs","begin":[44,4],"end":[44,11]},"visibility":"default","docs":"Monday.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"0","value":"0"}}}},"b:2:2908-0:2145:2331":{"id":"b:2:2908-0:2145:2331","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1112:198":{"id":"0:1112:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/date/mod.rs","begin":[1997,4],"end":[1997,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:5:5863-0:2608:2348":{"id":"b:5:5863-0:2608:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5861:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5865:1763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13193:3969":{"id":"2:13193:3969","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:9229"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1903:2351":{"id":"0:1903:2351","crate_id":0,"name":"Offset","span":{"filename":"src/offset/utc.rs","begin":[115,4],"end":[115,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:161:2934":{"id":"0:161:2934","crate_id":0,"name":"and_hms","span":{"filename":"src/date.rs","begin":[99,4],"end":[101,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.\n\nPanics on invalid hour, minute and/or second.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"Use and_hms_opt() instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"Use and_hms_opt() instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:3049:2347":{"id":"b:2:2902-0:3049:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2128":{"id":"0:2128","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,16],"end":[52,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2908-0:3049:2347":{"id":"b:2:2908-0:3049:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:812:135":{"id":"0:812:135","crate_id":0,"name":"Err","span":{"filename":"src/format/parse.rs","begin":[524,4],"end":[524,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:697:4308":{"id":"0:697:4308","crate_id":0,"name":"set_year_mod_100","span":{"filename":"src/format/parsed.rs","begin":[242,4],"end":[247,5]},"visibility":"public","docs":"Set the [`year_mod_100`](Parsed::year_mod_100) field to the given value.\n\nWhen set it implies that the year is not negative.\n\nIf this field is set while the [`year_div_100`](Parsed::year_div_100) field is missing (and\nthe full [`year`](Parsed::year) field is also not set), it assumes a default value for the\n[`year_div_100`](Parsed::year_div_100) field.\nThe default is 19 when `year_mod_100 >= 70` and 20 otherwise.\n\n# Errors\n\nReturns `OUT_OF_RANGE` if `value` is negative or if it is greater than 99.\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::year_div_100":"0:738:4280","Parsed::year_mod_100":"0:739:4281","Parsed::year":"0:737:3029"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2289:463":{"id":"0:2289:463","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[78,15],"end":[78,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2648":{"id":"0:2648","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2164,16],"end":[2164,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2089:2372":{"id":"0:2089:2372","crate_id":0,"name":"weekday","span":{"filename":"src/traits.rs","begin":[78,4],"end":[78,33]},"visibility":"default","docs":"Returns the day of week.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:1314:1721":{"id":"0:1314:1721","crate_id":0,"name":"sub","span":{"filename":"src/naive/datetime/mod.rs","begin":[1820,4],"end":[1822,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2913-0:2209:3075":{"id":"b:2:2913-0:2209:3075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1463:3015":{"id":"0:1463:3015","crate_id":0,"name":"format_with_items","span":{"filename":"src/naive/time/mod.rs","begin":[827,4],"end":[833,5]},"visibility":"public","docs":"Formats the time with the specified formatting items.\nOtherwise it is the same as the ordinary [`format`](#method.format) method.\n\nThe `Iterator` of items should be `Clone`able,\nsince the resulting `DelayedFormat` value may be formatted multiple times.\n\n# Example\n\n```\nuse chrono::format::strftime::StrftimeItems;\nuse chrono::NaiveTime;\n\nlet fmt = StrftimeItems::new(\"%H:%M:%S\");\nlet t = NaiveTime::from_hms_opt(23, 56, 4).unwrap();\nassert_eq!(t.format_with_items(fmt.clone()).to_string(), \"23:56:04\");\nassert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");\n```\n\nThe resulting `DelayedFormat` can be formatted directly via the `Display` trait.\n\n```\n# use chrono::NaiveTime;\n# use chrono::format::strftime::StrftimeItems;\n# let fmt = StrftimeItems::new(\"%H:%M:%S\").clone();\n# let t = NaiveTime::from_hms_opt(23, 56, 4).unwrap();\nassert_eq!(format!(\"{}\", t.format_with_items(fmt)), \"23:56:04\");\n```","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2632":{"id":"0:2632","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2128,29],"end":[2128,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2633:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2630":{"id":"0:2630","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2128,22],"end":[2128,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2631:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2022-0:1990:2339":{"id":"0:2022-0:1990:2339","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[583,46],"end":[583,57]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"round::SubsecRound","name":"SubsecRound","id":"0:1990:2339","glob":false}}},"2:13281:34830":{"id":"2:13281:34830","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39775:9925","Self::is_ascii":"2:13280:34829"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39775:9925","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3049:2347":{"id":"0:3049:2347","crate_id":0,"name":"Utc","span":{"filename":"src/offset/utc.rs","begin":[52,0],"end":[52,15]},"visibility":"public","docs":"The UTC time zone. This is the most efficient time zone when you don't need the local time.\nIt is also used as an offset (which is also a dummy type).\n\nUsing the [`TimeZone`](./trait.TimeZone.html) methods\non the UTC struct is the preferred way to construct `DateTime<Utc>`\ninstances.\n\n# Example\n\n```\nuse chrono::{DateTime, TimeZone, Utc};\n\nlet dt = DateTime::from_timestamp(61, 0).unwrap();\n\nassert_eq!(Utc.timestamp_opt(61, 0).unwrap(), dt);\nassert_eq!(Utc.with_ymd_and_hms(1970, 1, 1, 0, 1, 1).unwrap(), dt);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["0:1899","a:2:32106:236-0:3049:2347","a:2:3121:246-0:3049:2347","a:2:3156:9919-0:3049:2347","a:2:32165:9507-0:3049:2347","a:2:41968:9655-0:3049:2347","a:2:41969:9654-0:3049:2347","b:2:2913-0:3049:2347","b:2:2898-0:3049:2347","b:2:2625-0:3049:2347","b:2:2902-0:3049:2347","b:2:2628-0:3049:2347","b:2:3737-0:3049:2347","b:2:2908-0:3049:2347","b:5:736-0:3049:2347","b:5:5863-0:3049:2347","0:3054","0:3051","0:3059","0:3052","0:1902","0:3057","0:3055","0:1909","0:1911","0:1913"]}}},"0:215:3036":{"id":"0:215:3036","crate_id":0,"name":"with_year","span":{"filename":"src/date.rs","begin":[431,4],"end":[433,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3054":{"id":"0:3054","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[43,22],"end":[43,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3737-0:2247:2887":{"id":"b:2:3737-0:2247:2887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2913-0:2501:3809":{"id":"b:2:2913-0:2501:3809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:736-0:2475:3806":{"id":"b:5:736-0:2475:3806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2666":{"id":"0:2666","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[69,9],"end":[69,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2493":{"id":"0:2493","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[296,29],"end":[296,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:33:1163":{"id":"0:33:1163","crate_id":0,"name":"new","span":{"filename":"src/time_delta.rs","begin":[83,4],"end":[93,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with given number of seconds and nanoseconds.\n\n# Errors\n\nReturns `None` when the duration is out of bounds, or if `nanos` ≥ 1,000,000,000.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"i64"}],["nanos",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1915-0:3049:2347":{"id":"0:1915-0:3049:2347","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[38,0],"end":[38,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::utc::Utc","name":"Utc","id":"0:3049:2347","glob":false}}},"0:382:3329":{"id":"0:382:3329","crate_id":0,"name":"from_timestamp_micros","span":{"filename":"src/datetime/mod.rs","begin":[822,4],"end":[826,5]},"visibility":"public","docs":"Creates a new `DateTime<Utc>` from the number of non-leap microseconds\nsince January 1, 1970 0:00:00.000 UTC (aka \"UNIX timestamp\").\n\nThis is guaranteed to round-trip with [`timestamp_micros`](DateTime::timestamp_micros).\n\nIf you need to create a `DateTime` with a [`TimeZone`] different from [`Utc`], use\n[`TimeZone::timestamp_micros`] or [`DateTime::with_timezone`].\n\n# Errors\n\nReturns `None` if the number of microseconds would be out of range for a `NaiveDateTime`\n(more than ca. 262,000 years away from common era)\n\n# Example\n\n```\nuse chrono::DateTime;\n\nlet timestamp_micros: i64 = 1662921288000000; // Sun, 11 Sep 2022 18:34:48 UTC\nlet dt = DateTime::from_timestamp_micros(timestamp_micros);\nassert!(dt.is_some());\nassert_eq!(timestamp_micros, dt.expect(\"invalid timestamp\").timestamp_micros());\n\n// Negative timestamps (before the UNIX epoch) are supported as well.\nlet timestamp_micros: i64 = -2208936075000000; // Mon, 1 Jan 1900 14:38:45 UTC\nlet dt = DateTime::from_timestamp_micros(timestamp_micros);\nassert!(dt.is_some());\nassert_eq!(timestamp_micros, dt.expect(\"invalid timestamp\").timestamp_micros());\n```","links":{"`Utc`":"0:3049:2347","`TimeZone::timestamp_micros`":"0:1956:3161","`DateTime::with_timezone`":"0:353:2987","DateTime::timestamp_micros":"0:345:3161","`TimeZone`":"0:1941:2352"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["micros",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:9919-0:2145:2331":{"id":"a:2:3156:9919-0:2145:2331","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:881":{"id":"0:881","crate_id":0,"name":null,"span":{"filename":"src/format/strftime.rs","begin":[201,0],"end":[384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:883:1163","0:884:3071","0:886:5403"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2601:686":{"id":"0:2601:686","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[398,23],"end":[398,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:239":{"id":"0:239","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[478,0],"end":[482,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ge","gt","lt","le"],"trait":{"name":"PartialOrd","id":"2:2717:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:241:1280"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2552":{"id":"0:2552","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[328,27],"end":[328,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1245:3015":{"id":"0:1245:3015","crate_id":0,"name":"format_with_items","span":{"filename":"src/naive/datetime/mod.rs","begin":[859,4],"end":[865,5]},"visibility":"public","docs":"Formats the combined date and time with the specified formatting items.\nOtherwise it is the same as the ordinary [`format`](#method.format) method.\n\nThe `Iterator` of items should be `Clone`able,\nsince the resulting `DelayedFormat` value may be formatted multiple times.\n\n# Example\n\n```\nuse chrono::format::strftime::StrftimeItems;\nuse chrono::NaiveDate;\n\nlet fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\");\nlet dt = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap().and_hms_opt(23, 56, 4).unwrap();\nassert_eq!(dt.format_with_items(fmt.clone()).to_string(), \"2015-09-05 23:56:04\");\nassert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2015-09-05 23:56:04\");\n```\n\nThe resulting `DelayedFormat` can be formatted directly via the `Display` trait.\n\n```\n# use chrono::NaiveDate;\n# use chrono::format::strftime::StrftimeItems;\n# let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\").clone();\n# let dt = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap().and_hms_opt(23, 56, 4).unwrap();\nassert_eq!(format!(\"{}\", dt.format_with_items(fmt)), \"2015-09-05 23:56:04\");\n```","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:380:3304":{"id":"0:380:3304","crate_id":0,"name":"from_timestamp","span":{"filename":"src/datetime/mod.rs","begin":[750,4],"end":[759,5]},"visibility":"public","docs":"Makes a new `DateTime<Utc>` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\nand the number of nanoseconds since the last whole non-leap second.\n\nThis is guaranteed to round-trip with regard to [`timestamp`](DateTime::timestamp) and\n[`timestamp_subsec_nanos`](DateTime::timestamp_subsec_nanos).\n\nIf you need to create a `DateTime` with a [`TimeZone`] different from [`Utc`], use\n[`TimeZone::timestamp_opt`] or [`DateTime::with_timezone`].\n\nThe nanosecond part can exceed 1,000,000,000 in order to represent a\n[leap second](NaiveTime#leap-second-handling), but only when `secs % 60 == 59`.\n(The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)\n\n# Errors\n\nReturns `None` on out-of-range number of seconds and/or\ninvalid nanosecond, otherwise returns `Some(DateTime {...})`.\n\n# Example\n\n```\nuse chrono::DateTime;\n\nlet dt = DateTime::from_timestamp(1431648000, 0).expect(\"invalid timestamp\");\n\nassert_eq!(dt.to_string(), \"2015-05-15 00:00:00 UTC\");\nassert_eq!(DateTime::from_timestamp(dt.timestamp(), dt.timestamp_subsec_nanos()).unwrap(), dt);\n```","links":{"DateTime::timestamp_subsec_nanos":"0:350:3189","`Utc`":"0:3049:2347","`TimeZone::timestamp_opt`":"0:1952:3577","`DateTime::with_timezone`":"0:353:2987","`TimeZone`":"0:1941:2352","NaiveTime#leap-second-handling":"0:2723:2350","DateTime::timestamp":"0:343:3138"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"i64"}],["nsecs",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2618":{"id":"0:2618","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[94,30],"end":[94,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","gt","lt","le"],"trait":{"name":"PartialOrd","id":"2:2717:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2619:1280"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41968:9655-0:2663:2349":{"id":"a:2:41968:9655-0:2663:2349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2196":{"id":"0:2196","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[507,9],"end":[507,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2197:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1099,0],"end":[1173,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1941:2352","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:418:3015","0:422:801"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2913-0:3237:2427":{"id":"b:2:2913-0:3237:2427","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2908-0:2158:2335":{"id":"b:2:2908-0:2158:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3156:9919-0:2457:3803":{"id":"a:2:3156:9919-0:2457:3803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3086":{"id":"0:3086","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[58,40],"end":[58,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3737-0:2356:3731":{"id":"b:2:3737-0:2356:3731","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2638":{"id":"0:2638","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2128,46],"end":[2128,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","gt","lt","le"],"trait":{"name":"PartialOrd","id":"2:2717:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2639:1280"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2628-0:3093:2371":{"id":"b:2:2628-0:3093:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2913-0:2723:2350":{"id":"b:2:2913-0:2723:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:461:3498":{"id":"0:461:3498","crate_id":0,"name":"with_nanosecond","span":{"filename":"src/datetime/mod.rs","begin":[1409,4],"end":[1411,5]},"visibility":"default","docs":"Makes a new `DateTime` with nanoseconds since the whole non-leap second changed.\n\nReturns `None` when the resulting `NaiveDateTime` would be invalid.\nAs with the [`NaiveDateTime::nanosecond`] method,\nthe input range can exceed 1,000,000,000 for leap seconds.\n\nSee also the [`NaiveTime::with_nanosecond`] method.\n\n# Errors\n\nReturns `None` if `nanosecond >= 2,000,000,000`.","links":{"`NaiveTime::with_nanosecond`":"0:1482:3498","`NaiveDateTime::nanosecond`":"0:1287:3196"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13231:34977":{"id":"2:13231:34977","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:2300:3683":{"id":"b:2:2902-0:2300:3683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2501:3809":{"id":"0:2501:3809","crate_id":0,"name":"Colons","span":{"filename":"src/format/mod.rs","begin":[318,0],"end":[325,1]},"visibility":"public","docs":"The separator between hours and minutes in an offset.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:2502:190","0:2504:3833","0:2506:3835"],"impls":["a:2:32106:236-0:2501:3809","a:2:3121:246-0:2501:3809","a:2:3156:9919-0:2501:3809","a:2:32165:9507-0:2501:3809","a:2:41968:9655-0:2501:3809","a:2:41969:9654-0:2501:3809","b:2:2913-0:2501:3809","b:2:2898-0:2501:3809","b:2:2625-0:2501:3809","b:2:2902-0:2501:3809","b:2:2628-0:2501:3809","b:2:3737-0:2501:3809","b:2:2908-0:2501:3809","b:5:736-0:2501:3809","0:2514","0:2513","0:2511","0:2518","0:2510","0:2516","0:2508"]}}},"0:2293":{"id":"0:2293","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[78,33],"end":[78,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2295":{"id":"0:2295","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[78,37],"end":[78,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2296:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2902-0:2562:2361":{"id":"b:2:2902-0:2562:2361","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1954:3582":{"id":"0:1954:3582","crate_id":0,"name":"timestamp_millis_opt","span":{"filename":"src/offset/mod.rs","begin":[480,4],"end":[485,5]},"visibility":"default","docs":"Makes a new `DateTime` from the number of non-leap milliseconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").\n\n\nReturns `MappedLocalTime::None` on out-of-range number of milliseconds\nand/or invalid nanosecond, otherwise always returns\n`MappedLocalTime::Single`.\n\n# Example\n\n```\nuse chrono::{MappedLocalTime, TimeZone, Utc};\nmatch Utc.timestamp_millis_opt(1431648000) {\n    MappedLocalTime::Single(dt) => assert_eq!(dt.timestamp(), 1431648),\n    _ => panic!(\"Incorrect timestamp_millis\"),\n};\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["millis",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:550":{"id":"0:550","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1829,0],"end":[1835,1]},"visibility":"default","docs":"Accepts a relaxed form of RFC3339.\nA space or a 'T' are accepted as the separator between the date and time\nparts.\n\nAll of these examples are equivalent:\n```\n# use chrono::{DateTime, Local};\n\"2012-12-12T12:12:12Z\".parse::<DateTime<Local>>()?;\n\"2012-12-12 12:12:12Z\".parse::<DateTime<Local>>()?;\n\"2012-12-12 12:12:12+0000\".parse::<DateTime<Local>>()?;\n\"2012-12-12 12:12:12+00:00\".parse::<DateTime<Local>>()?;\n# Ok::<(), chrono::ParseError>(())\n```","links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12808:3566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:551:135","0:552:3567"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2339:3726":{"id":"0:2339:3726","crate_id":0,"name":"Timestamp","span":{"filename":"src/format/mod.rs","begin":[148,4],"end":[148,13]},"visibility":"default","docs":"The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\nFor formatting, it assumes UTC upon the absence of time zone offset.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2054:2979":{"id":"0:2054:2979","crate_id":0,"name":"pred","span":{"filename":"src/month.rs","begin":[100,4],"end":[115,5]},"visibility":"public","docs":"The previous month.\n\n`m`:        | `January`  | `February` | `...` | `December`\n----------- | ---------  | ---------- | --- | ---------\n`m.pred()`: | `December` | `January`  | `...` | `November`","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2723:2350":{"id":"0:2723:2350","crate_id":0,"name":"NaiveTime","span":{"filename":"src/naive/time/mod.rs","begin":[223,0],"end":[226,1]},"visibility":"public","docs":"ISO 8601 time without timezone.\nAllows for the nanosecond precision and optional leap second representation.\n\n# Leap Second Handling\n\nSince 1960s, the manmade atomic clock has been so accurate that\nit is much more accurate than Earth's own motion.\nIt became desirable to define the civil time in terms of the atomic clock,\nbut that risks the desynchronization of the civil time from Earth.\nTo account for this, the designers of the Coordinated Universal Time (UTC)\nmade that the UTC should be kept within 0.9 seconds of the observed Earth-bound time.\nWhen the mean solar day is longer than the ideal (86,400 seconds),\nthe error slowly accumulates and it is necessary to add a **leap second**\nto slow the UTC down a bit.\n(We may also remove a second to speed the UTC up a bit, but it never happened.)\nThe leap second, if any, follows 23:59:59 of June 30 or December 31 in the UTC.\n\nFast forward to the 21st century,\nwe have seen 26 leap seconds from January 1972 to December 2015.\nYes, 26 seconds. Probably you can read this paragraph within 26 seconds.\nBut those 26 seconds, and possibly more in the future, are never predictable,\nand whether to add a leap second or not is known only before 6 months.\nInternet-based clocks (via NTP) do account for known leap seconds,\nbut the system API normally doesn't (and often can't, with no network connection)\nand there is no reliable way to retrieve leap second information.\n\nChrono does not try to accurately implement leap seconds; it is impossible.\nRather, **it allows for leap seconds but behaves as if there are *no other* leap seconds.**\nVarious operations will ignore any possible leap second(s)\nexcept when any of the operands were actually leap seconds.\n\nIf you cannot tolerate this behavior,\nyou must use a separate `TimeZone` for the International Atomic Time (TAI).\nTAI is like UTC but has no leap seconds, and thus slightly differs from UTC.\nChrono does not yet provide such implementation, but it is planned.\n\n## Representing Leap Seconds\n\nThe leap second is indicated via fractional seconds more than 1 second.\nThis makes possible to treat a leap second as the prior non-leap second\nif you don't care about sub-second accuracy.\nYou should use the proper formatting to get the raw leap second.\n\nAll methods accepting fractional seconds will accept such values.\n\n```\nuse chrono::{NaiveDate, NaiveTime};\n\nlet t = NaiveTime::from_hms_milli_opt(8, 59, 59, 1_000).unwrap();\n\nlet dt1 = NaiveDate::from_ymd_opt(2015, 7, 1)\n    .unwrap()\n    .and_hms_micro_opt(8, 59, 59, 1_000_000)\n    .unwrap();\n\nlet dt2 = NaiveDate::from_ymd_opt(2015, 6, 30)\n    .unwrap()\n    .and_hms_nano_opt(23, 59, 59, 1_000_000_000)\n    .unwrap()\n    .and_utc();\n# let _ = (t, dt1, dt2);\n```\n\nNote that the leap second can happen anytime given an appropriate time zone;\n2015-07-01 01:23:60 would be a proper leap second if UTC+01:24 had existed.\nPractically speaking, though, by the time of the first leap second on 1972-06-30,\nevery time zone offset around the world has standardized to the 5-minute alignment.\n\n## Date And Time Arithmetics\n\nAs a concrete example, let's assume that `03:00:60` and `04:00:60` are leap seconds.\nIn reality, of course, leap seconds are separated by at least 6 months.\nWe will also use some intuitive concise notations for the explanation.\n\n`Time + TimeDelta`\n(short for [`NaiveTime::overflowing_add_signed`](#method.overflowing_add_signed)):\n\n- `03:00:00 + 1s = 03:00:01`.\n- `03:00:59 + 60s = 03:01:59`.\n- `03:00:59 + 61s = 03:02:00`.\n- `03:00:59 + 1s = 03:01:00`.\n- `03:00:60 + 1s = 03:01:00`.\n  Note that the sum is identical to the previous.\n- `03:00:60 + 60s = 03:01:59`.\n- `03:00:60 + 61s = 03:02:00`.\n- `03:00:60.1 + 0.8s = 03:00:60.9`.\n\n`Time - TimeDelta`\n(short for [`NaiveTime::overflowing_sub_signed`](#method.overflowing_sub_signed)):\n\n- `03:00:00 - 1s = 02:59:59`.\n- `03:01:00 - 1s = 03:00:59`.\n- `03:01:00 - 60s = 03:00:00`.\n- `03:00:60 - 60s = 03:00:00`.\n  Note that the result is identical to the previous.\n- `03:00:60.7 - 0.4s = 03:00:60.3`.\n- `03:00:60.7 - 0.9s = 03:00:59.8`.\n\n`Time - Time`\n(short for [`NaiveTime::signed_duration_since`](#method.signed_duration_since)):\n\n- `04:00:00 - 03:00:00 = 3600s`.\n- `03:01:00 - 03:00:00 = 60s`.\n- `03:00:60 - 03:00:00 = 60s`.\n  Note that the difference is identical to the previous.\n- `03:00:60.6 - 03:00:59.4 = 1.2s`.\n- `03:01:00 - 03:00:59.8 = 0.2s`.\n- `03:01:00 - 03:00:60.5 = 0.5s`.\n  Note that the difference is larger than the previous,\n  even though the leap second clearly follows the previous whole second.\n- `04:00:60.9 - 03:00:60.1 =\n  (04:00:60.9 - 04:00:00) + (04:00:00 - 03:01:00) + (03:01:00 - 03:00:60.1) =\n  60.9s + 3540s + 0.9s = 3601.8s`.\n\nIn general,\n\n- `Time + TimeDelta` unconditionally equals to `TimeDelta + Time`.\n\n- `Time - TimeDelta` unconditionally equals to `Time + (-TimeDelta)`.\n\n- `Time1 - Time2` unconditionally equals to `-(Time2 - Time1)`.\n\n- Associativity does not generally hold, because\n  `(Time + TimeDelta1) - TimeDelta2` no longer equals to `Time + (TimeDelta1 - TimeDelta2)`\n  for two positive durations.\n\n    - As a special case, `(Time + TimeDelta) - TimeDelta` also does not equal to `Time`.\n\n    - If you can assume that all durations have the same sign, however,\n      then the associativity holds:\n      `(Time + TimeDelta1) + TimeDelta2` equals to `Time + (TimeDelta1 + TimeDelta2)`\n      for two positive durations.\n\n## Reading And Writing Leap Seconds\n\nThe \"typical\" leap seconds on the minute boundary are\ncorrectly handled both in the formatting and parsing.\nThe leap second in the human-readable representation\nwill be represented as the second part being 60, as required by ISO 8601.\n\n```\nuse chrono::NaiveDate;\n\nlet dt = NaiveDate::from_ymd_opt(2015, 6, 30)\n    .unwrap()\n    .and_hms_milli_opt(23, 59, 59, 1_000)\n    .unwrap()\n    .and_utc();\nassert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:59:60Z\");\n```\n\nThere are hypothetical leap seconds not on the minute boundary nevertheless supported by Chrono.\nThey are allowed for the sake of completeness and consistency; there were several \"exotic\" time\nzone offsets with fractional minutes prior to UTC after all.\nFor such cases the human-readable representation is ambiguous and would be read back to the next\nnon-leap second.\n\nA `NaiveTime` with a leap second that is not on a minute boundary can only be created from a\n[`DateTime`](crate::DateTime) with fractional minutes as offset, or using\n[`Timelike::with_nanosecond()`].\n\n```\nuse chrono::{FixedOffset, NaiveDate, TimeZone};\n\nlet paramaribo_pre1945 = FixedOffset::east_opt(-13236).unwrap(); // -03:40:36\nlet leap_sec_2015 =\n    NaiveDate::from_ymd_opt(2015, 6, 30).unwrap().and_hms_milli_opt(23, 59, 59, 1_000).unwrap();\nlet dt1 = paramaribo_pre1945.from_utc_datetime(&leap_sec_2015);\nassert_eq!(format!(\"{:?}\", dt1), \"2015-06-30T20:19:24-03:40:36\");\nassert_eq!(format!(\"{:?}\", dt1.time()), \"20:19:24\");\n\nlet next_sec = NaiveDate::from_ymd_opt(2015, 7, 1).unwrap().and_hms_opt(0, 0, 0).unwrap();\nlet dt2 = paramaribo_pre1945.from_utc_datetime(&next_sec);\nassert_eq!(format!(\"{:?}\", dt2), \"2015-06-30T20:19:24-03:40:36\");\nassert_eq!(format!(\"{:?}\", dt2.time()), \"20:19:24\");\n\nassert!(dt1.time() != dt2.time());\nassert!(dt1.time().to_string() == dt2.time().to_string());\n```\n\nSince Chrono alone cannot determine any existence of leap seconds,\n**there is absolutely no guarantee that the leap second read has actually happened**.","links":{"crate::DateTime":"0:2165:2340","`Timelike::with_nanosecond()`":"0:2108:3498"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1443","a:2:32106:236-0:2723:2350","a:2:3121:246-0:2723:2350","a:2:3156:9919-0:2723:2350","a:2:32165:9507-0:2723:2350","a:2:41968:9655-0:2723:2350","a:2:41969:9654-0:2723:2350","b:0:1993-0:2723:2350","b:2:2913-0:2723:2350","b:2:2898-0:2723:2350","b:2:2625-0:2723:2350","b:2:2902-0:2723:2350","b:2:2628-0:2723:2350","b:2:3737-0:2723:2350","b:2:2908-0:2723:2350","b:5:736-0:2723:2350","b:5:5863-0:2723:2350","0:1525","0:1484","0:2736","0:2734","0:2738","0:1510","0:1507","0:1500","0:1518","0:2739","0:1497","0:1505","0:1516","0:1502","0:1474","0:1489","0:1494","0:2727","0:1487","0:2729","0:1492","0:1513","0:2726","0:2731"]}}},"2:13210:34967":{"id":"2:13210:34967","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12848:9229","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::split_whitespace":"2:13188:39905","str::rsplit":"2:13216:34971"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43756:9262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:2521:172":{"id":"b:2:2898-0:2521:172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3156:9919-0:2158:2335":{"id":"a:2:3156:9919-0:2158:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:434:3035":{"id":"0:434:3035","crate_id":0,"name":"iso_week","span":{"filename":"src/datetime/mod.rs","begin":[1209,4],"end":[1211,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2624:463":{"id":"0:2624:463","crate_id":0,"name":"clone","span":{"filename":"src/naive/date/mod.rs","begin":[94,53],"end":[94,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2028:2979":{"id":"0:2028:2979","crate_id":0,"name":"pred","span":{"filename":"src/weekday.rs","begin":[86,4],"end":[96,5]},"visibility":"public","docs":"The previous day in the week.\n\n`w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`\n----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----\n`w.pred()`: | `Sun` | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat`","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:9919-0:2766:2346":{"id":"a:2:3156:9919-0:2766:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1104:296":{"id":"0:1104:296","crate_id":0,"name":"add_assign","span":{"filename":"src/naive/date/mod.rs","begin":[1924,4],"end":[1926,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2478:3821":{"id":"0:2478:3821","crate_id":0,"name":"Minutes","span":{"filename":"src/format/mod.rs","begin":[304,4],"end":[304,11]},"visibility":"default","docs":"Format offset from UTC as hours and minutes.\nAny seconds will be rounded to the nearest minute.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2525:1956":{"id":"0:2525:1956","crate_id":0,"name":"0","span":{"filename":"src/format/mod.rs","begin":[331,12],"end":[331,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}},"b:2:2628-0:3110:2345":{"id":"b:2:2628-0:3110:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2913-0:2625:5703":{"id":"b:2:2913-0:2625:5703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1968:2990":{"id":"0:1968:2990","crate_id":0,"name":"from_utc_date","span":{"filename":"src/offset/mod.rs","begin":[586,4],"end":[588,5]},"visibility":"default","docs":"Converts the UTC `NaiveDate` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]","#[deprecated(since = \"0.4.23\", note = \"use `from_utc_datetime()` instead\")]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.23","note":"use `from_utc_datetime()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:3154:2343":{"id":"b:2:2902-0:3154:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1345":{"id":"0:1345","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[2149,0],"end":[2153,1]},"visibility":"default","docs":"The default value for a NaiveDateTime is one with epoch 0\nthat is, 1st of January 1970 at 00:00:00.\n\n# Example\n\n```rust\nuse chrono::NaiveDateTime;\n\nassert_eq!(NaiveDateTime::default(), NaiveDateTime::UNIX_EPOCH);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2950:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1346:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1150:3567":{"id":"0:1150:3567","crate_id":0,"name":"from_str","span":{"filename":"src/naive/date/mod.rs","begin":[2286,4],"end":[2301,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:736-0:2457:3803":{"id":"b:5:736-0:2457:3803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:217:3037":{"id":"0:217:3037","crate_id":0,"name":"with_month","span":{"filename":"src/date.rs","begin":[436,4],"end":[438,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1251:3219":{"id":"0:1251:3219","crate_id":0,"name":"and_local_timezone","span":{"filename":"src/naive/datetime/mod.rs","begin":[924,4],"end":[926,5]},"visibility":"public","docs":"Converts the `NaiveDateTime` into a timezone-aware `DateTime<Tz>` with the provided\ntime zone.\n\n# Example\n\n```\nuse chrono::{FixedOffset, NaiveDate};\nlet hour = 3600;\nlet tz = FixedOffset::east_opt(5 * hour).unwrap();\nlet dt = NaiveDate::from_ymd_opt(2015, 9, 5)\n    .unwrap()\n    .and_hms_opt(23, 56, 4)\n    .unwrap()\n    .and_local_timezone(tz)\n    .unwrap();\nassert_eq!(dt.timezone(), tz);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tz",{"generic":"Tz"}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1030:3421":{"id":"0:1030:3421","crate_id":0,"name":"parse_from_str","span":{"filename":"src/naive/date/mod.rs","begin":[494,4],"end":[498,5]},"visibility":"public","docs":"Parses a string with the specified format string and returns a new `NaiveDate`.\nSee the [`format::strftime` module](crate::format::strftime)\non the supported escape sequences.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet parse_from_str = NaiveDate::parse_from_str;\n\nassert_eq!(\n    parse_from_str(\"2015-09-05\", \"%Y-%m-%d\"),\n    Ok(NaiveDate::from_ymd_opt(2015, 9, 5).unwrap())\n);\nassert_eq!(\n    parse_from_str(\"5sep2015\", \"%d%b%Y\"),\n    Ok(NaiveDate::from_ymd_opt(2015, 9, 5).unwrap())\n);\n```\n\nTime and offset is ignored for the purpose of parsing.\n\n```\n# use chrono::NaiveDate;\n# let parse_from_str = NaiveDate::parse_from_str;\nassert_eq!(\n    parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),\n    Ok(NaiveDate::from_ymd_opt(2014, 5, 17).unwrap())\n);\n```\n\nOut-of-bound dates or insufficient fields are errors.\n\n```\n# use chrono::NaiveDate;\n# let parse_from_str = NaiveDate::parse_from_str;\nassert!(parse_from_str(\"2015/9\", \"%Y/%m\").is_err());\nassert!(parse_from_str(\"2015/9/31\", \"%Y/%m/%d\").is_err());\n```\n\nAll parsed fields should be consistent to each other, otherwise it's an error.\n\n```\n# use chrono::NaiveDate;\n# let parse_from_str = NaiveDate::parse_from_str;\nassert!(parse_from_str(\"Sat, 09 Aug 2013\", \"%a, %d %b %Y\").is_err());\n```","links":{"crate::format::strftime":"0:864:3658"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1031:3072":{"id":"0:1031:3072","crate_id":0,"name":"parse_and_remainder","span":{"filename":"src/naive/date/mod.rs","begin":[516,4],"end":[520,5]},"visibility":"public","docs":"Parses a string from a user-specified format into a new `NaiveDate` value, and a slice with\nthe remaining portion of the string.\nSee the [`format::strftime` module](crate::format::strftime)\non the supported escape sequences.\n\nSimilar to [`parse_from_str`](#method.parse_from_str).\n\n# Example\n\n```rust\n# use chrono::{NaiveDate};\nlet (date, remainder) =\n    NaiveDate::parse_and_remainder(\"2015-02-18 trailing text\", \"%Y-%m-%d\").unwrap();\nassert_eq!(date, NaiveDate::from_ymd_opt(2015, 2, 18).unwrap());\nassert_eq!(remainder, \" trailing text\");\n```","links":{"crate::format::strftime":"0:864:3658"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:454:3196":{"id":"0:454:3196","crate_id":0,"name":"nanosecond","span":{"filename":"src/datetime/mod.rs","begin":[1346,4],"end":[1348,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1243:3230":{"id":"0:1243:3230","crate_id":0,"name":"checked_sub_days","span":{"filename":"src/naive/datetime/mod.rs","begin":[766,4],"end":[768,5]},"visibility":"public","docs":"Subtract a duration in [`Days`] from the date part of the `NaiveDateTime`\n\nReturns `None` if the resulting date would be out of range.","links":{"`Days`":"0:2746:2364"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2539:3074":{"id":"0:2539:3074","crate_id":0,"name":"Fixed","span":{"filename":"src/format/mod.rs","begin":[344,4],"end":[344,16]},"visibility":"default","docs":"Fixed-format item.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2541:1956"]},"discriminant":null}}},"a:2:41968:9655-0:2356:3731":{"id":"a:2:41968:9655-0:2356:3731","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2109:3142":{"id":"0:2109:3142","crate_id":0,"name":"num_seconds_from_midnight","span":{"filename":"src/traits.rs","begin":[325,4],"end":[327,5]},"visibility":"default","docs":"Returns the number of non-leap seconds past the last midnight.\n\nEvery value in 00:00:00-23:59:59 maps to an integer in 0-86399.\n\nThis method is not intended to provide the real number of seconds since midnight on a given\nday. It does not take things like DST transitions into account.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102-0:2145:2331":{"id":"0:102-0:2145:2331","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[522,0],"end":[522,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"time_delta::OutOfRangeError","name":"OutOfRangeError","id":"0:2145:2331","glob":false}}},"2:13257:8036":{"id":"2:13257:8036","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:9229"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12874:9244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:9654-0:2578:3859":{"id":"a:2:41969:9654-0:2578:3859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1054:2979":{"id":"0:1054:2979","crate_id":0,"name":"pred","span":{"filename":"src/naive/date/mod.rs","begin":[987,4],"end":[989,5]},"visibility":"public","docs":"Makes a new `NaiveDate` for the previous calendar date.\n\n# Panics\n\nPanics when `self` is the first representable date.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `pred_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `pred_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1055:2980":{"id":"0:1055:2980","crate_id":0,"name":"pred_opt","span":{"filename":"src/naive/date/mod.rs","begin":[1010,4],"end":[1016,5]},"visibility":"public","docs":"Makes a new `NaiveDate` for the previous calendar date.\n\n# Errors\n\nReturns `None` when `self` is the first representable date.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2015, 6, 3).unwrap().pred_opt(),\n    Some(NaiveDate::from_ymd_opt(2015, 6, 2).unwrap())\n);\nassert_eq!(NaiveDate::MIN.pred_opt(), None);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2354:858":{"id":"0:2354:858","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[102,38],"end":[102,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1458:6646":{"id":"0:1458:6646","crate_id":0,"name":"overflowing_add_signed","span":{"filename":"src/naive/time/mod.rs","begin":[608,4],"end":[644,5]},"visibility":"public","docs":"Adds given `TimeDelta` to the current time, and also returns the number of *seconds*\nin the integral number of days ignored from the addition.\n\n# Example\n\n```\nuse chrono::{NaiveTime, TimeDelta};\n\nlet from_hms = |h, m, s| NaiveTime::from_hms_opt(h, m, s).unwrap();\n\nassert_eq!(\n    from_hms(3, 4, 5).overflowing_add_signed(TimeDelta::try_hours(11).unwrap()),\n    (from_hms(14, 4, 5), 0)\n);\nassert_eq!(\n    from_hms(3, 4, 5).overflowing_add_signed(TimeDelta::try_hours(23).unwrap()),\n    (from_hms(2, 4, 5), 86_400)\n);\nassert_eq!(\n    from_hms(3, 4, 5).overflowing_add_signed(TimeDelta::try_hours(-7).unwrap()),\n    (from_hms(20, 4, 5), -86_400)\n);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"tuple":[{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"primitive":"i64"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1326:198":{"id":"0:1326:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[1929,4],"end":[1929,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1875":{"id":"0:1875","crate_id":0,"name":null,"span":{"filename":"src/offset/local/mod.rs","begin":[165,0],"end":[191,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["datetime_from_str","timestamp_millis","from_local_datetime","yo","from_utc_date","from_local_date","timestamp","from_utc_datetime","timestamp_opt","timestamp_micros","ymd","isoywd_opt","timestamp_millis_opt","with_ymd_and_hms","isoywd","yo_opt","ymd_opt","timestamp_nanos"],"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1876:2351","0:1877:2984","0:1878:7744","0:1879:7746","0:1880:7752","0:1881:4477"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3066:1956":{"id":"0:3066:1956","crate_id":0,"name":"0","span":{"filename":"src/offset/mod.rs","begin":[63,11],"end":[63,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"T"}}},"b:2:2913-0:2165:2340":{"id":"b:2:2913-0:2165:2340","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1952:3577":{"id":"0:1952:3577","crate_id":0,"name":"timestamp_opt","span":{"filename":"src/offset/mod.rs","begin":[446,4],"end":[451,5]},"visibility":"default","docs":"Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\nand the number of nanoseconds since the last whole non-leap second.\n\nThe nanosecond part can exceed 1,000,000,000 in order to represent a\n[leap second](crate::NaiveTime#leap-second-handling), but only when `secs % 60 == 59`.\n(The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)\n\n# Errors\n\nReturns `MappedLocalTime::None` on out-of-range number of seconds and/or\ninvalid nanosecond, otherwise always returns `MappedLocalTime::Single`.\n\n# Example\n\n```\nuse chrono::{TimeZone, Utc};\n\nassert_eq!(Utc.timestamp_opt(1431648000, 0).unwrap().to_string(), \"2015-05-15 00:00:00 UTC\");\n```","links":{"crate::NaiveTime#leap-second-handling":"0:2723:2350"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["secs",{"primitive":"i64"}],["nsecs",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2141:788":{"id":"0:2141:788","crate_id":0,"name":"fmt","span":{"filename":"src/time_delta.rs","begin":[52,63],"end":[52,68]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:2209:3075":{"id":"b:2:3737-0:2209:3075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2239:788":{"id":"0:2239:788","crate_id":0,"name":"fmt","span":{"filename":"src/format/parsed.rs","begin":[128,31],"end":[128,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:9654-0:2158:2335":{"id":"a:2:41969:9654-0:2158:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1053:2973":{"id":"0:1053:2973","crate_id":0,"name":"succ_opt","span":{"filename":"src/naive/date/mod.rs","begin":[971,4],"end":[977,5]},"visibility":"public","docs":"Makes a new `NaiveDate` for the next calendar date.\n\n# Errors\n\nReturns `None` when `self` is the last representable date.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2015, 6, 3).unwrap().succ_opt(),\n    Some(NaiveDate::from_ymd_opt(2015, 6, 4).unwrap())\n);\nassert_eq!(NaiveDate::MAX.succ_opt(), None);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2630:7912":{"id":"2:2630:7912","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:2927":{"id":"0:188:2927","crate_id":0,"name":"naive_local","span":{"filename":"src/date.rs","begin":[305,4],"end":[307,5]},"visibility":"public","docs":"Returns a view to the naive local date.\n\nThis is technically the same as [`naive_utc`](#method.naive_utc)\nbecause the offset is restricted to never exceed one day,\nbut provided for the consistency.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2201":{"id":"0:2201","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[507,29],"end":[507,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:543":{"id":"0:543","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1783,0],"end":[1792,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1941:2352","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:545:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:756:1215":{"id":"0:756:1215","crate_id":0,"name":"offset","span":{"filename":"src/format/parsed.rs","begin":[1134,4],"end":[1136,5]},"visibility":"public","docs":"Get the `offset` field if set.\n\nSee also [`set_offset()`](Parsed::set_offset).","links":{"Parsed::set_offset":"0:716:4380"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:2356:3731":{"id":"b:2:2628-0:2356:3731","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1116:1721":{"id":"0:1116:1721","crate_id":0,"name":"sub","span":{"filename":"src/naive/date/mod.rs","begin":[2013,4],"end":[2015,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3172:2566","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2777":{"id":"0:2777","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[22,36],"end":[22,41]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2778:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5863-0:2165:2340":{"id":"b:5:5863-0:2165:2340","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5861:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["5:5865:1763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2070":{"id":"0:2070","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[259,0],"end":[263,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2071:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:542:788":{"id":"0:542:788","crate_id":0,"name":"fmt","span":{"filename":"src/datetime/mod.rs","begin":[1752,4],"end":[1755,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:449":{"id":"0:449","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1332,0],"end":[1412,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hour12","num_seconds_from_midnight"],"trait":{"name":"Timelike","id":"0:2099:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:451:2935","0:452:3476","0:453:3477","0:454:3196","0:455:3481","0:457:3485","0:459:3491","0:461:3498"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5863-0:3237:2427":{"id":"b:5:5863-0:3237:2427","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5861:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5865:1763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:88:2733":{"id":"0:88:2733","crate_id":0,"name":"sum","span":{"filename":"src/time_delta.rs","begin":[521,4],"end":[523,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2084:3030":{"id":"0:2084:3030","crate_id":0,"name":"month0","span":{"filename":"src/traits.rs","begin":[55,4],"end":[55,28]},"visibility":"default","docs":"Returns the month number starting from 0.\n\nThe return value ranges from 0 to 11.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:3737-0:3042:2336":{"id":"b:2:3737-0:3042:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:266:1721":{"id":"0:266:1721","crate_id":0,"name":"sub","span":{"filename":"src/date.rs","begin":[532,4],"end":[534,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1959:7744":{"id":"0:1959:7744","crate_id":0,"name":"offset_from_local_date","span":{"filename":"src/offset/mod.rs","begin":[549,4],"end":[549,89]},"visibility":"default","docs":"Creates the offset(s) for given local `NaiveDate` if possible.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:1941:2352","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:3239":{"id":"0:3239","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[671,9],"end":[671,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3240:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2256:788":{"id":"0:2256:788","crate_id":0,"name":"fmt","span":{"filename":"src/format/strftime.rs","begin":[188,16],"end":[188,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2657":{"id":"0:2657","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2164,46],"end":[2164,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","gt","lt","le"],"trait":{"name":"PartialOrd","id":"2:2717:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2658:1280"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41969:9654-0:2741:2366":{"id":"a:2:41969:9654-0:2741:2366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2741:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1967:4477":{"id":"0:1967:4477","crate_id":0,"name":"offset_from_utc_datetime","span":{"filename":"src/offset/mod.rs","begin":[579,4],"end":[579,76]},"visibility":"default","docs":"Creates the offset for given UTC `NaiveDateTime`. This cannot fail.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:1941:2352","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:2026":{"id":"0:2026","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[59,0],"end":[161,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2027:2972","0:2028:2979","0:2029:3964","0:2030:8753","0:2031:5212","0:2032:3963"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2637:686":{"id":"0:2637:686","crate_id":0,"name":"eq","span":{"filename":"src/naive/date/mod.rs","begin":[2128,35],"end":[2128,44]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2153":{"id":"0:2153","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[575,29],"end":[575,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2711":{"id":"0:2711","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[19,20],"end":[19,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2713":{"id":"0:2713","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[19,24],"end":[19,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","gt","lt","le"],"trait":{"name":"PartialOrd","id":"2:2717:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2714:1280"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2585:3873":{"id":"0:2585:3873","crate_id":0,"name":"Invalid","span":{"filename":"src/format/mod.rs","begin":[417,4],"end":[417,11]},"visibility":"default","docs":"The input string has some invalid character sequence for given formatting items.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1601":{"id":"0:1601","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[149,0],"end":[153,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Offset","id":"0:1939:2351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1602:3112"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2625-0:3110:2345":{"id":"b:2:2625-0:3110:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:183:2993":{"id":"0:183:2993","crate_id":0,"name":"checked_add_signed","span":{"filename":"src/date.rs","begin":[265,4],"end":[268,5]},"visibility":"public","docs":"Adds given `TimeDelta` to the current date.\n\nReturns `None` when it will result in overflow.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:2521:172":{"id":"a:2:3121:246-0:2521:172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:0:1993-0:2663:2349":{"id":"b:0:1993-0:2663:2349","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[52,0],"end":[80,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"T"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Timelike","id":"0:2099:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"SubsecRound","id":"0:1990:2339","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1995:8591","0:1996:8596"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1511:198":{"id":"0:1511:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/time/mod.rs","begin":[1459,4],"end":[1459,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1873:3050":{"id":"0:1873:3050","crate_id":0,"name":"today","span":{"filename":"src/offset/local/mod.rs","begin":[129,4],"end":[131,5]},"visibility":"public","docs":"Returns a `Date` which corresponds to the current date.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `Local::now()` instead\")]","#[allow(deprecated)]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `Local::now()` instead"},"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:9654-0:2123:2332":{"id":"a:2:41969:9654-0:2123:2332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2407:3730":{"id":"0:2407:3730","crate_id":0,"name":"Internal","span":{"filename":"src/format/mod.rs","begin":[254,4],"end":[254,27]},"visibility":"default","docs":"Internal uses only.\n\nThis item exists so that one can add additional internal-only formatting\nwithout breaking major compatibility (as enum variants cannot be selectively private).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2409:1956"]},"discriminant":null}}},"b:2:2628-0:2766:2346":{"id":"b:2:2628-0:2766:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1951:3138":{"id":"0:1951:3138","crate_id":0,"name":"timestamp","span":{"filename":"src/offset/mod.rs","begin":[422,4],"end":[424,5]},"visibility":"default","docs":"Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\nand the number of nanoseconds since the last whole non-leap second.\n\nThe nanosecond part can exceed 1,000,000,000 in order to represent a\n[leap second](crate::NaiveTime#leap-second-handling), but only when `secs % 60 == 59`.\n(The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)\n\n# Panics\n\nPanics on the out-of-range number of seconds and/or invalid nanosecond,\nfor a non-panicking version see [`timestamp_opt`](#method.timestamp_opt).","links":{"crate::NaiveTime#leap-second-handling":"0:2723:2350"},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `timestamp_opt()` instead\")]"],"deprecation":{"since":"0.4.23","note":"use `timestamp_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["secs",{"primitive":"i64"}],["nsecs",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[505,0],"end":[510,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33333:2562","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:255:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1264:3032":{"id":"0:1264:3032","crate_id":0,"name":"day0","span":{"filename":"src/naive/datetime/mod.rs","begin":[1065,4],"end":[1067,5]},"visibility":"default","docs":"Returns the day of month starting from 0.\n\nThe return value ranges from 0 to 30. (The last day of month differs by months.)\n\nSee also the [`NaiveDate::day0`] method.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, NaiveDateTime};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.day0(), 24);\n```","links":{"`NaiveDate::day0`":"0:1088:3032"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1316:198":{"id":"0:1316:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[1836,4],"end":[1836,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2898-0:3042:2336":{"id":"b:2:2898-0:3042:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:184:2995":{"id":"0:184:2995","crate_id":0,"name":"checked_sub_signed","span":{"filename":"src/date.rs","begin":[275,4],"end":[278,5]},"visibility":"public","docs":"Subtracts given `TimeDelta` from the current date.\n\nReturns `None` when it will result in overflow.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1226:3138":{"id":"0:1226:3138","crate_id":0,"name":"timestamp","span":{"filename":"src/naive/datetime/mod.rs","begin":[358,4],"end":[360,5]},"visibility":"public","docs":"Returns the number of non-leap seconds since the midnight on January 1, 1970.\n\nNote that this does *not* account for the timezone!\nThe true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","links":{},"attrs":["#[deprecated(since = \"0.4.35\", note = \"use `.and_utc().timestamp()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.35","note":"use `.and_utc().timestamp()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2629":{"id":"0:2629","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2128,16],"end":[2128,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3185:3927":{"id":"0:3185:3927","crate_id":0,"name":"November","span":{"filename":"src/month.rs","begin":[63,4],"end":[63,17]},"visibility":"default","docs":"November","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"10","value":"10"}}}},"b:2:2628-0:3208:2376":{"id":"b:2:2628-0:3208:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1490:198":{"id":"0:1490:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/time/mod.rs","begin":[1234,4],"end":[1234,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1459:6681":{"id":"0:1459:6681","crate_id":0,"name":"overflowing_sub_signed","span":{"filename":"src/naive/time/mod.rs","begin":[671,4],"end":[674,5]},"visibility":"public","docs":"Subtracts given `TimeDelta` from the current time, and also returns the number of *seconds*\nin the integral number of days ignored from the subtraction.\n\n# Example\n\n```\nuse chrono::{NaiveTime, TimeDelta};\n\nlet from_hms = |h, m, s| NaiveTime::from_hms_opt(h, m, s).unwrap();\n\nassert_eq!(\n    from_hms(3, 4, 5).overflowing_sub_signed(TimeDelta::try_hours(2).unwrap()),\n    (from_hms(1, 4, 5), 0)\n);\nassert_eq!(\n    from_hms(3, 4, 5).overflowing_sub_signed(TimeDelta::try_hours(17).unwrap()),\n    (from_hms(10, 4, 5), 86_400)\n);\nassert_eq!(\n    from_hms(3, 4, 5).overflowing_sub_signed(TimeDelta::try_hours(-22).unwrap()),\n    (from_hms(1, 4, 5), -86_400)\n);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"tuple":[{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"primitive":"i64"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32106:236-0:2123:2332":{"id":"a:2:32106:236-0:2123:2332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3156:9919-0:3145:2373":{"id":"a:2:3156:9919-0:3145:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41968:9655-0:2158:2335":{"id":"a:2:41968:9655-0:2158:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2611":{"id":"0:2611","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[94,9],"end":[94,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2612:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1310:198":{"id":"0:1310:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[1753,4],"end":[1753,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:108-0:3042:2336":{"id":"0:108-0:3042:2336","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[535,4],"end":[535,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"import":{"source":"crate::Local","name":"Local","id":"0:3042:2336","glob":false}}},"0:2513":{"id":"0:2513","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[317,29],"end":[317,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2719:463":{"id":"0:2719:463","crate_id":0,"name":"clone","span":{"filename":"src/naive/isoweek.rs","begin":[19,47],"end":[19,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1287:3196":{"id":"0:1287:3196","crate_id":0,"name":"nanosecond","span":{"filename":"src/naive/datetime/mod.rs","begin":[1430,4],"end":[1432,5]},"visibility":"default","docs":"Returns the number of nanoseconds since the whole non-leap second.\nThe range from 1,000,000,000 to 1,999,999,999 represents\nthe [leap second](./struct.NaiveTime.html#leap-second-handling).\n\nSee also the [`NaiveTime#method.nanosecond`] method.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Timelike};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 34, 56, 789).unwrap();\nassert_eq!(dt.nanosecond(), 789_000_000);\n```","links":{"`NaiveTime#method.nanosecond`":"0:2723:2350"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:9919-0:2644:5704":{"id":"a:2:3156:9919-0:2644:5704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1283":{"id":"0:1283","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1359,0],"end":[1570,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hour12","num_seconds_from_midnight"],"trait":{"name":"Timelike","id":"0:2099:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1284:2935","0:1285:3476","0:1286:3477","0:1287:3196","0:1288:3481","0:1290:3485","0:1292:3491","0:1294:3498"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[909,0],"end":[917,1]},"visibility":"default","docs":"Convert a `DateTime<FixedOffset>` instance into a `DateTime<Utc>` instance.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:396:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:41:2646":{"id":"0:41:2646","crate_id":0,"name":"try_minutes","span":{"filename":"src/time_delta.rs","begin":[195,4],"end":[197,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of minutes.\n\nEquivalent to `TimeDelta::try_seconds(minutes * 60)` with overflow checks.\n\n# Errors\n\nReturns `None` when the `TimeDelta` would be out of bounds.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["minutes",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:703:4329":{"id":"0:703:4329","crate_id":0,"name":"set_week_from_sun","span":{"filename":"src/format/parsed.rs","begin":[335,4],"end":[340,5]},"visibility":"public","docs":"Set the [`week_from_sun`](Parsed::week_from_sun) week number field to the given value.\n\nWeek 1 starts at the first Sunday of January.\n\n# Errors\n\nReturns `OUT_OF_RANGE` if `value` is not in the range 0-53.\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::week_from_sun":"0:744:3955"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:9919-0:2368:3074":{"id":"a:2:3156:9919-0:2368:3074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1977-0:3049:2347":{"id":"0:1977-0:3049:2347","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[580,48],"end":[580,51]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"offset::Utc","name":"Utc","id":"0:3049:2347","glob":false}}},"0:1482:3498":{"id":"0:1482:3498","crate_id":0,"name":"with_nanosecond","span":{"filename":"src/naive/time/mod.rs","begin":[1112,4],"end":[1117,5]},"visibility":"default","docs":"Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.\n\nAs with the [`nanosecond`](#method.nanosecond) method,\nthe input range can exceed 1,000,000,000 for leap seconds.\n\n# Errors\n\nReturns `None` if `nanosecond >= 2,000,000,000`.\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nlet dt = NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap();\nassert_eq!(\n    dt.with_nanosecond(333_333_333),\n    Some(NaiveTime::from_hms_nano_opt(23, 56, 4, 333_333_333).unwrap())\n);\nassert_eq!(dt.with_nanosecond(2_000_000_000), None);\n```\n\nLeap seconds can theoretically follow *any* whole second.\nThe following would be a proper leap second at the time zone offset of UTC-00:03:57\n(there are several historical examples comparable to this \"non-sense\" offset),\nand therefore is allowed.\n\n```\n# use chrono::{NaiveTime, Timelike};\nlet dt = NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap();\nlet strange_leap_second = dt.with_nanosecond(1_333_333_333).unwrap();\nassert_eq!(strange_leap_second.nanosecond(), 1_333_333_333);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:2123:2332":{"id":"b:2:3737-0:2123:2332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:372:3008":{"id":"0:372:3008","crate_id":0,"name":"years_since","span":{"filename":"src/datetime/mod.rs","begin":[602,4],"end":[616,5]},"visibility":"public","docs":"Retrieve the elapsed years from now to the given [`DateTime`].\n\n# Errors\n\nReturns `None` if `base < self`.","links":{"`DateTime`":"0:2165:2340"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["base",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2426":{"id":"0:2426","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[258,16],"end":[258,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2427:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1451:2968":{"id":"0:1451:2968","crate_id":0,"name":"from_hms_nano_opt","span":{"filename":"src/naive/time/mod.rs","begin":[431,4],"end":[440,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from hour, minute, second and nanosecond.\n\nThe nanosecond part is allowed to exceed 1,000,000,000 in order to represent a\n[leap second](#leap-second-handling), but only when `sec == 59`.\n\n# Errors\n\nReturns `None` on invalid hour, minute, second and/or nanosecond.\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nlet from_hmsn_opt = NaiveTime::from_hms_nano_opt;\n\nassert!(from_hmsn_opt(0, 0, 0, 0).is_some());\nassert!(from_hmsn_opt(23, 59, 59, 999_999_999).is_some());\nassert!(from_hmsn_opt(23, 59, 59, 1_999_999_999).is_some()); // a leap second after 23:59:59\nassert!(from_hmsn_opt(24, 0, 0, 0).is_none());\nassert!(from_hmsn_opt(23, 60, 0, 0).is_none());\nassert!(from_hmsn_opt(23, 59, 60, 0).is_none());\nassert!(from_hmsn_opt(23, 59, 59, 2_000_000_000).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2643:470":{"id":"0:2643:470","crate_id":0,"name":"cmp","span":{"filename":"src/naive/date/mod.rs","begin":[2128,62],"end":[2128,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3055":{"id":"0:3055","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[43,22],"end":[43,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3056:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41968:9655-0:2746:2364":{"id":"a:2:41968:9655-0:2746:2364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3205:1280":{"id":"0:3205:1280","crate_id":0,"name":"partial_cmp","span":{"filename":"src/month.rs","begin":[31,50],"end":[31,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:3154:2343":{"id":"b:2:2628-0:3154:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41969:9654-0:2457:3803":{"id":"a:2:41969:9654-0:2457:3803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1963:2929":{"id":"0:1963:2929","crate_id":0,"name":"from_local_datetime","span":{"filename":"src/offset/mod.rs","begin":[567,4],"end":[573,5]},"visibility":"default","docs":"Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2490":{"id":"0:2490","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[296,16],"end":[296,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:518:198":{"id":"0:518:198","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1666,4],"end":[1666,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:738:4280":{"id":"0:738:4280","crate_id":0,"name":"year_div_100","span":{"filename":"src/format/parsed.rs","begin":[981,4],"end":[983,5]},"visibility":"public","docs":"Get the `year_div_100` field if set.\n\nSee also [`set_year_div_100()`](Parsed::set_year_div_100).","links":{"Parsed::set_year_div_100":"0:696:4300"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2549":{"id":"0:2549","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[328,16],"end":[328,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2551:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2547":{"id":"0:2547","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[328,16],"end":[328,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:208:3030":{"id":"0:208:3030","crate_id":0,"name":"month0","span":{"filename":"src/date.rs","begin":[402,4],"end":[404,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1346:60":{"id":"0:1346:60","crate_id":0,"name":"default","span":{"filename":"src/naive/datetime/mod.rs","begin":[2150,4],"end":[2152,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3148:463":{"id":"0:3148:463","crate_id":0,"name":"clone","span":{"filename":"src/weekday.rs","begin":[231,9],"end":[231,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:9654-0:2356:3731":{"id":"a:2:41969:9654-0:2356:3731","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:964:3567":{"id":"0:964:3567","crate_id":0,"name":"from_str","span":{"filename":"src/format/mod.rs","begin":[534,4],"end":[554,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:12808:3566","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13188:39905":{"id":"2:13188:39905","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13189:39901"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44030:9258","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2499:858":{"id":"0:2499:858","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[296,44],"end":[296,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:2723:2350":{"id":"b:2:2908-0:2723:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1335:198":{"id":"0:1335:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[2015,4],"end":[2015,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2908-0:2300:3683":{"id":"b:2:2908-0:2300:3683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13290:16920":{"id":"2:13290:16920","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4926:16920"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44064:9272","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2690":{"id":"0:53:2690","crate_id":0,"name":"subsec_nanos","span":{"filename":"src/time_delta.rs","begin":[313,4],"end":[319,5]},"visibility":"public","docs":"Returns the number of nanoseconds such that\n`subsec_nanos() + num_seconds() * NANOS_PER_SEC` is the total number of\nnanoseconds in the `TimeDelta`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1059:3008":{"id":"0:1059:3008","crate_id":0,"name":"years_since","span":{"filename":"src/naive/date/mod.rs","begin":[1141,4],"end":[1153,5]},"visibility":"public","docs":"Returns the number of whole years from the given `base` until `self`.\n\n# Errors\n\nReturns `None` if `base < self`.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["base",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:2501:3809":{"id":"b:2:2628-0:2501:3809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2625-0:2663:2349":{"id":"b:2:2625-0:2663:2349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13160:41642":{"id":"2:13160:41642","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3202:858":{"id":"0:3202:858","crate_id":0,"name":"hash","span":{"filename":"src/month.rs","begin":[31,44],"end":[31,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:9654-0:3237:2427":{"id":"a:2:41969:9654-0:3237:2427","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2385:3759":{"id":"0:2385:3759","crate_id":0,"name":"Nanosecond6","span":{"filename":"src/format/mod.rs","begin":[207,4],"end":[207,15]},"visibility":"default","docs":"Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1882-0:3042:2336":{"id":"0:1882-0:3042:2336","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[35,0],"end":[35,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"import":{"source":"self::local::Local","name":"Local","id":"0:3042:2336","glob":false}}},"b:2:2628-0:2300:3683":{"id":"b:2:2628-0:2300:3683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2422:3788":{"id":"0:2422:3788","crate_id":0,"name":"InternalFixed","span":{"filename":"src/format/mod.rs","begin":[259,0],"end":[261,1]},"visibility":"public","docs":"An opaque type representing fixed-format item types for internal uses only.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32106:236-0:2422:3788","a:2:3121:246-0:2422:3788","a:2:3156:9919-0:2422:3788","a:2:32165:9507-0:2422:3788","a:2:41968:9655-0:2422:3788","a:2:41969:9654-0:2422:3788","b:2:2913-0:2422:3788","b:2:2898-0:2422:3788","b:2:2625-0:2422:3788","b:2:2902-0:2422:3788","b:2:2628-0:2422:3788","b:2:3737-0:2422:3788","b:2:2908-0:2422:3788","b:5:736-0:2422:3788","0:2431","0:2424","0:2428","0:2433","0:2426","0:2429"]}}},"0:1069:5987":{"id":"0:1069:5987","crate_id":0,"name":"leap_year","span":{"filename":"src/naive/date/mod.rs","begin":[1343,4],"end":[1345,5]},"visibility":"public","docs":"Returns `true` if this is a leap year.\n\n```\n# use chrono::NaiveDate;\nassert_eq!(NaiveDate::from_ymd_opt(2000, 1, 1).unwrap().leap_year(), true);\nassert_eq!(NaiveDate::from_ymd_opt(2001, 1, 1).unwrap().leap_year(), false);\nassert_eq!(NaiveDate::from_ymd_opt(2002, 1, 1).unwrap().leap_year(), false);\nassert_eq!(NaiveDate::from_ymd_opt(2003, 1, 1).unwrap().leap_year(), false);\nassert_eq!(NaiveDate::from_ymd_opt(2004, 1, 1).unwrap().leap_year(), true);\nassert_eq!(NaiveDate::from_ymd_opt(2100, 1, 1).unwrap().leap_year(), false);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1947:7691":{"id":"0:1947:7691","crate_id":0,"name":"yo","span":{"filename":"src/offset/mod.rs","begin":[347,4],"end":[349,5]},"visibility":"default","docs":"Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n\nThe time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),\nbut it will propagate to the `DateTime` values constructed via this date.\n\nPanics on the out-of-range date and/or invalid DOY.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"use `from_local_datetime()` with a `NaiveDateTime` instead\")]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.23","note":"use `from_local_datetime()` with a `NaiveDateTime` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2004:135":{"id":"0:2004:135","crate_id":0,"name":"Err","span":{"filename":"src/round.rs","begin":[159,4],"end":[159,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"2:13185:3982":{"id":"2:13185:3982","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12332:459"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43726:9256","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174:2973":{"id":"0:174:2973","crate_id":0,"name":"succ_opt","span":{"filename":"src/date.rs","begin":[215,4],"end":[217,5]},"visibility":"public","docs":"Makes a new `Date` for the next date.\n\nReturns `None` when `self` is the last representable date.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2290":{"id":"0:2290","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[78,22],"end":[78,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2496":{"id":"0:2496","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[296,40],"end":[296,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2575":{"id":"0:2575","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[386,44],"end":[386,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2576:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3179:3925":{"id":"0:3179:3925","crate_id":0,"name":"September","span":{"filename":"src/month.rs","begin":[59,4],"end":[59,17]},"visibility":"default","docs":"September","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"8","value":"8"}}}},"b:2:2625-0:2183:2341":{"id":"b:2:2625-0:2183:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1528-0:2608:2348":{"id":"0:1528-0:2608:2348","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[18,21],"end":[18,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::date::NaiveDate","name":"NaiveDate","id":"0:2608:2348","glob":false}}},"0:811":{"id":"0:811","crate_id":0,"name":null,"span":{"filename":"src/format/parse.rs","begin":[523,0],"end":[534,1]},"visibility":"default","docs":"Accepts a relaxed form of RFC3339.\nA space or a 'T' are acepted as the separator between the date and time\nparts. Additional spaces are allowed between each component.\n\nAll of these examples are equivalent:\n```\n# use chrono::{DateTime, offset::FixedOffset};\n\"2012-12-12T12:12:12Z\".parse::<DateTime<FixedOffset>>()?;\n\"2012-12-12 12:12:12Z\".parse::<DateTime<FixedOffset>>()?;\n\"2012-  12-12T12:  12:12Z\".parse::<DateTime<FixedOffset>>()?;\n# Ok::<(), chrono::ParseError>(())\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12808:3566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"crate::DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:812:135","0:813:3567"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2412":{"id":"0:2412","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[174,16],"end":[174,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1266:3034":{"id":"0:1266:3034","crate_id":0,"name":"ordinal0","span":{"filename":"src/naive/datetime/mod.rs","begin":[1105,4],"end":[1107,5]},"visibility":"default","docs":"Returns the day of year starting from 0.\n\nThe return value ranges from 0 to 365. (The last day of year differs by years.)\n\nSee also the [`NaiveDate::ordinal0`] method.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, NaiveDateTime};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.ordinal0(), 267);\n```","links":{"`NaiveDate::ordinal0`":"0:1090:3034"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:512:1722":{"id":"0:512:1722","crate_id":0,"name":"sub_assign","span":{"filename":"src/datetime/mod.rs","begin":[1633,4],"end":[1638,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:9655-0:2608:2348":{"id":"a:2:41968:9655-0:2608:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:5863-0:3093:2371":{"id":"b:5:5863-0:3093:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5861:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5865:1763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2902-0:2457:3803":{"id":"b:2:2902-0:2457:3803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1034:3216":{"id":"0:1034:3216","crate_id":0,"name":"checked_add_months","span":{"filename":"src/naive/date/mod.rs","begin":[544,4],"end":[553,5]},"visibility":"public","docs":"Add a duration in [`Months`] to the date\n\nUses the last day of the month if the day does not exist in the resulting month.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\n# use chrono::{NaiveDate, Months};\nassert_eq!(\n    NaiveDate::from_ymd_opt(2022, 2, 20).unwrap().checked_add_months(Months::new(6)),\n    Some(NaiveDate::from_ymd_opt(2022, 8, 20).unwrap())\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2022, 7, 31).unwrap().checked_add_months(Months::new(2)),\n    Some(NaiveDate::from_ymd_opt(2022, 9, 30).unwrap())\n);\n```","links":{"`Months`":"0:3208:2376"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["months",{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:3042:2336":{"id":"b:2:2908-0:3042:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:497:295":{"id":"0:497:295","crate_id":0,"name":"add","span":{"filename":"src/datetime/mod.rs","begin":[1549,4],"end":[1553,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:2123:2332":{"id":"b:2:2898-0:2123:2332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32106:236-0:2457:3803":{"id":"a:2:32106:236-0:2457:3803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1216:3317":{"id":"0:1216:3317","crate_id":0,"name":"from_timestamp_millis","span":{"filename":"src/naive/datetime/mod.rs","begin":[141,4],"end":[143,5]},"visibility":"public","docs":"Creates a new [NaiveDateTime] from milliseconds since the UNIX epoch.\n\nThe UNIX epoch starts on midnight, January 1, 1970, UTC.\n\n# Errors\n\nReturns `None` if the number of milliseconds would be out of range for a `NaiveDateTime`\n(more than ca. 262,000 years away from common era)","links":{"NaiveDateTime":"0:2663:2349"},"attrs":["#[deprecated(since = \"0.4.35\", note =\n\"use `DateTime::from_timestamp_millis` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.35","note":"use `DateTime::from_timestamp_millis` instead"},"inner":{"function":{"decl":{"inputs":[["millis",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32106:236-0:2663:2349":{"id":"a:2:32106:236-0:2663:2349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13199:8274":{"id":"2:13199:8274","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:9229"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:9245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2581:3866":{"id":"0:2581:3866","crate_id":0,"name":"Impossible","span":{"filename":"src/format/mod.rs","begin":[407,4],"end":[407,14]},"visibility":"default","docs":"There is no possible date and time value with given set of fields.\n\nThis does not include the out-of-range conditions, which are trivially invalid.\nIt includes the case that there are one or more fields that are inconsistent to each other.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2038:1788":{"id":"0:2038:1788","crate_id":0,"name":"try_from","span":{"filename":"src/weekday.rs","begin":[183,4],"end":[194,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:2882:256","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2127:463":{"id":"0:2127:463","crate_id":0,"name":"clone","span":{"filename":"src/time_delta.rs","begin":[52,9],"end":[52,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1301:295":{"id":"0:1301:295","crate_id":0,"name":"add","span":{"filename":"src/naive/datetime/mod.rs","begin":[1651,4],"end":[1655,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2111-0:2080:2342":{"id":"0:2111-0:2080:2342","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[596,17],"end":[596,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"traits::Datelike","name":"Datelike","id":"0:2080:2342","glob":false}}},"0:358:3216":{"id":"0:358:3216","crate_id":0,"name":"checked_add_months","span":{"filename":"src/datetime/mod.rs","begin":[462,4],"end":[470,5]},"visibility":"public","docs":"Adds given `Months` to the current date and time.\n\nUses the last day of the month if the day does not exist in the resulting month.\n\nSee [`NaiveDate::checked_add_months`] for more details on behavior.\n\n# Errors\n\nReturns `None` if:\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.\n- The resulting UTC datetime would be out of range.\n- The resulting local datetime would be out of range (unless `months` is zero).","links":{"`NaiveDate::checked_add_months`":"0:1034:3216"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["months",{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13183:34966":{"id":"2:13183:34966","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13182:34965"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3224":{"id":"0:3224","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,50],"end":[227,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","gt","lt","le"],"trait":{"name":"PartialOrd","id":"2:2717:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3225:1280"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2913-0:2746:2364":{"id":"b:2:2913-0:2746:2364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1922:7656":{"id":"0:1922:7656","crate_id":0,"name":"latest","span":{"filename":"src/offset/mod.rs","begin":[111,4],"end":[116,5]},"visibility":"public","docs":"Returns the latest possible result of a the time zone mapping.\n\n# Errors\n\nReturns `None` if local time falls in a _gap_ in the local time, or if there was an error.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:3237:2427":{"id":"b:2:2902-0:3237:2427","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2908-0:2475:3806":{"id":"b:2:2908-0:2475:3806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2145:2331":{"id":"0:2145:2331","crate_id":0,"name":"OutOfRangeError","span":{"filename":"src/time_delta.rs","begin":[576,0],"end":[576,31]},"visibility":"public","docs":"Represents error when converting `TimeDelta` to/from a standard library\nimplementation\n\nThe `std::time::Duration` supports a range from zero to `u64::MAX`\n*seconds*, while this module supports signed range of up to\n`i64::MAX` of *milliseconds*.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32106:236-0:2145:2331","a:2:3121:246-0:2145:2331","a:2:3156:9919-0:2145:2331","a:2:32165:9507-0:2145:2331","a:2:41968:9655-0:2145:2331","a:2:41969:9654-0:2145:2331","b:2:2913-0:2145:2331","b:2:2898-0:2145:2331","b:2:2625-0:2145:2331","b:2:2902-0:2145:2331","b:2:2628-0:2145:2331","b:2:3737-0:2145:2331","b:2:2908-0:2145:2331","b:5:736-0:2145:2331","b:5:5863-0:2145:2331","0:2156","0:2150","0:2152","0:99","0:2154","0:97","0:2148","0:2153"]}}},"0:2232:463":{"id":"0:2232:463","crate_id":0,"name":"clone","span":{"filename":"src/format/parsed.rs","begin":[128,9],"end":[128,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:2741:2366":{"id":"b:2:2898-0:2741:2366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2741:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1312":{"id":"0:1312","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1816,0],"end":[1823,1]},"visibility":"default","docs":"Subtract `TimeDelta` from `NaiveDateTime`.\n\nThis is the same as the addition with a negated `TimeDelta`.\n\nAs a part of Chrono's [leap second handling] the subtraction assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_sub_signed`] to get an `Option` instead.\n\n# Example\n\n```\nuse chrono::{NaiveDate, TimeDelta};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nlet d = from_ymd(2016, 7, 8);\nlet hms = |h, m, s| d.and_hms_opt(h, m, s).unwrap();\nassert_eq!(hms(3, 5, 7) - TimeDelta::zero(), hms(3, 5, 7));\nassert_eq!(hms(3, 5, 7) - TimeDelta::try_seconds(1).unwrap(), hms(3, 5, 6));\nassert_eq!(hms(3, 5, 7) - TimeDelta::try_seconds(-1).unwrap(), hms(3, 5, 8));\nassert_eq!(hms(3, 5, 7) - TimeDelta::try_seconds(3600 + 60).unwrap(), hms(2, 4, 7));\nassert_eq!(\n    hms(3, 5, 7) - TimeDelta::try_seconds(86_400).unwrap(),\n    from_ymd(2016, 7, 7).and_hms_opt(3, 5, 7).unwrap()\n);\nassert_eq!(\n    hms(3, 5, 7) - TimeDelta::try_days(365).unwrap(),\n    from_ymd(2015, 7, 9).and_hms_opt(3, 5, 7).unwrap()\n);\n\nlet hmsm = |h, m, s, milli| d.and_hms_milli_opt(h, m, s, milli).unwrap();\nassert_eq!(hmsm(3, 5, 7, 450) - TimeDelta::try_milliseconds(670).unwrap(), hmsm(3, 5, 6, 780));\n```\n\nLeap seconds are handled,\nbut the subtraction assumes that it is the only leap second happened.\n\n```\n# use chrono::{TimeDelta, NaiveDate};\n# let from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n# let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli_opt(h, m, s, milli).unwrap();\nlet leap = hmsm(3, 5, 59, 1_300);\nassert_eq!(leap - TimeDelta::zero(), hmsm(3, 5, 59, 1_300));\nassert_eq!(leap - TimeDelta::try_milliseconds(200).unwrap(), hmsm(3, 5, 59, 1_100));\nassert_eq!(leap - TimeDelta::try_milliseconds(500).unwrap(), hmsm(3, 5, 59, 800));\nassert_eq!(leap - TimeDelta::try_seconds(60).unwrap(), hmsm(3, 5, 0, 300));\nassert_eq!(leap - TimeDelta::try_days(1).unwrap(),\n           from_ymd(2016, 7, 7).and_hms_milli_opt(3, 6, 0, 300).unwrap());\n```\n\n[leap second handling]: crate::NaiveTime#leap-second-handling","links":{"crate::NaiveTime#leap-second-handling":"0:2723:2350","`NaiveDateTime::checked_sub_signed`":"0:1240:2995"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1313:198","0:1314:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32165:9507-0:2562:2361":{"id":"a:2:32165:9507-0:2562:2361","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3121:246-0:2300:3683":{"id":"a:2:3121:246-0:2300:3683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3156:9919-0:2475:3806":{"id":"a:2:3156:9919-0:2475:3806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2096:3041":{"id":"0:2096:3041","crate_id":0,"name":"with_ordinal","span":{"filename":"src/traits.rs","begin":[220,4],"end":[220,57]},"visibility":"default","docs":"Makes a new value with the day of year (starting from 1) changed.\n\n# Errors\n\nReturns `None` when:\n\n- The resulting date does not exist (`with_ordinal(366)` in a non-leap year).\n- In case of [`DateTime<Tz>`] if the resulting date and time fall within a timezone\n  transition such as from DST to standard time.\n- The value for `ordinal` is out of range.\n\n[`DateTime<Tz>`]: crate::DateTime","links":{"crate::DateTime":"0:2165:2340"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:488":{"id":"0:488","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1511,0],"end":[1519,1]},"visibility":"default","docs":"Add-assign `chrono::Duration` to `DateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`DateTime<Tz>::checked_add_signed`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_add_signed`":"0:357:2993"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33333:2562","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:490:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2625-0:2501:3809":{"id":"b:2:2625-0:2501:3809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2625-0:2746:2364":{"id":"b:2:2625-0:2746:2364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2908-0:2578:3859":{"id":"b:2:2908-0:2578:3859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1056:2993":{"id":"0:1056:2993","crate_id":0,"name":"checked_add_signed","span":{"filename":"src/naive/date/mod.rs","begin":[1043,4],"end":[1049,5]},"visibility":"public","docs":"Adds the number of whole days in the given `TimeDelta` to the current date.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\nuse chrono::{NaiveDate, TimeDelta};\n\nlet d = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap();\nassert_eq!(\n    d.checked_add_signed(TimeDelta::try_days(40).unwrap()),\n    Some(NaiveDate::from_ymd_opt(2015, 10, 15).unwrap())\n);\nassert_eq!(\n    d.checked_add_signed(TimeDelta::try_days(-40).unwrap()),\n    Some(NaiveDate::from_ymd_opt(2015, 7, 27).unwrap())\n);\nassert_eq!(d.checked_add_signed(TimeDelta::try_days(1_000_000_000).unwrap()), None);\nassert_eq!(d.checked_add_signed(TimeDelta::try_days(-1_000_000_000).unwrap()), None);\nassert_eq!(NaiveDate::MAX.checked_add_signed(TimeDelta::try_days(1).unwrap()), None);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2097:3042":{"id":"0:2097:3042","crate_id":0,"name":"with_ordinal0","span":{"filename":"src/traits.rs","begin":[234,4],"end":[234,59]},"visibility":"default","docs":"Makes a new value with the day of year (starting from 0) changed.\n\n# Errors\n\nReturns `None` when:\n\n- The resulting date does not exist (`with_ordinal0(365)` in a non-leap year).\n- In case of [`DateTime<Tz>`] if the resulting date and time fall within a timezone\n  transition such as from DST to standard time.\n- The value for `ordinal0` is out of range.\n\n[`DateTime<Tz>`]: crate::DateTime","links":{"crate::DateTime":"0:2165:2340"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:32106:236-0:2209:3075":{"id":"a:2:32106:236-0:2209:3075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3156:9919-0:2746:2364":{"id":"a:2:3156:9919-0:2746:2364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:736-0:2123:2332":{"id":"b:5:736-0:2123:2332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3067:4458":{"id":"0:3067:4458","crate_id":0,"name":"Ambiguous","span":{"filename":"src/offset/mod.rs","begin":[68,4],"end":[68,19]},"visibility":"default","docs":"The local time is _ambiguous_ because there is a _fold_ in the local time.\n\nThis variant contains the two possible results, in the order `(earliest, latest)`.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:3069:1956","0:3070:1957"]},"discriminant":null}}},"0:2728:686":{"id":"0:2728:686","crate_id":0,"name":"eq","span":{"filename":"src/naive/time/mod.rs","begin":[215,9],"end":[215,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3216":{"id":"0:3216","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,29],"end":[227,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3214":{"id":"0:3214","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,22],"end":[227,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3215:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:2911:136":{"id":"2:2911:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"b:2:2898-0:2280:3666":{"id":"b:2:2898-0:2280:3666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:531:1721":{"id":"0:531:1721","crate_id":0,"name":"sub","span":{"filename":"src/datetime/mod.rs","begin":[1710,4],"end":[1712,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:754:3196":{"id":"0:754:3196","crate_id":0,"name":"nanosecond","span":{"filename":"src/format/parsed.rs","begin":[1118,4],"end":[1120,5]},"visibility":"public","docs":"Get the `nanosecond` field if set.\n\nSee also [`set_nanosecond()`](Parsed::set_nanosecond).","links":{"Parsed::set_nanosecond":"0:714:4371"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3140":{"id":"0:3140","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[32,37],"end":[32,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3141:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2329:3713":{"id":"0:2329:3713","crate_id":0,"name":"Hour","span":{"filename":"src/format/mod.rs","begin":[135,4],"end":[135,8]},"visibility":"default","docs":"Hour number in the 24-hour clocks (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1240:2995":{"id":"0:1240:2995","crate_id":0,"name":"checked_sub_signed","span":{"filename":"src/naive/datetime/mod.rs","begin":[711,4],"end":[716,5]},"visibility":"public","docs":"Subtracts given `TimeDelta` from the current date and time.\n\nAs a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),\nthe subtraction assumes that **there is no leap second ever**,\nexcept when the `NaiveDateTime` itself represents a leap second\nin which case the assumption becomes that **there is exactly a single leap second ever**.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\nuse chrono::{NaiveDate, TimeDelta};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nlet d = from_ymd(2016, 7, 8);\nlet hms = |h, m, s| d.and_hms_opt(h, m, s).unwrap();\nassert_eq!(hms(3, 5, 7).checked_sub_signed(TimeDelta::zero()), Some(hms(3, 5, 7)));\nassert_eq!(\n    hms(3, 5, 7).checked_sub_signed(TimeDelta::try_seconds(1).unwrap()),\n    Some(hms(3, 5, 6))\n);\nassert_eq!(\n    hms(3, 5, 7).checked_sub_signed(TimeDelta::try_seconds(-1).unwrap()),\n    Some(hms(3, 5, 8))\n);\nassert_eq!(\n    hms(3, 5, 7).checked_sub_signed(TimeDelta::try_seconds(3600 + 60).unwrap()),\n    Some(hms(2, 4, 7))\n);\nassert_eq!(\n    hms(3, 5, 7).checked_sub_signed(TimeDelta::try_seconds(86_400).unwrap()),\n    Some(from_ymd(2016, 7, 7).and_hms_opt(3, 5, 7).unwrap())\n);\n\nlet hmsm = |h, m, s, milli| d.and_hms_milli_opt(h, m, s, milli).unwrap();\nassert_eq!(\n    hmsm(3, 5, 7, 450).checked_sub_signed(TimeDelta::try_milliseconds(670).unwrap()),\n    Some(hmsm(3, 5, 6, 780))\n);\n```\n\nOverflow returns `None`.\n\n```\n# use chrono::{TimeDelta, NaiveDate};\n# let hms = |h, m, s| NaiveDate::from_ymd_opt(2016, 7, 8).unwrap().and_hms_opt(h, m, s).unwrap();\nassert_eq!(hms(3, 5, 7).checked_sub_signed(TimeDelta::try_days(1_000_000_000).unwrap()), None);\n```\n\nLeap seconds are handled,\nbut the subtraction assumes that it is the only leap second happened.\n\n```\n# use chrono::{TimeDelta, NaiveDate};\n# let from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n# let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli_opt(h, m, s, milli).unwrap();\nlet leap = hmsm(3, 5, 59, 1_300);\nassert_eq!(leap.checked_sub_signed(TimeDelta::zero()),\n           Some(hmsm(3, 5, 59, 1_300)));\nassert_eq!(leap.checked_sub_signed(TimeDelta::try_milliseconds(200).unwrap()),\n           Some(hmsm(3, 5, 59, 1_100)));\nassert_eq!(leap.checked_sub_signed(TimeDelta::try_milliseconds(500).unwrap()),\n           Some(hmsm(3, 5, 59, 800)));\nassert_eq!(leap.checked_sub_signed(TimeDelta::try_seconds(60).unwrap()),\n           Some(hmsm(3, 5, 0, 300)));\nassert_eq!(leap.checked_sub_signed(TimeDelta::try_days(1).unwrap()),\n           Some(from_ymd(2016, 7, 7).and_hms_milli_opt(3, 6, 0, 300).unwrap()));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:2174:2886":{"id":"b:2:2898-0:2174:2886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2466:463":{"id":"0:2466:463","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[283,22],"end":[283,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1494":{"id":"0:1494","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1262,0],"end":[1269,1]},"visibility":"default","docs":"Add `FixedOffset` to `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the addition ignores integral number of days.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1495:198","0:1496:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3215:788":{"id":"0:3215:788","crate_id":0,"name":"fmt","span":{"filename":"src/month.rs","begin":[227,22],"end":[227,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:2625:5703":{"id":"b:2:2898-0:2625:5703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41968:9655-0:2368:3074":{"id":"a:2:41968:9655-0:2368:3074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2150":{"id":"0:2150","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[575,16],"end":[575,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2151:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:501:295":{"id":"0:501:295","crate_id":0,"name":"add","span":{"filename":"src/datetime/mod.rs","begin":[1572,4],"end":[1574,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3167:2561","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2352:788":{"id":"0:2352:788","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[102,31],"end":[102,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1934:2957":{"id":"0:1934:2957","crate_id":0,"name":"and_hms_micro_opt","span":{"filename":"src/offset/mod.rs","begin":[208,4],"end":[221,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nPropagates any error. Ambiguous result would be discarded.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["micro",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32106:236-0:2368:3074":{"id":"a:2:32106:236-0:2368:3074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2063:8860":{"id":"0:2063:8860","crate_id":0,"name":"from_u32","span":{"filename":"src/month.rs","begin":[207,4],"end":[223,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["n",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3246":{"id":"0:3246","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[671,28],"end":[671,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3247:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2625-0:2578:3859":{"id":"b:2:2625-0:2578:3859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2458:3805":{"id":"0:2458:3805","crate_id":0,"name":"precision","span":{"filename":"src/format/mod.rs","begin":[286,4],"end":[286,34]},"visibility":"public","docs":"See `OffsetPrecision`.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:428:3030":{"id":"0:428:3030","crate_id":0,"name":"month0","span":{"filename":"src/datetime/mod.rs","begin":[1185,4],"end":[1187,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1513":{"id":"0:1513","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1507,0],"end":[1533,1]},"visibility":"default","docs":"The `Debug` output of the naive time `t` is the same as\n[`t.format(\"%H:%M:%S%.f\")`](crate::format::strftime).\n\nThe string printed can be readily parsed via the `parse` method on `str`.\n\nIt should be noted that, for leap seconds not on the minute boundary,\nit may print a representation not distinguishable from non-leap seconds.\nThis doesn't matter in practice, since such leap seconds never happened.\n(By the time of the first leap second on 1972-06-30,\nevery time zone offset around the world has standardized to the 5-minute alignment.)\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nassert_eq!(format!(\"{:?}\", NaiveTime::from_hms_opt(23, 56, 4).unwrap()), \"23:56:04\");\nassert_eq!(\n    format!(\"{:?}\", NaiveTime::from_hms_milli_opt(23, 56, 4, 12).unwrap()),\n    \"23:56:04.012\"\n);\nassert_eq!(\n    format!(\"{:?}\", NaiveTime::from_hms_micro_opt(23, 56, 4, 1234).unwrap()),\n    \"23:56:04.001234\"\n);\nassert_eq!(\n    format!(\"{:?}\", NaiveTime::from_hms_nano_opt(23, 56, 4, 123456).unwrap()),\n    \"23:56:04.000123456\"\n);\n```\n\nLeap seconds may also be used.\n\n```\n# use chrono::NaiveTime;\nassert_eq!(\n    format!(\"{:?}\", NaiveTime::from_hms_milli_opt(6, 59, 59, 1_500).unwrap()),\n    \"06:59:60.500\"\n);\n```","links":{"crate::format::strftime":"0:864:3658"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1514:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2625-0:2247:2887":{"id":"b:2:2625-0:2247:2887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:745:3958":{"id":"0:745:3958","crate_id":0,"name":"week_from_mon","span":{"filename":"src/format/parsed.rs","begin":[1043,4],"end":[1045,5]},"visibility":"public","docs":"Get the `week_from_mon` field if set.\n\nSee also [`set_week_from_mon()`](Parsed::set_week_from_mon).","links":{"Parsed::set_week_from_mon":"0:704:4334"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2917:1788":{"id":"2:2917:1788","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2677:470":{"id":"0:2677:470","crate_id":0,"name":"cmp","span":{"filename":"src/naive/datetime/mod.rs","begin":[69,42],"end":[69,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1600:4477":{"id":"0:1600:4477","crate_id":0,"name":"offset_from_utc_datetime","span":{"filename":"src/offset/fixed.rs","begin":[144,4],"end":[146,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1908:4477":{"id":"0:1908:4477","crate_id":0,"name":"offset_from_utc_datetime","span":{"filename":"src/offset/utc.rs","begin":[131,4],"end":[133,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["_utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:2145:2331":{"id":"b:2:2625-0:2145:2331","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41969:9654-0:2183:2341":{"id":"a:2:41969:9654-0:2183:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:555:818":{"id":"0:555:818","crate_id":0,"name":"from","span":{"filename":"src/datetime/mod.rs","begin":[1839,4],"end":[1854,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"resolved_path":{"name":"SystemTime","id":"1:9445:3069","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1485:198":{"id":"0:1485:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/time/mod.rs","begin":[1210,4],"end":[1210,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:739:4281":{"id":"0:739:4281","crate_id":0,"name":"year_mod_100","span":{"filename":"src/format/parsed.rs","begin":[989,4],"end":[991,5]},"visibility":"public","docs":"Get the `year_mod_100` field if set.\n\nSee also [`set_year_mod_100()`](Parsed::set_year_mod_100).","links":{"Parsed::set_year_mod_100":"0:697:4308"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:9655-0:3228:2375":{"id":"a:2:41968:9655-0:3228:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2625-0:2280:3666":{"id":"b:2:2625-0:2280:3666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1296":{"id":"0:1296","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1628,0],"end":[1635,1]},"visibility":"default","docs":"Add `TimeDelta` to `NaiveDateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_add_signed`] to get an `Option` instead.\n\n# Example\n\n```\nuse chrono::{NaiveDate, TimeDelta};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nlet d = from_ymd(2016, 7, 8);\nlet hms = |h, m, s| d.and_hms_opt(h, m, s).unwrap();\nassert_eq!(hms(3, 5, 7) + TimeDelta::zero(), hms(3, 5, 7));\nassert_eq!(hms(3, 5, 7) + TimeDelta::try_seconds(1).unwrap(), hms(3, 5, 8));\nassert_eq!(hms(3, 5, 7) + TimeDelta::try_seconds(-1).unwrap(), hms(3, 5, 6));\nassert_eq!(hms(3, 5, 7) + TimeDelta::try_seconds(3600 + 60).unwrap(), hms(4, 6, 7));\nassert_eq!(\n    hms(3, 5, 7) + TimeDelta::try_seconds(86_400).unwrap(),\n    from_ymd(2016, 7, 9).and_hms_opt(3, 5, 7).unwrap()\n);\nassert_eq!(\n    hms(3, 5, 7) + TimeDelta::try_days(365).unwrap(),\n    from_ymd(2017, 7, 8).and_hms_opt(3, 5, 7).unwrap()\n);\n\nlet hmsm = |h, m, s, milli| d.and_hms_milli_opt(h, m, s, milli).unwrap();\nassert_eq!(hmsm(3, 5, 7, 980) + TimeDelta::try_milliseconds(450).unwrap(), hmsm(3, 5, 8, 430));\n```\n\nLeap seconds are handled,\nbut the addition assumes that it is the only leap second happened.\n\n```\n# use chrono::{TimeDelta, NaiveDate};\n# let from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n# let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli_opt(h, m, s, milli).unwrap();\nlet leap = hmsm(3, 5, 59, 1_300);\nassert_eq!(leap + TimeDelta::zero(), hmsm(3, 5, 59, 1_300));\nassert_eq!(leap + TimeDelta::try_milliseconds(-500).unwrap(), hmsm(3, 5, 59, 800));\nassert_eq!(leap + TimeDelta::try_milliseconds(500).unwrap(), hmsm(3, 5, 59, 1_800));\nassert_eq!(leap + TimeDelta::try_milliseconds(800).unwrap(), hmsm(3, 6, 0, 100));\nassert_eq!(leap + TimeDelta::try_seconds(10).unwrap(), hmsm(3, 6, 9, 300));\nassert_eq!(leap + TimeDelta::try_seconds(-10).unwrap(), hmsm(3, 5, 50, 300));\nassert_eq!(leap + TimeDelta::try_days(1).unwrap(),\n           from_ymd(2016, 7, 9).and_hms_milli_opt(3, 5, 59, 300).unwrap());\n```\n\n[leap second handling]: crate::NaiveTime#leap-second-handling","links":{"crate::NaiveTime#leap-second-handling":"0:2723:2350","`NaiveDateTime::checked_add_signed`":"0:1234:2993"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1297:198","0:1298:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2180":{"id":"0:2180","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[33,9],"end":[33,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["0:2182:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2562:2361":{"id":"0:2562:2361","crate_id":0,"name":"ParseError","span":{"filename":"src/format/mod.rs","begin":[387,0],"end":[387,38]},"visibility":"public","docs":"An error from the `parse` function.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:944","a:2:32106:236-0:2562:2361","a:2:3121:246-0:2562:2361","a:2:3156:9919-0:2562:2361","a:2:32165:9507-0:2562:2361","a:2:41968:9655-0:2562:2361","a:2:41969:9654-0:2562:2361","b:2:2913-0:2562:2361","b:2:2898-0:2562:2361","b:2:2625-0:2562:2361","b:2:2902-0:2562:2361","b:2:2628-0:2562:2361","b:2:3737-0:2562:2361","b:2:2908-0:2562:2361","b:5:736-0:2562:2361","b:5:5863-0:2562:2361","0:948","0:2567","0:2569","0:950","0:2575","0:2570","0:2572","0:2574","0:2565"]}}},"b:2:2628-0:3237:2427":{"id":"b:2:2628-0:3237:2427","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41968:9655-0:2145:2331":{"id":"a:2:41968:9655-0:2145:2331","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1256:3070":{"id":"0:1256:3070","crate_id":0,"name":"UNIX_EPOCH","span":{"filename":"src/naive/datetime/mod.rs","begin":[950,4],"end":[951,81]},"visibility":"public","docs":"The Unix Epoch, 1970-01-01 00:00:00.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"2:13174:34937":{"id":"2:13174:34937","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10938:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32106:236-0:2562:2361":{"id":"a:2:32106:236-0:2562:2361","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2156":{"id":"0:2156","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[575,40],"end":[575,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2482:3825":{"id":"0:2482:3825","crate_id":0,"name":"OptionalMinutes","span":{"filename":"src/format/mod.rs","begin":[309,4],"end":[309,19]},"visibility":"default","docs":"Format offset from UTC as hours, and optionally with minutes.\nAny seconds will be rounded to the nearest minute.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:3121:246-0:2422:3788":{"id":"a:2:3121:246-0:2422:3788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2532:3843":{"id":"0:2532:3843","crate_id":0,"name":"OwnedSpace","span":{"filename":"src/format/mod.rs","begin":[339,4],"end":[339,24]},"visibility":"default","docs":"Same as `Space` but with the string owned by the item.","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2534:1956"]},"discriminant":null}}},"a:2:32106:236-0:3145:2373":{"id":"a:2:32106:236-0:3145:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:3737-0:2578:3859":{"id":"b:2:3737-0:2578:3859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5613:42356":{"id":"5:5613:42356","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:3655","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:3655","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2916:136":{"id":"2:2916:136","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32030:12523","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1068:3962":{"id":"0:1068:3962","crate_id":0,"name":"week","span":{"filename":"src/naive/date/mod.rs","begin":[1328,4],"end":[1330,5]},"visibility":"public","docs":"Returns the [`NaiveWeek`] that the date belongs to, starting with the [`Weekday`]\nspecified.","links":{"`NaiveWeek`":"0:2741:2366","`Weekday`":"0:3110:2345"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["start",{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveWeek","id":"0:2741:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2427:463":{"id":"0:2427:463","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[258,16],"end":[258,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:9507-0:2123:2332":{"id":"a:2:32165:9507-0:2123:2332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2018:2758":{"id":"0:2018:2758","crate_id":0,"name":"description","span":{"filename":"src/round.rs","begin":[304,4],"end":[306,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1133:6367":{"id":"0:1133:6367","crate_id":0,"name":"next_back","span":{"filename":"src/naive/date/mod.rs","begin":[2153,4],"end":[2158,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8338:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1553-0:2706:2365":{"id":"0:1553-0:2706:2365","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[570,16],"end":[570,23]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"naive::IsoWeek","name":"IsoWeek","id":"0:2706:2365","glob":false}}},"0:714:4371":{"id":"0:714:4371","crate_id":0,"name":"set_nanosecond","span":{"filename":"src/format/parsed.rs","begin":[513,4],"end":[518,5]},"visibility":"public","docs":"Set the [`nanosecond`](Parsed::nanosecond) field to the given value.\n\nThis is the number of nanoseconds since the whole second.\n\n# Errors\n\nReturns `OUT_OF_RANGE` if `value` is not in the range 0-999,999,999.\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::nanosecond":"0:754:3196"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2768":{"id":"0:2768","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[22,9],"end":[22,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:3737-0:3145:2373":{"id":"b:2:3737-0:3145:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:116-0:2099:2344":{"id":"0:116-0:2099:2344","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[540,37],"end":[540,45]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Timelike","name":"Timelike","id":"0:2099:2344","glob":false}}},"0:2039":{"id":"0:2039","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[200,0],"end":[228,1]},"visibility":"default","docs":"Any weekday can be represented as an integer from 0 to 6, which equals to\n[`Weekday::num_days_from_monday`](#method.num_days_from_monday) in this implementation.\nDo not heavily depend on this though; use explicit methods whenever possible.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["from_f64","from_f32","from_u8","from_i16","from_usize","from_u16","from_i32","from_isize","from_u32","from_u128","from_i128","from_i8"],"trait":{"name":"FromPrimitive","id":"21:164:8772","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2040:8773","0:2041:8774"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1215:3304":{"id":"0:1215:3304","crate_id":0,"name":"from_timestamp","span":{"filename":"src/naive/datetime/mod.rs","begin":[124,4],"end":[128,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` corresponding to a UTC date and time,\nfrom the number of non-leap seconds\nsince the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\nand the number of nanoseconds since the last whole non-leap second.\n\nFor a non-naive version of this function see [`TimeZone::timestamp`].\n\nThe nanosecond part can exceed 1,000,000,000 in order to represent a\n[leap second](NaiveTime#leap-second-handling), but only when `secs % 60 == 59`.\n(The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)\n\n# Panics\n\nPanics if the number of seconds would be out of range for a `NaiveDateTime` (more than\nca. 262,000 years away from common era), and panics on an invalid nanosecond (2 seconds or\nmore).","links":{"NaiveTime#leap-second-handling":"0:2723:2350","`TimeZone::timestamp`":"0:1951:3138"},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"use `DateTime::from_timestamp` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `DateTime::from_timestamp` instead"},"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"i64"}],["nsecs",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2132":{"id":"0:2132","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,31],"end":[52,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2133:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:711:4360":{"id":"0:711:4360","crate_id":0,"name":"set_hour","span":{"filename":"src/format/parsed.rs","begin":[461,4],"end":[469,5]},"visibility":"public","docs":"Set the [`hour_div_12`](Parsed::hour_div_12) and [`hour_mod_12`](Parsed::hour_mod_12)\nfields to the given value for a 24-hour clock.\n\n# Errors\n\nMay return `OUT_OF_RANGE` if `value` is not in the range 0-23.\nCurrently only checks the value is not out of range for a `u32`.\n\nReturns `IMPOSSIBLE` one of the fields was already set to a different value.","links":{"Parsed::hour_div_12":"0:750:4285","Parsed::hour_mod_12":"0:751:4286"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:2356:3731":{"id":"a:2:3121:246-0:2356:3731","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2044:788":{"id":"0:2044:788","crate_id":0,"name":"fmt","span":{"filename":"src/weekday.rs","begin":[240,4],"end":[242,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:3208:2376":{"id":"b:2:2625-0:3208:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2913-0:3062:2367":{"id":"b:2:2913-0:3062:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3156:9919-0:2165:2340":{"id":"a:2:3156:9919-0:2165:2340","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:736-0:3062:2367":{"id":"b:5:736-0:3062:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41968:9655-0:2741:2366":{"id":"a:2:41968:9655-0:2741:2366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2741:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2043":{"id":"0:2043","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[239,0],"end":[243,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2044:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41969:9654-0:3042:2336":{"id":"a:2:41969:9654-0:3042:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1129:1177":{"id":"0:1129:1177","crate_id":0,"name":"next","span":{"filename":"src/naive/date/mod.rs","begin":[2136,4],"end":[2142,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:8338:177","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:526:198":{"id":"0:526:198","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1698,4],"end":[1698,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:5:736-0:2183:2341":{"id":"b:5:736-0:2183:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3737-0:2608:2348":{"id":"b:2:3737-0:2608:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1298:295":{"id":"0:1298:295","crate_id":0,"name":"add","span":{"filename":"src/naive/datetime/mod.rs","begin":[1632,4],"end":[1634,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2516":{"id":"0:2516","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[317,40],"end":[317,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3078":{"id":"0:3078","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[58,16],"end":[58,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::cmp::PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3080:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1548-0:2746:2364":{"id":"0:1548-0:2746:2364","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[569,16],"end":[569,20]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"naive::Days","name":"Days","id":"0:2746:2364","glob":false}}},"0:2647:788":{"id":"0:2647:788","crate_id":0,"name":"fmt","span":{"filename":"src/naive/date/mod.rs","begin":[2164,9],"end":[2164,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:968-0:2183:2341":{"id":"0:968-0:2183:2341","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[565,42],"end":[565,55]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"format::SecondsFormat","name":"SecondsFormat","id":"0:2183:2341","glob":false}}},"a:2:32106:236-0:3208:2376":{"id":"a:2:32106:236-0:3208:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:740:10057":{"id":"5:740:10057","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1504:1721":{"id":"0:1504:1721","crate_id":0,"name":"sub","span":{"filename":"src/naive/time/mod.rs","begin":[1359,4],"end":[1366,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2442":{"id":"0:0:2442","crate_id":0,"name":"chrono","span":{"filename":"src/lib.rs","begin":[1,0],"end":[739,1]},"visibility":"public","docs":"# Chrono: Date and Time for Rust\n\nChrono aims to provide all functionality needed to do correct operations on dates and times in\nthe [proleptic Gregorian calendar]:\n\n* The [`DateTime`] type is timezone-aware by default, with separate timezone-naive types.\n* Operations that may produce an invalid or ambiguous date and time return `Option` or\n  [`MappedLocalTime`].\n* Configurable parsing and formatting with a `strftime` inspired date and time formatting\n  syntax.\n* The [`Local`] timezone works with the current timezone of the OS.\n* Types and operations are implemented to be reasonably efficient.\n\nTimezone data is not shipped with chrono by default to limit binary sizes. Use the companion\ncrate [Chrono-TZ] or [`tzfile`] for full timezone support.\n\n[proleptic Gregorian calendar]: https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar\n[Chrono-TZ]: https://crates.io/crates/chrono-tz\n[`tzfile`]: https://crates.io/crates/tzfile\n\n### Features\n\nChrono supports various runtime environments and operating systems, and has several features\nthat may be enabled or disabled.\n\nDefault features:\n\n- `alloc`: Enable features that depend on allocation (primarily string formatting).\n- `std`: Enables functionality that depends on the standard library. This is a superset of\n  `alloc` and adds interoperation with standard library types and traits.\n- `clock`: Enables reading the local timezone (`Local`). This is a superset of `now`.\n- `now`: Enables reading the system time (`now`).\n- `wasmbind`: Interface with the JS Date API for the `wasm32` target.\n\nOptional features:\n\n- `serde`: Enable serialization/deserialization via [serde].\n- `rkyv`: Deprecated, use the `rkyv-*` features.\n- `rkyv-16`: Enable serialization/deserialization via [rkyv],\n   using 16-bit integers for integral `*size` types.\n- `rkyv-32`: Enable serialization/deserialization via [rkyv],\n   using 32-bit integers for integral `*size` types.\n- `rkyv-64`: Enable serialization/deserialization via [rkyv],\n   using 64-bit integers for integral `*size` types.\n- `rkyv-validation`: Enable rkyv validation support using `bytecheck`.\n- `rustc-serialize`: Enable serialization/deserialization via rustc-serialize (deprecated).\n- `arbitrary`: Construct arbitrary instances of a type with the Arbitrary crate.\n- `unstable-locales`: Enable localization. This adds various methods with a `_localized` suffix.\n  The implementation and API may change or even be removed in a patch release. Feedback welcome.\n- `oldtime`: This feature no longer has any effect; it used to offer compatibility with the\n  `time` 0.1 crate.\n\nNote: The `rkyv{,-16,-32,-64}` features are mutually exclusive.\n\nSee the [cargo docs] for examples of specifying features.\n\n[serde]: https://github.com/serde-rs/serde\n[rkyv]: https://github.com/rkyv/rkyv\n[cargo docs]: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choosing-features\n\n## Overview\n\n### Time delta / Duration\n\nChrono has a [`TimeDelta`] type to represent the magnitude of a time span. This is an \"accurate\"\nduration represented as seconds and nanoseconds, and does not represent \"nominal\" components\nsuch as days or months.\n\nThe [`TimeDelta`] type was previously named `Duration` (and is still available as a type alias\nwith that name). A notable difference with the similar [`core::time::Duration`] is that it is a\nsigned value instead of unsigned.\n\nChrono currently only supports a small number of operations with [`core::time::Duration`].\nYou can convert between both types with the [`TimeDelta::from_std`] and [`TimeDelta::to_std`]\nmethods.\n\n### Date and Time\n\nChrono provides a [`DateTime`] type to represent a date and a time in a timezone.\n\nFor more abstract moment-in-time tracking such as internal timekeeping that is unconcerned with\ntimezones, consider [`std::time::SystemTime`], which tracks your system clock, or\n[`std::time::Instant`], which is an opaque but monotonically-increasing representation of a\nmoment in time.\n\n[`DateTime`] is timezone-aware and must be constructed from a [`TimeZone`] object, which defines\nhow the local date is converted to and back from the UTC date.\nThere are three well-known [`TimeZone`] implementations:\n\n* [`Utc`] specifies the UTC time zone. It is most efficient.\n\n* [`Local`] specifies the system local time zone.\n\n* [`FixedOffset`] specifies an arbitrary, fixed time zone such as UTC+09:00 or UTC-10:30.\n  This often results from the parsed textual date and time. Since it stores the most information\n  and does not depend on the system environment, you would want to normalize other `TimeZone`s\n  into this type.\n\n[`DateTime`]s with different [`TimeZone`] types are distinct and do not mix, but can be\nconverted to each other using the [`DateTime::with_timezone`] method.\n\nYou can get the current date and time in the UTC time zone ([`Utc::now()`]) or in the local time\nzone ([`Local::now()`]).\n\n```\n# #[cfg(feature = \"now\")] {\nuse chrono::prelude::*;\n\nlet utc: DateTime<Utc> = Utc::now(); // e.g. `2014-11-28T12:45:59.324310806Z`\n# let _ = utc;\n# }\n```\n\n```\n# #[cfg(feature = \"clock\")] {\nuse chrono::prelude::*;\n\nlet local: DateTime<Local> = Local::now(); // e.g. `2014-11-28T21:45:59.324310806+09:00`\n# let _ = local;\n# }\n```\n\nAlternatively, you can create your own date and time. This is a bit verbose due to Rust's lack\nof function and method overloading, but in turn we get a rich combination of initialization\nmethods.\n\n```\nuse chrono::offset::MappedLocalTime;\nuse chrono::prelude::*;\n\n# fn doctest() -> Option<()> {\n\nlet dt = Utc.with_ymd_and_hms(2014, 7, 8, 9, 10, 11).unwrap(); // `2014-07-08T09:10:11Z`\nassert_eq!(\n    dt,\n    NaiveDate::from_ymd_opt(2014, 7, 8)?\n        .and_hms_opt(9, 10, 11)?\n        .and_utc()\n);\n\n// July 8 is 188th day of the year 2014 (`o` for \"ordinal\")\nassert_eq!(dt, NaiveDate::from_yo_opt(2014, 189)?.and_hms_opt(9, 10, 11)?.and_utc());\n// July 8 is Tuesday in ISO week 28 of the year 2014.\nassert_eq!(\n    dt,\n    NaiveDate::from_isoywd_opt(2014, 28, Weekday::Tue)?.and_hms_opt(9, 10, 11)?.and_utc()\n);\n\nlet dt = NaiveDate::from_ymd_opt(2014, 7, 8)?\n    .and_hms_milli_opt(9, 10, 11, 12)?\n    .and_utc(); // `2014-07-08T09:10:11.012Z`\nassert_eq!(\n    dt,\n    NaiveDate::from_ymd_opt(2014, 7, 8)?\n        .and_hms_micro_opt(9, 10, 11, 12_000)?\n        .and_utc()\n);\nassert_eq!(\n    dt,\n    NaiveDate::from_ymd_opt(2014, 7, 8)?\n        .and_hms_nano_opt(9, 10, 11, 12_000_000)?\n        .and_utc()\n);\n\n// dynamic verification\nassert_eq!(\n    Utc.with_ymd_and_hms(2014, 7, 8, 21, 15, 33),\n    MappedLocalTime::Single(\n        NaiveDate::from_ymd_opt(2014, 7, 8)?.and_hms_opt(21, 15, 33)?.and_utc()\n    )\n);\nassert_eq!(Utc.with_ymd_and_hms(2014, 7, 8, 80, 15, 33), MappedLocalTime::None);\nassert_eq!(Utc.with_ymd_and_hms(2014, 7, 38, 21, 15, 33), MappedLocalTime::None);\n\n# #[cfg(feature = \"clock\")] {\n// other time zone objects can be used to construct a local datetime.\n// obviously, `local_dt` is normally different from `dt`, but `fixed_dt` should be identical.\nlet local_dt = Local\n    .from_local_datetime(\n        &NaiveDate::from_ymd_opt(2014, 7, 8).unwrap().and_hms_milli_opt(9, 10, 11, 12).unwrap(),\n    )\n    .unwrap();\nlet fixed_dt = FixedOffset::east_opt(9 * 3600)\n    .unwrap()\n    .from_local_datetime(\n        &NaiveDate::from_ymd_opt(2014, 7, 8)\n            .unwrap()\n            .and_hms_milli_opt(18, 10, 11, 12)\n            .unwrap(),\n    )\n    .unwrap();\nassert_eq!(dt, fixed_dt);\n# let _ = local_dt;\n# }\n# Some(())\n# }\n# doctest().unwrap();\n```\n\nVarious properties are available to the date and time, and can be altered individually. Most of\nthem are defined in the traits [`Datelike`] and [`Timelike`] which you should `use` before.\nAddition and subtraction is also supported.\nThe following illustrates most supported operations to the date and time:\n\n```rust\nuse chrono::prelude::*;\nuse chrono::TimeDelta;\n\n// assume this returned `2014-11-28T21:45:59.324310806+09:00`:\nlet dt = FixedOffset::east_opt(9 * 3600)\n    .unwrap()\n    .from_local_datetime(\n        &NaiveDate::from_ymd_opt(2014, 11, 28)\n            .unwrap()\n            .and_hms_nano_opt(21, 45, 59, 324310806)\n            .unwrap(),\n    )\n    .unwrap();\n\n// property accessors\nassert_eq!((dt.year(), dt.month(), dt.day()), (2014, 11, 28));\nassert_eq!((dt.month0(), dt.day0()), (10, 27)); // for unfortunate souls\nassert_eq!((dt.hour(), dt.minute(), dt.second()), (21, 45, 59));\nassert_eq!(dt.weekday(), Weekday::Fri);\nassert_eq!(dt.weekday().number_from_monday(), 5); // Mon=1, ..., Sun=7\nassert_eq!(dt.ordinal(), 332); // the day of year\nassert_eq!(dt.num_days_from_ce(), 735565); // the number of days from and including Jan 1, 1\n\n// time zone accessor and manipulation\nassert_eq!(dt.offset().fix().local_minus_utc(), 9 * 3600);\nassert_eq!(dt.timezone(), FixedOffset::east_opt(9 * 3600).unwrap());\nassert_eq!(\n    dt.with_timezone(&Utc),\n    NaiveDate::from_ymd_opt(2014, 11, 28)\n        .unwrap()\n        .and_hms_nano_opt(12, 45, 59, 324310806)\n        .unwrap()\n        .and_utc()\n);\n\n// a sample of property manipulations (validates dynamically)\nassert_eq!(dt.with_day(29).unwrap().weekday(), Weekday::Sat); // 2014-11-29 is Saturday\nassert_eq!(dt.with_day(32), None);\nassert_eq!(dt.with_year(-300).unwrap().num_days_from_ce(), -109606); // November 29, 301 BCE\n\n// arithmetic operations\nlet dt1 = Utc.with_ymd_and_hms(2014, 11, 14, 8, 9, 10).unwrap();\nlet dt2 = Utc.with_ymd_and_hms(2014, 11, 14, 10, 9, 8).unwrap();\nassert_eq!(dt1.signed_duration_since(dt2), TimeDelta::try_seconds(-2 * 3600 + 2).unwrap());\nassert_eq!(dt2.signed_duration_since(dt1), TimeDelta::try_seconds(2 * 3600 - 2).unwrap());\nassert_eq!(\n    Utc.with_ymd_and_hms(1970, 1, 1, 0, 0, 0).unwrap()\n        + TimeDelta::try_seconds(1_000_000_000).unwrap(),\n    Utc.with_ymd_and_hms(2001, 9, 9, 1, 46, 40).unwrap()\n);\nassert_eq!(\n    Utc.with_ymd_and_hms(1970, 1, 1, 0, 0, 0).unwrap()\n        - TimeDelta::try_seconds(1_000_000_000).unwrap(),\n    Utc.with_ymd_and_hms(1938, 4, 24, 22, 13, 20).unwrap()\n);\n```\n\n### Formatting and Parsing\n\nFormatting is done via the [`format`](DateTime::format()) method, which format is equivalent to\nthe familiar `strftime` format.\n\nSee [`format::strftime`](format::strftime#specifiers) documentation for full syntax and list of\nspecifiers.\n\nThe default `to_string` method and `{:?}` specifier also give a reasonable representation.\nChrono also provides [`to_rfc2822`](DateTime::to_rfc2822) and\n[`to_rfc3339`](DateTime::to_rfc3339) methods for well-known formats.\n\nChrono now also provides date formatting in almost any language without the help of an\nadditional C library. This functionality is under the feature `unstable-locales`:\n\n```toml\nchrono = { version = \"0.4\", features = [\"unstable-locales\"] }\n```\n\nThe `unstable-locales` feature requires and implies at least the `alloc` feature.\n\n```rust\n# #[allow(unused_imports)]\nuse chrono::prelude::*;\n\n# #[cfg(all(feature = \"unstable-locales\", feature = \"alloc\"))]\n# fn test() {\nlet dt = Utc.with_ymd_and_hms(2014, 11, 28, 12, 0, 9).unwrap();\nassert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2014-11-28 12:00:09\");\nassert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), \"Fri Nov 28 12:00:09 2014\");\nassert_eq!(\n    dt.format_localized(\"%A %e %B %Y, %T\", Locale::fr_BE).to_string(),\n    \"vendredi 28 novembre 2014, 12:00:09\"\n);\n\nassert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), dt.format(\"%c\").to_string());\nassert_eq!(dt.to_string(), \"2014-11-28 12:00:09 UTC\");\nassert_eq!(dt.to_rfc2822(), \"Fri, 28 Nov 2014 12:00:09 +0000\");\nassert_eq!(dt.to_rfc3339(), \"2014-11-28T12:00:09+00:00\");\nassert_eq!(format!(\"{:?}\", dt), \"2014-11-28T12:00:09Z\");\n\n// Note that milli/nanoseconds are only printed if they are non-zero\nlet dt_nano = NaiveDate::from_ymd_opt(2014, 11, 28)\n    .unwrap()\n    .and_hms_nano_opt(12, 0, 9, 1)\n    .unwrap()\n    .and_utc();\nassert_eq!(format!(\"{:?}\", dt_nano), \"2014-11-28T12:00:09.000000001Z\");\n# }\n# #[cfg(not(all(feature = \"unstable-locales\", feature = \"alloc\")))]\n# fn test() {}\n# if cfg!(all(feature = \"unstable-locales\", feature = \"alloc\")) {\n#    test();\n# }\n```\n\nParsing can be done with two methods:\n\n1. The standard [`FromStr`](std::str::FromStr) trait (and [`parse`](str::parse) method on a\n   string) can be used for parsing `DateTime<FixedOffset>`, `DateTime<Utc>` and\n   `DateTime<Local>` values. This parses what the `{:?}` ([`std::fmt::Debug`] format specifier\n   prints, and requires the offset to be present.\n\n2. [`DateTime::parse_from_str`] parses a date and time with offsets and returns\n   `DateTime<FixedOffset>`. This should be used when the offset is a part of input and the\n   caller cannot guess that. It *cannot* be used when the offset can be missing.\n   [`DateTime::parse_from_rfc2822`] and [`DateTime::parse_from_rfc3339`] are similar but for\n   well-known formats.\n\nMore detailed control over the parsing process is available via [`format`](mod@format) module.\n\n```rust\nuse chrono::prelude::*;\n\nlet dt = Utc.with_ymd_and_hms(2014, 11, 28, 12, 0, 9).unwrap();\nlet fixed_dt = dt.with_timezone(&FixedOffset::east_opt(9 * 3600).unwrap());\n\n// method 1\nassert_eq!(\"2014-11-28T12:00:09Z\".parse::<DateTime<Utc>>(), Ok(dt.clone()));\nassert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<Utc>>(), Ok(dt.clone()));\nassert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<FixedOffset>>(), Ok(fixed_dt.clone()));\n\n// method 2\nassert_eq!(\n    DateTime::parse_from_str(\"2014-11-28 21:00:09 +09:00\", \"%Y-%m-%d %H:%M:%S %z\"),\n    Ok(fixed_dt.clone())\n);\nassert_eq!(\n    DateTime::parse_from_rfc2822(\"Fri, 28 Nov 2014 21:00:09 +0900\"),\n    Ok(fixed_dt.clone())\n);\nassert_eq!(DateTime::parse_from_rfc3339(\"2014-11-28T21:00:09+09:00\"), Ok(fixed_dt.clone()));\n\n// oops, the year is missing!\nassert!(DateTime::parse_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T %Y\").is_err());\n// oops, the format string does not include the year at all!\nassert!(DateTime::parse_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T\").is_err());\n// oops, the weekday is incorrect!\nassert!(DateTime::parse_from_str(\"Sat Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\").is_err());\n```\n\nAgain: See [`format::strftime`](format::strftime#specifiers) documentation for full syntax and\nlist of specifiers.\n\n### Conversion from and to EPOCH timestamps\n\nUse [`DateTime::from_timestamp(seconds, nanoseconds)`](DateTime::from_timestamp)\nto construct a [`DateTime<Utc>`] from a UNIX timestamp\n(seconds, nanoseconds that passed since January 1st 1970).\n\nUse [`DateTime.timestamp`](DateTime::timestamp) to get the timestamp (in seconds)\nfrom a [`DateTime`]. Additionally, you can use\n[`DateTime.timestamp_subsec_nanos`](DateTime::timestamp_subsec_nanos)\nto get the number of additional number of nanoseconds.\n\n```\n# #[cfg(feature = \"alloc\")] {\n// We need the trait in scope to use Utc::timestamp().\nuse chrono::{DateTime, Utc};\n\n// Construct a datetime from epoch:\nlet dt: DateTime<Utc> = DateTime::from_timestamp(1_500_000_000, 0).unwrap();\nassert_eq!(dt.to_rfc2822(), \"Fri, 14 Jul 2017 02:40:00 +0000\");\n\n// Get epoch value from a datetime:\nlet dt = DateTime::parse_from_rfc2822(\"Fri, 14 Jul 2017 02:40:00 +0000\").unwrap();\nassert_eq!(dt.timestamp(), 1_500_000_000);\n# }\n```\n\n### Naive date and time\n\nChrono provides naive counterparts to `Date`, (non-existent) `Time` and `DateTime` as\n[`NaiveDate`], [`NaiveTime`] and [`NaiveDateTime`] respectively.\n\nThey have almost equivalent interfaces as their timezone-aware twins, but are not associated to\ntime zones obviously and can be quite low-level. They are mostly useful for building blocks for\nhigher-level types.\n\nTimezone-aware `DateTime` and `Date` types have two methods returning naive versions:\n[`naive_local`](DateTime::naive_local) returns a view to the naive local time,\nand [`naive_utc`](DateTime::naive_utc) returns a view to the naive UTC time.\n\n## Limitations\n\n* Only the proleptic Gregorian calendar (i.e. extended to support older dates) is supported.\n* Date types are limited to about +/- 262,000 years from the common epoch.\n* Time types are limited to nanosecond accuracy.\n* Leap seconds can be represented, but Chrono does not fully support them.\n  See [Leap Second Handling](NaiveTime#leap-second-handling).\n\n## Rust version requirements\n\nThe Minimum Supported Rust Version (MSRV) is currently **Rust 1.61.0**.\n\nThe MSRV is explicitly tested in CI. It may be bumped in minor releases, but this is not done\nlightly.\n\n## Relation between chrono and time 0.1\n\nRust first had a `time` module added to `std` in its 0.7 release. It later moved to\n`libextra`, and then to a `libtime` library shipped alongside the standard library. In 2014\nwork on chrono started in order to provide a full-featured date and time library in Rust.\nSome improvements from chrono made it into the standard library; notably, `chrono::Duration`\nwas included as `std::time::Duration` ([rust#15934]) in 2014.\n\nIn preparation of Rust 1.0 at the end of 2014 `libtime` was moved out of the Rust distro and\ninto the `time` crate to eventually be redesigned ([rust#18832], [rust#18858]), like the\n`num` and `rand` crates. Of course chrono kept its dependency on this `time` crate. `time`\nstarted re-exporting `std::time::Duration` during this period. Later, the standard library was\nchanged to have a more limited unsigned `Duration` type ([rust#24920], [RFC 1040]), while the\n`time` crate kept the full functionality with `time::Duration`. `time::Duration` had been a\npart of chrono's public API.\n\nBy 2016 `time` 0.1 lived under the `rust-lang-deprecated` organisation and was not actively\nmaintained ([time#136]). chrono absorbed the platform functionality and `Duration` type of the\n`time` crate in [chrono#478] (the work started in [chrono#286]). In order to preserve\ncompatibility with downstream crates depending on `time` and `chrono` sharing a `Duration`\ntype, chrono kept depending on time 0.1. chrono offered the option to opt out of the `time`\ndependency by disabling the `oldtime` feature (swapping it out for an effectively similar\nchrono type). In 2019, @jhpratt took over maintenance on the `time` crate and released what\namounts to a new crate as `time` 0.2.\n\n[rust#15934]: https://github.com/rust-lang/rust/pull/15934\n[rust#18832]: https://github.com/rust-lang/rust/pull/18832#issuecomment-62448221\n[rust#18858]: https://github.com/rust-lang/rust/pull/18858\n[rust#24920]: https://github.com/rust-lang/rust/pull/24920\n[RFC 1040]: https://rust-lang.github.io/rfcs/1040-duration-reform.html\n[time#136]: https://github.com/time-rs/time/issues/136\n[chrono#286]: https://github.com/chronotope/chrono/pull/286\n[chrono#478]: https://github.com/chronotope/chrono/pull/478\n\n## Security advisories\n\nIn November of 2020 [CVE-2020-26235] and [RUSTSEC-2020-0071] were opened against the `time` crate.\n@quininer had found that calls to `localtime_r` may be unsound ([chrono#499]). Eventually, almost\na year later, this was also made into a security advisory against chrono as [RUSTSEC-2020-0159],\nwhich had platform code similar to `time`.\n\nOn Unix-like systems a process is given a timezone id or description via the `TZ` environment\nvariable. We need this timezone data to calculate the current local time from a value that is\nin UTC, such as the time from the system clock. `time` 0.1 and chrono used the POSIX function\n`localtime_r` to do the conversion to local time, which reads the `TZ` variable.\n\nRust assumes the environment to be writable and uses locks to access it from multiple threads.\nSome other programming languages and libraries use similar locking strategies, but these are\ntypically not shared across languages. More importantly, POSIX declares modifying the\nenvironment in a multi-threaded process as unsafe, and `getenv` in libc can't be changed to\ntake a lock because it returns a pointer to the data (see [rust#27970] for more discussion).\n\nSince version 4.20 chrono no longer uses `localtime_r`, instead using Rust code to query the\ntimezone (from the `TZ` variable or via `iana-time-zone` as a fallback) and work with data\nfrom the system timezone database directly. The code for this was forked from the [tz-rs crate]\nby @x-hgg-x. As such, chrono now respects the Rust lock when reading the `TZ` environment\nvariable. In general, code should avoid modifying the environment.\n\n[CVE-2020-26235]: https://nvd.nist.gov/vuln/detail/CVE-2020-26235\n[RUSTSEC-2020-0071]: https://rustsec.org/advisories/RUSTSEC-2020-0071\n[chrono#499]: https://github.com/chronotope/chrono/pull/499\n[RUSTSEC-2020-0159]: https://rustsec.org/advisories/RUSTSEC-2020-0159.html\n[rust#27970]: https://github.com/rust-lang/rust/issues/27970\n[chrono#677]: https://github.com/chronotope/chrono/pull/677\n[tz-rs crate]: https://crates.io/crates/tz-rs\n\n## Removing time 0.1\n\nBecause time 0.1 has been unmaintained for years, however, the security advisory mentioned\nabove has not been addressed. While chrono maintainers were careful not to break backwards\ncompatibility with the `time::Duration` type, there has been a long stream of issues from\nusers inquiring about the time 0.1 dependency with the vulnerability. We investigated the\npotential breakage of removing the time 0.1 dependency in [chrono#1095] using a crater-like\nexperiment and determined that the potential for breaking (public) dependencies is very low.\nWe reached out to those few crates that did still depend on compatibility with time 0.1.\n\nAs such, for chrono 0.4.30 we have decided to swap out the time 0.1 `Duration` implementation\nfor a local one that will offer a strict superset of the existing API going forward. This\nwill prevent most downstream users from being affected by the security vulnerability in time\n0.1 while minimizing the ecosystem impact of semver-incompatible version churn.\n\n[chrono#1095]: https://github.com/chronotope/chrono/pull/1095","links":{"`core::time::Duration`":"2:44524:130","`FixedOffset`":"0:2766:2346","`Timelike`":"0:2099:2344","`std::time::Instant`":"1:9427:161","`NaiveTime`":"0:2723:2350","`Local`":"0:3042:2336","format::strftime#specifiers":"0:864:3658","DateTime::timestamp":"0:343:3138","`TimeDelta`":"0:2123:2332","DateTime::naive_utc":"0:369:3002","`TimeDelta::from_std`":"0:64:2716","std::str::FromStr":"2:12808:3566","`TimeDelta::to_std`":"0:65:2722","`TimeZone`":"0:1941:2352","`Local::now()`":"0:1874:1971","DateTime::format()":"0:422:801","DateTime::naive_local":"0:370:2927","`DateTime`":"0:2165:2340","`DateTime::parse_from_rfc2822`":"0:409:3387","`NaiveDateTime`":"0:2663:2349","`DateTime::with_timezone`":"0:353:2987","DateTime::to_rfc3339":"0:374:3255","`Utc::now()`":"0:1901:1971","DateTime::timestamp_subsec_nanos":"0:350:3189","`MappedLocalTime`":"0:1916:2368","`DateTime::parse_from_str`":"0:412:3421","`std::time::SystemTime`":"1:9445:3069","`DateTime<Utc>`":"0:2165:2340","`Utc`":"0:3049:2347","DateTime::to_rfc2822":"0:373:3251","str::parse":"2:13278:3071","`NaiveDate`":"0:2608:2348","`DateTime::parse_from_rfc3339`":"0:411:3403","`std::fmt::Debug`":"2:10279:119","mod@format":"0:566:801","DateTime::from_timestamp":"0:380:3304","NaiveTime#leap-second-handling":"0:2723:2350","`Datelike`":"0:2080:2342"},"attrs":["#![doc(html_root_url = \"https://docs.rs/chrono/latest/\",\ntest(attr(deny(warnings))))]","#![deny(missing_docs)]","#![deny(missing_debug_implementations)]","#![warn(unreachable_pub)]","#![deny(clippy::tests_outside_test_module)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:106:1322","0:566:801","0:969:2363","0:1555:1215","0:1978:2369","0:102-0:2145:2331","0:103-0:2123:2332","0:104:130","0:273-0:2158:2335","0:275-0:156:2354","0:276-0:155:2355","0:562-0:2165:2340","0:564-0:334:2358","0:565-0:333:2359","0:966-0:2562:2361","0:967-0:946:2362","0:968-0:2183:2341","0:1548-0:2746:2364","0:1549-0:2608:2348","0:1550-0:2663:2349","0:1551-0:2723:2350","0:1553-0:2706:2365","0:1554-0:2741:2366","0:1970-0:3042:2336","0:1972-0:1916:2368","0:1974-0:2766:2346","0:1975-0:1939:2351","0:1976-0:1941:2352","0:1977-0:3049:2347","0:2020-0:1998:2370","0:2021-0:3093:2371","0:2022-0:1990:2339","0:2047-0:3145:2373","0:2048-0:3110:2345","0:2072-0:3228:2375","0:2074-0:3154:2343","0:2075-0:3208:2376","0:2111-0:2080:2342","0:2112-0:2099:2344","0:3237:2427"],"is_stripped":false}}},"b:2:2628-0:2123:2332":{"id":"b:2:2628-0:2123:2332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3156:9919-0:2123:2332":{"id":"a:2:3156:9919-0:2123:2332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32165:9507-0:3110:2345":{"id":"a:2:32165:9507-0:3110:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2151:463":{"id":"0:2151:463","crate_id":0,"name":"clone","span":{"filename":"src/time_delta.rs","begin":[575,16],"end":[575,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1999:135":{"id":"0:1999:135","crate_id":0,"name":"Err","span":{"filename":"src/round.rs","begin":[109,4],"end":[109,32]},"visibility":"default","docs":"Error that can occur in rounding or truncating","links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"std::error::Error","id":"2:2961:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}}},"0:353:2987":{"id":"0:353:2987","crate_id":0,"name":"with_timezone","span":{"filename":"src/datetime/mod.rs","begin":[415,4],"end":[417,5]},"visibility":"public","docs":"Changes the associated time zone.\nThe returned `DateTime` references the same instant of time from the perspective of the\nprovided time zone.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["tz",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Tz2"}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Tz2","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:539:1721":{"id":"0:539:1721","crate_id":0,"name":"sub","span":{"filename":"src/datetime/mod.rs","begin":[1746,4],"end":[1748,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3172:2566","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2433":{"id":"0:2433","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[258,38],"end":[258,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2434:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2162":{"id":"0:2162","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[56,9],"end":[56,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1941:2352","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:2164:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2557:788":{"id":"0:2557:788","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[328,31],"end":[328,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13243:41652":{"id":"2:13243:41652","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12848:9229","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::rmatch_indices":"2:13246:41653"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43906:9268","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:9654-0:2501:3809":{"id":"a:2:41969:9654-0:2501:3809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1088:3032":{"id":"0:1088:3032","crate_id":0,"name":"day0","span":{"filename":"src/naive/date/mod.rs","begin":[1545,4],"end":[1547,5]},"visibility":"default","docs":"Returns the day of month starting from 0.\n\nThe return value ranges from 0 to 30. (The last day of month differs by months.)\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().day0(), 7);\nassert_eq!(NaiveDate::from_ymd_opt(-308, 3, 14).unwrap().day0(), 13);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2138":{"id":"0:2138","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,58],"end":[52,61]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2711:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2139:470"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2130:60":{"id":"0:2130:60","crate_id":0,"name":"default","span":{"filename":"src/time_delta.rs","begin":[52,22],"end":[52,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2570":{"id":"0:2570","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[386,23],"end":[386,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2571:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2625-0:3237:2427":{"id":"b:2:2625-0:3237:2427","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:190:2915":{"id":"0:190:2915","crate_id":0,"name":"MIN_UTC","span":{"filename":"src/date.rs","begin":[316,4],"end":[316,78]},"visibility":"public","docs":"The minimum possible `Date`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"default":"_"}}},"0:742:4284":{"id":"0:742:4284","crate_id":0,"name":"isoyear_mod_100","span":{"filename":"src/format/parsed.rs","begin":[1019,4],"end":[1021,5]},"visibility":"public","docs":"Get the `isoyear_mod_100` field that is part of an [ISO 8601 week date] if set.\n\nSee also [`set_isoyear_mod_100()`](Parsed::set_isoyear_mod_100).\n\n[ISO 8601 week date]: crate::NaiveDate#week-date","links":{"crate::NaiveDate#week-date":"0:2608:2348","Parsed::set_isoyear_mod_100":"0:701:4322"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:515:1722":{"id":"0:515:1722","crate_id":0,"name":"sub_assign","span":{"filename":"src/datetime/mod.rs","begin":[1653,4],"end":[1657,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2371:3743":{"id":"0:2371:3743","crate_id":0,"name":"LongMonthName","span":{"filename":"src/format/mod.rs","begin":[183,4],"end":[183,17]},"visibility":"default","docs":"Full month names.\n\nPrints a full name in the title case, reads either a short or full name in any case.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2413":{"id":"0:2413","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[174,16],"end":[174,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2414:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1308:295":{"id":"0:1308:295","crate_id":0,"name":"add","span":{"filename":"src/naive/datetime/mod.rs","begin":[1702,4],"end":[1704,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:1322":{"id":"0:106:1322","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[531,0],"end":[531,15]},"visibility":"public","docs":"A convenience module appropriate for glob imports (`use chrono::prelude::*;`).","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:107-0:2158:2335","0:108-0:3042:2336","0:109-0:1990:2339","0:111-0:2165:2340","0:112-0:2183:2341","0:114-0:2080:2342","0:115-0:3154:2343","0:116-0:2099:2344","0:117-0:3110:2345","0:119-0:2766:2346","0:120-0:3049:2347","0:122-0:2608:2348","0:123-0:2663:2349","0:124-0:2723:2350","0:126-0:1939:2351","0:127-0:1941:2352"],"is_stripped":false}}},"0:889":{"id":"0:889","crate_id":0,"name":null,"span":{"filename":"src/format/strftime.rs","begin":[388,0],"end":[411,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["partial_cmp","find","position","try_for_each","rev","try_collect","copied","map_while","intersperse_with","min_by","size_hint","cmp","le","is_sorted","lt","unzip","take","reduce","collect_into","all","flatten","cloned","for_each","min_by_key","next_chunk","gt","collect","chain","any","ge","array_chunks","is_sorted_by","enumerate","try_reduce","partition","map_windows","sum","filter_map","max_by","advance_by","flat_map","last","is_sorted_by_key","product","find_map","partition_in_place","fuse","eq","peekable","max_by_key","nth","filter","map","__iterator_get_unchecked","cmp_by","try_find","min","count","is_partitioned","inspect","fold","skip_while","zip","step_by","cycle","skip","partial_cmp_by","max","rposition","ne","try_fold","by_ref","take_while","intersperse","scan","eq_by"],"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:891:172","0:892:1177"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2069:788":{"id":"0:2069:788","crate_id":0,"name":"fmt","span":{"filename":"src/month.rs","begin":[254,4],"end":[256,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:502":{"id":"0:502","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1589,0],"end":[1596,1]},"visibility":"default","docs":"Subtract `TimeDelta` from `DateTime`.\n\nThis is the same as the addition with a negated `TimeDelta`.\n\nAs a part of Chrono's [leap second handling] the subtraction assumes that **there is no leap\nsecond ever**, except when the `DateTime` itself represents a leap second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`DateTime<Tz>::checked_sub_signed`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_sub_signed`":"0:359:2995"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:504:198","0:505:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:469":{"id":"0:469","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1422,0],"end":[1447,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"Tz2","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ge","gt","lt","le"],"trait":{"name":"PartialOrd","id":"2:2717:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz2"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:472:1280"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:615:788":{"id":"0:615:788","crate_id":0,"name":"fmt","span":{"filename":"src/format/formatting.rs","begin":[119,4],"end":[137,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2558":{"id":"0:2558","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[328,38],"end":[328,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2560:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[488,0],"end":[498,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Mul","id":"2:32637:2564","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:81:198","0:82:1128"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32165:9507-0:2209:3075":{"id":"a:2:32165:9507-0:2209:3075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2913-0:2562:2361":{"id":"b:2:2913-0:2562:2361","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1234:2993":{"id":"0:1234:2993","crate_id":0,"name":"checked_add_signed","span":{"filename":"src/naive/datetime/mod.rs","begin":[531,4],"end":[536,5]},"visibility":"public","docs":"Adds given `TimeDelta` to the current date and time.\n\nAs a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),\nthe addition assumes that **there is no leap second ever**,\nexcept when the `NaiveDateTime` itself represents a leap second\nin which case the assumption becomes that **there is exactly a single leap second ever**.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\nuse chrono::{NaiveDate, TimeDelta};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nlet d = from_ymd(2016, 7, 8);\nlet hms = |h, m, s| d.and_hms_opt(h, m, s).unwrap();\nassert_eq!(hms(3, 5, 7).checked_add_signed(TimeDelta::zero()), Some(hms(3, 5, 7)));\nassert_eq!(\n    hms(3, 5, 7).checked_add_signed(TimeDelta::try_seconds(1).unwrap()),\n    Some(hms(3, 5, 8))\n);\nassert_eq!(\n    hms(3, 5, 7).checked_add_signed(TimeDelta::try_seconds(-1).unwrap()),\n    Some(hms(3, 5, 6))\n);\nassert_eq!(\n    hms(3, 5, 7).checked_add_signed(TimeDelta::try_seconds(3600 + 60).unwrap()),\n    Some(hms(4, 6, 7))\n);\nassert_eq!(\n    hms(3, 5, 7).checked_add_signed(TimeDelta::try_seconds(86_400).unwrap()),\n    Some(from_ymd(2016, 7, 9).and_hms_opt(3, 5, 7).unwrap())\n);\n\nlet hmsm = |h, m, s, milli| d.and_hms_milli_opt(h, m, s, milli).unwrap();\nassert_eq!(\n    hmsm(3, 5, 7, 980).checked_add_signed(TimeDelta::try_milliseconds(450).unwrap()),\n    Some(hmsm(3, 5, 8, 430))\n);\n```\n\nOverflow returns `None`.\n\n```\n# use chrono::{TimeDelta, NaiveDate};\n# let hms = |h, m, s| NaiveDate::from_ymd_opt(2016, 7, 8).unwrap().and_hms_opt(h, m, s).unwrap();\nassert_eq!(hms(3, 5, 7).checked_add_signed(TimeDelta::try_days(1_000_000_000).unwrap()), None);\n```\n\nLeap seconds are handled,\nbut the addition assumes that it is the only leap second happened.\n\n```\n# use chrono::{TimeDelta, NaiveDate};\n# let from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n# let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli_opt(h, m, s, milli).unwrap();\nlet leap = hmsm(3, 5, 59, 1_300);\nassert_eq!(leap.checked_add_signed(TimeDelta::zero()),\n           Some(hmsm(3, 5, 59, 1_300)));\nassert_eq!(leap.checked_add_signed(TimeDelta::try_milliseconds(-500).unwrap()),\n           Some(hmsm(3, 5, 59, 800)));\nassert_eq!(leap.checked_add_signed(TimeDelta::try_milliseconds(500).unwrap()),\n           Some(hmsm(3, 5, 59, 1_800)));\nassert_eq!(leap.checked_add_signed(TimeDelta::try_milliseconds(800).unwrap()),\n           Some(hmsm(3, 6, 0, 100)));\nassert_eq!(leap.checked_add_signed(TimeDelta::try_seconds(10).unwrap()),\n           Some(hmsm(3, 6, 9, 300)));\nassert_eq!(leap.checked_add_signed(TimeDelta::try_seconds(-10).unwrap()),\n           Some(hmsm(3, 5, 50, 300)));\nassert_eq!(leap.checked_add_signed(TimeDelta::try_days(1).unwrap()),\n           Some(from_ymd(2016, 7, 9).and_hms_milli_opt(3, 5, 59, 300).unwrap()));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2207:858":{"id":"0:2207:858","crate_id":0,"name":"hash","span":{"filename":"src/format/formatting.rs","begin":[507,44],"end":[507,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3243:858":{"id":"0:3243:858","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[671,22],"end":[671,26]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1590:7815":{"id":"0:1590:7815","crate_id":0,"name":"utc_minus_local","span":{"filename":"src/offset/fixed.rs","begin":[113,4],"end":[115,5]},"visibility":"public","docs":"Returns the number of seconds to add to convert from the local time to UTC.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:801":{"id":"0:202:801","crate_id":0,"name":"format","span":{"filename":"src/date.rs","begin":[351,4],"end":[353,5]},"visibility":"public","docs":"Formats the date with the specified format string.\nSee the [`crate::format::strftime`] module\non the supported escape sequences.","links":{"`crate::format::strftime`":"0:864:3658"},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:337:3102":{"id":"0:337:3102","crate_id":0,"name":"from_naive_utc_and_offset","span":{"filename":"src/datetime/mod.rs","begin":[97,4],"end":[102,5]},"visibility":"public","docs":"Makes a new `DateTime` from its components: a `NaiveDateTime` in UTC and an `Offset`.\n\nThis is a low-level method, intended for use cases such as deserializing a `DateTime` or\npassing it through FFI.\n\nFor regular use you will probably want to use a method such as\n[`TimeZone::from_local_datetime`] or [`NaiveDateTime::and_local_timezone`] instead.\n\n# Example\n\n```\n# #[cfg(feature = \"clock\")] {\nuse chrono::{DateTime, Local};\n\nlet dt = Local::now();\n// Get components\nlet naive_utc = dt.naive_utc();\nlet offset = dt.offset().clone();\n// Serialize, pass through FFI... and recreate the `DateTime`:\nlet dt_new = DateTime::<Local>::from_naive_utc_and_offset(naive_utc, offset);\nassert_eq!(dt, dt_new);\n# }\n```","links":{"`NaiveDateTime::and_local_timezone`":"0:1251:3219","`TimeZone::from_local_datetime`":"0:1963:2929"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["datetime",{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["offset",{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1941:2352","args":null}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:696:4300":{"id":"0:696:4300","crate_id":0,"name":"set_year_div_100","span":{"filename":"src/format/parsed.rs","begin":[220,4],"end":[225,5]},"visibility":"public","docs":"Set the [`year_div_100`](Parsed::year_div_100) field to the given value.\n\n# Errors\n\nReturns `OUT_OF_RANGE` if `value` is negative or if it is greater than `i32::MAX`.\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::year_div_100":"0:738:4280"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2349":{"id":"0:2349","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[102,27],"end":[102,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3044":{"id":"0:3044","crate_id":0,"name":null,"span":{"filename":"src/offset/local/mod.rs","begin":[113,9],"end":[113,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32106:236-0:2300:3683":{"id":"a:2:32106:236-0:2300:3683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2898-0:2578:3859":{"id":"b:2:2898-0:2578:3859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5628:42358":{"id":"5:5628:42358","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:736-0:2644:5704":{"id":"b:5:736-0:2644:5704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2537:1956":{"id":"0:2537:1956","crate_id":0,"name":"0","span":{"filename":"src/format/mod.rs","begin":[342,12],"end":[342,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:2761:686":{"id":"0:2761:686","crate_id":0,"name":"eq","span":{"filename":"src/naive/mod.rs","begin":[134,39],"end":[134,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2619:1280":{"id":"0:2619:1280","crate_id":0,"name":"partial_cmp","span":{"filename":"src/naive/date/mod.rs","begin":[94,30],"end":[94,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:9655-0:2209:3075":{"id":"a:2:41968:9655-0:2209:3075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1064:801":{"id":"0:1064:801","crate_id":0,"name":"format","span":{"filename":"src/naive/date/mod.rs","begin":[1228,4],"end":[1230,5]},"visibility":"public","docs":"Formats the date with the specified format string.\nSee the [`format::strftime` module](crate::format::strftime)\non the supported escape sequences.\n\nThis returns a `DelayedFormat`,\nwhich gets converted to a string only when actual formatting happens.\nYou may use the `to_string` method to get a `String`,\nor just feed it into `print!` and other formatting macros.\n(In this way it avoids the redundant memory allocation.)\n\nA wrong format string does *not* issue an error immediately.\nRather, converting or formatting the `DelayedFormat` fails.\nYou are recommended to immediately use `DelayedFormat` for this reason.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet d = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap();\nassert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");\nassert_eq!(d.format(\"%A, %-d %B, %C%y\").to_string(), \"Saturday, 5 September, 2015\");\n```\n\nThe resulting `DelayedFormat` can be formatted directly via the `Display` trait.\n\n```\n# use chrono::NaiveDate;\n# let d = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap();\nassert_eq!(format!(\"{}\", d.format(\"%Y-%m-%d\")), \"2015-09-05\");\nassert_eq!(format!(\"{}\", d.format(\"%A, %-d %B, %C%y\")), \"Saturday, 5 September, 2015\");\n```","links":{"crate::format::strftime":"0:864:3658"},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1330:1721":{"id":"0:1330:1721","crate_id":0,"name":"sub","span":{"filename":"src/naive/datetime/mod.rs","begin":[1989,4],"end":[1991,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:9654-0:2247:2887":{"id":"a:2:41969:9654-0:2247:2887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1086:3030":{"id":"0:1086:3030","crate_id":0,"name":"month0","span":{"filename":"src/naive/date/mod.rs","begin":[1488,4],"end":[1490,5]},"visibility":"default","docs":"Returns the month number starting from 0.\n\nThe return value ranges from 0 to 11.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().month0(), 8);\nassert_eq!(NaiveDate::from_ymd_opt(-308, 3, 14).unwrap().month0(), 2);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2403:3389":{"id":"0:2403:3389","crate_id":0,"name":"RFC2822","span":{"filename":"src/format/mod.rs","begin":[246,4],"end":[246,11]},"visibility":"default","docs":"RFC 2822 date and time syntax. Commonly used for email and MIME date and time.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:3156:9919-0:2625:5703":{"id":"a:2:3156:9919-0:2625:5703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:504:198":{"id":"0:504:198","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1590,4],"end":[1590,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:2419":{"id":"0:2419","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[174,38],"end":[174,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2420:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1253:3308":{"id":"0:1253:3308","crate_id":0,"name":"and_utc","span":{"filename":"src/naive/datetime/mod.rs","begin":[939,4],"end":[941,5]},"visibility":"public","docs":"Converts the `NaiveDateTime` into the timezone-aware `DateTime<Utc>`.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Utc};\nlet dt =\n    NaiveDate::from_ymd_opt(2023, 1, 30).unwrap().and_hms_opt(19, 32, 33).unwrap().and_utc();\nassert_eq!(dt.timezone(), Utc);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:370:2927":{"id":"0:370:2927","crate_id":0,"name":"naive_local","span":{"filename":"src/datetime/mod.rs","begin":[579,4],"end":[583,5]},"visibility":"public","docs":"Returns a view to the naive local datetime.\n\n# Panics\n\n[`DateTime`] internally stores the date and time in UTC with a [`NaiveDateTime`]. This\nmethod will panic if the offset from UTC would push the local datetime outside of the\nrepresentable range of a [`NaiveDateTime`].","links":{"`NaiveDateTime`":"0:2663:2349","`DateTime`":"0:2165:2340"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1087:3031":{"id":"0:1087:3031","crate_id":0,"name":"day","span":{"filename":"src/naive/date/mod.rs","begin":[1528,4],"end":[1530,5]},"visibility":"default","docs":"Returns the day of month starting from 1.\n\nThe return value ranges from 1 to 31. (The last day of month differs by months.)\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().day(), 8);\nassert_eq!(NaiveDate::from_ymd_opt(-308, 3, 14).unwrap().day(), 14);\n```\n\nCombined with [`NaiveDate::pred_opt`](#method.pred_opt),\none can determine the number of days in a particular month.\n(Note that this panics when `year` is out of range.)\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nfn ndays_in_month(year: i32, month: u32) -> u32 {\n    // the first day of the next month...\n    let (y, m) = if month == 12 { (year + 1, 1) } else { (year, month + 1) };\n    let d = NaiveDate::from_ymd_opt(y, m, 1).unwrap();\n\n    // ...is preceded by the last day of the original month\n    d.pred_opt().unwrap().day()\n}\n\nassert_eq!(ndays_in_month(2015, 8), 31);\nassert_eq!(ndays_in_month(2015, 9), 30);\nassert_eq!(ndays_in_month(2015, 12), 31);\nassert_eq!(ndays_in_month(2016, 2), 29);\nassert_eq!(ndays_in_month(2017, 2), 28);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1336:1721":{"id":"0:1336:1721","crate_id":0,"name":"sub","span":{"filename":"src/naive/datetime/mod.rs","begin":[2017,4],"end":[2019,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3172:2566","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252:295":{"id":"0:252:295","crate_id":0,"name":"add","span":{"filename":"src/date.rs","begin":[500,4],"end":[502,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3103:463":{"id":"0:3103:463","crate_id":0,"name":"clone","span":{"filename":"src/round.rs","begin":[247,16],"end":[247,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13163:41644":{"id":"2:13163:41644","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13161:41643"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2143:858":{"id":"0:2143:858","crate_id":0,"name":"hash","span":{"filename":"src/time_delta.rs","begin":[52,70],"end":[52,74]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3207:470":{"id":"0:3207:470","crate_id":0,"name":"cmp","span":{"filename":"src/month.rs","begin":[31,62],"end":[31,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:2209:3075":{"id":"b:2:2898-0:2209:3075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1231:3155":{"id":"0:1231:3155","crate_id":0,"name":"timestamp_subsec_millis","span":{"filename":"src/naive/datetime/mod.rs","begin":[430,4],"end":[432,5]},"visibility":"public","docs":"Returns the number of milliseconds since the last whole non-leap second.\n\nThe return value ranges from 0 to 999,\nor for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999.","links":{},"attrs":["#[deprecated(since = \"0.4.35\", note =\n\"use `.and_utc().timestamp_subsec_millis()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.35","note":"use `.and_utc().timestamp_subsec_millis()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1535-0:2663:2349":{"id":"0:1535-0:2663:2349","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[25,25],"end":[25,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"self::datetime::NaiveDateTime","name":"NaiveDateTime","id":"0:2663:2349","glob":false}}},"0:1585:7800":{"id":"0:1585:7800","crate_id":0,"name":"east","span":{"filename":"src/offset/fixed.rs","begin":[41,4],"end":[43,5]},"visibility":"public","docs":"Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.\n\nPanics on the out-of-bound `secs`.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `east_opt()` instead\")]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `east_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13189:39901":{"id":"2:13189:39901","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13188:39905"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44039:9274","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1958:2984":{"id":"0:1958:2984","crate_id":0,"name":"from_offset","span":{"filename":"src/offset/mod.rs","begin":[546,4],"end":[546,50]},"visibility":"default","docs":"Reconstructs the time zone from the offset.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["offset",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:1941:2352","args":null}}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:3156:9919-0:2723:2350":{"id":"a:2:3156:9919-0:2723:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:892:1177":{"id":"0:892:1177","crate_id":0,"name":"next","span":{"filename":"src/format/strftime.rs","begin":[391,4],"end":[410,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2411:463":{"id":"0:2411:463","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[174,9],"end":[174,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2090:3035":{"id":"0:2090:3035","crate_id":0,"name":"iso_week","span":{"filename":"src/traits.rs","begin":[81,4],"end":[81,34]},"visibility":"default","docs":"Returns the ISO week.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:41968:9655-0:2625:5703":{"id":"a:2:41968:9655-0:2625:5703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2149:788":{"id":"0:2149:788","crate_id":0,"name":"fmt","span":{"filename":"src/time_delta.rs","begin":[575,9],"end":[575,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1512:1721":{"id":"0:1512:1721","crate_id":0,"name":"sub","span":{"filename":"src/naive/time/mod.rs","begin":[1462,4],"end":[1464,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1122":{"id":"0:1122","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2112,0],"end":[2119,1]},"visibility":"default","docs":"Subtracts another `NaiveDate` from the current date.\nReturns a `TimeDelta` of integral numbers.\n\nThis does not overflow or underflow at all,\nas all possible output fits in the range of `TimeDelta`.\n\nThe implementation is a wrapper around\n[`NaiveDate::signed_duration_since`](#method.signed_duration_since).\n\n# Example\n\n```\nuse chrono::{NaiveDate, TimeDelta};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\nassert_eq!(from_ymd(2014, 1, 1) - from_ymd(2014, 1, 1), TimeDelta::zero());\nassert_eq!(from_ymd(2014, 1, 1) - from_ymd(2013, 12, 31), TimeDelta::try_days(1).unwrap());\nassert_eq!(from_ymd(2014, 1, 1) - from_ymd(2014, 1, 2), TimeDelta::try_days(-1).unwrap());\nassert_eq!(from_ymd(2014, 1, 1) - from_ymd(2013, 9, 23), TimeDelta::try_days(100).unwrap());\nassert_eq!(from_ymd(2014, 1, 1) - from_ymd(2013, 1, 1), TimeDelta::try_days(365).unwrap());\nassert_eq!(\n    from_ymd(2014, 1, 1) - from_ymd(2010, 1, 1),\n    TimeDelta::try_days(365 * 4 + 1).unwrap()\n);\nassert_eq!(\n    from_ymd(2014, 1, 1) - from_ymd(1614, 1, 1),\n    TimeDelta::try_days(365 * 400 + 97).unwrap()\n);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1123:198","0:1124:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1549-0:2608:2348":{"id":"0:1549-0:2608:2348","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[569,22],"end":[569,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"naive::NaiveDate","name":"NaiveDate","id":"0:2608:2348","glob":false}}},"0:1124:1721":{"id":"0:1124:1721","crate_id":0,"name":"sub","span":{"filename":"src/naive/date/mod.rs","begin":[2116,4],"end":[2118,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:604":{"id":"0:604","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[51,0],"end":[115,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"super::Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["0:608:1163","0:609:3018"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2301:3686":{"id":"0:2301:3686","crate_id":0,"name":"Year","span":{"filename":"src/format/mod.rs","begin":[106,4],"end":[106,8]},"visibility":"default","docs":"Full Gregorian year (FW=4, PW=∞).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign (+/-).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:54:2692":{"id":"0:54:2692","crate_id":0,"name":"num_milliseconds","span":{"filename":"src/time_delta.rs","begin":[322,4],"end":[329,5]},"visibility":"public","docs":"Returns the total number of whole milliseconds in the `TimeDelta`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:9507-0:2368:3074":{"id":"a:2:32165:9507-0:2368:3074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1038:3230":{"id":"0:1038:3230","crate_id":0,"name":"checked_sub_days","span":{"filename":"src/naive/date/mod.rs","begin":[660,4],"end":[665,5]},"visibility":"public","docs":"Subtract a duration in [`Days`] from the date\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\n# use chrono::{NaiveDate, Days};\nassert_eq!(\n    NaiveDate::from_ymd_opt(2022, 2, 20).unwrap().checked_sub_days(Days::new(6)),\n    Some(NaiveDate::from_ymd_opt(2022, 2, 14).unwrap())\n);\nassert_eq!(\n    NaiveDate::from_ymd_opt(2022, 2, 20).unwrap().checked_sub_days(Days::new(1000000000000)),\n    None\n);\n```","links":{"`Days`":"0:2746:2364"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3123:4557":{"id":"0:3123:4557","crate_id":0,"name":"Fri","span":{"filename":"src/weekday.rs","begin":[52,4],"end":[52,11]},"visibility":"default","docs":"Friday.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"4","value":"4"}}}},"0:506":{"id":"0:506","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1608,0],"end":[1617,1]},"visibility":"default","docs":"Subtract `std::time::Duration` from `DateTime`.\n\nAs a part of Chrono's [leap second handling] the subtraction assumes that **there is no leap\nsecond ever**, except when the `DateTime` itself represents a leap second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`DateTime<Tz>::checked_sub_signed`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_sub_signed`":"0:359:2995"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:508:198","0:509:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2576:858":{"id":"0:2576:858","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[386,44],"end":[386,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3245":{"id":"0:3245","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[671,28],"end":[671,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1902":{"id":"0:1902","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[114,0],"end":[134,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["datetime_from_str","timestamp_millis","from_local_datetime","yo","from_utc_date","from_local_date","timestamp","from_utc_datetime","timestamp_opt","timestamp_micros","ymd","isoywd_opt","timestamp_millis_opt","with_ymd_and_hms","isoywd","yo_opt","ymd_opt","timestamp_nanos"],"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1903:2351","0:1904:2984","0:1905:7744","0:1906:7746","0:1907:7752","0:1908:4477"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:84:198":{"id":"0:84:198","crate_id":0,"name":"Output","span":{"filename":"src/time_delta.rs","begin":[501,4],"end":[501,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:99":{"id":"0:99","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[585,0],"end":[590,1]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","source","provide","description","type_id"],"trait":{"name":"Error","id":"2:2961:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:100:2758"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2605":{"id":"0:2605","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[398,44],"end":[398,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2606:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:736-0:2746:2364":{"id":"b:5:736-0:2746:2364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3156:9919-0:3110:2345":{"id":"a:2:3156:9919-0:3110:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2173:463":{"id":"0:2173:463","crate_id":0,"name":"clone","span":{"filename":"src/datetime/mod.rs","begin":[52,15],"end":[52,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:344:3153":{"id":"0:344:3153","crate_id":0,"name":"timestamp_millis","span":{"filename":"src/datetime/mod.rs","begin":[234,4],"end":[237,5]},"visibility":"public","docs":"Returns the number of non-leap-milliseconds since January 1, 1970 UTC.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Utc};\n\nlet dt = NaiveDate::from_ymd_opt(1970, 1, 1)\n    .unwrap()\n    .and_hms_milli_opt(0, 0, 1, 444)\n    .unwrap()\n    .and_local_timezone(Utc)\n    .unwrap();\nassert_eq!(dt.timestamp_millis(), 1_444);\n\nlet dt = NaiveDate::from_ymd_opt(2001, 9, 9)\n    .unwrap()\n    .and_hms_milli_opt(1, 46, 40, 555)\n    .unwrap()\n    .and_local_timezone(Utc)\n    .unwrap();\nassert_eq!(dt.timestamp_millis(), 1_000_000_000_555);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:9655-0:2183:2341":{"id":"a:2:41968:9655-0:2183:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1023:4415":{"id":"0:1023:4415","crate_id":0,"name":"from_yo_opt","span":{"filename":"src/naive/date/mod.rs","begin":[245,4],"end":[248,5]},"visibility":"public","docs":"Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n(year and day of the year).\n\n# Errors\n\nReturns `None` if:\n- The specified ordinal day does not exist (for example 2023-366).\n- The value for `ordinal` is invalid (for example: `0`, `400`).\n- `year` is out of range for `NaiveDate`.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet from_yo_opt = NaiveDate::from_yo_opt;\n\nassert!(from_yo_opt(2015, 100).is_some());\nassert!(from_yo_opt(2015, 0).is_none());\nassert!(from_yo_opt(2015, 365).is_some());\nassert!(from_yo_opt(2015, 366).is_none());\nassert!(from_yo_opt(-4, 366).is_some()); // 5 BCE is a leap year\nassert!(from_yo_opt(400000, 1).is_none());\nassert!(from_yo_opt(-400000, 1).is_none());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"i32"}],["ordinal",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1874:1971":{"id":"0:1874:1971","crate_id":0,"name":"now","span":{"filename":"src/offset/local/mod.rs","begin":[160,4],"end":[162,5]},"visibility":"public","docs":"Returns a `DateTime<Local>` which corresponds to the current date, time and offset from\nUTC.\n\nSee also the similar [`Utc::now()`] which returns `DateTime<Utc>`, i.e. without the local\noffset.\n\n# Example\n\n```\n# #![allow(unused_variables)]\n# use chrono::{DateTime, FixedOffset, Local};\n// Current local time\nlet now = Local::now();\n\n// Current local date\nlet today = now.date_naive();\n\n// Current local time, converted to `DateTime<FixedOffset>`\nlet now_fixed_offset = Local::now().fixed_offset();\n// or\nlet now_fixed_offset: DateTime<FixedOffset> = Local::now().into();\n\n// Current time in some timezone (let's use +05:00)\n// Note that it is usually more efficient to use `Utc::now` for this use case.\nlet offset = FixedOffset::east_opt(5 * 60 * 60).unwrap();\nlet now_with_offset = Local::now().with_timezone(&offset);\n```","links":{"`Utc::now()`":"0:1901:1971"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13284:34833":{"id":"2:13284:34833","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1586:3060":{"id":"0:1586:3060","crate_id":0,"name":"east_opt","span":{"filename":"src/offset/fixed.rs","begin":[62,4],"end":[68,5]},"visibility":"public","docs":"Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.\n\nReturns `None` on the out-of-bound `secs`.\n\n# Example\n\n```\n# #[cfg(feature = \"alloc\")] {\nuse chrono::{FixedOffset, TimeZone};\nlet hour = 3600;\nlet datetime =\n    FixedOffset::east_opt(5 * hour).unwrap().with_ymd_and_hms(2016, 11, 08, 0, 0, 0).unwrap();\nassert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00+05:00\")\n# }\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:383:3340":{"id":"0:383:3340","crate_id":0,"name":"from_timestamp_nanos","span":{"filename":"src/datetime/mod.rs","begin":[857,4],"end":[861,5]},"visibility":"public","docs":"Creates a new [`DateTime<Utc>`] from the number of non-leap microseconds\nsince January 1, 1970 0:00:00.000 UTC (aka \"UNIX timestamp\").\n\nThis is guaranteed to round-trip with [`timestamp_nanos`](DateTime::timestamp_nanos).\n\nIf you need to create a `DateTime` with a [`TimeZone`] different from [`Utc`], use\n[`TimeZone::timestamp_nanos`] or [`DateTime::with_timezone`].\n\nThe UNIX epoch starts on midnight, January 1, 1970, UTC.\n\nAn `i64` with nanosecond precision can span a range of ~584 years. Because all values can\nbe represented as a `DateTime` this method never fails.\n\n# Example\n\n```\nuse chrono::DateTime;\n\nlet timestamp_nanos: i64 = 1662921288_000_000_000; // Sun, 11 Sep 2022 18:34:48 UTC\nlet dt = DateTime::from_timestamp_nanos(timestamp_nanos);\nassert_eq!(timestamp_nanos, dt.timestamp_nanos_opt().unwrap());\n\n// Negative timestamps (before the UNIX epoch) are supported as well.\nlet timestamp_nanos: i64 = -2208936075_000_000_000; // Mon, 1 Jan 1900 14:38:45 UTC\nlet dt = DateTime::from_timestamp_nanos(timestamp_nanos);\nassert_eq!(timestamp_nanos, dt.timestamp_nanos_opt().unwrap());\n```","links":{"`TimeZone::timestamp_nanos`":"0:1955:3171","`Utc`":"0:3049:2347","`DateTime::with_timezone`":"0:353:2987","`TimeZone`":"0:1941:2352","`DateTime<Utc>`":"0:2165:2340","DateTime::timestamp_nanos":"0:346:3171"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["nanos",{"primitive":"i64"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:743:2374":{"id":"0:743:2374","crate_id":0,"name":"month","span":{"filename":"src/format/parsed.rs","begin":[1027,4],"end":[1029,5]},"visibility":"public","docs":"Get the `month` field if set.\n\nSee also [`set_month()`](Parsed::set_month).","links":{"Parsed::set_month":"0:702:4325"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1114":{"id":"0:1114","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2010,0],"end":[2016,1]},"visibility":"default","docs":"Subtract `Days` from `NaiveDate`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using `NaiveDate::checked_sub_days` to get an `Option` instead.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1115:198","0:1116:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1263:3031":{"id":"0:1263:3031","crate_id":0,"name":"day","span":{"filename":"src/naive/datetime/mod.rs","begin":[1045,4],"end":[1047,5]},"visibility":"default","docs":"Returns the day of month starting from 1.\n\nThe return value ranges from 1 to 31. (The last day of month differs by months.)\n\nSee also the [`NaiveDate::day`](./struct.NaiveDate.html#method.day) method.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, NaiveDateTime};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.day(), 25);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:9919-0:2300:3683":{"id":"a:2:3156:9919-0:2300:3683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[528,0],"end":[535,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:265:198","0:266:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32106:236-0:2578:3859":{"id":"a:2:32106:236-0:2578:3859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:364:3230":{"id":"0:364:3230","crate_id":0,"name":"checked_sub_days","span":{"filename":"src/datetime/mod.rs","begin":[542,4],"end":[550,5]},"visibility":"public","docs":"Subtract a duration in [`Days`] from the date part of the `DateTime`.\n\n# Errors\n\nReturns `None` if:\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.\n- The resulting UTC datetime would be out of range.\n- The resulting local datetime would be out of range (unless `days` is zero).","links":{"`Days`":"0:2746:2364"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:413:3072":{"id":"0:413:3072","crate_id":0,"name":"parse_and_remainder","span":{"filename":"src/datetime/mod.rs","begin":[1089,4],"end":[1096,5]},"visibility":"public","docs":"Parses a string from a user-specified format into a `DateTime<FixedOffset>` value, and a\nslice with the remaining portion of the string.\n\nNote that this method *requires a timezone* in the input string. See\n[`NaiveDateTime::parse_and_remainder`] for a version that does not\nrequire a timezone in `s`. The returned [`DateTime`] value will have a [`FixedOffset`]\nreflecting the parsed timezone.\n\nSee the [`format::strftime` module](./format/strftime/index.html) for supported format\nsequences.\n\nSimilar to [`parse_from_str`](#method.parse_from_str).\n\n# Example\n\n```rust\n# use chrono::{DateTime, FixedOffset, TimeZone};\nlet (datetime, remainder) = DateTime::parse_and_remainder(\n    \"2015-02-18 23:16:09 +0200 trailing text\",\n    \"%Y-%m-%d %H:%M:%S %z\",\n)\n.unwrap();\nassert_eq!(\n    datetime,\n    FixedOffset::east_opt(2 * 3600).unwrap().with_ymd_and_hms(2015, 2, 18, 23, 16, 9).unwrap()\n);\nassert_eq!(remainder, \" trailing text\");\n```","links":{"`NaiveDateTime::parse_and_remainder`":"0:1221:3072","`DateTime`":"0:2165:2340","`FixedOffset`":"0:2766:2346"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1048:2964":{"id":"0:1048:2964","crate_id":0,"name":"and_hms_nano","span":{"filename":"src/naive/date/mod.rs","begin":[881,4],"end":[883,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.\n\nThe nanosecond part is allowed to exceed 1,000,000,000 in order to represent a [leap second](\n./struct.NaiveTime.html#leap-second-handling), but only when `sec == 59`.\n\n# Panics\n\nPanics on invalid hour, minute, second and/or nanosecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `and_hms_nano_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `and_hms_nano_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3182:3926":{"id":"0:3182:3926","crate_id":0,"name":"October","span":{"filename":"src/month.rs","begin":[61,4],"end":[61,15]},"visibility":"default","docs":"October","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"9","value":"9"}}}},"a:2:32165:9507-0:2608:2348":{"id":"a:2:32165:9507-0:2608:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:41968:9655-0:3237:2427":{"id":"a:2:41968:9655-0:3237:2427","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2280:3666":{"id":"0:2280:3666","crate_id":0,"name":"Pad","span":{"filename":"src/format/mod.rs","begin":[79,0],"end":[86,1]},"visibility":"public","docs":"Padding characters for numeric items.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:2281:190","0:2283:3669","0:2285:3671"],"impls":["a:2:32106:236-0:2280:3666","a:2:3121:246-0:2280:3666","a:2:3156:9919-0:2280:3666","a:2:32165:9507-0:2280:3666","a:2:41968:9655-0:2280:3666","a:2:41969:9654-0:2280:3666","b:2:2913-0:2280:3666","b:2:2898-0:2280:3666","b:2:2625-0:2280:3666","b:2:2902-0:2280:3666","b:2:2628-0:2280:3666","b:2:3737-0:2280:3666","b:2:2908-0:2280:3666","b:5:736-0:2280:3666","0:2288","0:2291","0:2287","0:2297","0:2293","0:2295","0:2290"]}}},"0:3056:686":{"id":"0:3056:686","crate_id":0,"name":"eq","span":{"filename":"src/offset/utc.rs","begin":[43,22],"end":[43,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:2457:3803":{"id":"b:2:2628-0:2457:3803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3240:463":{"id":"0:3240:463","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[671,9],"end":[671,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:969:2363":{"id":"0:969:2363","crate_id":0,"name":"naive","span":{"filename":"src/naive/mod.rs","begin":[1,0],"end":[186,1]},"visibility":"public","docs":"Date and time types unconcerned with timezones.\n\nThey are primarily building blocks for other types\n(e.g. [`TimeZone`](../offset/trait.TimeZone.html)),\nbut can be also used for the simpler date and time handling.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1528-0:2608:2348","0:1529-0:2625:5703","0:1530-0:2644:5704","0:1532-0:1015:2354","0:1533-0:1014:2355","0:1535-0:2663:2349","0:1536-0:1212:2358","0:1537-0:1211:2359","0:1538-0:2706:2365","0:1539-0:2723:2350","0:2741:2366","0:2746:2364"],"is_stripped":false}}},"0:2489:788":{"id":"0:2489:788","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[296,9],"end":[296,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:739:3854":{"id":"5:739:3854","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86":{"id":"0:86","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[520,0],"end":[524,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sum","id":"2:8151:2732","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:2733"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:71:198":{"id":"0:71:198","crate_id":0,"name":"Output","span":{"filename":"src/time_delta.rs","begin":[459,4],"end":[459,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2359:463":{"id":"0:2359:463","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[158,9],"end":[158,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1138:6364":{"id":"0:1138:6364","crate_id":0,"name":"size_hint","span":{"filename":"src/naive/date/mod.rs","begin":[2178,4],"end":[2181,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5631:36204":{"id":"5:5631:36204","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13283:34832"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:2644:5704":{"id":"b:2:3737-0:2644:5704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1058:3000":{"id":"0:1058:3000","crate_id":0,"name":"signed_duration_since","span":{"filename":"src/naive/date/mod.rs","begin":[1122,4],"end":[1133,5]},"visibility":"public","docs":"Subtracts another `NaiveDate` from the current date.\nReturns a `TimeDelta` of integral numbers.\n\nThis does not overflow or underflow at all,\nas all possible output fits in the range of `TimeDelta`.\n\n# Example\n\n```\nuse chrono::{NaiveDate, TimeDelta};\n\nlet from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\nlet since = NaiveDate::signed_duration_since;\n\nassert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 1)), TimeDelta::zero());\nassert_eq!(\n    since(from_ymd(2014, 1, 1), from_ymd(2013, 12, 31)),\n    TimeDelta::try_days(1).unwrap()\n);\nassert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 2)), TimeDelta::try_days(-1).unwrap());\nassert_eq!(\n    since(from_ymd(2014, 1, 1), from_ymd(2013, 9, 23)),\n    TimeDelta::try_days(100).unwrap()\n);\nassert_eq!(\n    since(from_ymd(2014, 1, 1), from_ymd(2013, 1, 1)),\n    TimeDelta::try_days(365).unwrap()\n);\nassert_eq!(\n    since(from_ymd(2014, 1, 1), from_ymd(2010, 1, 1)),\n    TimeDelta::try_days(365 * 4 + 1).unwrap()\n);\nassert_eq!(\n    since(from_ymd(2014, 1, 1), from_ymd(1614, 1, 1)),\n    TimeDelta::try_days(365 * 400 + 97).unwrap()\n);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2658:1280":{"id":"0:2658:1280","crate_id":0,"name":"partial_cmp","span":{"filename":"src/naive/date/mod.rs","begin":[2164,46],"end":[2164,56]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2129":{"id":"0:2129","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,22],"end":[52,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2950:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2130:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1146":{"id":"0:1146","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2261,0],"end":[2265,1]},"visibility":"default","docs":"The `Display` output of the naive date `d` is the same as\n[`d.format(\"%Y-%m-%d\")`](crate::format::strftime).\n\nThe string printed can be readily parsed via the `parse` method on `str`.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nassert_eq!(format!(\"{}\", NaiveDate::from_ymd_opt(2015, 9, 5).unwrap()), \"2015-09-05\");\nassert_eq!(format!(\"{}\", NaiveDate::from_ymd_opt(0, 1, 1).unwrap()), \"0000-01-01\");\nassert_eq!(format!(\"{}\", NaiveDate::from_ymd_opt(9999, 12, 31).unwrap()), \"9999-12-31\");\n```\n\nISO 8601 requires an explicit sign for years before 1 BCE or after 9999 CE.\n\n```\n# use chrono::NaiveDate;\nassert_eq!(format!(\"{}\", NaiveDate::from_ymd_opt(-1, 1, 1).unwrap()), \"-0001-01-01\");\nassert_eq!(format!(\"{}\", NaiveDate::from_ymd_opt(10000, 12, 31).unwrap()), \"+10000-12-31\");\n```","links":{"crate::format::strftime":"0:864:3658"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1147:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2060":{"id":"0:2060","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[189,0],"end":[224,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["from_f64","from_f32","from_u8","from_i16","from_usize","from_u16","from_i32","from_isize","from_u32","from_u128","from_i128","from_i8"],"trait":{"name":"FromPrimitive","id":"21:164:8772","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2061:8774","0:2062:8773","0:2063:8860"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41968:9655-0:2475:3806":{"id":"a:2:41968:9655-0:2475:3806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2625-0:3042:2336":{"id":"b:2:2625-0:3042:2336","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2913-0:3208:2376":{"id":"b:2:2913-0:3208:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13269:41658":{"id":"2:13269:41658","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:9229"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:9245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:491":{"id":"0:491","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1531,0],"end":[1538,1]},"visibility":"default","docs":"Add-assign `std::time::Duration` to `DateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`DateTime<Tz>::checked_add_signed`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_add_signed`":"0:357:2993"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33333:2562","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:493:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:616:801":{"id":"0:616:801","crate_id":0,"name":"format","span":{"filename":"src/format/formatting.rs","begin":[144,0],"end":[164,1]},"visibility":"public","docs":"Tries to format given arguments with given formatting items.\nInternally used by `DelayedFormat`.","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[deprecated(since = \"0.4.32\", note = \"Use DelayedFormat::fmt instead\")]"],"deprecation":{"since":"0.4.32","note":"Use DelayedFormat::fmt instead"},"inner":{"function":{"decl":{"inputs":[["w",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["date",{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"crate::NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["time",{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"crate::NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["off",{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"tuple":[{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"crate::FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}}],"bindings":[]}}}}],["items",{"generic":"I"}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"generic":"B"}}}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"generic":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"super::Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2036":{"id":"0:2036","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[180,0],"end":[195,1]},"visibility":"default","docs":"Any weekday can be represented as an integer from 0 to 6, which equals to\n[`Weekday::num_days_from_monday`](#method.num_days_from_monday) in this implementation.\nDo not heavily depend on this though; use explicit methods whenever possible.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2037:136","0:2038:1788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2131":{"id":"0:2131","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[52,31],"end":[52,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1444:7272":{"id":"0:1444:7272","crate_id":0,"name":"from_hms","span":{"filename":"src/naive/time/mod.rs","begin":[256,4],"end":[258,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from hour, minute and second.\n\nNo [leap second](#leap-second-handling) is allowed here;\nuse `NaiveTime::from_hms_*` methods with a subsecond parameter instead.\n\n# Panics\n\nPanics on invalid hour, minute and/or second.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `from_hms_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_hms_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2209:3075":{"id":"0:2209:3075","crate_id":0,"name":"Parsed","span":{"filename":"src/format/parsed.rs","begin":[129,0],"end":[172,1]},"visibility":"public","docs":"A type to hold parsed fields of date and time that can check all fields are consistent.\n\nThere are three classes of methods:\n\n- `set_*` methods to set fields you have available. They do a basic range check, and if the\n  same field is set more than once it is checked for consistency.\n\n- `to_*` methods try to make a concrete date and time value out of set fields.\n  They fully check that all fields are consistent and whether the date/datetime exists.\n\n- Methods to inspect the parsed fields.\n\n`Parsed` is used internally by all parsing functions in chrono. It is a public type so that it\ncan be used to write custom parsers that reuse the resolving algorithm, or to inspect the\nresults of a string parsed with chrono without converting it to concrete types.\n\n# Resolving algorithm\n\nResolving date/time parts is littered with lots of corner cases, which is why common date/time\nparsers do not implement it correctly.\n\nChrono provides a complete resolution algorithm that checks all fields for consistency via the\n`Parsed` type.\n\nAs an easy example, consider RFC 2822. The [RFC 2822 date and time format] has a day of the week\npart, which should be consistent with the other date parts. But a `strptime`-based parse would\nhappily accept inconsistent input:\n\n```python\n>>> import time\n>>> time.strptime('Wed, 31 Dec 2014 04:26:40 +0000',\n                  '%a, %d %b %Y %H:%M:%S +0000')\ntime.struct_time(tm_year=2014, tm_mon=12, tm_mday=31,\n                 tm_hour=4, tm_min=26, tm_sec=40,\n                 tm_wday=2, tm_yday=365, tm_isdst=-1)\n>>> time.strptime('Thu, 31 Dec 2014 04:26:40 +0000',\n                  '%a, %d %b %Y %H:%M:%S +0000')\ntime.struct_time(tm_year=2014, tm_mon=12, tm_mday=31,\n                 tm_hour=4, tm_min=26, tm_sec=40,\n                 tm_wday=3, tm_yday=365, tm_isdst=-1)\n```\n\n[RFC 2822 date and time format]: https://tools.ietf.org/html/rfc2822#section-3.3\n\n# Example\n\nLet's see how `Parsed` correctly detects the second RFC 2822 string from before is inconsistent.\n\n```\n# #[cfg(feature = \"alloc\")] {\nuse chrono::format::{ParseErrorKind, Parsed};\nuse chrono::Weekday;\n\nlet mut parsed = Parsed::new();\nparsed.set_weekday(Weekday::Wed)?;\nparsed.set_day(31)?;\nparsed.set_month(12)?;\nparsed.set_year(2014)?;\nparsed.set_hour(4)?;\nparsed.set_minute(26)?;\nparsed.set_second(40)?;\nparsed.set_offset(0)?;\nlet dt = parsed.to_datetime()?;\nassert_eq!(dt.to_rfc2822(), \"Wed, 31 Dec 2014 04:26:40 +0000\");\n\nlet mut parsed = Parsed::new();\nparsed.set_weekday(Weekday::Thu)?; // changed to the wrong day\nparsed.set_day(31)?;\nparsed.set_month(12)?;\nparsed.set_year(2014)?;\nparsed.set_hour(4)?;\nparsed.set_minute(26)?;\nparsed.set_second(40)?;\nparsed.set_offset(0)?;\nlet result = parsed.to_datetime();\n\nassert!(result.is_err());\nif let Err(error) = result {\n    assert_eq!(error.kind(), ParseErrorKind::Impossible);\n}\n# }\n# Ok::<(), chrono::ParseError>(())\n```\n\nThe same using chrono's build-in parser for RFC 2822 (the [RFC2822 formatting item]) and\n[`format::parse()`] showing how to inspect a field on failure.\n\n[RFC2822 formatting item]: crate::format::Fixed::RFC2822\n[`format::parse()`]: crate::format::parse()\n\n```\n# #[cfg(feature = \"alloc\")] {\nuse chrono::format::{parse, Fixed, Item, Parsed};\nuse chrono::Weekday;\n\nlet rfc_2822 = [Item::Fixed(Fixed::RFC2822)];\n\nlet mut parsed = Parsed::new();\nparse(&mut parsed, \"Wed, 31 Dec 2014 04:26:40 +0000\", rfc_2822.iter())?;\nlet dt = parsed.to_datetime()?;\n\nassert_eq!(dt.to_rfc2822(), \"Wed, 31 Dec 2014 04:26:40 +0000\");\n\nlet mut parsed = Parsed::new();\nparse(&mut parsed, \"Thu, 31 Dec 2014 04:26:40 +0000\", rfc_2822.iter())?;\nlet result = parsed.to_datetime();\n\nassert!(result.is_err());\nif result.is_err() {\n    // What is the weekday?\n    assert_eq!(parsed.weekday(), Some(Weekday::Thu));\n}\n# }\n# Ok::<(), chrono::ParseError>(())\n```","links":{"crate::format::Fixed::RFC2822":"0:2403:3389","crate::format::parse()":"0:793:3071"},"attrs":["#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:692","a:2:32106:236-0:2209:3075","a:2:3121:246-0:2209:3075","a:2:3156:9919-0:2209:3075","a:2:32165:9507-0:2209:3075","a:2:41968:9655-0:2209:3075","a:2:41969:9654-0:2209:3075","b:2:2913-0:2209:3075","b:2:2898-0:2209:3075","b:2:2625-0:2209:3075","b:2:2902-0:2209:3075","b:2:2628-0:2209:3075","b:2:3737-0:2209:3075","b:2:2908-0:2209:3075","b:5:736-0:2209:3075","0:2236","0:2240","0:2238","0:2242","0:2231","0:2233","0:2234"]}}},"0:2650:463":{"id":"0:2650:463","crate_id":0,"name":"clone","span":{"filename":"src/naive/date/mod.rs","begin":[2164,22],"end":[2164,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:375:3275":{"id":"0:375:3275","crate_id":0,"name":"to_rfc3339_opts","span":{"filename":"src/datetime/mod.rs","begin":[679,4],"end":[684,5]},"visibility":"public","docs":"Return an RFC 3339 and ISO 8601 date and time string with subseconds\nformatted as per `SecondsFormat`.\n\nIf `use_z` is true and the timezone is UTC (offset 0), uses `Z` as\nper [`Fixed::TimezoneOffsetColonZ`]. If `use_z` is false, uses\n[`Fixed::TimezoneOffsetColon`]\n\n# Examples\n\n```rust\n# use chrono::{FixedOffset, SecondsFormat, TimeZone, NaiveDate};\nlet dt = NaiveDate::from_ymd_opt(2018, 1, 26)\n    .unwrap()\n    .and_hms_micro_opt(18, 30, 9, 453_829)\n    .unwrap()\n    .and_utc();\nassert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, false), \"2018-01-26T18:30:09.453+00:00\");\nassert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, true), \"2018-01-26T18:30:09.453Z\");\nassert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true), \"2018-01-26T18:30:09Z\");\n\nlet pst = FixedOffset::east_opt(8 * 60 * 60).unwrap();\nlet dt = pst\n    .from_local_datetime(\n        &NaiveDate::from_ymd_opt(2018, 1, 26)\n            .unwrap()\n            .and_hms_micro_opt(10, 30, 9, 453_829)\n            .unwrap(),\n    )\n    .unwrap();\nassert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true), \"2018-01-26T10:30:09+08:00\");\n```","links":{"`Fixed::TimezoneOffsetColonZ`":"0:2397:3779","`Fixed::TimezoneOffsetColon`":"0:2391:3769"},"attrs":["#[cfg(feature = \"alloc\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["secform",{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["use_z",{"primitive":"bool"}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:2247:2887":{"id":"a:2:3121:246-0:2247:2887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:8196-0:2247:2887":{"id":"b:2:8196-0:2247:2887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8192:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:8198:172","2:8199:10015","2:8200:941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"b:2:2625-0:2741:2366":{"id":"b:2:2625-0:2741:2366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2741:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2528:1956":{"id":"0:2528:1956","crate_id":0,"name":"0","span":{"filename":"src/format/mod.rs","begin":[334,17],"end":[334,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Box","id":"5:304:3655","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}},"a:2:32106:236-0:2174:2886":{"id":"a:2:32106:236-0:2174:2886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:397":{"id":"0:397","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[921,0],"end":[929,1]},"visibility":"default","docs":"Convert a `DateTime<FixedOffset>` instance into a `DateTime<Local>` instance.","links":{},"attrs":["#[cfg(feature = \"clock\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:398:818"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:109-0:1990:2339":{"id":"0:109-0:1990:2339","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[538,4],"end":[538,31]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::SubsecRound","name":"SubsecRound","id":"0:1990:2339","glob":false}}},"0:2488":{"id":"0:2488","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[296,9],"end":[296,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2489:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2667":{"id":"0:2667","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[69,9],"end":[69,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2668:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1311:295":{"id":"0:1311:295","crate_id":0,"name":"add","span":{"filename":"src/naive/datetime/mod.rs","begin":[1755,4],"end":[1757,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3167:2561","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:9507-0:2475:3806":{"id":"a:2:32165:9507-0:2475:3806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2902-0:3062:2367":{"id":"b:2:2902-0:3062:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3109":{"id":"0:3109","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[247,38],"end":[247,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1259":{"id":"0:1259","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[970,0],"end":[1357,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["num_days_from_ce","year_ce"],"trait":{"name":"Datelike","id":"0:2080:2342","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1260:3029","0:1261:2374","0:1262:3030","0:1263:3031","0:1264:3032","0:1265:3033","0:1266:3034","0:1267:2372","0:1268:3035","0:1269:3036","0:1271:3037","0:1273:3038","0:1275:3039","0:1277:3040","0:1279:3041","0:1281:3042"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1474":{"id":"0:1474","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[905,0],"end":[1140,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hour12","num_seconds_from_midnight"],"trait":{"name":"Timelike","id":"0:2099:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1475:2935","0:1476:3476","0:1477:3477","0:1478:3196","0:1479:3481","0:1480:3485","0:1481:3491","0:1482:3498","0:1483:3142"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1950:7699":{"id":"0:1950:7699","crate_id":0,"name":"isoywd_opt","span":{"filename":"src/offset/mod.rs","begin":[402,4],"end":[407,5]},"visibility":"default","docs":"Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.\n\nThe time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),\nbut it will propagate to the `DateTime` values constructed via this date.\n\nReturns `None` on the out-of-range date and/or invalid week number.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"use `from_local_datetime()` with a `NaiveDateTime` instead\")]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.23","note":"use `from_local_datetime()` with a `NaiveDateTime` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}],["week",{"primitive":"u32"}],["weekday",{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2119":{"id":"0:2119","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[695,0],"end":[695,40]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["cause","source","provide","description","type_id"],"trait":{"name":"Error","id":"2:2961:136","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:72:295":{"id":"0:72:295","crate_id":0,"name":"add","span":{"filename":"src/time_delta.rs","begin":[461,4],"end":[463,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[466,0],"end":[472,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:74:198","0:75:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:388:60":{"id":"0:388:60","crate_id":0,"name":"default","span":{"filename":"src/datetime/mod.rs","begin":[875,4],"end":[877,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:565-0:333:2359":{"id":"0:565-0:333:2359","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[559,33],"end":[559,45]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"datetime::MIN_DATETIME","name":"MIN_DATETIME","id":"0:333:2359","glob":false}}},"b:2:3737-0:2183:2341":{"id":"b:2:3737-0:2183:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2902-0:2368:3074":{"id":"b:2:2902-0:2368:3074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1453:3307":{"id":"0:1453:3307","crate_id":0,"name":"from_num_seconds_from_midnight_opt","span":{"filename":"src/naive/time/mod.rs","begin":[481,4],"end":[486,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.\n\nThe nanosecond part is allowed to exceed 1,000,000,000 in order to represent a\n[leap second](#leap-second-handling), but only when `secs % 60 == 59`.\n\n# Errors\n\nReturns `None` on invalid number of seconds and/or nanosecond.\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nlet from_nsecs_opt = NaiveTime::from_num_seconds_from_midnight_opt;\n\nassert!(from_nsecs_opt(0, 0).is_some());\nassert!(from_nsecs_opt(86399, 999_999_999).is_some());\nassert!(from_nsecs_opt(86399, 1_999_999_999).is_some()); // a leap second after 23:59:59\nassert!(from_nsecs_opt(86_400, 0).is_none());\nassert!(from_nsecs_opt(86399, 2_000_000_000).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["secs",{"primitive":"u32"}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:389":{"id":"0:389","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[880,0],"end":[884,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2950:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:390:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:494":{"id":"0:494","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1545,0],"end":[1554,1]},"visibility":"default","docs":"Add `FixedOffset` to the datetime value of `DateTime` (offset remains unchanged).\n\n# Panics\n\nPanics if the resulting date would be out of range.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:496:198","0:497:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:884:3071":{"id":"0:884:3071","crate_id":0,"name":"parse","span":{"filename":"src/format/strftime.rs","begin":[333,4],"end":[340,5]},"visibility":"public","docs":"Parse format string into a `Vec` of formatting [`Item`]'s.\n\nIf you need to format or parse multiple values with the same format string, it is more\nefficient to convert it to a `Vec` of formatting [`Item`]'s than to re-parse the format\nstring on every use.\n\nThe `format_with_items` methods on [`DateTime`], [`NaiveDateTime`], [`NaiveDate`] and\n[`NaiveTime`] accept the result for formatting. [`format::parse()`] can make use of it for\nparsing.\n\n[`DateTime`]: crate::DateTime::format_with_items\n[`NaiveDateTime`]: crate::NaiveDateTime::format_with_items\n[`NaiveDate`]: crate::NaiveDate::format_with_items\n[`NaiveTime`]: crate::NaiveTime::format_with_items\n[`format::parse()`]: crate::format::parse()\n\n# Errors\n\nReturns an error if the format string contains an invalid or unrecognized formatting\nspecifier.\n\n# Example\n\n```\nuse chrono::format::{parse, Parsed, StrftimeItems};\nuse chrono::NaiveDate;\n\nlet fmt_items = StrftimeItems::new(\"%e %b %Y %k.%M\").parse()?;\nlet datetime = NaiveDate::from_ymd_opt(2023, 7, 11).unwrap().and_hms_opt(9, 0, 0).unwrap();\n\n// Formatting\nassert_eq!(\n    datetime.format_with_items(fmt_items.as_slice().iter()).to_string(),\n    \"11 Jul 2023  9.00\"\n);\n\n// Parsing\nlet mut parsed = Parsed::new();\nparse(&mut parsed, \"11 Jul 2023  9.00\", fmt_items.as_slice().iter())?;\nlet parsed_dt = parsed.to_naive_datetime_with_offset(0)?;\nassert_eq!(parsed_dt, datetime);\n# Ok::<(), chrono::ParseError>(())\n```","links":{"`Item`":"0:2521:172","crate::NaiveTime::format_with_items":"0:1463:3015","crate::NaiveDate::format_with_items":"0:1060:3015","crate::DateTime::format_with_items":"0:418:3015","crate::NaiveDateTime::format_with_items":"0:1245:3015","crate::format::parse()":"0:793:3071"},"attrs":["#[cfg(any(feature = \"alloc\", feature = \"std\"))]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Vec","id":"5:7056:263","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5863-0:2145:2331":{"id":"b:5:5863-0:2145:2331","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5861:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5865:1763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2567":{"id":"0:2567","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[386,16],"end":[386,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2568:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1285:3476":{"id":"0:1285:3476","crate_id":0,"name":"minute","span":{"filename":"src/naive/datetime/mod.rs","begin":[1392,4],"end":[1394,5]},"visibility":"default","docs":"Returns the minute number from 0 to 59.\n\nSee also the [`NaiveTime::minute`] method.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Timelike};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 34, 56, 789).unwrap();\nassert_eq!(dt.minute(), 34);\n```","links":{"`NaiveTime::minute`":"0:1476:3476"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:9654-0:2723:2350":{"id":"a:2:41969:9654-0:2723:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:8196-0:2625:5703":{"id":"b:2:8196-0:2625:5703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"2:8192:164","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:8198:172","2:8199:10015","2:8200:941"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"I"}}}},"0:2068":{"id":"0:2068","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[253,0],"end":[257,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2069:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3156:9919-0:2174:2886":{"id":"a:2:3156:9919-0:2174:2886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2047-0:3145:2373":{"id":"0:2047-0:3145:2373","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[587,0],"end":[587,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"weekday::ParseWeekdayError","name":"ParseWeekdayError","id":"0:3145:2373","glob":false}}},"a:2:3156:9919-0:2501:3809":{"id":"a:2:3156:9919-0:2501:3809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2464":{"id":"0:2464","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[283,16],"end":[283,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2457:3803":{"id":"0:2457:3803","crate_id":0,"name":"OffsetFormat","span":{"filename":"src/format/mod.rs","begin":[284,0],"end":[293,1]},"visibility":"public","docs":"Type for specifying the format of UTC offsets.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:2458:3805","0:2459:3808","0:2460:3811","0:2461:3813"],"fields_stripped":false}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32106:236-0:2457:3803","a:2:3121:246-0:2457:3803","a:2:3156:9919-0:2457:3803","a:2:32165:9507-0:2457:3803","a:2:41968:9655-0:2457:3803","a:2:41969:9654-0:2457:3803","b:2:2913-0:2457:3803","b:2:2898-0:2457:3803","b:2:2625-0:2457:3803","b:2:2902-0:2457:3803","b:2:2628-0:2457:3803","b:2:3737-0:2457:3803","b:2:2908-0:2457:3803","b:5:736-0:2457:3803","0:2462","0:2464","0:2470","0:2465","0:2468","0:2472","0:2467"]}}},"0:1546:1163":{"id":"0:1546:1163","crate_id":0,"name":"new","span":{"filename":"src/naive/mod.rs","begin":[139,4],"end":[141,5]},"visibility":"public","docs":"Construct a new `Days` from a number of days","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["num",{"primitive":"u64"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2770:686":{"id":"0:2770:686","crate_id":0,"name":"eq","span":{"filename":"src/offset/fixed.rs","begin":[22,9],"end":[22,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:2625:5703":{"id":"b:2:2625-0:2625:5703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1281:3042":{"id":"0:1281:3042","crate_id":0,"name":"with_ordinal0","span":{"filename":"src/naive/datetime/mod.rs","begin":[1354,4],"end":[1356,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.\n\nSee also the [`NaiveDate::with_ordinal0`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (`with_ordinal0(365)` in a non-leap year).\n- The value for `ordinal0` is invalid.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, NaiveDateTime};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(\n    dt.with_ordinal0(59),\n    Some(NaiveDate::from_ymd_opt(2015, 3, 1).unwrap().and_hms_opt(12, 34, 56).unwrap())\n);\nassert_eq!(dt.with_ordinal0(365), None); // 2015 had only 365 days\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2016, 9, 8).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(\n    dt.with_ordinal0(59),\n    Some(NaiveDate::from_ymd_opt(2016, 2, 29).unwrap().and_hms_opt(12, 34, 56).unwrap())\n);\nassert_eq!(\n    dt.with_ordinal0(365),\n    Some(NaiveDate::from_ymd_opt(2016, 12, 31).unwrap().and_hms_opt(12, 34, 56).unwrap())\n);\n```","links":{"`NaiveDate::with_ordinal0`":"0:1099:3042"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["ordinal0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1938:1887":{"id":"0:1938:1887","crate_id":0,"name":"unwrap","span":{"filename":"src/offset/mod.rs","begin":[259,4],"end":[267,5]},"visibility":"public","docs":"Returns a single unique conversion result or panics.\n\n`unwrap()` is best combined with time zone types where the mapping can never fail like\n[`Utc`] and [`FixedOffset`]. Note that for [`FixedOffset`] there is a rare case where a\nresulting [`DateTime`] can be out of range.\n\n# Panics\n\nPanics if the local time falls within a _fold_ or a _gap_ in the local time, and on any\nerror that may have been returned by the type implementing [`TimeZone`].","links":{"`Utc`":"0:3049:2347","`FixedOffset`":"0:2766:2346","`DateTime`":"0:2165:2340","`TimeZone`":"0:1941:2352"},"attrs":["#[must_use]","#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:2158:2335":{"id":"b:2:2902-0:2158:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1224:2353":{"id":"0:1224:2353","crate_id":0,"name":"date","span":{"filename":"src/naive/datetime/mod.rs","begin":[332,4],"end":[334,5]},"visibility":"public","docs":"Retrieves a date component.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet dt = NaiveDate::from_ymd_opt(2016, 7, 8).unwrap().and_hms_opt(9, 10, 11).unwrap();\nassert_eq!(dt.date(), NaiveDate::from_ymd_opt(2016, 7, 8).unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103-0:2123:2332":{"id":"0:103-0:2123:2332","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[523,0],"end":[523,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"time_delta::TimeDelta","name":"TimeDelta","id":"0:2123:2332","glob":false}}},"a:2:32165:9507-0:3062:2367":{"id":"a:2:32165:9507-0:3062:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2912:1790":{"id":"2:2912:1790","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1460:3000":{"id":"0:1460:3000","crate_id":0,"name":"signed_duration_since","span":{"filename":"src/naive/time/mod.rs","begin":[744,4],"end":[769,5]},"visibility":"public","docs":"Subtracts another `NaiveTime` from the current time.\nReturns a `TimeDelta` within +/- 1 day.\nThis does not overflow or underflow at all.\n\nAs a part of Chrono's [leap second handling](#leap-second-handling),\nthe subtraction assumes that **there is no leap second ever**,\nexcept when any of the `NaiveTime`s themselves represents a leap second\nin which case the assumption becomes that\n**there are exactly one (or two) leap second(s) ever**.\n\n# Example\n\n```\nuse chrono::{NaiveTime, TimeDelta};\n\nlet from_hmsm = |h, m, s, milli| NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap();\nlet since = NaiveTime::signed_duration_since;\n\nassert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 900)), TimeDelta::zero());\nassert_eq!(\n    since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 875)),\n    TimeDelta::try_milliseconds(25).unwrap()\n);\nassert_eq!(\n    since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 6, 925)),\n    TimeDelta::try_milliseconds(975).unwrap()\n);\nassert_eq!(\n    since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 0, 900)),\n    TimeDelta::try_seconds(7).unwrap()\n);\nassert_eq!(\n    since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 0, 7, 900)),\n    TimeDelta::try_seconds(5 * 60).unwrap()\n);\nassert_eq!(\n    since(from_hmsm(3, 5, 7, 900), from_hmsm(0, 5, 7, 900)),\n    TimeDelta::try_seconds(3 * 3600).unwrap()\n);\nassert_eq!(\n    since(from_hmsm(3, 5, 7, 900), from_hmsm(4, 5, 7, 900)),\n    TimeDelta::try_seconds(-3600).unwrap()\n);\nassert_eq!(\n    since(from_hmsm(3, 5, 7, 900), from_hmsm(2, 4, 6, 800)),\n    TimeDelta::try_seconds(3600 + 60 + 1).unwrap() + TimeDelta::try_milliseconds(100).unwrap()\n);\n```\n\nLeap seconds are handled, but the subtraction assumes that\nthere were no other leap seconds happened.\n\n```\n# use chrono::{TimeDelta, NaiveTime};\n# let from_hmsm = |h, m, s, milli| { NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap() };\n# let since = NaiveTime::signed_duration_since;\nassert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 59, 0)),\n           TimeDelta::try_seconds(1).unwrap());\nassert_eq!(since(from_hmsm(3, 0, 59, 1_500), from_hmsm(3, 0, 59, 0)),\n           TimeDelta::try_milliseconds(1500).unwrap());\nassert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 0, 0)),\n           TimeDelta::try_seconds(60).unwrap());\nassert_eq!(since(from_hmsm(3, 0, 0, 0), from_hmsm(2, 59, 59, 1_000)),\n           TimeDelta::try_seconds(1).unwrap());\nassert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(2, 59, 59, 1_000)),\n           TimeDelta::try_seconds(61).unwrap());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2366":{"id":"0:2366","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[158,26],"end":[158,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2367:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1249:801":{"id":"0:1249:801","crate_id":0,"name":"format","span":{"filename":"src/naive/datetime/mod.rs","begin":[902,4],"end":[904,5]},"visibility":"public","docs":"Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](crate::format::strftime)\non the supported escape sequences.\n\nThis returns a `DelayedFormat`,\nwhich gets converted to a string only when actual formatting happens.\nYou may use the `to_string` method to get a `String`,\nor just feed it into `print!` and other formatting macros.\n(In this way it avoids the redundant memory allocation.)\n\nA wrong format string does *not* issue an error immediately.\nRather, converting or formatting the `DelayedFormat` fails.\nYou are recommended to immediately use `DelayedFormat` for this reason.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet dt = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap().and_hms_opt(23, 56, 4).unwrap();\nassert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2015-09-05 23:56:04\");\nassert_eq!(dt.format(\"around %l %p on %b %-d\").to_string(), \"around 11 PM on Sep 5\");\n```\n\nThe resulting `DelayedFormat` can be formatted directly via the `Display` trait.\n\n```\n# use chrono::NaiveDate;\n# let dt = NaiveDate::from_ymd_opt(2015, 9, 5).unwrap().and_hms_opt(23, 56, 4).unwrap();\nassert_eq!(format!(\"{}\", dt.format(\"%Y-%m-%d %H:%M:%S\")), \"2015-09-05 23:56:04\");\nassert_eq!(format!(\"{}\", dt.format(\"around %l %p on %b %-d\")), \"around 11 PM on Sep 5\");\n```","links":{"crate::format::strftime":"0:864:3658"},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2335:3719":{"id":"0:2335:3719","crate_id":0,"name":"Second","span":{"filename":"src/format/mod.rs","begin":[141,4],"end":[141,10]},"visibility":"default","docs":"The number of seconds since the last whole minute (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2628-0:2723:2350":{"id":"b:2:2628-0:2723:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1128:172":{"id":"0:1128:172","crate_id":0,"name":"Item","span":{"filename":"src/naive/date/mod.rs","begin":[2134,4],"end":[2134,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1477:3477":{"id":"0:1477:3477","crate_id":0,"name":"second","span":{"filename":"src/naive/time/mod.rs","begin":[960,4],"end":[962,5]},"visibility":"default","docs":"Returns the second number from 0 to 59.\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nassert_eq!(NaiveTime::from_hms_opt(0, 0, 0).unwrap().second(), 0);\nassert_eq!(NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap().second(), 4);\n```\n\nThis method never returns 60 even when it is a leap second.\n([Why?](#leap-second-handling))\nUse the proper [formatting method](#method.format) to get a human-readable representation.\n\n```\n# #[cfg(feature = \"alloc\")] {\n# use chrono::{NaiveTime, Timelike};\nlet leap = NaiveTime::from_hms_milli_opt(23, 59, 59, 1_000).unwrap();\nassert_eq!(leap.second(), 59);\nassert_eq!(leap.format(\"%H:%M:%S\").to_string(), \"23:59:60\");\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1479:3481":{"id":"0:1479:3481","crate_id":0,"name":"with_hour","span":{"filename":"src/naive/time/mod.rs","begin":[1013,4],"end":[1019,5]},"visibility":"default","docs":"Makes a new `NaiveTime` with the hour number changed.\n\n# Errors\n\nReturns `None` if the value for `hour` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nlet dt = NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap();\nassert_eq!(dt.with_hour(7), Some(NaiveTime::from_hms_nano_opt(7, 56, 4, 12_345_678).unwrap()));\nassert_eq!(dt.with_hour(24), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:3049:2347":{"id":"b:2:2898-0:3049:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2898-0:2165:2340":{"id":"b:2:2898-0:2165:2340","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1467:801":{"id":"0:1467:801","crate_id":0,"name":"format","span":{"filename":"src/naive/time/mod.rs","begin":[872,4],"end":[874,5]},"visibility":"public","docs":"Formats the time with the specified format string.\nSee the [`format::strftime` module](crate::format::strftime)\non the supported escape sequences.\n\nThis returns a `DelayedFormat`,\nwhich gets converted to a string only when actual formatting happens.\nYou may use the `to_string` method to get a `String`,\nor just feed it into `print!` and other formatting macros.\n(In this way it avoids the redundant memory allocation.)\n\nA wrong format string does *not* issue an error immediately.\nRather, converting or formatting the `DelayedFormat` fails.\nYou are recommended to immediately use `DelayedFormat` for this reason.\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nlet t = NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap();\nassert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");\nassert_eq!(t.format(\"%H:%M:%S%.6f\").to_string(), \"23:56:04.012345\");\nassert_eq!(t.format(\"%-I:%M %p\").to_string(), \"11:56 PM\");\n```\n\nThe resulting `DelayedFormat` can be formatted directly via the `Display` trait.\n\n```\n# use chrono::NaiveTime;\n# let t = NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap();\nassert_eq!(format!(\"{}\", t.format(\"%H:%M:%S\")), \"23:56:04\");\nassert_eq!(format!(\"{}\", t.format(\"%H:%M:%S%.6f\")), \"23:56:04.012345\");\nassert_eq!(format!(\"{}\", t.format(\"%-I:%M %p\")), \"11:56 PM\");\n```","links":{"crate::format::strftime":"0:864:3658"},"attrs":["#[cfg(feature = \"alloc\")]","#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:2562:2361":{"id":"b:2:3737-0:2562:2361","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:91":{"id":"0:91","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[526,0],"end":[530,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sum","id":"2:8151:2732","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:92:2733"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2599":{"id":"0:2599","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[398,23],"end":[398,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:57:2698":{"id":"0:57:2698","crate_id":0,"name":"checked_add","span":{"filename":"src/time_delta.rs","begin":[349,4],"end":[359,5]},"visibility":"public","docs":"Add two `TimeDelta`s, returning `None` if overflow occurred.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["rhs",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32106:236-0:2741:2366":{"id":"a:2:32106:236-0:2741:2366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2741:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2066:8864":{"id":"0:2066:8864","crate_id":0,"name":"as_u32","span":{"filename":"src/month.rs","begin":[239,4],"end":[241,5]},"visibility":"public","docs":"Returns the total number of months in the `Months` instance.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:453:3477":{"id":"0:453:3477","crate_id":0,"name":"second","span":{"filename":"src/datetime/mod.rs","begin":[1342,4],"end":[1344,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1506:1722":{"id":"0:1506:1722","crate_id":0,"name":"sub_assign","span":{"filename":"src/naive/time/mod.rs","begin":[1375,4],"end":[1377,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2118:788":{"id":"0:2118:788","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[689,4],"end":[691,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13286:34836":{"id":"2:13286:34836","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:992:8037"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:2209:3075":{"id":"b:2:2625-0:2209:3075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:944":{"id":"0:944","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[389,0],"end":[394,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:945:970"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3193:686":{"id":"0:3193:686","crate_id":0,"name":"eq","span":{"filename":"src/month.rs","begin":[31,9],"end":[31,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:9654-0:2746:2364":{"id":"a:2:41969:9654-0:2746:2364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2901:3611":{"id":"2:2901:3611","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2875:143"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:2644:5704":{"id":"a:2:3121:246-0:2644:5704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3117:4569":{"id":"0:3117:4569","crate_id":0,"name":"Wed","span":{"filename":"src/weekday.rs","begin":[48,4],"end":[48,11]},"visibility":"default","docs":"Wednesday.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"0:708:4346":{"id":"0:708:4346","crate_id":0,"name":"set_day","span":{"filename":"src/format/parsed.rs","begin":[410,4],"end":[415,5]},"visibility":"public","docs":"Set the [`day`](Parsed::day) of the month field to the given value.\n\n# Errors\n\nReturns `OUT_OF_RANGE` if `value` is not in the range 1-31.\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::day":"0:749:3031"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2913-0:3145:2373":{"id":"b:2:2913-0:3145:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:551:135":{"id":"0:551:135","crate_id":0,"name":"Err","span":{"filename":"src/datetime/mod.rs","begin":[1830,4],"end":[1830,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:552:3567":{"id":"0:552:3567","crate_id":0,"name":"from_str","span":{"filename":"src/datetime/mod.rs","begin":[1832,4],"end":[1834,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:9654-0:2625:5703":{"id":"a:2:41969:9654-0:2625:5703","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1911":{"id":"0:1911","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[142,0],"end":[146,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1912:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1913":{"id":"0:1913","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[148,0],"end":[152,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1914:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:5863-0:2174:2886":{"id":"b:5:5863-0:2174:2886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5861:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["5:5865:1763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3121:246-0:3110:2345":{"id":"a:2:3121:246-0:3110:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:524":{"id":"0:524","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1697,0],"end":[1704,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:526:198","0:527:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2182:788":{"id":"0:2182:788","crate_id":0,"name":"fmt","span":{"filename":"src/format/formatting.rs","begin":[33,9],"end":[33,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:168:2957":{"id":"0:168:2957","crate_id":0,"name":"and_hms_micro_opt","span":{"filename":"src/date.rs","begin":[161,4],"end":[169,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nReturns `None` on invalid hour, minute, second and/or microsecond.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["micro",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:2741:2366":{"id":"b:2:3737-0:2741:2366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2741:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3206":{"id":"0:3206","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[31,62],"end":[31,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2711:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3207:470"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13179:41647":{"id":"2:13179:41647","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12338:1704","crate::ops::IndexMut":"2:3397:9160","str::slice_unchecked":"2:13178:41646"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:9919-0:3062:2367":{"id":"a:2:3156:9919-0:3062:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32106:236-0:2766:2346":{"id":"a:2:32106:236-0:2766:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:486:198":{"id":"0:486:198","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1491,4],"end":[1491,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"a:2:3121:246-0:3049:2347":{"id":"a:2:3121:246-0:3049:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:98:788":{"id":"0:98:788","crate_id":0,"name":"fmt","span":{"filename":"src/time_delta.rs","begin":[579,4],"end":[581,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3739:1803":{"id":"2:3739:1803","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39589:13839","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2240":{"id":"0:2240","crate_id":0,"name":null,"span":{"filename":"src/format/parsed.rs","begin":[128,38],"end":[128,45]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2950:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2241:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1103":{"id":"0:1103","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[1922,0],"end":[1927,1]},"visibility":"default","docs":"Add-assign of `TimeDelta` to `NaiveDate`.\n\nThis discards the fractional days in `TimeDelta`, rounding to the closest integral number of days\ntowards `TimeDelta::zero()`.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDate::checked_add_signed`] to get an `Option` instead.","links":{"`NaiveDate::checked_add_signed`":"0:1056:2993"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33333:2562","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1104:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2625-0:2174:2886":{"id":"b:2:2625-0:2174:2886","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DelayedFormat","id":"0:2174:2886","args":{"angle_bracketed":{"args":[{"type":{"generic":"I"}}],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2606:858":{"id":"0:2606:858","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[398,44],"end":[398,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2720":{"id":"0:2720","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[19,54],"end":[19,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2721:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1052:2972":{"id":"0:1052:2972","crate_id":0,"name":"succ","span":{"filename":"src/naive/date/mod.rs","begin":[948,4],"end":[950,5]},"visibility":"public","docs":"Makes a new `NaiveDate` for the next calendar date.\n\n# Panics\n\nPanics when `self` is the last representable date.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `succ_opt()` instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `succ_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:487:295":{"id":"0:487:295","crate_id":0,"name":"add","span":{"filename":"src/datetime/mod.rs","begin":[1494,4],"end":[1498,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2469:686":{"id":"0:2469:686","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[283,29],"end":[283,38]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3062:2367":{"id":"0:3062:2367","crate_id":0,"name":"LocalResult","span":{"filename":"src/offset/mod.rs","begin":[61,0],"end":[75,1]},"visibility":"public","docs":"Old name of [`MappedLocalTime`]. See that type for more documentation.","links":{"`MappedLocalTime`":"0:1916:2368"},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:3064:4457","0:3067:4458","0:3071:190"],"impls":["0:1918","0:1929","0:1936","a:2:32106:236-0:3062:2367","a:2:3121:246-0:3062:2367","a:2:3156:9919-0:3062:2367","a:2:32165:9507-0:3062:2367","a:2:41968:9655-0:3062:2367","a:2:41969:9654-0:3062:2367","b:2:2913-0:3062:2367","b:2:2898-0:3062:2367","b:2:2625-0:3062:2367","b:2:2902-0:3062:2367","b:2:2628-0:3062:2367","b:2:3737-0:3062:2367","b:2:2908-0:3062:2367","b:5:736-0:3062:2367","0:3073","0:3078","0:3084","0:3089","0:3081","0:3076","0:3086"]}}},"0:1972-0:1916:2368":{"id":"0:1972-0:1916:2368","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[578,0],"end":[578,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"offset::MappedLocalTime","name":"MappedLocalTime","id":"0:1916:2368","glob":false}}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1449,0],"end":[1453,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2711:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:475:470"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2774:858":{"id":"0:2774:858","crate_id":0,"name":"hash","span":{"filename":"src/offset/fixed.rs","begin":[22,24],"end":[22,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162:2938":{"id":"0:162:2938","crate_id":0,"name":"and_hms_opt","span":{"filename":"src/date.rs","begin":[109,4],"end":[111,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.\n\nReturns `None` on invalid hour, minute and/or second.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1591":{"id":"0:1591","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[119,0],"end":[125,1]},"visibility":"default","docs":"Parsing a `str` into a `FixedOffset` uses the format [`%z`](crate::format::strftime).","links":{"crate::format::strftime":"0:864:3658"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12808:3566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1592:135","0:1593:3567"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2913-0:2644:5704":{"id":"b:2:2913-0:2644:5704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2898-0:2422:3788":{"id":"b:2:2898-0:2422:3788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32106:236-0:2501:3809":{"id":"a:2:32106:236-0:2501:3809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:369:3002":{"id":"0:369:3002","crate_id":0,"name":"naive_utc","span":{"filename":"src/datetime/mod.rs","begin":[566,4],"end":[568,5]},"visibility":"public","docs":"Returns a view to the naive UTC datetime.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:705:4337":{"id":"0:705:4337","crate_id":0,"name":"set_isoweek","span":{"filename":"src/format/parsed.rs","begin":[370,4],"end":[375,5]},"visibility":"public","docs":"Set the [`isoweek`](Parsed::isoweek) field for an [ISO 8601 week date] to the given value.\n\n[ISO 8601 week date]: crate::NaiveDate#week-date\n\n# Errors\n\nReturns `OUT_OF_RANGE` if `value` is not in the range 1-53.\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::isoweek":"0:746:2413","crate::NaiveDate#week-date":"0:2608:2348"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41968:9655-0:2457:3803":{"id":"a:2:41968:9655-0:2457:3803","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32106:236-0:3110:2345":{"id":"a:2:32106:236-0:3110:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13234:34978":{"id":"2:13234:34978","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:9245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:9803":{"id":"5:5614:9803","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7642:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2035:788":{"id":"0:2035:788","crate_id":0,"name":"fmt","span":{"filename":"src/weekday.rs","begin":[164,4],"end":[174,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3247:686":{"id":"0:3247:686","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[671,28],"end":[671,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"OutOfRange","id":"0:3237:2427","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:349:3163":{"id":"0:349:3163","crate_id":0,"name":"timestamp_subsec_micros","span":{"filename":"src/datetime/mod.rs","begin":[383,4],"end":[385,5]},"visibility":"public","docs":"Returns the number of microseconds since the last second boundary.\n\nIn event of a leap second this may exceed 999,999.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3121:246-0:3208:2376":{"id":"a:2:3121:246-0:3208:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:32165:9507-0:2356:3731":{"id":"a:2:32165:9507-0:2356:3731","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2902-0:2766:2346":{"id":"b:2:2902-0:2766:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1260:3029":{"id":"0:1260:3029","crate_id":0,"name":"year","span":{"filename":"src/naive/datetime/mod.rs","begin":[985,4],"end":[987,5]},"visibility":"default","docs":"Returns the year number in the [calendar date](./struct.NaiveDate.html#calendar-date).\n\nSee also the [`NaiveDate::year`](./struct.NaiveDate.html#method.year) method.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, NaiveDateTime};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.year(), 2015);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:2723:2350":{"id":"b:2:2625-0:2723:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2085:3031":{"id":"0:2085:3031","crate_id":0,"name":"day","span":{"filename":"src/traits.rs","begin":[60,4],"end":[60,25]},"visibility":"default","docs":"Returns the day of month starting from 1.\n\nThe return value ranges from 1 to 31. (The last day of month differs by months.)","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:39:2640":{"id":"0:39:2640","crate_id":0,"name":"try_hours","span":{"filename":"src/time_delta.rs","begin":[170,4],"end":[172,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of hours.\n\nEquivalent to `TimeDelta::try_seconds(hours * 60 * 60)` with overflow checks.\n\n# Errors\n\nReturns `None` when the `TimeDelta` would be out of bounds.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hours",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2102:3476":{"id":"0:2102:3476","crate_id":0,"name":"minute","span":{"filename":"src/traits.rs","begin":[284,4],"end":[284,28]},"visibility":"default","docs":"Returns the minute number from 0 to 59.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:92:2733":{"id":"0:92:2733","crate_id":0,"name":"sum","span":{"filename":"src/time_delta.rs","begin":[527,4],"end":[529,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["iter",{"generic":"I"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8338:177","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2752":{"id":"0:2752","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[134,22],"end":[134,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2753:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2288":{"id":"0:2288","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[78,15],"end":[78,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2289:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2628-0:2422:3788":{"id":"b:2:2628-0:2422:3788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:32":{"id":"0:32","crate_id":0,"name":null,"span":{"filename":"src/time_delta.rs","begin":[77,0],"end":[443,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:33:1163","0:34:2622","0:35:2623","0:36:2633","0:37:2634","0:38:2639","0:39:2640","0:40:2645","0:41:2646","0:42:2652","0:43:2627","0:44:2660","0:45:2661","0:46:2672","0:47:2676","0:48:2678","0:49:2679","0:50:2683","0:51:2685","0:52:2681","0:53:2690","0:54:2692","0:55:2697","0:56:2701","0:57:2698","0:58:2704","0:59:2706","0:60:2707","0:61:2708","0:62:2710","0:63:2712","0:64:2716","0:65:2722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1313:198":{"id":"0:1313:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[1817,4],"end":[1817,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:476":{"id":"0:476","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1455,0],"end":[1459,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:478:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2600":{"id":"0:2600","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[398,23],"end":[398,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2601:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2418:788":{"id":"0:2418:788","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[174,31],"end":[174,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3048:788":{"id":"0:3048:788","crate_id":0,"name":"fmt","span":{"filename":"src/offset/local/mod.rs","begin":[113,22],"end":[113,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122-0:2608:2348":{"id":"0:122-0:2608:2348","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[542,20],"end":[542,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::NaiveDate","name":"NaiveDate","id":"0:2608:2348","glob":false}}},"0:1214:1163":{"id":"0:1214:1163","crate_id":0,"name":"new","span":{"filename":"src/naive/datetime/mod.rs","begin":[101,4],"end":[103,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from date and time components.\nEquivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)\nand many other helper constructors on `NaiveDate`.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, NaiveTime};\n\nlet d = NaiveDate::from_ymd_opt(2015, 6, 3).unwrap();\nlet t = NaiveTime::from_hms_milli_opt(12, 34, 56, 789).unwrap();\n\nlet dt = NaiveDateTime::new(d, t);\nassert_eq!(dt.date(), d);\nassert_eq!(dt.time(), t);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["date",{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["time",{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3070:1957":{"id":"0:3070:1957","crate_id":0,"name":"1","span":{"filename":"src/offset/mod.rs","begin":[68,17],"end":[68,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"T"}}},"0:2502:190":{"id":"0:2502:190","crate_id":0,"name":"None","span":{"filename":"src/format/mod.rs","begin":[320,4],"end":[320,8]},"visibility":"default","docs":"No separator","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:357:2993":{"id":"0:357:2993","crate_id":0,"name":"checked_add_signed","span":{"filename":"src/datetime/mod.rs","begin":[442,4],"end":[446,5]},"visibility":"public","docs":"Adds given `TimeDelta` to the current date and time.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2204":{"id":"0:2204","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[507,33],"end":[507,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2205:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1118:198":{"id":"0:1118:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/date/mod.rs","begin":[2057,4],"end":[2057,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:3121:246-0:2165:2340":{"id":"a:2:3121:246-0:2165:2340","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2628-0:2475:3806":{"id":"b:2:2628-0:2475:3806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2546:463":{"id":"0:2546:463","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[328,9],"end":[328,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1242:3226":{"id":"0:1242:3226","crate_id":0,"name":"checked_add_days","span":{"filename":"src/naive/datetime/mod.rs","begin":[758,4],"end":[760,5]},"visibility":"public","docs":"Add a duration in [`Days`] to the date part of the `NaiveDateTime`\n\nReturns `None` if the resulting date would be out of range.","links":{"`Days`":"0:2746:2364"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2062:8773":{"id":"0:2062:8773","crate_id":0,"name":"from_i64","span":{"filename":"src/month.rs","begin":[202,4],"end":[204,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["n",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:9507-0:3228:2375":{"id":"a:2:32165:9507-0:3228:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1267:2372":{"id":"0:1267:2372","crate_id":0,"name":"weekday","span":{"filename":"src/naive/datetime/mod.rs","begin":[1123,4],"end":[1125,5]},"visibility":"default","docs":"Returns the day of week.\n\nSee also the [`NaiveDate::weekday`](./struct.NaiveDate.html#method.weekday) method.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, NaiveDateTime, Weekday};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 25).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(dt.weekday(), Weekday::Fri);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1113:295":{"id":"0:1113:295","crate_id":0,"name":"add","span":{"filename":"src/naive/date/mod.rs","begin":[1999,4],"end":[2001,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3167:2561","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3737-0:2368:3074":{"id":"b:2:3737-0:2368:3074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41968:9655-0:3062:2367":{"id":"a:2:41968:9655-0:3062:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3121:246-0:2608:2348":{"id":"a:2:3121:246-0:2608:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3129:3957":{"id":"0:3129:3957","crate_id":0,"name":"Sun","span":{"filename":"src/weekday.rs","begin":[56,4],"end":[56,11]},"visibility":"default","docs":"Sunday.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"6","value":"6"}}}},"b:5:5863-0:3110:2345":{"id":"b:5:5863-0:3110:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5861:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5865:1763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1302":{"id":"0:1302","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[1668,0],"end":[1673,1]},"visibility":"default","docs":"Add-assign `TimeDelta` to `NaiveDateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`NaiveDateTime::checked_add_signed`] to get an `Option` instead.","links":{"`NaiveDateTime::checked_add_signed`":"0:1234:2993"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33333:2562","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1303:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13275:41660":{"id":"2:13275:41660","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:9229"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:9245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:276-0:155:2355":{"id":"0:276-0:155:2355","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[551,25],"end":[551,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"date::MIN_DATE","name":"MIN_DATE","id":"0:155:2355","glob":false}}},"2:13168:334":{"id":"2:13168:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13169:34939","`u8`":"1:12351:1833"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:1721":{"id":"0:75:1721","crate_id":0,"name":"sub","span":{"filename":"src/time_delta.rs","begin":[469,4],"end":[471,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1503:198":{"id":"0:1503:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/time/mod.rs","begin":[1356,4],"end":[1356,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:2:2902-0:2741:2366":{"id":"b:2:2902-0:2741:2366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2741:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1593:3567":{"id":"0:1593:3567","crate_id":0,"name":"from_str","span":{"filename":"src/offset/fixed.rs","begin":[121,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:12808:3566","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38:2639":{"id":"0:38:2639","crate_id":0,"name":"hours","span":{"filename":"src/time_delta.rs","begin":[158,4],"end":[160,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of hours.\n\nEquivalent to `TimeDelta::seconds(hours * 60 * 60)` with overflow checks.\n\n# Panics\n\nPanics when the `TimeDelta` would be out of bounds.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hours",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2473:858":{"id":"0:2473:858","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[283,44],"end":[283,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2057":{"id":"0:2057","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[167,0],"end":[187,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2058:136","0:2059:1788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:41969:9654-0:3154:2343":{"id":"a:2:41969:9654-0:3154:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2913-0:2247:2887":{"id":"b:2:2913-0:2247:2887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:343:3138":{"id":"0:343:3138","crate_id":0,"name":"timestamp","span":{"filename":"src/datetime/mod.rs","begin":[203,4],"end":[207,5]},"visibility":"public","docs":"Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n(aka \"UNIX timestamp\").\n\nThe reverse operation of creating a [`DateTime`] from a timestamp can be performed\nusing [`from_timestamp`](DateTime::from_timestamp) or [`TimeZone::timestamp_opt`].\n\n```\nuse chrono::{DateTime, TimeZone, Utc};\n\nlet dt: DateTime<Utc> = Utc.with_ymd_and_hms(2015, 5, 15, 0, 0, 0).unwrap();\nassert_eq!(dt.timestamp(), 1431648000);\n\nassert_eq!(DateTime::from_timestamp(dt.timestamp(), dt.timestamp_subsec_nanos()).unwrap(), dt);\n```","links":{"DateTime::from_timestamp":"0:380:3304","`DateTime`":"0:2165:2340","`TimeZone::timestamp_opt`":"0:1952:3577"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2521:172":{"id":"0:2521:172","crate_id":0,"name":"Item","span":{"filename":"src/format/mod.rs","begin":[329,0],"end":[347,1]},"visibility":"public","docs":"A single formatting item. This is used for both formatting and parsing.","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:2523:3838","0:2526:3840","0:2529:3671","0:2532:3843","0:2535:3683","0:2539:3074","0:2542:136"],"impls":["0:941","a:2:32106:236-0:2521:172","a:2:3121:246-0:2521:172","a:2:3156:9919-0:2521:172","a:2:32165:9507-0:2521:172","a:2:41968:9655-0:2521:172","a:2:41969:9654-0:2521:172","b:2:2913-0:2521:172","b:2:2898-0:2521:172","b:2:2625-0:2521:172","b:2:2902-0:2521:172","b:2:2628-0:2521:172","b:2:3737-0:2521:172","b:2:2908-0:2521:172","b:5:736-0:2521:172","0:2549","0:2558","0:2555","0:2544","0:2547","0:2552"]}}},"0:1333:295":{"id":"0:1333:295","crate_id":0,"name":"add","span":{"filename":"src/naive/datetime/mod.rs","begin":[2003,4],"end":[2005,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["days",{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3167:2561","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1909":{"id":"0:1909","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[136,0],"end":[140,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Offset","id":"0:1939:2351","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1910:3112"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2254":{"id":"0:2254","crate_id":0,"name":null,"span":{"filename":"src/format/strftime.rs","begin":[188,16],"end":[188,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2256:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2625-0:3049:2347":{"id":"b:2:2625-0:3049:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2184:3998":{"id":"0:2184:3998","crate_id":0,"name":"Secs","span":{"filename":"src/format/formatting.rs","begin":[511,4],"end":[511,8]},"visibility":"default","docs":"Format whole seconds only, with no decimal point nor subseconds.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2762":{"id":"0:2762","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[134,50],"end":[134,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","gt","lt","le"],"trait":{"name":"PartialOrd","id":"2:2717:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2763:1280"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2642":{"id":"0:2642","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2128,62],"end":[2128,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2711:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2643:470"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13219:41649":{"id":"2:13219:41649","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12848:9229","str::split":"2:13210:34967","prim@char":"1:12332:459","`DoubleEndedIterator`":"2:8230:129","str::rsplit_terminator":"2:13222:41650"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43806:9263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:737:3029":{"id":"0:737:3029","crate_id":0,"name":"year","span":{"filename":"src/format/parsed.rs","begin":[973,4],"end":[975,5]},"visibility":"public","docs":"Get the `year` field if set.\n\nSee also [`set_year()`](Parsed::set_year).","links":{"Parsed::set_year":"0:694:4297"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2738":{"id":"0:2738","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[215,47],"end":[215,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1949:7698":{"id":"0:1949:7698","crate_id":0,"name":"isoywd","span":{"filename":"src/offset/mod.rs","begin":[384,4],"end":[386,5]},"visibility":"default","docs":"Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.\n\nThe time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),\nbut it will propagate to the `DateTime` values constructed via this date.\n\nPanics on the out-of-range date and/or invalid week number.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"use `from_local_datetime()` with a `NaiveDateTime` instead\")]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.23","note":"use `from_local_datetime()` with a `NaiveDateTime` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}],["week",{"primitive":"u32"}],["weekday",{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13291:41662":{"id":"2:13291:41662","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4923:41662"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44073:9273","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:692":{"id":"0:692","crate_id":0,"name":null,"span":{"filename":"src/format/parsed.rs","begin":[190,0],"end":[1137,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:693:1163","0:694:4297","0:696:4300","0:697:4308","0:698:4314","0:700:4317","0:701:4322","0:702:4325","0:703:4329","0:704:4334","0:705:4337","0:706:4339","0:707:4342","0:708:4346","0:709:4349","0:710:4354","0:711:4360","0:712:4363","0:713:4367","0:714:4371","0:715:4376","0:716:4380","0:718:4397","0:726:4428","0:727:4441","0:732:4447","0:733:3391","0:734:4475","0:737:3029","0:738:4280","0:739:4281","0:740:4282","0:741:4283","0:742:4284","0:743:2374","0:744:3955","0:745:3958","0:746:2413","0:747:2372","0:748:3033","0:749:3031","0:750:4285","0:751:4286","0:752:3476","0:753:3477","0:754:3196","0:755:3138","0:756:1215"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2678":{"id":"0:2678","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[69,47],"end":[69,51]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:967-0:946:2362":{"id":"0:967-0:946:2362","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[565,29],"end":[565,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"format::ParseResult","name":"ParseResult","id":"0:946:2362","glob":false}}},"0:2123:2332":{"id":"0:2123:2332","crate_id":0,"name":"TimeDelta","span":{"filename":"src/time_delta.rs","begin":[60,0],"end":[63,1]},"visibility":"public","docs":"Time duration with nanosecond precision.\n\nThis also allows for negative durations; see individual methods for details.\n\nA `TimeDelta` is represented internally as a complement of seconds and\nnanoseconds. The range is restricted to that of `i64` milliseconds, with the\nminimum value notably being set to `-i64::MAX` rather than allowing the full\nrange of `i64::MIN`. This is to allow easy flipping of sign, so that for\ninstance `abs()` can be called without any checks.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:32","a:2:32106:236-0:2123:2332","a:2:3121:246-0:2123:2332","a:2:3156:9919-0:2123:2332","a:2:32165:9507-0:2123:2332","a:2:41968:9655-0:2123:2332","a:2:41969:9654-0:2123:2332","b:2:2913-0:2123:2332","b:2:2898-0:2123:2332","b:2:2625-0:2123:2332","b:2:2902-0:2123:2332","b:2:2628-0:2123:2332","b:2:3737-0:2123:2332","b:2:2908-0:2123:2332","b:5:736-0:2123:2332","b:5:5863-0:2123:2332","0:260","0:1484","0:95","0:2136","0:1302","0:2138","0:253","0:1103","0:1100","0:510","0:86","0:480","0:1500","0:1296","0:1497","0:256","0:76","0:70","0:2131","0:2126","0:91","0:80","0:249","0:1120","0:502","0:1312","0:488","0:1117","0:2140","0:67","0:73","0:2129","0:1487","0:2128","0:1318","0:78","0:2132","0:83","0:2142","0:2134"]}}},"0:718:4397":{"id":"0:718:4397","crate_id":0,"name":"to_naive_date","span":{"filename":"src/format/parsed.rs","begin":[570,4],"end":[709,5]},"visibility":"public","docs":"Returns a parsed naive date out of given fields.\n\nThis method is able to determine the date from given subset of fields:\n\n- Year, month, day.\n- Year, day of the year (ordinal).\n- Year, week number counted from Sunday or Monday, day of the week.\n- ISO week date.\n\nGregorian year and ISO week date year can have their century number (`*_div_100`) omitted,\nthe two-digit year is used to guess the century number then.\n\nIt checks all given date fields are consistent with each other.\n\n# Errors\n\nThis method returns:\n- `IMPOSSIBLE` if any of the date fields conflict.\n- `NOT_ENOUGH` if there are not enough fields set in `Parsed` for a complete date.\n- `OUT_OF_RANGE`\n  - if any of the date fields of `Parsed` are set to a value beyond their acceptable range.\n  - if the value would be outside the range of a [`NaiveDate`].\n  - if the date does not exist.","links":{"`NaiveDate`":"0:2608:2348"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1551-0:2723:2350":{"id":"0:1551-0:2723:2350","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[569,48],"end":[569,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"naive::NaiveTime","name":"NaiveTime","id":"0:2723:2350","glob":false}}},"0:1529-0:2625:5703":{"id":"0:1529-0:2625:5703","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[18,32],"end":[18,53]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::date::NaiveDateDaysIterator","name":"NaiveDateDaysIterator","id":"0:2625:5703","glob":false}}},"0:694:4297":{"id":"0:694:4297","crate_id":0,"name":"set_year","span":{"filename":"src/format/parsed.rs","begin":[208,4],"end":[210,5]},"visibility":"public","docs":"Set the [`year`](Parsed::year) field to the given value.\n\nThe value can be negative, unlike the [`year_div_100`](Parsed::year_div_100) and\n[`year_mod_100`](Parsed::year_mod_100) fields.\n\n# Errors\n\nReturns `OUT_OF_RANGE` if `value` is outside the range of an `i32`.\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::year":"0:737:3029","Parsed::year_div_100":"0:738:4280","Parsed::year_mod_100":"0:739:4281"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2348:686":{"id":"0:2348:686","crate_id":0,"name":"eq","span":{"filename":"src/format/mod.rs","begin":[102,16],"end":[102,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1110:1721":{"id":"0:1110:1721","crate_id":0,"name":"sub","span":{"filename":"src/naive/date/mod.rs","begin":[1985,4],"end":[1987,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["months",{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"2:3172:2566","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1106:198":{"id":"0:1106:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/date/mod.rs","begin":[1954,4],"end":[1954,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:508:198":{"id":"0:508:198","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1609,4],"end":[1609,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:155:2355":{"id":"0:155:2355","crate_id":0,"name":"MIN_DATE","span":{"filename":"src/date.rs","begin":[66,0],"end":[66,53]},"visibility":"public","docs":"The minimum possible `Date`.","links":{},"attrs":["#[allow(deprecated)]","#[deprecated(since = \"0.4.20\", note = \"Use Date::MIN_UTC instead\")]"],"deprecation":{"since":"0.4.20","note":"Use Date::MIN_UTC instead"},"inner":{"constant":{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"expr":"Date<Utc>::MIN_UTC","value":null,"is_literal":false}}},"b:2:2913-0:2158:2335":{"id":"b:2:2913-0:2158:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:379":{"id":"0:379","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[718,0],"end":[865,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:380:3304","0:381:3317","0:382:3329","0:383:3340","0:384:3070"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1332:198":{"id":"0:1332:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[2001,4],"end":[2001,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:156:2354":{"id":"0:156:2354","crate_id":0,"name":"MAX_DATE","span":{"filename":"src/date.rs","begin":[70,0],"end":[70,53]},"visibility":"public","docs":"The maximum possible `Date`.","links":{},"attrs":["#[allow(deprecated)]","#[deprecated(since = \"0.4.20\", note = \"Use Date::MAX_UTC instead\")]"],"deprecation":{"since":"0.4.20","note":"Use Date::MAX_UTC instead"},"inner":{"constant":{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"crate::offset::Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"expr":"Date<Utc>::MAX_UTC","value":null,"is_literal":false}}},"b:2:3737-0:2158:2335":{"id":"b:2:3737-0:2158:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2544":{"id":"0:2544","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[328,9],"end":[328,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:2546:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3104":{"id":"0:3104","crate_id":0,"name":null,"span":{"filename":"src/round.rs","begin":[247,23],"end":[247,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3223:686":{"id":"0:3223:686","crate_id":0,"name":"eq","span":{"filename":"src/month.rs","begin":[227,39],"end":[227,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:2766:2346":{"id":"b:2:2908-0:2766:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:732:4447":{"id":"0:732:4447","crate_id":0,"name":"to_fixed_offset","span":{"filename":"src/format/parsed.rs","begin":[860,4],"end":[862,5]},"visibility":"public","docs":"Returns a parsed fixed time zone offset out of given fields.\n\n# Errors\n\nThis method returns:\n- `OUT_OF_RANGE` if the offset is out of range for a `FixedOffset`.\n- `NOT_ENOUGH` if the offset field is not set.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:2145:2331":{"id":"b:2:2628-0:2145:2331","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13161:41643":{"id":"2:13161:41643","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2313:2343":{"id":"0:2313:2343","crate_id":0,"name":"Month","span":{"filename":"src/format/mod.rs","begin":[119,4],"end":[119,9]},"visibility":"default","docs":"Month (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:345:3161":{"id":"0:345:3161","crate_id":0,"name":"timestamp_micros","span":{"filename":"src/datetime/mod.rs","begin":[264,4],"end":[267,5]},"visibility":"public","docs":"Returns the number of non-leap-microseconds since January 1, 1970 UTC.\n\n# Example\n\n```\nuse chrono::{NaiveDate, Utc};\n\nlet dt = NaiveDate::from_ymd_opt(1970, 1, 1)\n    .unwrap()\n    .and_hms_micro_opt(0, 0, 1, 444)\n    .unwrap()\n    .and_local_timezone(Utc)\n    .unwrap();\nassert_eq!(dt.timestamp_micros(), 1_000_444);\n\nlet dt = NaiveDate::from_ymd_opt(2001, 9, 9)\n    .unwrap()\n    .and_hms_micro_opt(1, 46, 40, 555)\n    .unwrap()\n    .and_local_timezone(Utc)\n    .unwrap();\nassert_eq!(dt.timestamp_micros(), 1_000_000_000_000_555);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:2644:5704":{"id":"b:2:2898-0:2644:5704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1294:3498":{"id":"0:1294:3498","crate_id":0,"name":"with_nanosecond","span":{"filename":"src/naive/datetime/mod.rs","begin":[1567,4],"end":[1569,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.\n\nReturns `None` when the resulting `NaiveDateTime` would be invalid.\nAs with the [`NaiveDateTime::nanosecond`] method,\nthe input range can exceed 1,000,000,000 for leap seconds.\n\nSee also the [`NaiveTime::with_nanosecond`] method.\n\n# Errors\n\nReturns `None` if `nanosecond >= 2,000,000,000`.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, Timelike};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_milli_opt(12, 34, 59, 789).unwrap();\nassert_eq!(\n    dt.with_nanosecond(333_333_333),\n    Some(\n        NaiveDate::from_ymd_opt(2015, 9, 8)\n            .unwrap()\n            .and_hms_nano_opt(12, 34, 59, 333_333_333)\n            .unwrap()\n    )\n);\nassert_eq!(\n    dt.with_nanosecond(1_333_333_333), // leap second\n    Some(\n        NaiveDate::from_ymd_opt(2015, 9, 8)\n            .unwrap()\n            .and_hms_nano_opt(12, 34, 59, 1_333_333_333)\n            .unwrap()\n    )\n);\nassert_eq!(dt.with_nanosecond(2_000_000_000), None);\n```","links":{"`NaiveTime::with_nanosecond`":"0:1482:3498","`NaiveDateTime::nanosecond`":"0:1287:3196"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2321:2365":{"id":"0:2321:2365","crate_id":0,"name":"IsoWeek","span":{"filename":"src/format/mod.rs","begin":[127,4],"end":[127,11]},"visibility":"default","docs":"Week number in the ISO week date (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2898-0:2766:2346":{"id":"b:2:2898-0:2766:2346","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2902-0:3110:2345":{"id":"b:2:2902-0:3110:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:241:1280":{"id":"0:241:1280","crate_id":0,"name":"partial_cmp","span":{"filename":"src/date.rs","begin":[479,4],"end":[481,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Ordering","id":"2:30868:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:513":{"id":"0:513","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1651,0],"end":[1658,1]},"visibility":"default","docs":"Subtract-assign `std::time::Duration` from `DateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `DateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`DateTime<Tz>::checked_sub_signed`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_sub_signed`":"0:359:2995"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SubAssign","id":"2:33400:2567","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:515:1722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2913-0:2368:3074":{"id":"b:2:2913-0:2368:3074","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2916:136","2:2917:1788"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32165:9507-0:2501:3809":{"id":"a:2:32165:9507-0:2501:3809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1475:2935":{"id":"0:1475:2935","crate_id":0,"name":"hour","span":{"filename":"src/naive/time/mod.rs","begin":[917,4],"end":[919,5]},"visibility":"default","docs":"Returns the hour number from 0 to 23.\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nassert_eq!(NaiveTime::from_hms_opt(0, 0, 0).unwrap().hour(), 0);\nassert_eq!(NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap().hour(), 23);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1254:2611":{"id":"0:1254:2611","crate_id":0,"name":"MIN","span":{"filename":"src/naive/datetime/mod.rs","begin":[944,4],"end":[944,78]},"visibility":"public","docs":"The minimum possible `NaiveDateTime`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"generic":"Self"},"default":"_"}}},"b:2:3737-0:3062:2367":{"id":"b:2:3737-0:3062:2367","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:41968:9655-0:2165:2340":{"id":"a:2:41968:9655-0:2165:2340","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1554-0:2741:2366":{"id":"0:1554-0:2741:2366","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[570,25],"end":[570,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"naive::NaiveWeek","name":"NaiveWeek","id":"0:2741:2366","glob":false}}},"0:1229:3171":{"id":"0:1229:3171","crate_id":0,"name":"timestamp_nanos","span":{"filename":"src/naive/datetime/mod.rs","begin":[400,4],"end":[402,5]},"visibility":"public","docs":"Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.\n\nNote that this does *not* account for the timezone!\nThe true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.\n\n# Panics\n\nAn `i64` with nanosecond precision can span a range of ~584 years. This function panics on\nan out of range `NaiveDateTime`.\n\nThe dates that can be represented as nanoseconds are between 1677-09-21T00:12:43.145224192\nand 2262-04-11T23:47:16.854775807.","links":{},"attrs":["#[deprecated(since = \"0.4.31\", note =\n\"use `.and_utc().timestamp_nanos_opt()` instead\")]","#[inline]","#[must_use]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.31","note":"use `.and_utc().timestamp_nanos_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:338:2921":{"id":"0:338:2921","crate_id":0,"name":"from_utc","span":{"filename":"src/datetime/mod.rs","begin":[111,4],"end":[113,5]},"visibility":"public","docs":"Makes a new `DateTime` from its components: a `NaiveDateTime` in UTC and an `Offset`.","links":{},"attrs":["#[inline]","#[must_use]","#[deprecated(since = \"0.4.27\", note =\n\"Use TimeZone::from_utc_datetime() or DateTime::from_naive_utc_and_offset instead\")]"],"deprecation":{"since":"0.4.27","note":"Use TimeZone::from_utc_datetime() or DateTime::from_naive_utc_and_offset instead"},"inner":{"function":{"decl":{"inputs":[["datetime",{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["offset",{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1941:2352","args":null}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1123:198":{"id":"0:1123:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/date/mod.rs","begin":[2113,4],"end":[2113,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:3161:3919":{"id":"0:3161:3919","crate_id":0,"name":"March","span":{"filename":"src/month.rs","begin":[47,4],"end":[47,13]},"visibility":"default","docs":"March","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"2","value":"2"}}}},"0:1961:3013":{"id":"0:1961:3013","crate_id":0,"name":"from_local_date","span":{"filename":"src/offset/mod.rs","begin":[558,4],"end":[563,5]},"visibility":"default","docs":"Converts the local `NaiveDate` to the timezone-aware `Date` if possible.","links":{},"attrs":["#[allow(clippy::wrong_self_convention)]","#[deprecated(since = \"0.4.23\", note = \"use `from_local_datetime()` instead\")]","#[allow(deprecated)]"],"deprecation":{"since":"0.4.23","note":"use `from_local_datetime()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["local",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"MappedLocalTime","id":"0:1916:2368","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1449:2959":{"id":"0:1449:2959","crate_id":0,"name":"from_hms_micro_opt","span":{"filename":"src/naive/time/mod.rs","begin":[380,4],"end":[388,5]},"visibility":"public","docs":"Makes a new `NaiveTime` from hour, minute, second and microsecond.\n\nThe microsecond part is allowed to exceed 1,000,000,000 in order to represent a\n[leap second](#leap-second-handling), but only when `sec == 59`.\n\n# Errors\n\nReturns `None` on invalid hour, minute, second and/or microsecond.\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nlet from_hmsu_opt = NaiveTime::from_hms_micro_opt;\n\nassert!(from_hmsu_opt(0, 0, 0, 0).is_some());\nassert!(from_hmsu_opt(23, 59, 59, 999_999).is_some());\nassert!(from_hmsu_opt(23, 59, 59, 1_999_999).is_some()); // a leap second after 23:59:59\nassert!(from_hmsu_opt(24, 0, 0, 0).is_none());\nassert!(from_hmsu_opt(23, 60, 0, 0).is_none());\nassert!(from_hmsu_opt(23, 59, 60, 0).is_none());\nassert!(from_hmsu_opt(23, 59, 59, 2_000_000).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["micro",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13167:41645":{"id":"2:13167:41645","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:1978:2369":{"id":"0:1978:2369","crate_id":0,"name":"round","span":{"filename":"src/round.rs","begin":[4,0],"end":[827,1]},"visibility":"public","docs":"Functionality for rounding or truncating a `DateTime` by a `TimeDelta`.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:1990:2339","0:1998:2370","0:3093:2371"],"is_stripped":false}}},"0:56:2701":{"id":"0:56:2701","crate_id":0,"name":"num_nanoseconds","span":{"filename":"src/time_delta.rs","begin":[341,4],"end":[345,5]},"visibility":"public","docs":"Returns the total number of whole nanoseconds in the `TimeDelta`,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:340:2353":{"id":"0:340:2353","crate_id":0,"name":"date","span":{"filename":"src/datetime/mod.rs","begin":[152,4],"end":[154,5]},"visibility":"public","docs":"Retrieves the date component with an associated timezone.\n\nUnless you are immediately planning on turning this into a `DateTime`\nwith the same timezone you should use the [`date_naive`](DateTime::date_naive) method.\n\n[`NaiveDate`] is a more well-defined type, and has more traits implemented on it,\nso should be preferred to [`Date`] any time you truly want to operate on dates.\n\n# Panics\n\n[`DateTime`] internally stores the date and time in UTC with a [`NaiveDateTime`]. This\nmethod will panic if the offset from UTC would push the local date outside of the\nrepresentable range of a [`Date`].","links":{"DateTime::date_naive":"0:341:3128","`NaiveDateTime`":"0:2663:2349","`DateTime`":"0:2165:2340","`NaiveDate`":"0:2608:2348","`Date`":"0:2158:2335"},"attrs":["#[inline]","#[deprecated(since = \"0.4.23\", note = \"Use `date_naive()` instead\")]","#[allow(deprecated)]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"Use `date_naive()` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:2356:3731":{"id":"b:2:2908-0:2356:3731","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2198":{"id":"0:2198","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[507,16],"end":[507,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2506:3835":{"id":"0:2506:3835","crate_id":0,"name":"Maybe","span":{"filename":"src/format/mod.rs","begin":[324,4],"end":[324,9]},"visibility":"default","docs":"No separator when formatting, colon allowed when parsing.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"a:2:3121:246-0:2158:2335":{"id":"a:2:3121:246-0:2158:2335","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2902-0:2723:2350":{"id":"b:2:2902-0:2723:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13159:3404":{"id":"2:13159:3404","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1041:2925":{"id":"0:1041:2925","crate_id":0,"name":"and_time","span":{"filename":"src/naive/date/mod.rs","begin":[710,4],"end":[712,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.\n\n# Example\n\n```\nuse chrono::{NaiveDate, NaiveDateTime, NaiveTime};\n\nlet d = NaiveDate::from_ymd_opt(2015, 6, 3).unwrap();\nlet t = NaiveTime::from_hms_milli_opt(12, 34, 56, 789).unwrap();\n\nlet dt: NaiveDateTime = d.and_time(t);\nassert_eq!(dt.date(), d);\nassert_eq!(dt.time(), t);\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["time",{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32165:9507-0:2247:2887":{"id":"a:2:32165:9507-0:2247:2887","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"StrftimeItems","id":"0:2247:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1095:3038":{"id":"0:1095:3038","crate_id":0,"name":"with_month0","span":{"filename":"src/naive/date/mod.rs","begin":[1746,4],"end":[1749,5]},"visibility":"default","docs":"Makes a new `NaiveDate` with the month number (starting from 0) changed.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (for example `month0(3)` when day of the month is 31).\n- The value for `month0` is invalid.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_month0(9),\n    Some(NaiveDate::from_ymd_opt(2015, 10, 8).unwrap())\n);\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().with_month0(12), None); // No month 12\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 30).unwrap().with_month0(1), None); // No Feb 30\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1341":{"id":"0:1341","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[2108,0],"end":[2137,1]},"visibility":"default","docs":"Parsing a `str` into a `NaiveDateTime` uses the same format,\n[`%Y-%m-%dT%H:%M:%S%.f`](crate::format::strftime), as in `Debug`.\n\n# Example\n\n```\nuse chrono::{NaiveDateTime, NaiveDate};\n\nlet dt = NaiveDate::from_ymd_opt(2015, 9, 18).unwrap().and_hms_opt(23, 56, 4).unwrap();\nassert_eq!(\"2015-09-18T23:56:04\".parse::<NaiveDateTime>(), Ok(dt));\n\nlet dt = NaiveDate::from_ymd_opt(12345, 6, 7).unwrap().and_hms_milli_opt(7, 59, 59, 1_500).unwrap(); // leap second\nassert_eq!(\"+12345-6-7T7:59:60.5\".parse::<NaiveDateTime>(), Ok(dt));\n\nassert!(\"foo\".parse::<NaiveDateTime>().is_err());\n```","links":{"crate::format::strftime":"0:864:3658"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12808:3566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1342:135","0:1343:3567"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:960:135":{"id":"0:960:135","crate_id":0,"name":"Err","span":{"filename":"src/format/mod.rs","begin":[495,4],"end":[495,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1342:135":{"id":"0:1342:135","crate_id":0,"name":"Err","span":{"filename":"src/naive/datetime/mod.rs","begin":[2109,4],"end":[2109,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:41969:9654-0:2300:3683":{"id":"a:2:41969:9654-0:2300:3683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:3121:246-0:3228:2375":{"id":"a:2:3121:246-0:3228:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:2369:3740":{"id":"0:2369:3740","crate_id":0,"name":"ShortMonthName","span":{"filename":"src/format/mod.rs","begin":[179,4],"end":[179,18]},"visibility":"default","docs":"Abbreviated month names.\n\nPrints a three-letter-long name in the title case, reads the same name in any case.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:3737-0:2280:3666":{"id":"b:2:3737-0:2280:3666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:255:296":{"id":"0:255:296","crate_id":0,"name":"add_assign","span":{"filename":"src/date.rs","begin":[507,4],"end":[509,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2174:2886":{"id":"0:2174:2886","crate_id":0,"name":"DelayedFormat","span":{"filename":"src/format/formatting.rs","begin":[34,0],"end":[48,1]},"visibility":"public","docs":"A *temporary* object which can be used as an argument to `format!` or others.\nThis is normally constructed via `format` methods of each date and time type.","links":{},"attrs":["#[cfg(feature = \"alloc\")]"],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:604","a:2:32106:236-0:2174:2886","a:2:3121:246-0:2174:2886","a:2:3156:9919-0:2174:2886","a:2:32165:9507-0:2174:2886","a:2:41968:9655-0:2174:2886","a:2:41969:9654-0:2174:2886","b:2:2913-0:2174:2886","b:2:2898-0:2174:2886","b:2:2625-0:2174:2886","b:2:2902-0:2174:2886","b:2:2628-0:2174:2886","b:2:3737-0:2174:2886","b:2:2908-0:2174:2886","b:5:5863-0:2174:2886","0:2180","0:611"]}}},"0:2297":{"id":"0:2297","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[78,44],"end":[78,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2298:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2535:3683":{"id":"0:2535:3683","crate_id":0,"name":"Numeric","span":{"filename":"src/format/mod.rs","begin":[342,4],"end":[342,25]},"visibility":"default","docs":"Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\nthe parser simply ignores any padded whitespace and zeroes.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":{"tuple":["0:2537:1956","0:2538:1957"]},"discriminant":null}}},"0:1115:198":{"id":"0:1115:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/date/mod.rs","begin":[2011,4],"end":[2011,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:2:41969:9654-0:2644:5704":{"id":"a:2:41969:9654-0:2644:5704","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:123-0:2663:2349":{"id":"0:123-0:2663:2349","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[542,31],"end":[542,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::NaiveDateTime","name":"NaiveDateTime","id":"0:2663:2349","glob":false}}},"0:2351":{"id":"0:2351","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[102,31],"end":[102,36]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2352:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2541:1956":{"id":"0:2541:1956","crate_id":0,"name":"0","span":{"filename":"src/format/mod.rs","begin":[344,10],"end":[344,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"Fixed","id":"0:2368:3074","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:1487":{"id":"0:1487","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1222,0],"end":[1227,1]},"visibility":"default","docs":"Add-assign `TimeDelta` to `NaiveTime`.\n\nThis wraps around and never overflows or underflows.\nIn particular the addition ignores integral number of days.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"2:33333:2562","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1488:296"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2235:686":{"id":"0:2235:686","crate_id":0,"name":"eq","span":{"filename":"src/format/parsed.rs","begin":[128,16],"end":[128,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1020:5831":{"id":"0:1020:5831","crate_id":0,"name":"from_ymd","span":{"filename":"src/naive/date/mod.rs","begin":[167,4],"end":[169,5]},"visibility":"public","docs":"Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n(year, month and day).\n\n# Panics\n\nPanics if the specified calendar day does not exist, on invalid values for `month` or `day`,\nor if `year` is out of range for `NaiveDate`.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"use `from_ymd_opt()` instead\")]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_ymd_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"i32"}],["month",{"primitive":"u32"}],["day",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3173:3923":{"id":"0:3173:3923","crate_id":0,"name":"July","span":{"filename":"src/month.rs","begin":[55,4],"end":[55,12]},"visibility":"default","docs":"July","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"6","value":"6"}}}},"a:2:32106:236-0:2608:2348":{"id":"a:2:32106:236-0:2608:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:693:1163":{"id":"0:693:1163","crate_id":0,"name":"new","span":{"filename":"src/format/parsed.rs","begin":[193,4],"end":[195,5]},"visibility":"public","docs":"Returns the initial value of parsed parts.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:2123:2332":{"id":"b:2:2625-0:2123:2332","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:946:2362":{"id":"0:946:2362","crate_id":0,"name":"ParseResult","span":{"filename":"src/format/mod.rs","begin":[434,0],"end":[434,48]},"visibility":"public","docs":"Same as `Result<T, ParseError>`.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}}},"b:2:2628-0:2741:2366":{"id":"b:2:2628-0:2741:2366","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveWeek","id":"0:2741:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2405:3787":{"id":"0:2405:3787","crate_id":0,"name":"RFC3339","span":{"filename":"src/format/mod.rs","begin":[248,4],"end":[248,11]},"visibility":"default","docs":"RFC 3339 & ISO 8601 date and time syntax.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"b:2:2625-0:3145:2373":{"id":"b:2:2625-0:3145:2373","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13206:10011":{"id":"2:13206:10011","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41876:190","prim@char":"1:12332:459","self::pattern":"2:12848:9229"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:9245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2311:3697":{"id":"0:2311:3697","crate_id":0,"name":"IsoYearMod100","span":{"filename":"src/format/mod.rs","begin":[117,4],"end":[117,17]},"visibility":"default","docs":"Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"2:13246:41653":{"id":"2:13246:41653","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12848:9229","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::match_indices":"2:13243:41652"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43924:9269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:9245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2331:3715":{"id":"0:2331:3715","crate_id":0,"name":"Hour12","span":{"filename":"src/format/mod.rs","begin":[137,4],"end":[137,10]},"visibility":"default","docs":"Hour number in the 12-hour clocks (FW=PW=2).","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:267":{"id":"0:267","crate_id":0,"name":null,"span":{"filename":"src/date.rs","begin":[537,0],"end":[542,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:269:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:381:3317":{"id":"0:381:3317","crate_id":0,"name":"from_timestamp_millis","span":{"filename":"src/datetime/mod.rs","begin":[785,4],"end":[789,5]},"visibility":"public","docs":"Makes a new `DateTime<Utc>` from the number of non-leap milliseconds\nsince January 1, 1970 0:00:00.000 UTC (aka \"UNIX timestamp\").\n\nThis is guaranteed to round-trip with [`timestamp_millis`](DateTime::timestamp_millis).\n\nIf you need to create a `DateTime` with a [`TimeZone`] different from [`Utc`], use\n[`TimeZone::timestamp_millis_opt`] or [`DateTime::with_timezone`].\n\n# Errors\n\nReturns `None` on out-of-range number of milliseconds, otherwise returns `Some(DateTime {...})`.\n\n# Example\n\n```\nuse chrono::DateTime;\n\nlet dt = DateTime::from_timestamp_millis(947638923004).expect(\"invalid timestamp\");\n\nassert_eq!(dt.to_string(), \"2000-01-12 01:02:03.004 UTC\");\nassert_eq!(DateTime::from_timestamp_millis(dt.timestamp_millis()).unwrap(), dt);\n```","links":{"`Utc`":"0:3049:2347","`TimeZone::timestamp_millis_opt`":"0:1954:3582","`DateTime::with_timezone`":"0:353:2987","`TimeZone`":"0:1941:2352","DateTime::timestamp_millis":"0:344:3153"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["millis",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:519:1721":{"id":"0:519:1721","crate_id":0,"name":"sub","span":{"filename":"src/datetime/mod.rs","begin":[1669,4],"end":[1673,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2231":{"id":"0:2231","crate_id":0,"name":null,"span":{"filename":"src/format/parsed.rs","begin":[128,9],"end":[128,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2232:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2233":{"id":"0:2233","crate_id":0,"name":null,"span":{"filename":"src/format/parsed.rs","begin":[128,16],"end":[128,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3121:246-0:2501:3809":{"id":"a:2:3121:246-0:2501:3809","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:1047:2957":{"id":"0:1047:2957","crate_id":0,"name":"and_hms_micro_opt","span":{"filename":"src/naive/date/mod.rs","begin":[859,4],"end":[868,5]},"visibility":"public","docs":"Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.\n\nThe microsecond part is allowed to exceed 1,000,000,000 in order to represent a [leap second](\n./struct.NaiveTime.html#leap-second-handling), but only when `sec == 59`.\n\n# Errors\n\nReturns `None` on invalid hour, minute, second and/or microsecond.\n\n# Example\n\n```\nuse chrono::NaiveDate;\n\nlet d = NaiveDate::from_ymd_opt(2015, 6, 3).unwrap();\nassert!(d.and_hms_micro_opt(12, 34, 56, 789_012).is_some());\nassert!(d.and_hms_micro_opt(12, 34, 59, 1_789_012).is_some()); // leap second\nassert!(d.and_hms_micro_opt(12, 34, 59, 2_789_012).is_none());\nassert!(d.and_hms_micro_opt(12, 34, 60, 789_012).is_none());\nassert!(d.and_hms_micro_opt(12, 60, 56, 789_012).is_none());\nassert!(d.and_hms_micro_opt(24, 34, 56, 789_012).is_none());\n```","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["micro",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:5863-0:2663:2349":{"id":"b:5:5863-0:2663:2349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"5:5861:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:5865:1763"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2771":{"id":"0:2771","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[22,20],"end":[22,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2773":{"id":"0:2773","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[22,24],"end":[22,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2774:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2908-0:2521:172":{"id":"b:2:2908-0:2521:172","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:42:2652":{"id":"0:42:2652","crate_id":0,"name":"seconds","span":{"filename":"src/time_delta.rs","begin":[207,4],"end":[209,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of seconds.\n\n# Panics\n\nPanics when `seconds` is more than `i64::MAX / 1_000` or less than `-i64::MAX / 1_000`\n(in this context, this is the same as `i64::MIN / 1_000` due to rounding).","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seconds",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13240:41651":{"id":"2:13240:41651","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12848:9229","`DoubleEndedIterator`":"2:8230:129","prim@char":"1:12332:459","str::matches":"2:13237:8146"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43978:9267","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12869:9245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1089:3033":{"id":"0:1089:3033","crate_id":0,"name":"ordinal","span":{"filename":"src/naive/date/mod.rs","begin":[1584,4],"end":[1586,5]},"visibility":"default","docs":"Returns the day of year starting from 1.\n\nThe return value ranges from 1 to 366. (The last day of year differs by years.)\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().ordinal(), 251);\nassert_eq!(NaiveDate::from_ymd_opt(-308, 3, 14).unwrap().ordinal(), 74);\n```\n\nCombined with [`NaiveDate::pred_opt`](#method.pred_opt),\none can determine the number of days in a particular year.\n(Note that this panics when `year` is out of range.)\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nfn ndays_in_year(year: i32) -> u32 {\n    // the first day of the next year...\n    let d = NaiveDate::from_ymd_opt(year + 1, 1, 1).unwrap();\n\n    // ...is preceded by the last day of the original year\n    d.pred_opt().unwrap().ordinal()\n}\n\nassert_eq!(ndays_in_year(2015), 365);\nassert_eq!(ndays_in_year(2016), 366);\nassert_eq!(ndays_in_year(2017), 365);\nassert_eq!(ndays_in_year(2000), 366);\nassert_eq!(ndays_in_year(2100), 365);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2343:1956":{"id":"0:2343:1956","crate_id":0,"name":"0","span":{"filename":"src/format/mod.rs","begin":[154,13],"end":[154,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:1880:7752":{"id":"0:1880:7752","crate_id":0,"name":"offset_from_utc_date","span":{"filename":"src/offset/local/mod.rs","begin":[183,4],"end":[186,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["utc",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1213":{"id":"0:1213","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[83,0],"end":[952,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1214:1163","0:1215:3304","0:1216:3317","0:1217:3329","0:1218:3340","0:1219:6535","0:1220:3421","0:1221:3072","0:1224:2353","0:1225:2415","0:1226:3138","0:1227:3153","0:1228:3161","0:1229:3171","0:1230:3172","0:1231:3155","0:1232:3163","0:1233:3189","0:1234:2993","0:1235:3216","0:1236:3237","0:1237:3540","0:1240:2995","0:1241:3223","0:1242:3226","0:1243:3230","0:1244:3000","0:1245:3015","0:1249:801","0:1251:3219","0:1253:3308","0:1254:2611","0:1255:2612","0:1256:3070"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:8199:10015":{"id":"2:8199:10015","crate_id":2,"name":"IntoIter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"I"}}}},"0:3233":{"id":"0:3233","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[245,16],"end":[245,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3234:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2578:3859":{"id":"0:2578:3859","crate_id":0,"name":"ParseErrorKind","span":{"filename":"src/format/mod.rs","begin":[399,0],"end":[431,1]},"visibility":"public","docs":"The category of parse error","links":{},"attrs":["#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:2579:2427","0:2581:3866","0:2583:3871","0:2585:3873","0:2587:3875","0:2589:3877","0:2591:3879"],"impls":["a:2:32106:236-0:2578:3859","a:2:3121:246-0:2578:3859","a:2:3156:9919-0:2578:3859","a:2:32165:9507-0:2578:3859","a:2:41968:9655-0:2578:3859","a:2:41969:9654-0:2578:3859","b:2:2913-0:2578:3859","b:2:2898-0:2578:3859","b:2:2625-0:2578:3859","b:2:2902-0:2578:3859","b:2:2628-0:2578:3859","b:2:3737-0:2578:3859","b:2:2908-0:2578:3859","b:5:736-0:2578:3859","0:2599","0:2600","0:2597","0:2605","0:2602","0:2595","0:2604"]}}},"0:2751":{"id":"0:2751","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[134,16],"end":[134,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2100:2935":{"id":"0:2100:2935","crate_id":0,"name":"hour","span":{"filename":"src/traits.rs","begin":[269,4],"end":[269,26]},"visibility":"default","docs":"Returns the hour number from 0 to 23.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:2651":{"id":"0:2651","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2164,29],"end":[2164,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2652:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2010:8619":{"id":"0:2010:8619","crate_id":0,"name":"duration_trunc","span":{"filename":"src/round.rs","begin":[177,4],"end":[179,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["duration",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:1998:2370","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3135":{"id":"0:3135","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[32,20],"end":[32,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1130:6364":{"id":"0:1130:6364","crate_id":0,"name":"size_hint","span":{"filename":"src/naive/date/mod.rs","begin":[2144,4],"end":[2147,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"tuple":[{"primitive":"usize"},{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:164:2946":{"id":"0:164:2946","crate_id":0,"name":"and_hms_milli","span":{"filename":"src/date.rs","begin":[121,4],"end":[123,5]},"visibility":"public","docs":"Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.\n\nPanics on invalid hour, minute, second and/or millisecond.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note = \"Use and_hms_milli_opt() instead\")]","#[inline]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"Use and_hms_milli_opt() instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["hour",{"primitive":"u32"}],["min",{"primitive":"u32"}],["sec",{"primitive":"u32"}],["milli",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:2562:2361":{"id":"b:2:2628-0:2562:2361","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2727":{"id":"0:2727","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[215,9],"end":[215,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2675:200","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2728:686"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1483:3142":{"id":"0:1483:3142","crate_id":0,"name":"num_seconds_from_midnight","span":{"filename":"src/naive/time/mod.rs","begin":[1137,4],"end":[1139,5]},"visibility":"default","docs":"Returns the number of non-leap seconds past the last midnight.\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nassert_eq!(NaiveTime::from_hms_opt(1, 2, 3).unwrap().num_seconds_from_midnight(), 3723);\nassert_eq!(\n    NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap().num_seconds_from_midnight(),\n    86164\n);\nassert_eq!(\n    NaiveTime::from_hms_milli_opt(23, 59, 59, 1_000).unwrap().num_seconds_from_midnight(),\n    86399\n);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2203":{"id":"0:2203","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[507,33],"end":[507,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2625-0:2475:3806":{"id":"b:2:2625-0:2475:3806","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1594":{"id":"0:1594","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[127,0],"end":[147,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["datetime_from_str","timestamp_millis","from_local_datetime","yo","from_utc_date","from_local_date","timestamp","from_utc_datetime","timestamp_opt","timestamp_micros","ymd","isoywd_opt","timestamp_millis_opt","with_ymd_and_hms","isoywd","yo_opt","ymd_opt","timestamp_nanos"],"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1595:2351","0:1596:2984","0:1597:7744","0:1598:7746","0:1599:7752","0:1600:4477"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2671":{"id":"0:2671","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[69,24],"end":[69,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2672:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:3121:246-0:2578:3859":{"id":"a:2:3121:246-0:2578:3859","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3121:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:258:198":{"id":"0:258:198","crate_id":0,"name":"Output","span":{"filename":"src/date.rs","begin":[513,4],"end":[513,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:114-0:2080:2342":{"id":"0:114-0:2080:2342","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[540,20],"end":[540,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Datelike","name":"Datelike","id":"0:2080:2342","glob":false}}},"0:1510":{"id":"0:1510","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1458,0],"end":[1465,1]},"visibility":"default","docs":"Subtracts another `NaiveTime` from the current time.\nReturns a `TimeDelta` within +/- 1 day.\nThis does not overflow or underflow at all.\n\nAs a part of Chrono's [leap second handling](#leap-second-handling),\nthe subtraction assumes that **there is no leap second ever**,\nexcept when any of the `NaiveTime`s themselves represents a leap second\nin which case the assumption becomes that\n**there are exactly one (or two) leap second(s) ever**.\n\nThe implementation is a wrapper around\n[`NaiveTime::signed_duration_since`](#method.signed_duration_since).\n\n# Example\n\n```\nuse chrono::{NaiveTime, TimeDelta};\n\nlet from_hmsm = |h, m, s, milli| NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap();\n\nassert_eq!(from_hmsm(3, 5, 7, 900) - from_hmsm(3, 5, 7, 900), TimeDelta::zero());\nassert_eq!(\n    from_hmsm(3, 5, 7, 900) - from_hmsm(3, 5, 7, 875),\n    TimeDelta::try_milliseconds(25).unwrap()\n);\nassert_eq!(\n    from_hmsm(3, 5, 7, 900) - from_hmsm(3, 5, 6, 925),\n    TimeDelta::try_milliseconds(975).unwrap()\n);\nassert_eq!(\n    from_hmsm(3, 5, 7, 900) - from_hmsm(3, 5, 0, 900),\n    TimeDelta::try_seconds(7).unwrap()\n);\nassert_eq!(\n    from_hmsm(3, 5, 7, 900) - from_hmsm(3, 0, 7, 900),\n    TimeDelta::try_seconds(5 * 60).unwrap()\n);\nassert_eq!(\n    from_hmsm(3, 5, 7, 900) - from_hmsm(0, 5, 7, 900),\n    TimeDelta::try_seconds(3 * 3600).unwrap()\n);\nassert_eq!(\n    from_hmsm(3, 5, 7, 900) - from_hmsm(4, 5, 7, 900),\n    TimeDelta::try_seconds(-3600).unwrap()\n);\nassert_eq!(\n    from_hmsm(3, 5, 7, 900) - from_hmsm(2, 4, 6, 800),\n    TimeDelta::try_seconds(3600 + 60 + 1).unwrap() + TimeDelta::try_milliseconds(100).unwrap()\n);\n```\n\nLeap seconds are handled, but the subtraction assumes that\nthere were no other leap seconds happened.\n\n```\n# use chrono::{TimeDelta, NaiveTime};\n# let from_hmsm = |h, m, s, milli| { NaiveTime::from_hms_milli_opt(h, m, s, milli).unwrap() };\nassert_eq!(from_hmsm(3, 0, 59, 1_000) - from_hmsm(3, 0, 59, 0), TimeDelta::try_seconds(1).unwrap());\nassert_eq!(from_hmsm(3, 0, 59, 1_500) - from_hmsm(3, 0, 59, 0),\n           TimeDelta::try_milliseconds(1500).unwrap());\nassert_eq!(from_hmsm(3, 0, 59, 1_000) - from_hmsm(3, 0, 0, 0), TimeDelta::try_seconds(60).unwrap());\nassert_eq!(from_hmsm(3, 0, 0, 0) - from_hmsm(2, 59, 59, 1_000), TimeDelta::try_seconds(1).unwrap());\nassert_eq!(from_hmsm(3, 0, 59, 1_000) - from_hmsm(2, 59, 59, 1_000),\n           TimeDelta::try_seconds(61).unwrap());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1511:198","0:1512:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1478:3196":{"id":"0:1478:3196","crate_id":0,"name":"nanosecond","span":{"filename":"src/naive/time/mod.rs","begin":[993,4],"end":[995,5]},"visibility":"default","docs":"Returns the number of nanoseconds since the whole non-leap second.\nThe range from 1,000,000,000 to 1,999,999,999 represents\nthe [leap second](#leap-second-handling).\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nassert_eq!(NaiveTime::from_hms_opt(0, 0, 0).unwrap().nanosecond(), 0);\nassert_eq!(\n    NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap().nanosecond(),\n    12_345_678\n);\n```\n\nLeap seconds may have seemingly out-of-range return values.\nYou can reduce the range with `time.nanosecond() % 1_000_000_000`, or\nuse the proper [formatting method](#method.format) to get a human-readable representation.\n\n```\n# #[cfg(feature = \"alloc\")] {\n# use chrono::{NaiveTime, Timelike};\nlet leap = NaiveTime::from_hms_milli_opt(23, 59, 59, 1_000).unwrap();\nassert_eq!(leap.nanosecond(), 1_000_000_000);\nassert_eq!(leap.format(\"%H:%M:%S%.9f\").to_string(), \"23:59:60.000000000\");\n# }\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:3228:2375":{"id":"b:2:2625-0:3228:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1221:3072":{"id":"0:1221:3072","crate_id":0,"name":"parse_and_remainder","span":{"filename":"src/naive/datetime/mod.rs","begin":[315,4],"end":[319,5]},"visibility":"public","docs":"Parses a string with the specified format string and returns a new `NaiveDateTime`, and a\nslice with the remaining portion of the string.\nSee the [`format::strftime` module](crate::format::strftime)\non the supported escape sequences.\n\nSimilar to [`parse_from_str`](#method.parse_from_str).\n\n# Example\n\n```rust\n# use chrono::{NaiveDate, NaiveDateTime};\nlet (datetime, remainder) = NaiveDateTime::parse_and_remainder(\n    \"2015-02-18 23:16:09 trailing text\",\n    \"%Y-%m-%d %H:%M:%S\",\n)\n.unwrap();\nassert_eq!(\n    datetime,\n    NaiveDate::from_ymd_opt(2015, 2, 18).unwrap().and_hms_opt(23, 16, 9).unwrap()\n);\nassert_eq!(remainder, \" trailing text\");\n```","links":{"crate::format::strftime":"0:864:3658"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2623":{"id":"0:2623","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[94,53],"end":[94,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2624:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3147":{"id":"0:3147","crate_id":0,"name":null,"span":{"filename":"src/weekday.rs","begin":[231,9],"end":[231,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseWeekdayError","id":"0:3145:2373","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3148:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2091:3036":{"id":"0:2091:3036","crate_id":0,"name":"with_year","span":{"filename":"src/traits.rs","begin":[119,4],"end":[119,51]},"visibility":"default","docs":"Makes a new value with the year number changed, while keeping the same month and day.\n\nThis method assumes you want to work on the date as a year-month-day value. Don't use it if\nyou want the ordinal to stay the same after changing the year, of if you want the week and\nweekday values to stay the same.\n\n# Errors\n\nReturns `None` when:\n\n- The resulting date does not exist (February 29 in a non-leap year).\n- The year is out of range for [`NaiveDate`].\n- In case of [`DateTime<Tz>`] if the resulting date and time fall within a timezone\n  transition such as from DST to standard time.\n\n[`NaiveDate`]: crate::NaiveDate\n[`DateTime<Tz>`]: crate::DateTime\n\n# Examples\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2020, 5, 13).unwrap().with_year(2023).unwrap(),\n    NaiveDate::from_ymd_opt(2023, 5, 13).unwrap()\n);\n// Resulting date 2023-02-29 does not exist:\nassert!(NaiveDate::from_ymd_opt(2020, 2, 29).unwrap().with_year(2023).is_none());\n\n// Don't use `with_year` if you want the ordinal date to stay the same:\nassert_ne!(\n    NaiveDate::from_yo_opt(2020, 100).unwrap().with_year(2023).unwrap(),\n    NaiveDate::from_yo_opt(2023, 100).unwrap() // result is 2023-101\n);\n```","links":{"crate::NaiveDate":"0:2608:2348","crate::DateTime":"0:2165:2340"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2628-0:2280:3666":{"id":"b:2:2628-0:2280:3666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1303:296":{"id":"0:1303:296","crate_id":0,"name":"add_assign","span":{"filename":"src/naive/datetime/mod.rs","begin":[1670,4],"end":[1672,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:620:3662":{"id":"0:620:3662","crate_id":0,"name":"format_item","span":{"filename":"src/format/formatting.rs","begin":[169,0],"end":[185,1]},"visibility":"public","docs":"Formats single formatting item","links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[deprecated(since = \"0.4.32\", note = \"Use DelayedFormat::fmt instead\")]"],"deprecation":{"since":"0.4.32","note":"Use DelayedFormat::fmt instead"},"inner":{"function":{"decl":{"inputs":[["w",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["date",{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"crate::NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["time",{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"crate::NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}}}],["off",{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"tuple":[{"resolved_path":{"name":"String","id":"5:7642:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"resolved_path":{"name":"crate::FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]}}}}],"bindings":[]}}}}],["item",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"super::Item","id":"0:2521:172","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:927-0:2174:2886":{"id":"0:927-0:2174:2886","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[65,42],"end":[65,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"formatting::DelayedFormat","name":"DelayedFormat","id":"0:2174:2886","glob":false}}},"0:2759":{"id":"0:2759","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[134,39],"end":[134,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2052":{"id":"0:2052","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[68,0],"end":[165,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Month","id":"0:3154:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2053:2972","0:2054:2979","0:2055:8853","0:2056:1137"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1090:3034":{"id":"0:1090:3034","crate_id":0,"name":"ordinal0","span":{"filename":"src/naive/date/mod.rs","begin":[1601,4],"end":[1603,5]},"visibility":"default","docs":"Returns the day of year starting from 0.\n\nThe return value ranges from 0 to 365. (The last day of year differs by years.)\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().ordinal0(), 250);\nassert_eq!(NaiveDate::from_ymd_opt(-308, 3, 14).unwrap().ordinal0(), 73);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2628-0:2209:3075":{"id":"b:2:2628-0:2209:3075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2659":{"id":"0:2659","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2164,58],"end":[2164,60]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:736-0:3049:2347":{"id":"b:5:736-0:3049:2347","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:3139:463":{"id":"0:3139:463","crate_id":0,"name":"clone","span":{"filename":"src/weekday.rs","begin":[32,30],"end":[32,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2470":{"id":"0:2470","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[283,40],"end":[283,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetFormat","id":"0:2457:3803","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32165:9507-0:2746:2364":{"id":"a:2:32165:9507-0:2746:2364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:452:3476":{"id":"0:452:3476","crate_id":0,"name":"minute","span":{"filename":"src/datetime/mod.rs","begin":[1338,4],"end":[1340,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1132":{"id":"0:1132","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2152,0],"end":[2159,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["nth_back","rfold","advance_back_by","try_rfold","rfind"],"trait":{"name":"DoubleEndedIterator","id":"2:8230:129","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1133:6367"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2628-0:2663:2349":{"id":"b:2:2628-0:2663:2349","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2715":{"id":"0:2715","crate_id":0,"name":null,"span":{"filename":"src/naive/isoweek.rs","begin":[19,36],"end":[19,39]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2711:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2716:470"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1603":{"id":"0:1603","crate_id":0,"name":null,"span":{"filename":"src/offset/fixed.rs","begin":[155,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1604:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:435:3036":{"id":"0:435:3036","crate_id":0,"name":"with_year","span":{"filename":"src/datetime/mod.rs","begin":[1226,4],"end":[1231,5]},"visibility":"default","docs":"Makes a new `DateTime` with the year number changed, while keeping the same month and day.\n\nSee also the [`NaiveDate::with_year`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (February 29 in a non-leap year).\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.\n- The resulting UTC datetime would be out of range.\n- The resulting local datetime would be out of range (unless the year remains the same).","links":{"`NaiveDate::with_year`":"0:1093:3036"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["year",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:548:3567":{"id":"0:548:3567","crate_id":0,"name":"from_str","span":{"filename":"src/datetime/mod.rs","begin":[1810,4],"end":[1812,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:490:296":{"id":"0:490:296","crate_id":0,"name":"add_assign","span":{"filename":"src/datetime/mod.rs","begin":[1513,4],"end":[1518,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:41969:9654-0:2209:3075":{"id":"a:2:41969:9654-0:2209:3075","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:41969:9654","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Parsed","id":"0:2209:3075","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2625-0:2356:3731":{"id":"b:2:2625-0:2356:3731","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalNumeric","id":"0:2356:3731","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3737-0:2746:2364":{"id":"b:2:3737-0:2746:2364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3735:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3739:1803"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:107-0:2158:2335":{"id":"0:107-0:2158:2335","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[533,4],"end":[533,24]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"crate::Date","name":"Date","id":"0:2158:2335","glob":false}}},"0:1921:7654":{"id":"0:1921:7654","crate_id":0,"name":"earliest","span":{"filename":"src/offset/mod.rs","begin":[98,4],"end":[103,5]},"visibility":"public","docs":"Returns the earliest possible result of a the time zone mapping.\n\n# Errors\n\nReturns `None` if local time falls in a _gap_ in the local time, or if there was an error.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:341:3128":{"id":"0:341:3128","crate_id":0,"name":"date_naive","span":{"filename":"src/datetime/mod.rs","begin":[176,4],"end":[178,5]},"visibility":"public","docs":"Retrieves the date component.\n\n# Panics\n\n[`DateTime`] internally stores the date and time in UTC with a [`NaiveDateTime`]. This\nmethod will panic if the offset from UTC would push the local date outside of the\nrepresentable range of a [`NaiveDate`].\n\n# Example\n\n```\nuse chrono::prelude::*;\n\nlet date: DateTime<Utc> = Utc.with_ymd_and_hms(2020, 1, 1, 0, 0, 0).unwrap();\nlet other: DateTime<FixedOffset> =\n    FixedOffset::east_opt(23).unwrap().with_ymd_and_hms(2020, 1, 1, 0, 0, 0).unwrap();\nassert_eq!(date.date_naive(), other.date_naive());\n```","links":{"`NaiveDateTime`":"0:2663:2349","`DateTime`":"0:2165:2340","`NaiveDate`":"0:2608:2348"},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1084:3029":{"id":"0:1084:3029","crate_id":0,"name":"year","span":{"filename":"src/naive/date/mod.rs","begin":[1454,4],"end":[1456,5]},"visibility":"default","docs":"Returns the year number in the [calendar date](#calendar-date).\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nassert_eq!(NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().year(), 2015);\nassert_eq!(NaiveDate::from_ymd_opt(-308, 3, 14).unwrap().year(), -308); // 309 BCE\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2679":{"id":"0:2679","crate_id":0,"name":null,"span":{"filename":"src/naive/datetime/mod.rs","begin":[69,53],"end":[69,58]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2680:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1518":{"id":"0:1518","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1604,0],"end":[1630,1]},"visibility":"default","docs":"Parsing a `str` into a `NaiveTime` uses the same format,\n[`%H:%M:%S%.f`](crate::format::strftime), as in `Debug` and `Display`.\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nlet t = NaiveTime::from_hms_opt(23, 56, 4).unwrap();\nassert_eq!(\"23:56:04\".parse::<NaiveTime>(), Ok(t));\n\nlet t = NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap();\nassert_eq!(\"23:56:4.012345678\".parse::<NaiveTime>(), Ok(t));\n\nlet t = NaiveTime::from_hms_nano_opt(23, 59, 59, 1_234_567_890).unwrap(); // leap second\nassert_eq!(\"23:59:60.23456789\".parse::<NaiveTime>(), Ok(t));\n\n// Seconds are optional\nlet t = NaiveTime::from_hms_opt(23, 56, 0).unwrap();\nassert_eq!(\"23:56\".parse::<NaiveTime>(), Ok(t));\n\nassert!(\"foo\".parse::<NaiveTime>().is_err());\n```","links":{"crate::format::strftime":"0:864:3658"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"2:12808:3566","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1519:135","0:1520:3567"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2395:3775":{"id":"0:2395:3775","crate_id":0,"name":"TimezoneOffsetTripleColon","span":{"filename":"src/format/mod.rs","begin":[231,4],"end":[231,29]},"visibility":"default","docs":"Offset from the local time to UTC without minutes (`+09` or `-04` or `+00`).\n\nIn the parser, the colon can be omitted and/or surrounded with any amount of whitespace.\nThe offset is limited from `-24` to `+24`,\nwhich is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1516":{"id":"0:1516","crate_id":0,"name":null,"span":{"filename":"src/naive/time/mod.rs","begin":[1575,0],"end":[1579,1]},"visibility":"default","docs":"The `Display` output of the naive time `t` is the same as\n[`t.format(\"%H:%M:%S%.f\")`](crate::format::strftime).\n\nThe string printed can be readily parsed via the `parse` method on `str`.\n\nIt should be noted that, for leap seconds not on the minute boundary,\nit may print a representation not distinguishable from non-leap seconds.\nThis doesn't matter in practice, since such leap seconds never happened.\n(By the time of the first leap second on 1972-06-30,\nevery time zone offset around the world has standardized to the 5-minute alignment.)\n\n# Example\n\n```\nuse chrono::NaiveTime;\n\nassert_eq!(format!(\"{}\", NaiveTime::from_hms_opt(23, 56, 4).unwrap()), \"23:56:04\");\nassert_eq!(\n    format!(\"{}\", NaiveTime::from_hms_milli_opt(23, 56, 4, 12).unwrap()),\n    \"23:56:04.012\"\n);\nassert_eq!(\n    format!(\"{}\", NaiveTime::from_hms_micro_opt(23, 56, 4, 1234).unwrap()),\n    \"23:56:04.001234\"\n);\nassert_eq!(\n    format!(\"{}\", NaiveTime::from_hms_nano_opt(23, 56, 4, 123456).unwrap()),\n    \"23:56:04.000123456\"\n);\n```\n\nLeap seconds may also be used.\n\n```\n# use chrono::NaiveTime;\nassert_eq!(\n    format!(\"{}\", NaiveTime::from_hms_milli_opt(6, 59, 59, 1_500).unwrap()),\n    \"06:59:60.500\"\n);\n```","links":{"crate::format::strftime":"0:864:3658"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"2:10284:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:1517:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:736-0:2723:2350":{"id":"b:5:736-0:2723:2350","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:540":{"id":"0:540","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1751,0],"end":[1756,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:542:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:538:198":{"id":"0:538:198","crate_id":0,"name":"Output","span":{"filename":"src/datetime/mod.rs","begin":[1744,4],"end":[1744,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}}},"0:2509:788":{"id":"0:2509:788","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[317,9],"end":[317,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:536":{"id":"0:536","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1743,0],"end":[1749,1]},"visibility":"default","docs":"Subtract `Days` from `DateTime`.\n\n# Panics\n\nPanics if:\n- The resulting date would be out of range.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.\n\nStrongly consider using `DateTime<Tz>::checked_sub_days` to get an `Option` instead.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Days","id":"0:2746:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:538:198","0:539:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2399:3782":{"id":"0:2399:3782","crate_id":0,"name":"TimezoneOffset","span":{"filename":"src/format/mod.rs","begin":[241,4],"end":[241,18]},"visibility":"default","docs":"Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\nParsing allows an optional colon.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:359:2995":{"id":"0:359:2995","crate_id":0,"name":"checked_sub_signed","span":{"filename":"src/datetime/mod.rs","begin":[479,4],"end":[483,5]},"visibility":"public","docs":"Subtracts given `TimeDelta` from the current date and time.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["rhs",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:3032":{"id":"0:210:3032","crate_id":0,"name":"day0","span":{"filename":"src/date.rs","begin":[410,4],"end":[412,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223:3040":{"id":"0:223:3040","crate_id":0,"name":"with_day0","span":{"filename":"src/date.rs","begin":[451,4],"end":[453,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Date","id":"0:2158:2335","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2305:3690":{"id":"0:2305:3690","crate_id":0,"name":"YearMod100","span":{"filename":"src/format/mod.rs","begin":[110,4],"end":[110,14]},"visibility":"default","docs":"Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:2512:463":{"id":"0:2512:463","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[317,22],"end":[317,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Colons","id":"0:2501:3809","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2598:463":{"id":"0:2598:463","crate_id":0,"name":"clone","span":{"filename":"src/format/mod.rs","begin":[398,16],"end":[398,21]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"ParseErrorKind","id":"0:2578:3859","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1607-0:2766:2346":{"id":"0:1607-0:2766:2346","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[30,0],"end":[30,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"self::fixed::FixedOffset","name":"FixedOffset","id":"0:2766:2346","glob":false}}},"a:2:32106:236-0:2183:2341":{"id":"a:2:32106:236-0:2183:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32106:236","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:457:3485":{"id":"0:457:3485","crate_id":0,"name":"with_minute","span":{"filename":"src/datetime/mod.rs","begin":[1375,4],"end":[1377,5]},"visibility":"default","docs":"Makes a new `DateTime` with the minute number changed.\n\nSee also the [`NaiveTime::with_minute`] method.\n\n# Errors\n\n- The value for `minute` is invalid.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.","links":{"`NaiveTime::with_minute`":"0:1480:3485"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["min",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2613":{"id":"0:2613","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[94,20],"end":[94,22]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2615":{"id":"0:2615","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[94,24],"end":[94,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2616:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:120-0:3049:2347":{"id":"0:120-0:3049:2347","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[541,33],"end":[541,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::Utc","name":"Utc","id":"0:3049:2347","glob":false}}},"0:1481:3491":{"id":"0:1481:3491","crate_id":0,"name":"with_second","span":{"filename":"src/naive/time/mod.rs","begin":[1070,4],"end":[1076,5]},"visibility":"default","docs":"Makes a new `NaiveTime` with the second number changed.\n\nAs with the [`second`](#method.second) method,\nthe input range is restricted to 0 through 59.\n\n# Errors\n\nReturns `None` if the value for `second` is invalid.\n\n# Example\n\n```\nuse chrono::{NaiveTime, Timelike};\n\nlet dt = NaiveTime::from_hms_nano_opt(23, 56, 4, 12_345_678).unwrap();\nassert_eq!(\n    dt.with_second(17),\n    Some(NaiveTime::from_hms_nano_opt(23, 56, 17, 12_345_678).unwrap())\n);\nassert_eq!(dt.with_second(60), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["sec",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveTime","id":"0:2723:2350","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2649":{"id":"0:2649","crate_id":0,"name":null,"span":{"filename":"src/naive/date/mod.rs","begin":[2164,22],"end":[2164,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2650:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2363:858":{"id":"0:2363:858","crate_id":0,"name":"hash","span":{"filename":"src/format/mod.rs","begin":[158,20],"end":[158,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2631:463":{"id":"0:2631:463","crate_id":0,"name":"clone","span":{"filename":"src/naive/date/mod.rs","begin":[2128,22],"end":[2128,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDateDaysIterator","id":"0:2625:5703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3106:686":{"id":"0:3106:686","crate_id":0,"name":"eq","span":{"filename":"src/round.rs","begin":[247,23],"end":[247,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13181:34962":{"id":"2:13181:34962","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13180:34961","str::split_at_mut_checked":"2:13183:34966"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2908-0:2280:3666":{"id":"b:2:2908-0:2280:3666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2882:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2878:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2911:136","2:2912:1790"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:356:3205":{"id":"0:356:3205","crate_id":0,"name":"to_utc","span":{"filename":"src/datetime/mod.rs","begin":[431,4],"end":[433,5]},"visibility":"public","docs":"Turn this `DateTime` into a `DateTime<Utc>`, dropping the offset and associated timezone\ninformation.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3081":{"id":"0:3081","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[58,27],"end":[58,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3083:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1277:3040":{"id":"0:1277:3040","crate_id":0,"name":"with_day0","span":{"filename":"src/naive/datetime/mod.rs","begin":[1276,4],"end":[1278,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.\n\nSee also the [`NaiveDate::with_day0`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (for example `day(30)` in April).\n- The value for `day0` is invalid.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, NaiveDateTime};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 8).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(\n    dt.with_day0(29),\n    Some(NaiveDate::from_ymd_opt(2015, 9, 30).unwrap().and_hms_opt(12, 34, 56).unwrap())\n);\nassert_eq!(dt.with_day0(30), None); // no September 31\n```","links":{"`NaiveDate::with_day0`":"0:1097:3040"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["day0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3167:3921":{"id":"0:3167:3921","crate_id":0,"name":"May","span":{"filename":"src/month.rs","begin":[51,4],"end":[51,11]},"visibility":"default","docs":"May","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"4","value":"4"}}}},"0:2428":{"id":"0:2428","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[258,23],"end":[258,32]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32108:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2616:858":{"id":"0:2616:858","crate_id":0,"name":"hash","span":{"filename":"src/naive/date/mod.rs","begin":[94,24],"end":[94,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10503:156","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3057":{"id":"0:3057","crate_id":0,"name":null,"span":{"filename":"src/offset/utc.rs","begin":[43,33],"end":[43,35]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2680:133","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Utc","id":"0:3049:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2092:3037":{"id":"0:2092:3037","crate_id":0,"name":"with_month","span":{"filename":"src/traits.rs","begin":[164,4],"end":[164,53]},"visibility":"default","docs":"Makes a new value with the month number (starting from 1) changed.\n\n# Errors\n\nReturns `None` when:\n\n- The resulting date does not exist (for example `month(4)` when day of the month is 31).\n- In case of [`DateTime<Tz>`] if the resulting date and time fall within a timezone\n  transition such as from DST to standard time.\n- The value for `month` is out of range.\n\n[`DateTime<Tz>`]: crate::DateTime\n\n# Examples\n\n```\nuse chrono::{Datelike, NaiveDate};\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2023, 5, 12).unwrap().with_month(9).unwrap(),\n    NaiveDate::from_ymd_opt(2023, 9, 12).unwrap()\n);\n// Resulting date 2023-09-31 does not exist:\nassert!(NaiveDate::from_ymd_opt(2023, 5, 31).unwrap().with_month(9).is_none());\n```\n\nDon't combine multiple `Datelike::with_*` methods. The intermediate value may not exist.\n```\nuse chrono::{Datelike, NaiveDate};\n\nfn with_year_month(date: NaiveDate, year: i32, month: u32) -> Option<NaiveDate> {\n    date.with_year(year)?.with_month(month)\n}\nlet d = NaiveDate::from_ymd_opt(2020, 2, 29).unwrap();\nassert!(with_year_month(d, 2019, 1).is_none()); // fails because of invalid intermediate value\n\n// Correct version:\nfn with_year_month_fixed(date: NaiveDate, year: i32, month: u32) -> Option<NaiveDate> {\n    NaiveDate::from_ymd_opt(year, month, date.day())\n}\nlet d = NaiveDate::from_ymd_opt(2020, 2, 29).unwrap();\nassert_eq!(with_year_month_fixed(d, 2019, 1), NaiveDate::from_ymd_opt(2019, 1, 29));\n```","links":{"crate::DateTime":"0:2165:2340"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:41968:9655-0:3093:2371":{"id":"a:2:41968:9655-0:3093:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:41968:9655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:520":{"id":"0:520","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1689,0],"end":[1695,1]},"visibility":"default","docs":"Subtract `Months` from `DateTime`.\n\nThe result will be clamped to valid days in the resulting month, see\n[`DateTime<Tz>::checked_sub_months`] for details.\n\n# Panics\n\nPanics if:\n- The resulting date would be out of range.\n- The local time at the resulting date does not exist or is ambiguous, for example during a\n  daylight saving time transition.\n\nStrongly consider using [`DateTime<Tz>::checked_sub_months`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_sub_months`":"0:360:3223"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"2:3172:2566","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:522:198","0:523:1721"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1606:788":{"id":"0:1606:788","crate_id":0,"name":"fmt","span":{"filename":"src/offset/fixed.rs","begin":[172,4],"end":[174,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2008:135":{"id":"0:2008:135","crate_id":0,"name":"Err","span":{"filename":"src/round.rs","begin":[171,4],"end":[171,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:935:788":{"id":"0:935:788","crate_id":0,"name":"fmt","span":{"filename":"src/format/mod.rs","begin":[164,4],"end":[166,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3176:3924":{"id":"0:3176:3924","crate_id":0,"name":"August","span":{"filename":"src/month.rs","begin":[57,4],"end":[57,14]},"visibility":"default","docs":"August","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":{"expr":"7","value":"7"}}}},"2:13196:4621":{"id":"2:13196:4621","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:9229"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1028:5929":{"id":"0:1028:5929","crate_id":0,"name":"from_weekday_of_month","span":{"filename":"src/naive/date/mod.rs","begin":[399,4],"end":[406,5]},"visibility":"public","docs":"Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\nsince the beginning of the given month. For instance, if you want the 2nd Friday of March\n2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.\n\n`n` is 1-indexed.\n\n# Panics\n\nPanics if the specified day does not exist in that month, on invalid values for `month` or\n`n`, or if `year` is out of range for `NaiveDate`.","links":{},"attrs":["#[deprecated(since = \"0.4.23\", note =\n\"use `from_weekday_of_month_opt()` instead\")]","#[must_use]"],"deprecation":{"since":"0.4.23","note":"use `from_weekday_of_month_opt()` instead"},"inner":{"function":{"decl":{"inputs":[["year",{"primitive":"i32"}],["month",{"primitive":"u32"}],["weekday",{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["n",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2074-0:3154:2343":{"id":"0:2074-0:3154:2343","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[593,16],"end":[593,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"month::Month","name":"Month","id":"0:3154:2343","glob":false}}},"b:2:2902-0:2165:2340":{"id":"b:2:2902-0:2165:2340","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:1067:6143":{"id":"0:1067:6143","crate_id":0,"name":"iter_weeks","span":{"filename":"src/naive/date/mod.rs","begin":[1321,4],"end":[1323,5]},"visibility":"public","docs":"Returns an iterator that steps by weeks across all representable dates.\n\n# Example\n\n```\n# use chrono::NaiveDate;\n\nlet expected = [\n    NaiveDate::from_ymd_opt(2016, 2, 27).unwrap(),\n    NaiveDate::from_ymd_opt(2016, 3, 5).unwrap(),\n    NaiveDate::from_ymd_opt(2016, 3, 12).unwrap(),\n    NaiveDate::from_ymd_opt(2016, 3, 19).unwrap(),\n];\n\nlet mut count = 0;\nfor (idx, d) in NaiveDate::from_ymd_opt(2016, 2, 27).unwrap().iter_weeks().take(4).enumerate() {\n    assert_eq!(d, expected[idx]);\n    count += 1;\n}\nassert_eq!(count, 4);\n\nfor d in NaiveDate::from_ymd_opt(2016, 3, 19).unwrap().iter_weeks().rev().take(4) {\n    count -= 1;\n    assert_eq!(d, expected[count]);\n}\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"NaiveDateWeeksIterator","id":"0:2644:5704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2199":{"id":"0:2199","crate_id":0,"name":null,"span":{"filename":"src/format/formatting.rs","begin":[507,22],"end":[507,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"SecondsFormat","id":"0:2183:2341","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2200:788"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32165:9507-0:2145:2331":{"id":"a:2:32165:9507-0:2145:2331","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32165:9507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13180:34961":{"id":"2:13180:34961","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13182:34965","str::split_at_mut":"2:13181:34962"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1323:198":{"id":"0:1323:198","crate_id":0,"name":"Output","span":{"filename":"src/naive/datetime/mod.rs","begin":[1889,4],"end":[1889,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:3089":{"id":"0:3089","crate_id":0,"name":null,"span":{"filename":"src/offset/mod.rs","begin":[58,44],"end":[58,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LocalResult","id":"0:3062:2367","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}},"items":["0:3091:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:704:4334":{"id":"0:704:4334","crate_id":0,"name":"set_week_from_mon","span":{"filename":"src/format/parsed.rs","begin":[353,4],"end":[358,5]},"visibility":"public","docs":"Set the [`week_from_mon`](Parsed::week_from_mon) week number field to the given value.\nSet the 'week number starting with Monday' field to the given value.\n\nWeek 1 starts at the first Monday of January.\n\n# Errors\n\nReturns `OUT_OF_RANGE` if `value` is not in the range 0-53.\n\nReturns `IMPOSSIBLE` if this field was already set to a different value.","links":{"Parsed::week_from_mon":"0:745:3958"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["value",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2356:3731":{"id":"0:2356:3731","crate_id":0,"name":"InternalNumeric","span":{"filename":"src/format/mod.rs","begin":[159,0],"end":[161,1]},"visibility":"public","docs":"An opaque type representing numeric item types for internal uses only.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:2:32106:236-0:2356:3731","a:2:3121:246-0:2356:3731","a:2:3156:9919-0:2356:3731","a:2:32165:9507-0:2356:3731","a:2:41968:9655-0:2356:3731","a:2:41969:9654-0:2356:3731","b:2:2913-0:2356:3731","b:2:2898-0:2356:3731","b:2:2625-0:2356:3731","b:2:2902-0:2356:3731","b:2:2628-0:2356:3731","b:2:3737-0:2356:3731","b:2:2908-0:2356:3731","b:5:736-0:2356:3731","0:2362","0:934","0:2360","0:2365","0:2366","0:2358"]}}},"0:547:135":{"id":"0:547:135","crate_id":0,"name":"Err","span":{"filename":"src/datetime/mod.rs","begin":[1808,4],"end":[1808,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"ParseError","id":"0:2562:2361","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:2169":{"id":"0:2169","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[52,9],"end":[52,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Offset","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Tz"},"trait":{"name":"","id":"0:1941:2352","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"$crate::marker::Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3116:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:3045":{"id":"0:3045","crate_id":0,"name":null,"span":{"filename":"src/offset/local/mod.rs","begin":[113,15],"end":[113,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Local","id":"0:3042:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3046:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2344":{"id":"0:2344","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[102,9],"end":[102,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2345:463"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2628-0:3228:2375":{"id":"b:2:2628-0:3228:2375","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2622:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"ParseMonthError","id":"0:3228:2375","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2630:7912"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13288:41661":{"id":"2:13288:41661","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4925:41661"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44055:9271","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:8200:941":{"id":"2:8200:941","crate_id":2,"name":"into_iter","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2902-0:3208:2376":{"id":"b:2:2902-0:3208:2376","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2904:818"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:64:2716":{"id":"0:64:2716","crate_id":0,"name":"from_std","span":{"filename":"src/time_delta.rs","begin":[413,4],"end":[422,5]},"visibility":"public","docs":"Creates a `TimeDelta` object from `std::time::Duration`\n\nThis function errors when original duration is larger than the maximum\nvalue supported for this type.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["duration",{"resolved_path":{"name":"Duration","id":"2:44524:130","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OutOfRangeError","id":"0:2145:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2498":{"id":"0:2498","crate_id":0,"name":null,"span":{"filename":"src/format/mod.rs","begin":[296,44],"end":[296,48]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10495:152","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"OffsetPrecision","id":"0:2475:3806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:2499:858"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:1532-0:1015:2354":{"id":"0:1532-0:1015:2354","crate_id":0,"name":null,"span":{"filename":"src/naive/mod.rs","begin":[20,21],"end":[20,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"inner":{"import":{"source":"self::date::MAX_DATE","name":"MAX_DATE","id":"0:1015:2354","glob":false}}},"0:2183:2341":{"id":"0:2183:2341","crate_id":0,"name":"SecondsFormat","span":{"filename":"src/format/formatting.rs","begin":[509,0],"end":[529,1]},"visibility":"public","docs":"Specific formatting options for seconds. This may be extended in the\nfuture, so exhaustive matching in external code is not recommended.\n\nSee the `TimeZone::to_rfc3339_opts` function for usage.","links":{},"attrs":["#[allow(clippy::manual_non_exhaustive)]"],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":true,"variants":["0:2184:3998","0:2186:4000","0:2188:4002","0:2190:4004","0:2192:3256"],"impls":["a:2:32106:236-0:2183:2341","a:2:3121:246-0:2183:2341","a:2:3156:9919-0:2183:2341","a:2:32165:9507-0:2183:2341","a:2:41968:9655-0:2183:2341","a:2:41969:9654-0:2183:2341","b:2:2913-0:2183:2341","b:2:2898-0:2183:2341","b:2:2625-0:2183:2341","b:2:2902-0:2183:2341","b:2:2628-0:2183:2341","b:2:3737-0:2183:2341","b:2:2908-0:2183:2341","b:5:736-0:2183:2341","0:2196","0:2203","0:2199","0:2206","0:2204","0:2198","0:2201"]}}},"0:40:2645":{"id":"0:40:2645","crate_id":0,"name":"minutes","span":{"filename":"src/time_delta.rs","begin":[183,4],"end":[185,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of minutes.\n\nEquivalent to `TimeDelta::seconds(minutes * 60)` with overflow checks.\n\n# Panics\n\nPanics when the `TimeDelta` would be out of bounds.","links":{},"attrs":["#[inline]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["minutes",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2766:2346":{"id":"0:2766:2346","crate_id":0,"name":"FixedOffset","span":{"filename":"src/offset/fixed.rs","begin":[30,0],"end":[32,1]},"visibility":"public","docs":"The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.\n\nUsing the [`TimeZone`](./trait.TimeZone.html) methods\non a `FixedOffset` struct is the preferred way to construct\n`DateTime<FixedOffset>` instances. See the [`east_opt`](#method.east_opt) and\n[`west_opt`](#method.west_opt) methods for examples.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:1584","a:2:32106:236-0:2766:2346","a:2:3121:246-0:2766:2346","a:2:3156:9919-0:2766:2346","a:2:32165:9507-0:2766:2346","a:2:41968:9655-0:2766:2346","a:2:41969:9654-0:2766:2346","b:2:2913-0:2766:2346","b:2:2898-0:2766:2346","b:2:2625-0:2766:2346","b:2:2902-0:2766:2346","b:2:2628-0:2766:2346","b:2:3737-0:2766:2346","b:2:2908-0:2766:2346","b:5:736-0:2766:2346","b:5:5863-0:2766:2346","0:1594","0:1605","0:1601","0:2771","0:1603","0:1322","0:1591","0:2777","0:1507","0:2776","0:1306","0:2769","0:494","0:516","0:1494","0:2773","0:2768"]}}},"0:1092:3035":{"id":"0:1092:3035","crate_id":0,"name":"iso_week","span":{"filename":"src/naive/date/mod.rs","begin":[1621,4],"end":[1623,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"IsoWeek","id":"0:2706:2365","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:480":{"id":"0:480","crate_id":0,"name":null,"span":{"filename":"src/datetime/mod.rs","begin":[1471,0],"end":[1478,1]},"visibility":"default","docs":"Add `TimeDelta` to `DateTime`.\n\nAs a part of Chrono's [leap second handling], the addition assumes that **there is no leap\nsecond ever**, except when the `NaiveDateTime` itself represents a leap  second in which case\nthe assumption becomes that **there is exactly a single leap second ever**.\n\n# Panics\n\nPanics if the resulting date would be out of range.\nConsider using [`DateTime<Tz>::checked_add_signed`] to get an `Option` instead.","links":{"`DateTime<Tz>::checked_add_signed`":"0:357:2993"},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"Tz","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"TimeZone","id":"0:1941:2352","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"2:3167:2561","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["0:482:198","0:483:295"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13260:4661":{"id":"2:13260:4661","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:9229"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1340:788":{"id":"0:1340:788","crate_id":0,"name":"fmt","span":{"filename":"src/naive/datetime/mod.rs","begin":[2085,4],"end":[2089,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:189:3008":{"id":"0:189:3008","crate_id":0,"name":"years_since","span":{"filename":"src/date.rs","begin":[311,4],"end":[313,5]},"visibility":"public","docs":"Returns the number of whole years from the given `base` until `self`.","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["base",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:2165:2340":{"id":"b:2:2625-0:2165:2340","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"generic":"Tz"}}],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:813:3567":{"id":"0:813:3567","crate_id":0,"name":"from_str","span":{"filename":"src/format/parse.rs","begin":[526,4],"end":[533,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["s",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"ParseResult","id":"0:946:2362","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"DateTime","id":"0:2165:2340","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"FixedOffset","id":"0:2766:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1080:2612":{"id":"0:1080:2612","crate_id":0,"name":"MAX","span":{"filename":"src/naive/date/mod.rs","begin":[1431,4],"end":[1432,74]},"visibility":"public","docs":"The maximum possible `NaiveDate` (December 31, 262142 CE).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"_"}}},"b:2:2898-0:2300:3683":{"id":"b:2:2898-0:2300:3683","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Numeric","id":"0:2300:3683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:63:2712":{"id":"0:63:2712","crate_id":0,"name":"is_zero","span":{"filename":"src/time_delta.rs","begin":[405,4],"end":[407,5]},"visibility":"public","docs":"Returns `true` if the `TimeDelta` equals `TimeDelta::zero()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:736-0:3110:2345":{"id":"b:5:736-0:3110:2345","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2641:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Weekday","id":"0:3110:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:10056","5:739:3854","5:740:10057"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13263:34467":{"id":"2:13263:34467","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12332:459","self::pattern":"2:12848:9229"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12854:9243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2898-0:3093:2371":{"id":"b:2:2898-0:3093:2371","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2875:143","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2872:162","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"RoundingError","id":"0:3093:2371","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2901:3611"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:2589:3877":{"id":"0:2589:3877","crate_id":0,"name":"TooLong","span":{"filename":"src/format/mod.rs","begin":[423,4],"end":[423,11]},"visibility":"default","docs":"All formatting items have been read but there is a remaining input.","links":{},"attrs":[],"deprecation":null,"inner":{"variant":{"kind":"plain","discriminant":null}}},"0:1273:3038":{"id":"0:1273:3038","crate_id":0,"name":"with_month0","span":{"filename":"src/naive/datetime/mod.rs","begin":[1220,4],"end":[1222,5]},"visibility":"default","docs":"Makes a new `NaiveDateTime` with the month number (starting from 0) changed.\n\nSee also the [`NaiveDate::with_month0`] method.\n\n# Errors\n\nReturns `None` if:\n- The resulting date does not exist (for example `month0(3)` when day of the month is 31).\n- The value for `month0` is invalid.\n\n# Example\n\n```\nuse chrono::{Datelike, NaiveDate, NaiveDateTime};\n\nlet dt: NaiveDateTime =\n    NaiveDate::from_ymd_opt(2015, 9, 30).unwrap().and_hms_opt(12, 34, 56).unwrap();\nassert_eq!(\n    dt.with_month0(9),\n    Some(NaiveDate::from_ymd_opt(2015, 10, 30).unwrap().and_hms_opt(12, 34, 56).unwrap())\n);\nassert_eq!(dt.with_month0(12), None); // No month 13\nassert_eq!(dt.with_month0(1), None); // No February 30\n```","links":{"`NaiveDate::with_month0`":"0:1095:3038"},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["month0",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NaiveDateTime","id":"0:2663:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1338:788":{"id":"0:1338:788","crate_id":0,"name":"fmt","span":{"filename":"src/naive/datetime/mod.rs","begin":[2051,4],"end":[2055,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"2:10253:142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"2:10234:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:2108:3498":{"id":"0:2108:3498","crate_id":0,"name":"with_nanosecond","span":{"filename":"src/traits.rs","begin":[316,4],"end":[316,57]},"visibility":"default","docs":"Makes a new value with nanoseconds since the whole non-leap second changed.\n\nReturns `None` when the resulting value would be invalid.\nAs with the [`nanosecond`](#tymethod.nanosecond) method,\nthe input range can exceed 1,000,000,000 for leap seconds.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["nano",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:3156:9919-0:2280:3666":{"id":"a:2:3156:9919-0:2280:3666","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Pad","id":"0:2280:3666","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:46:2672":{"id":"0:46:2672","crate_id":0,"name":"microseconds","span":{"filename":"src/time_delta.rs","begin":[259,4],"end":[263,5]},"visibility":"public","docs":"Makes a new `TimeDelta` with the given number of microseconds.\n\nThe number of microseconds acceptable by this constructor is less than\nthe total number that can actually be stored in a `TimeDelta`, so it is\nnot possible to specify a value that would be out of bounds. This\nfunction is therefore infallible.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["microseconds",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:3156:9919-0:2422:3788":{"id":"a:2:3156:9919-0:2422:3788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3156:9919","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"InternalFixed","id":"0:2422:3788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:3226":{"id":"0:3226","crate_id":0,"name":null,"span":{"filename":"src/month.rs","begin":[227,62],"end":[227,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2711:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:3227:470"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:2020-0:1998:2370":{"id":"0:2020-0:1998:2370","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[583,16],"end":[583,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"round::DurationRound","name":"DurationRound","id":"0:1998:2370","glob":false}}},"0:2005:8614":{"id":"0:2005:8614","crate_id":0,"name":"duration_round","span":{"filename":"src/round.rs","begin":[161,4],"end":[163,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["duration",{"resolved_path":{"name":"TimeDelta","id":"0:2123:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42007:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:1998:2370","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:1035:3223":{"id":"0:1035:3223","crate_id":0,"name":"checked_sub_months","span":{"filename":"src/naive/date/mod.rs","begin":[580,4],"end":[589,5]},"visibility":"public","docs":"Subtract a duration in [`Months`] from the date\n\nUses the last day of the month if the day does not exist in the resulting month.\n\n# Errors\n\nReturns `None` if the resulting date would be out of range.\n\n# Example\n\n```\n# use chrono::{NaiveDate, Months};\nassert_eq!(\n    NaiveDate::from_ymd_opt(2022, 2, 20).unwrap().checked_sub_months(Months::new(6)),\n    Some(NaiveDate::from_ymd_opt(2021, 8, 20).unwrap())\n);\n\nassert_eq!(\n    NaiveDate::from_ymd_opt(2014, 1, 1)\n        .unwrap()\n        .checked_sub_months(Months::new(core::i32::MAX as u32 + 1)),\n    None\n);\n```","links":{"`Months`":"0:3208:2376"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}],["months",{"resolved_path":{"name":"Months","id":"0:3208:2376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41874:193","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2625-0:2608:2348":{"id":"b:2:2625-0:2608:2348","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32107:7671","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2619:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"NaiveDate","id":"0:2608:2348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2627:2885"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}}},"paths":{"0:1998:2370":{"crate_id":0,"path":["chrono","round","DurationRound"],"kind":"trait"},"17:12494:11114":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"11:2352:10441":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"6:6657:13376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"0:2307:3693":{"crate_id":0,"path":["chrono","format","Numeric","IsoYear"],"kind":"variant"},"2:10253:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:22295:17144":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:5225:13014":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"11:2151:10441":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:11153:14783":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:42593:9197":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"8:0:9001":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:22839:40032":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"21:4493:9357":{"crate_id":21,"path":["num_traits","ParseFloatError"],"kind":"struct"},"1:3998:14999":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:12949:11091":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"21:375:10706":{"crate_id":21,"path":["num_traits","ops","checked","CheckedDiv"],"kind":"trait"},"16:7509:14910":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:32637:2564":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:4785:9213":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4909:12907":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:14449:11433":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:9755:29554":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:2872:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:3842:12023":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:7537:9393":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:5577:15005":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:8208:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:949:10433":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:6478:13279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:2808:11989":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"0:1916:2368":{"crate_id":0,"path":["chrono","offset","MappedLocalTime"],"kind":"type_alias"},"17:10317:10991":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:30510:9207":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:2418:11971":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:8050:16925":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:33919:9143":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:10290:9199":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"21:97:10693":{"crate_id":21,"path":["num_traits","bounds","Bounded"],"kind":"trait"},"2:36141:9147":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:44733:14066":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:46076:14108":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:11510:14806":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"21:493:10721":{"crate_id":21,"path":["num_traits","ops","wrapping","WrappingAdd"],"kind":"trait"},"2:30495:13768":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:16212:11938":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:5946:15010":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"21:412:10715":{"crate_id":21,"path":["num_traits","ops","inv","Inv"],"kind":"trait"},"17:14436:11432":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"21:100:33768":{"crate_id":21,"path":["num_traits","bounds","LowerBounded"],"kind":"trait"},"6:6915:13468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:13706:13727":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:11405:14803":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:22804:40026":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:9781:29572":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6706:13395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:4151:16968":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:3646:9171":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:3581:9167":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:41874:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:10487:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:8283:6366":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:6447:13266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:5502:13146":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:6788:13422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:43562:13720":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"5:4083:10429":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:6880:13443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:46544:14174":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:4479:9385":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:8343:8133":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"11:2536:12519":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:6317:14888":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"0:3098:8623":{"crate_id":0,"path":["chrono","round","RoundingError","TimestampExceedsLimit"],"kind":"variant"},"0:2526:3840":{"crate_id":0,"path":["chrono","format","Item","OwnedLiteral"],"kind":"variant"},"1:4806:13519":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"16:6895:12217":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:5630:13199":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:15176:11656":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:7497:12297":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:23021:13761":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:46857:14183":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:10218:10988":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6494:12147":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13116:11159":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:10524:14779":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:46840:14182":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4965:12929":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:40566:9310":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:11016:14786":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:11865:14830":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:4412:22225":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"16:5307:12050":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:11142:11019":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:3156:9919":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:2317:9410":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"6:5306:13055":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:13606:11267":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:8482:9432":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:8535:9262":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:42449:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:12283:14495":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:7462:13685":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:7584:13613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:4718:12036":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"18:0:9010":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:40508:9431":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:33467:9140":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:12030:14831":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:5107:12049":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:41968:9655":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:5228:9482":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:9331:14236":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:10887:43090":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:11702:11035":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:10092:29579":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:10419:10994":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"15:306:16072":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"21:463:33779":{"crate_id":21,"path":["num_traits","ops","overflowing","OverflowingSub"],"kind":"trait"},"17:12621:11120":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"5:1180:15513":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:1545:10431":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:30521:40042":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:8029:13635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:14235:11395":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:3182:2565":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"0:2319:3704":{"crate_id":0,"path":["chrono","format","Numeric","WeekFromMon"],"kind":"variant"},"2:13743:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:15376:11707":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:32849:2563":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:46267:14133":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:835:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:11893:14971":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"5:935:16931":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:6069:15516":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:7590:12009":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"0:2542:136":{"crate_id":0,"path":["chrono","format","Item","Error"],"kind":"variant"},"17:12238:14843":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:46009:14105":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:6025:15014":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:5376:13076":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:46877:14185":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:4830:12040":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:13252:11188":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"21:570:10682":{"crate_id":21,"path":["num_traits","Num"],"kind":"trait"},"6:5581:13172":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:2869:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:12549:9279":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:11242:14796":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:39420:9159":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:8522:9332":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:671:14989":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:304:3655":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:12339:1793":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"0:3094:8628":{"crate_id":0,"path":["chrono","round","RoundingError","DurationExceedsTimestamp"],"kind":"variant"},"1:3896:14998":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:8333:15024":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:7482:10015":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12043:14832":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:2310:9409":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:14599:11457":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:1336:10441":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:1517:12695":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:44667:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:4959:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"9:482:28499":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:21517:39771":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:12663:9275":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"11:1923:12517":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:3816:14939":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:43978:9267":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:2098:8239":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:4:1241":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:12422:11106":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:1207:14768":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:6588:12153":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:5627:15008":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:4269:9444":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:11557:14809":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"18:538:10847":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:14325:11407":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:43591:14981":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"0:2591:3879":{"crate_id":0,"path":["chrono","format","ParseErrorKind","BadFormat"],"kind":"variant"},"6:6756:13412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:545:12656":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"0:2389:3764":{"crate_id":0,"path":["chrono","format","Fixed","TimezoneName"],"kind":"variant"},"17:14968:11609":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:41614:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:12363:22333":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:10750:40081":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"9:392:28501":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:1999:9180":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:14575:11108":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:14066:11352":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:7471:16093":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:40223:13966":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:426:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:16121:11916":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:2460:9413":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:3899:12024":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:41969:9654":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:11922:14271":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:14933:11608":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:5863:29509":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:373:9790":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:8243:15023":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5102:12983":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"9:502:12588":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"21:495:10726":{"crate_id":21,"path":["num_traits","ops","wrapping","WrappingSub"],"kind":"trait"},"11:1107:14926":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:11497:14805":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:3014:28650":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:8188:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:8656:9304":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:46123:14111":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:33534:9139":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:5290:13048":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"0:2587:3875":{"crate_id":0,"path":["chrono","format","ParseErrorKind","TooShort"],"kind":"variant"},"5:680:14685":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:1535:12706":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"21:585:10685":{"crate_id":21,"path":["num_traits","RefNum"],"kind":"trait"},"11:2140:10440":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:5073:9444":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6079:11953":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:5083:12982":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:7813:12312":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:7602:13616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:43104:9400":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:6532:12151":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"21:391:10714":{"crate_id":21,"path":["num_traits","ops","euclid","Euclid"],"kind":"trait"},"16:7132:12250":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:11595:11027":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:10909:14240":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:11579:9793":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"1:8856:9499":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:10890:15054":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:42063:10015":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:3594:41135":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:15992:11890":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:12671:14854":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:4330:16990":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:45685:14072":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"21:404:10713":{"crate_id":21,"path":["num_traits","ops","euclid","CheckedEuclid"],"kind":"trait"},"2:12869:9245":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"0:2300:3683":{"crate_id":0,"path":["chrono","format","Numeric"],"kind":"enum"},"2:40645:9335":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"0:2337:3723":{"crate_id":0,"path":["chrono","format","Numeric","Nanosecond"],"kind":"variant"},"2:32097:7915":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:6342:43087":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:2768:11987":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"18:718:10871":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:3670:10060":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:22977:13757":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"2:40604:9322":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"11:2548:12521":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:45927:14093":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:5489:13141":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:39552:9162":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:6385:12134":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:16165:11927":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:982:10438":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:13363:11211":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:1628:12772":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11102:14791":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:7306:13475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5653:13206":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:13959:11337":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:3597:14776":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:10326:10498":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:22385:22298":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"21:430:10716":{"crate_id":21,"path":["num_traits","ops","mul_add","MulAdd"],"kind":"trait"},"17:9671:29557":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:7467:13541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:2628:9467":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:1633:12516":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:491:12620":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:523:12643":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:32083:14977":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:2519:22298":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"5:7548:9394":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:9428:9243":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:15678:11809":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:497:38390":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:4129:16966":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:46711:14177":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:898:10427":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:44746:41058":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:14038:11347":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:39532:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:5314:13058":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:8202:12014":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:6471:13275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:7549:12301":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"11:1903:12514":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:8216:12373":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:3042:15514":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:15931:11171":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"5:3293:42487":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:6543:12152":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:16032:11188":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:14212:11394":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:6782:29515":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"0:2341:3730":{"crate_id":0,"path":["chrono","format","Numeric","Internal"],"kind":"variant"},"6:1653:12791":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:6874:13442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"18:680:10862":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:1485:12682":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:3810:12022":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:12659:14853":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"11:1676:43068":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"11:832:10431":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:4278:9444":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:4393:10560":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"11:434:16081":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:42928:9208":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:9858:29573":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:13046:11151":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12362:11102":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:5781:11998":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:9414:14703":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:13082:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:11661:11032":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:2612:11980":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:5643:13205":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:14503:11439":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:4318:9499":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"0:566:801":{"crate_id":0,"path":["chrono","format"],"kind":"module"},"2:21620:13728":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:14994:11615":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:46038:14106":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:5696:15009":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"18:613:43100":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:43726:9256":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:3365:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:12464:29701":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:12342:11097":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:2998:12015":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:6574:12013":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"0:2397:3779":{"crate_id":0,"path":["chrono","format","Fixed","TimezoneOffsetColonZ"],"kind":"variant"},"1:2006:771":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:1580:12737":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:9720:15519":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:44073:9273":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:2712:38385":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:11394:14969":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:15342:11694":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11042:14787":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"11:2562:12524":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:9149:14230":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:44352:14060":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"14:214:12456":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"0:2327:3711":{"crate_id":0,"path":["chrono","format","Numeric","Ordinal"],"kind":"variant"},"6:1663:12797":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:13513:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:5839:14202":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:5157:9904":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:11132:9262":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:5504:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"14:7:14678":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:11524:14807":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:8265:13640":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:8197:13636":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:11839:14999":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6335:14896":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:3426:9474":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:8012:13625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"18:765:33760":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"0:1555:1215":{"crate_id":0,"path":["chrono","offset"],"kind":"module"},"17:11841:14828":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:867:9499":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"21:477:10718":{"crate_id":21,"path":["num_traits","ops","saturating","SaturatingAdd"],"kind":"trait"},"0:2387:3761":{"crate_id":0,"path":["chrono","format","Fixed","Nanosecond9"],"kind":"variant"},"2:44331:22215":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:2438:11972":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:6173:9444":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"11:299:12509":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:43125:8240":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:7379:43086":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:15138:11643":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:10735:38385":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:8306:13649":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:623:43103":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:7429:13528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:10949:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:12808:3566":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:7981:9791":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:6849:12215":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"11:1896:10430":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:22716:13733":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:43641:14982":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:10671:43089":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:46296:14134":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:10930:14248":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"5:6048:13681":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:12357:1894":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:12379:14690":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:5320:13059":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"21:592:10686":{"crate_id":21,"path":["num_traits","NumAssignOps"],"kind":"trait"},"7:0:1884":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:619:16919":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:7428:29518":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"0:3071:190":{"crate_id":0,"path":["chrono","offset","LocalResult","None"],"kind":"variant"},"11:673:9499":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:7917:38374":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:7397:43084":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:40575:9319":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:13581:11263":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:6664:13377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:15266:11676":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"7:31:28486":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:8093:12362":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:5764:13429":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:3831:16963":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:40283:9273":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:7138:17058":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:7014:29516":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"0:2475:3806":{"crate_id":0,"path":["chrono","format","OffsetPrecision"],"kind":"enum"},"5:1320:10439":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10661:14781":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:1834:7907":{"crate_id":1,"path":["std","collections","hash_map"],"kind":"module"},"1:0:1696":{"crate_id":1,"path":["std"],"kind":"module"},"1:12342:722":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"2:45717:14076":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:41121:9298":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:570:12669":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:43502:14979":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:14091:11354":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:12454:11111":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:3648:38022":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:2521:22299":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"11:2231:12518":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"21:279:10699":{"crate_id":21,"path":["num_traits","identities","ConstOne"],"kind":"trait"},"1:7395:34471":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:11408:14970":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:8118:12365":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:13594:11264":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:40460:16943":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:14177:11382":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:6841:15017":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:924:10429":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:15023:11621":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:5014:12956":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:43663:14983":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:44670:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:6690:10015":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:3036:42659":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"0:2746:2364":{"crate_id":0,"path":["chrono","naive","Days"],"kind":"struct"},"1:6362:38392":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:2728:11985":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:8085:10509":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:41893:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:8259:8239":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:12304:16927":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:5244:13024":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:13922:11333":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:6881:13711":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:2711:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:10919:9426":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:40386:13975":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:42600:9199":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:15214:11663":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"21:264:10700":{"crate_id":21,"path":["num_traits","identities","ConstZero"],"kind":"trait"},"14:165:28585":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:40714:9330":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:15655:11796":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:22483:17140":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:22824:40069":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:4632:9373":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"0:2325:3709":{"crate_id":0,"path":["chrono","format","Numeric","WeekdayFromMon"],"kind":"variant"},"17:2037:14769":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:6449:14201":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:12349:889":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:13674:11271":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:750:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:1510:12692":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:44383:9248":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:6231:12124":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"21:497:10722":{"crate_id":21,"path":["num_traits","ops","wrapping","WrappingMul"],"kind":"trait"},"11:856:10436":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:44559:9177":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:21461:9194":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:12557:11005":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"21:573:10683":{"crate_id":21,"path":["num_traits","NumOps"],"kind":"trait"},"16:6120:29511":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:7799:12000":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"21:4486:10692":{"crate_id":21,"path":["num_traits","FloatErrorKind"],"kind":"enum"},"2:43553:13719":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:14147:11363":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:10235:3068":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:12388:11103":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:6948:12003":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:45700:14073":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:6872:12216":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:43602:14034":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"21:503:10724":{"crate_id":21,"path":["num_traits","ops","wrapping","WrappingShl"],"kind":"trait"},"2:46190:14114":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:6931:10550":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:1680:12804":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:40407:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:4511:42678":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:46897:14187":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:22159:17062":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:10716:9474":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"5:7579:13686":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:698:10866":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11764:11043":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:564:12666":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:6962:12004":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:15582:11775":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:7061:12240":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:4916:16983":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"11:2304:10439":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"16:4802:12039":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:12359:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:38127:9150":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:6433:12138":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:2303:28621":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:5367:29507":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:5344:13064":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:6058:9323":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:12724:29580":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:5817:12061":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:11380:9264":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:532:12649":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:11673:14412":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"11:0:9004":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:44064:9272":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:0:988":{"crate_id":6,"path":["libc"],"kind":"module"},"0:2391:3769":{"crate_id":0,"path":["chrono","format","Fixed","TimezoneOffsetColon"],"kind":"variant"},"1:3519:9294":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:22955:13755":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"6:5588:13174":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:42865:12339":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:7604:12010":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:11367:11005":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:3121:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"21:465:33780":{"crate_id":21,"path":["num_traits","ops","overflowing","OverflowingMul"],"kind":"trait"},"1:11308:14254":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13832:11317":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:5700:11997":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:43654:13722":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:15836:11842":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"0:2383:3757":{"crate_id":0,"path":["chrono","format","Fixed","Nanosecond3"],"kind":"variant"},"17:15720:11815":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:4157:16969":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:4370:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:45802:14085":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:22897:9371":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:14723:11459":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:2675:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"16:7741:12012":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:44342:14056":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:2062:13696":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:43113:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13412:11220":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:8600:14211":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:15748:11824":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:8300:13648":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:12929:11144":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:15418:11716":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:5006:12046":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:7098:12245":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:13538:11247":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:44494:9241":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:2374:11969":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:1098:14767":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11853:14829":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:41836:14010":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"11:123:12508":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5046:12970":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12851:11139":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:44725:14490":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:5212:13010":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:10399:9254":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:42013:135":{"crate_id":2,"path":["chrono","format","ParseResult","Err"],"kind":"variant"},"1:880:10060":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:14414:11421":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:4996:22234":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:3564:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:42096:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:13024:29583":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"18:643:10839":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:13766:11306":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"15:394:28612":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"18:581:9194":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:46059:14107":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:7412:14956":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:1496:12687":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5329:13062":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:15734:11817":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"14:31:14678":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:11583:14815":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"18:659:14758":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:40728:9331":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:3196:11960":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:3163:9921":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:1585:12739":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"21:368:10705":{"crate_id":21,"path":["num_traits","ops","checked","CheckedAdd"],"kind":"trait"},"6:5466:13133":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:13526:11244":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"4:0:9000":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:12335:1299":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:9545:10504":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:22383:40849":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"5:5226:13681":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:12189:14839":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:11269:29608":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:1916:10504":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:3280:12516":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"9:238:8240":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:46923:14189":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:11730:11039":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:11206:14229":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:10284:10990":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:21602:17060":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:5483:13139":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:6698:13391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:15222:11665":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:5112:12984":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:16259:11215":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:6497:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:6609:42660":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:4346:14960":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"18:515:10842":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:4628:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:5436:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:42853:40055":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"18:608:14757":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:6670:15016":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:9746:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:3925:12025":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"0:3237:2427":{"crate_id":0,"path":["chrono","OutOfRange"],"kind":"struct"},"14:0:9006":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:465:12607":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:5995:12085":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:6160:28620":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:2478:11974":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:4343:16092":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:1505:10015":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:3252:9145":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:3287:38802":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:7715:37969":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:6047:14863":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:11175:9275":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"13:110:43073":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:8073:12361":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:2619:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:39582:9164":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:2175:29634":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:13325:11205":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:39775:9925":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"21:580:10684":{"crate_id":21,"path":["num_traits","NumRef"],"kind":"trait"},"2:3329:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:15778:11832":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:44482:9238":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11354:14801":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:4205:16972":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:12332:459":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:12333:1855":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:12089:11081":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:6729:13401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:16198:11934":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:485:12618":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"11:742:10433":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:22469:9436":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:39376:9169":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"21:214:33770":{"crate_id":21,"path":["num_traits","float","FloatCore"],"kind":"trait"},"17:15126:11640":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"11:351:16077":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:12318:11091":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:542:11951":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:1840:683":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:40299:9271":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"5:3657:9499":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:3383:9478":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:4641:12035":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:8559:16961":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:6172:9311":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:12076:14834":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"11:774:10427":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:14189:11385":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:6802:12201":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:42007:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:10078:9221":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:11107:10060":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:43806:9263":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:42907:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:8301:12380":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:13308:11203":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:4476:15001":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:12356:952":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:10877:14784":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:22038:39777":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:15521:11768":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:5722:11999":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:10068:29561":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:16269:11220":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:16249:11944":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:42890:9207":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:44317:14055":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"0:2401:3784":{"crate_id":0,"path":["chrono","format","Fixed","TimezoneOffsetZ"],"kind":"variant"},"17:12707:14857":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:5914:12076":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"0:2368:3074":{"crate_id":0,"path":["chrono","format","Fixed"],"kind":"enum"},"17:15249:11669":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:12343:725":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:7348:13499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:5767:17016":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:46334:14136":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:976:10437":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:12792:10950":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:9283:9773":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:4248:9444":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"0:104:130":{"crate_id":0,"path":["chrono","Duration"],"kind":"type_alias"},"17:11674:11033":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:21608:17063":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:4810:13523":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"17:13344:11210":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:10939:9430":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"21:164:8772":{"crate_id":21,"path":["num_traits","cast","FromPrimitive"],"kind":"trait"},"17:12572:11019":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:43906:9268":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:2048:22308":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:15635:11793":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:46140:14112":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:2866:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:46108:14110":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"9:357:28515":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:44205:14052":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"0:2373:3745":{"crate_id":0,"path":["chrono","format","Fixed","ShortWeekdayName"],"kind":"variant"},"6:7461:13539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"0:2480:3823":{"crate_id":0,"path":["chrono","format","OffsetPrecision","Seconds"],"kind":"variant"},"2:10495:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:2069:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:15390:11709":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:3397:9160":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:16105:11911":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:10292:9200":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:5726:10550":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"13:229:12506":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"11:1066:28578":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:747:9358":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:15814:11836":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:10622:43096":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"21:197:10695":{"crate_id":21,"path":["num_traits","cast","AsPrimitive"],"kind":"trait"},"6:5407:1228":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:2902:28648":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:14298:11403":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:9277:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:41918:10015":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:11799:14821":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"11:364:15509":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:7984:13622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:4821:14777":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:5020:12959":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:23032:13762":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:11051:14788":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:10986:38295":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"11:1087:43071":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:10938:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:6689:13385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:940:10431":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:15769:11830":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:12388:1704":{"crate_id":2,"path":["core","str"],"kind":"module"},"2:2875:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"0:2484:3827":{"crate_id":0,"path":["chrono","format","OffsetPrecision","OptionalSeconds"],"kind":"variant"},"2:4510:9386":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:2234:14773":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:9427:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:38182:9151":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"21:352:10703":{"crate_id":21,"path":["num_traits","ops","bytes","FromBytes"],"kind":"trait"},"2:40738:9315":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:46740:14178":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:12118:36217":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:5336:13063":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:43774:9260":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:11227:14795":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:1437:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:6620:12162":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"11:2554:43070":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:4985:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:8694:39833":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:12625:9280":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:5897:12071":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:15434:11719":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:39492:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:44692:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:3609:9170":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:1616:10430":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:43756:9262":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:10044:29578":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"16:5400:10986":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:7537:13591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:2528:11976":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:1565:12725":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:3491:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"11:1887:10015":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"19:0:1276":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:5031:12964":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:9751:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:7485:13552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:5002:12950":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:8473:9481":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:44470:9234":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:7366:13508":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"14:40:11186":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:9409:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:10279:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:9106:15034":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:32165:9507":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:7490:10015":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:7999:9780":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:44474:9237":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:6524:13301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"0:2303:3688":{"crate_id":0,"path":["chrono","format","Numeric","YearDiv100"],"kind":"variant"},"6:7516:13577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:11214:14794":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:2854:11991":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:1686:12807":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:586:12678":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:11256:11011":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:30457:10540":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:6721:13400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:6666:9291":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:6353:12131":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:4916:12911":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:15368:11704":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:8230:9396":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:44674:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"21:500:10723":{"crate_id":21,"path":["num_traits","ops","wrapping","WrappingNeg"],"kind":"trait"},"2:43571:14980":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"0:2379:3752":{"crate_id":0,"path":["chrono","format","Fixed","UpperAmPm"],"kind":"variant"},"17:11621:11028":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:2708:11984":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:8670:14213":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:3290:34381":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:13753:11304":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:71:889":{"crate_id":2,"path":["core","i64"],"kind":"module"},"17:15456:11724":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:0:551":{"crate_id":2,"path":["core"],"kind":"module"},"6:5370:13075":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"3:0:493":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:9938:15145":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:5385:10985":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"0:2247:2887":{"crate_id":0,"path":["chrono","format","strftime","StrftimeItems"],"kind":"struct"},"0:2309:3695":{"crate_id":0,"path":["chrono","format","Numeric","IsoYearDiv100"],"kind":"variant"},"17:437:10936":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:11505:38380":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"17:12887:11141":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:14587:11450":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:11419:11019":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:22251:17143":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:23054:13764":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:12337:1670":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:38017:9148":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:2308:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"5:6965:10552":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:9445:3069":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:15701:11810":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"20:29:16059":{"crate_id":20,"path":["iana_time_zone","platform","openwrt","IterWords"],"kind":"struct"},"17:14311:11404":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:41780:40036":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:25928:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:1142:14927":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:16223:11940":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:1855:10487":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:11166:11007":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:11287:9260":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"0:1941:2352":{"crate_id":0,"path":["chrono","offset","TimeZone"],"kind":"trait"},"16:6278:14870":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:12336:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:13972:11051":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:42213:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:507:10839":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:9400:9444":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"0:2476:3818":{"crate_id":0,"path":["chrono","format","OffsetPrecision","Hours"],"kind":"variant"},"2:22:803":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:3259:42485":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:3881:10430":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:3311:9168":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:12922:22208":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12516:14848":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"11:1910:12515":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:47053:14195":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:13723:11296":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"11:811:10430":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"0:864:3658":{"crate_id":0,"path":["chrono","format","strftime"],"kind":"module"},"1:970:10436":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5352:13065":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:11443:11024":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:11755:15521":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:40412:13977":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:12443:11110":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"18:689:10865":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"11:800:10429":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:4765:9211":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:43135:14029":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:3657:9434":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:40515:9307":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:7620:9317":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"18:651:10839":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:754:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:14356:11413":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:41696:14002":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:45913:14092":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:3750:42660":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:4940:12044":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:11260:14253":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:21483:39775":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:5831:12064":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:5160:12988":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:40345:13973":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"18:754:10879":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:15168:11653":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:46769:14179":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11743:11040":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"21:252:33773":{"crate_id":21,"path":["num_traits","float","TotalOrder"],"kind":"trait"},"17:3264:14774":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:13015:11108":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"10:36:12528":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:43824:9261":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"0:2317:3702":{"crate_id":0,"path":["chrono","format","Numeric","WeekFromSun"],"kind":"variant"},"7:78:28493":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:34265:9146":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:22886:7954":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10759:11019":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"0:2323:3707":{"crate_id":0,"path":["chrono","format","Numeric","NumDaysFromSun"],"kind":"variant"},"2:44794:10564":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:44767:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:43715:9253":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:46207:14115":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:13387:11215":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"16:6927:12221":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"11:2383:9499":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:4292:16089":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:7980:9436":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:6417:13249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:11537:14808":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"0:2283:3669":{"crate_id":0,"path":["chrono","format","Pad","Zero"],"kind":"variant"},"17:3473:14775":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"0:2381:3723":{"crate_id":0,"path":["chrono","format","Fixed","Nanosecond"],"kind":"variant"},"2:3002:9184":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:11392:14802":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"0:2583:3871":{"crate_id":0,"path":["chrono","format","ParseErrorKind","NotEnough"],"kind":"variant"},"16:6976:12225":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:6763:13413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:8593:14210":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:6768:13414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:15273:11677":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"0:1990:2339":{"crate_id":0,"path":["chrono","round","SubsecRound"],"kind":"trait"},"2:12586:9281":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:10018:29558":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:46961:14191":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:13797:11313":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:10219:14006":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:44138:22214":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:3167:2561":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:5324:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:4952:12924":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"5:1577:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:9323:15043":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:6629:13363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:6379:13222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:11574:12518":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12278:14846":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:2878:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:3801:8239":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:735:33759":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:10954:29589":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:15289:11679":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"0:2486:3829":{"crate_id":0,"path":["chrono","format","OffsetPrecision","OptionalMinutesAndSeconds"],"kind":"variant"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:4683:16993":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:3029:10882":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"14:220:12458":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:4560:12032":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:11812:14824":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4864:12885":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"18:80:16060":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13814:11316":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:6187:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:2766:13675":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"0:3064:4457":{"crate_id":0,"path":["chrono","offset","LocalResult","Single"],"kind":"variant"},"1:5832:14201":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:102:12507":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"0:2315:3700":{"crate_id":0,"path":["chrono","format","Numeric","Day"],"kind":"variant"},"1:8873:9501":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"0:3093:2371":{"crate_id":0,"path":["chrono","round","RoundingError"],"kind":"enum"},"2:6870:9313":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:7514:4137":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:46091:14109":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:16093:11909":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:2505:660":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:6505:13299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:5927:12077":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:10713:9478":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:15383:11708":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:6746:13405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:10298:9202":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:7575:13610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:13437:11222":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:15646:11794":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"11:837:10434":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"16:7144:29517":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11605:8243":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"0:2333:3717":{"crate_id":0,"path":["chrono","format","Numeric","Minute"],"kind":"variant"},"2:10538:9397":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:3614:12020":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:41902:9499":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:42135:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:8155:12370":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:11877:11044":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:7735:9285":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:4970:15003":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:652:9181":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:8064:16926":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"18:635:10861":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:5052:12972":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:11895:14270":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:12874:9244":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"0:2523:3838":{"crate_id":0,"path":["chrono","format","Item","Literal"],"kind":"variant"},"2:6876:13713":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:3476:9462":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:7607:13689":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:1365:10442":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:2878:11992":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:12848:9229":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:1474:9499":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:10718:40878":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:13146:11163":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:12347:877":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:40585:9320":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:40306:22239":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:6787:17028":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:4808:13521":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"11:787:10428":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:14847:11562":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:2071:13698":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:11618:15060":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:9196:14232":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:6855:14701":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:403:14765":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:5624:13196":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:5536:13153":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:7561:13601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:12348:883":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:7648:14918":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:15333:11693":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:10997:10509":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:5802:29508":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:23010:13760":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:8806:9497":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:15206:11661":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:10915:43094":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"0:3096:8621":{"crate_id":0,"path":["chrono","round","RoundingError","DurationExceedsLimit"],"kind":"variant"},"5:7619:13691":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:1621:12514":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:14788:11510":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:2227:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:6394:15015":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:15313:11686":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:14131:11358":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"9:447:28500":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"21:472:235":{"crate_id":21,"path":["num_traits","ops","saturating","Saturating"],"kind":"trait"},"17:14855:11565":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:1735:42660":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:46798:14180":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:15010:11616":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:4531:12031":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:10818:14783":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:7888:12324":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"11:700:10015":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:4942:12921":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:3362:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:13553:11253":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:12330:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:2788:11988":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:7823:29520":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:3385:9479":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:14545:11443":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:6430:17152":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:1526:12700":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:15151:11648":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"11:430:16080":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:5296:13051":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13187:11171":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"0:2579:2427":{"crate_id":0,"path":["chrono","format","ParseErrorKind","OutOfRange"],"kind":"variant"},"1:9136:14229":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:11788:14820":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:9179:14231":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:513:14766":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:11715:11036":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:42010:192":{"crate_id":2,"path":["chrono","format","ParseResult","Ok"],"kind":"variant"},"5:1586:14938":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:2355:11963":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:10350:10992":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:573:10839":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:3247:9499":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:4158:10060":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:13999:11342":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:46467:14141":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"5:6772:42660":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:4976:12045":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:8611:15032":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"0:2504:3833":{"crate_id":0,"path":["chrono","format","Colons","Colon"],"kind":"variant"},"6:5515:13147":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:4447:42678":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:11128:10975":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:7085:12241":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:43347:14033":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:2641:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"12:0:9005":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:13785:11311":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:3172:2566":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:2950:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:5418:42660":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:6398:11993":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"21:377:10709":{"crate_id":21,"path":["num_traits","ops","checked","CheckedRem"],"kind":"trait"},"1:2313:7937":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:8768:8240":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:7631:14957":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:517:12640":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:23528:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4787:12826":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:7684:16088":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"0:2377:3750":{"crate_id":0,"path":["chrono","format","Fixed","LowerAmPm"],"kind":"variant"},"17:0:9009":{"crate_id":17,"path":["object"],"kind":"module"},"17:13986:11341":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:3582:8016":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:8136:12367":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"21:1984:10694":{"crate_id":21,"path":["num_traits","float","FloatConst"],"kind":"trait"},"1:11645:14264":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:6016:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"9:53:15126":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:4872:17014":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:40488:14978":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:12530:14850":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"0:2741:2366":{"crate_id":0,"path":["chrono","naive","NaiveWeek"],"kind":"struct"},"6:1621:12768":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:8179:9426":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:44783:14069":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:934:10430":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:22866:13750":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:732:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:2636:11981":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:10444:858":{"crate_id":2,"path":["core","hash"],"kind":"module"},"2:42174:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:8151:2732":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:7665:14686":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:46938:14190":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:45764:14079":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:2245:13665":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:7570:12008":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:42055:10060":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:2882:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:9912:788":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"16:6749:12188":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"17:13272:11198":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:40544:9318":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:33601:9141":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"0:1939:2351":{"crate_id":0,"path":["chrono","offset","Offset"],"kind":"trait"},"16:7580:12303":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"0:2529:3671":{"crate_id":0,"path":["chrono","format","Item","Space"],"kind":"variant"},"2:44365:9247":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:1871:9444":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:12289:11086":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:4816:9212":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:22371:17148":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"0:2285:3671":{"crate_id":0,"path":["chrono","format","Pad","Space"],"kind":"variant"},"2:40535:9308":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:4637:9374":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13235:11186":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:3055:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:9387:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"0:2375:3747":{"crate_id":0,"path":["chrono","format","Fixed","LongWeekdayName"],"kind":"variant"},"17:11755:11042":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"5:1073:42660":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:14012:11344":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:8703:9908":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:2698:9468":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:6409:13247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:33400:2567":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:11094:38378":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:10710:14782":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:4587:12033":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:2838:11990":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:15799:11835":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:6026:12091":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"15:288:16068":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:8529:9254":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:1094:10441":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"21:545:10731":{"crate_id":21,"path":["num_traits","sign","Signed"],"kind":"trait"},"2:40627:9324":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:44188:14051":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:14372:11414":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"0:2393:3772":{"crate_id":0,"path":["chrono","format","Fixed","TimezoneOffsetDoubleColon"],"kind":"variant"},"21:347:10704":{"crate_id":21,"path":["num_traits","ops","bytes","ToBytes"],"kind":"trait"},"2:10652:22345":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"11:1883:9499":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:2476:9417":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:219:10565":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"11:2423:10015":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"0:2281:190":{"crate_id":0,"path":["chrono","format","Pad","None"],"kind":"variant"},"10:0:9003":{"crate_id":10,"path":["adler"],"kind":"module"},"5:7390:13683":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:6609:13355":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:21529:39781":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:10439:10995":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:1071:10439":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:14529:11441":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:6171:14201":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:7769:12310":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:5457:13127":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:12299:7914":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:5686:11994":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:40689:9328":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:14402:11419":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:10286:9197":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:3735:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:5980:9909":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:10503:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"16:6940:12223":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:12353:11101":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:6504:12148":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:7528:12298":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:7446:10015":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:22157:9436":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:15092:11637":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:32030:12523":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:12350:870":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:12358:1402":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:42369:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:3778:12021":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:8492:9435":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:6670:13380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4824:12853":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:7656:29519":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:12107:11019":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:12863:9246":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"11:1582:14928":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:10612:14780":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:13211:11185":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:7563:9783":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"20:47:10836":{"crate_id":20,"path":["iana_time_zone","platform","openwrt","BrokenQuote"],"kind":"struct"},"16:4614:12034":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:16235:11943":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"16:7618:12304":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:16069:11904":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:5477:13138":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:14912:11603":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:150:11949":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:15463:11726":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:45785:14084":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:15039:11624":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:5260:13032":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12808:11137":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:4477:9444":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:2846:22243":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:1960:2430":{"crate_id":1,"path":["std","error"],"kind":"module"},"6:8282:13645":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:6263:12129":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:7546:13594":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:44010:9257":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"11:2469:10430":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"0:2501:3809":{"crate_id":0,"path":["chrono","format","Colons"],"kind":"enum"},"20:61:10460":{"crate_id":20,"path":["iana_time_zone","GetTimezoneError"],"kind":"enum"},"1:9318:15042":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:3126:9215":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:42586:9198":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:42881:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:5134:12986":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:6597:13350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:6560:11996":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:14111:11357":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:22511:17141":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:3329:12018":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:40187:9272":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:41111:9296":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"0:2339:3726":{"crate_id":0,"path":["chrono","format","Numeric","Timestamp"],"kind":"variant"},"16:7306:43085":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:5219:13011":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:15078:11633":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:4213:16974":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:11037:14230":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:22873:9370":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:41668:16962":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:7168:14236":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:3116:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"0:2478:3821":{"crate_id":0,"path":["chrono","format","OffsetPrecision","Minutes"],"kind":"variant"},"21:138:10697":{"crate_id":21,"path":["num_traits","cast","ToPrimitive"],"kind":"trait"},"17:2203:14770":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:1954:13695":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:32090:9210":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:945:10432":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"18:531:10844":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:5472:13136":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:11647:11031":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:7006:14899":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:40887:9334":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:7539:12007":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:6542:13313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:15596:11781":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:4891:12895":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:13485:11234":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:5390:13084":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:45994:14104":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:15324:11690":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"0:2539:3074":{"crate_id":0,"path":["chrono","format","Item","Fixed"],"kind":"variant"},"17:12993:29582":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:41129:9300":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:8644:15033":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"11:2542:12520":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:5247:15004":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5191:12998":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:22516:17139":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:21999:9436":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:40450:9254":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"5:7129:42687":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:39424:9161":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:2258:10561":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:11324:14797":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:45884:14090":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:12315:34156":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:2318:13671":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:46991:14193":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:1639:12780":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:2112:14939":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:9238:17034":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:14341:11409":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"21:505:10725":{"crate_id":21,"path":["num_traits","ops","wrapping","WrappingShr"],"kind":"trait"},"16:6634:12001":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:12900:11143":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:872:14764":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:40478:13702":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:1527:10427":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:4550:15002":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7727:12011":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:5611:15007":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:1007:10439":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:6411:17151":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:40863:9332":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:14260:11399":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:12175:14835":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:589:10850":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"21:275:10701":{"crate_id":21,"path":["num_traits","identities","One"],"kind":"trait"},"1:5953:15013":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:670:14762":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:3475:12019":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:46666:14176":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:41990:10245":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:8328:13654":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:11100:38379":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:44524:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:43328:14031":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:1857:10488":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:6784:14698":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"0:2585:3873":{"crate_id":0,"path":["chrono","format","ParseErrorKind","Invalid"],"kind":"variant"},"16:6456:29513":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:39474:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:7655:13692":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:8647:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:9208:17033":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11115:14792":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:4099:16964":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:953:10434":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"0:2407:3730":{"crate_id":0,"path":["chrono","format","Fixed","Internal"],"kind":"variant"},"6:5250:13026":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:2488:9423":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:32197:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:4924:12913":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:1200:16087":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:44159:14042":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:22026:13729":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:6412:29512":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"5:7454:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:3038:13668":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:597:10982":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:44806:14070":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:12225:14842":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:12345:720":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"1:1612:10429":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:8235:7921":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"16:4856:12041":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:4468:12029":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:14868:11572":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:45977:14103":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"14:160:14678":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"21:380:10708":{"crate_id":21,"path":["num_traits","ops","checked","CheckedNeg"],"kind":"trait"},"17:11026:29591":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:9886:29574":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:1609:10015":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"11:1891:10429":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:32166:9923":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:46169:14113":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12863:11140":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:3842:10429":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:40262:13970":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:22918:9436":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"5:2216:13663":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:8542:9257":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:44684:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:15197:11660":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:839:14933":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:14463:11434":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:9419:14704":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"6:5436:13112":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:11684:14267":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:13798:10543":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:6648:12164":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:5087:17012":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:42488:14965":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:10543:9399":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:46408:14138":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:44280:14054":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:10170:10986":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:43732:9255":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:7446:13533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:1984:1342":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:2534:7957":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:42291:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"21:344:33777":{"crate_id":21,"path":["num_traits","ops","bytes","NumBytes"],"kind":"trait"},"2:41102:9294":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:5825:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:553:12661":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:9165:15035":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:8230:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:9933:39829":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:40698:9329":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:1893:10498":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"0:2385:3759":{"crate_id":0,"path":["chrono","format","Fixed","Nanosecond6"],"kind":"variant"},"17:11915:29676":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:3368:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:4201:16971":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"0:2422:3788":{"crate_id":0,"path":["chrono","format","InternalFixed"],"kind":"struct"},"6:5361:13069":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:4844:788":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:43343:14032":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:45869:14089":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:41096:9293":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:12695:14856":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:5557:13165":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:15410:11715":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:10137:29555":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:7323:38395":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:22004:10704":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:42252:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:4800:12835":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:5960:12083":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:1692:12808":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:10596:15034":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:4322:16091":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:3358:9155":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"0:2581:3866":{"crate_id":0,"path":["chrono","format","ParseErrorKind","Impossible"],"kind":"variant"},"17:11688:11034":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:9916:29575":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5181:12991":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"21:597:10687":{"crate_id":21,"path":["num_traits","NumAssign"],"kind":"trait"},"6:7339:13498":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"11:1160:10442":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:15116:11639":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"18:521:33761":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:1839:10430":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:13064:11154":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"18:491:10838":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:7359:13504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:5382:13079":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:13774:11308":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:9223:17032":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:4979:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:11325:14968":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:8554:15031":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:32107:7671":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:43960:9266":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:42836:9207":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:14246:11397":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:11193:14228":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:12346:895":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:23065:13765":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"2:2717:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11547:10929":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:16187:11933":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:44506:9175":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"0:3067:4458":{"crate_id":0,"path":["chrono","offset","LocalResult","Ambiguous"],"kind":"variant"},"2:41958:9652":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:12854:9243":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:12508:11117":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:524:9768":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:1918:10505":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"21:461:33778":{"crate_id":21,"path":["num_traits","ops","overflowing","OverflowingAdd"],"kind":"trait"},"16:7321:9651":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"18:706:9246":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:1103:10442":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:1559:12723":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:10977:38297":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:11083:9499":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:2478:9418":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"9:178:15136":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"0:2329:3713":{"crate_id":0,"path":["chrono","format","Numeric","Hour"],"kind":"variant"},"6:8247:13637":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:12399:11104":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:3114:9384":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:15301:11685":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:4837:12863":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"11:396:15511":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:21498:39780":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:12824:29581":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:11612:14261":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:22701:13732":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:11567:14810":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:5423:13102":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:41073:13989":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:4062:12026":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:5565:13167":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:8188:14923":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:5642:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:6519:13300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:33061:9138":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:6427:14898":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:538:12652":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:11778:14997":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:7724:10430":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:40:10545":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:3639:3068":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:9173:10015":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"11:2498:28574":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:44498:9235":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:43878:9264":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:21547:9436":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:43860:9265":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:9984:29577":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:44030:9258":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:4811:12843":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"0:2562:2361":{"crate_id":0,"path":["chrono","format","ParseError"],"kind":"struct"},"6:7412:13527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:15944:11185":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"15:327:15123":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"0:2482:3825":{"crate_id":0,"path":["chrono","format","OffsetPrecision","OptionalMinutes"],"kind":"variant"},"1:9157:9499":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"0:2532:3843":{"crate_id":0,"path":["chrono","format","Item","OwnedSpace"],"kind":"variant"},"17:12969:11146":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:13899:11328":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:11341:14800":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:44253:14053":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:12352:1815":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:30895:9194":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:9708:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:5039:12968":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:4424:12028":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:46976:14192":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:4432:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:9272:15036":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:10185:10987":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:8259:6475":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:9317:9653":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:40249:13969":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11825:14826":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:8846:9498":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:22438:22298":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:21500:39768":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:46317:14135":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:22732:13736":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:41080:9289":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:13538:14973":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:5591:15006":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:40613:13982":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:6821:13431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"11:1917:12516":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"21:382:10710":{"crate_id":21,"path":["num_traits","ops","checked","CheckedShl"],"kind":"trait"},"16:6991:43081":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:4771:12038":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:7352:14705":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:46912:14188":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:12338:1704":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:1707:12815":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:8341:13658":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:38761:9152":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"0:0:2442":{"crate_id":0,"path":["chrono"],"kind":"module"},"1:11217:38293":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:30240:9356":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:9715:9429":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"16:5347:12051":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"11:1603:14929":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:741:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:564:9774":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"5:3314:12517":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:8294:13647":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:11601:34162":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"2:3342:9153":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:32072:3730":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:2845:9436":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:13173:11170":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:6811:13428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:3022:14995":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:14752:11479":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:16151:11924":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:4897:12898":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:1503:12690":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:41854:14011":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"11:2403:10060":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"0:2371:3743":{"crate_id":0,"path":["chrono","format","Fixed","LongMonthName"],"kind":"variant"},"5:1351:10440":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:8650:9303":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:14475:11435":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:39602:13840":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"21:566:10732":{"crate_id":21,"path":["num_traits","sign","Unsigned"],"kind":"trait"},"9:424:28502":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"11:710:10432":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"0:106:1322":{"crate_id":0,"path":["chrono","prelude"],"kind":"module"},"2:7619:9316":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:8155:9306":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:14986:11614":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:1947:659":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:578:12674":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:40291:9272":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:44174:14048":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11063:14789":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:7402:10429":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:15356:11701":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:4352:12027":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:11243:3069":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:6955:10551":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:7936:38388":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:4796:16969":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:5236:13020":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:10968:9432":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:15445:11723":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8004:9781":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"16:7695:12308":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:43096:14025":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:21549:17064":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:42330:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"0:2403:3389":{"crate_id":0,"path":["chrono","format","Fixed","RFC2822"],"kind":"variant"},"16:7686:14919":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:13399:11218":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:289:42660":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:43143:14030":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:45749:14078":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:5846:12066":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:7740:10546":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:5636:13202":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:1490:12684":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:3202:9158":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"6:8351:13660":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:96:16061":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:4502:12030":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"18:598:43101":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:261:14764":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:6532:13306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:12609:9278":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:15616:11787":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:8006:13623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:25:683":{"crate_id":2,"path":["core","env"],"kind":"macro"},"11:875:10437":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:2622:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:6300:14885":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:1671:12798":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:6775:13415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"0:2301:3686":{"crate_id":0,"path":["chrono","format","Numeric","Year"],"kind":"variant"},"17:10155:10985":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:15426:11718":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"21:600:10688":{"crate_id":21,"path":["num_traits","NumAssignRef"],"kind":"trait"},"6:5617:13193":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:10956:14250":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"5:7373:10544":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:4558:9209":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11898:11046":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:3406:10430":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:41814:14210":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:40636:9325":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:11690:14268":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:4882:12042":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:5122:12985":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:8201:9305":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:8174:9429":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:1593:12744":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:6636:13364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:5174:12989":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:21600:9436":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:6480:11995":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:22333:17145":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"16:2592:11979":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:10345:15046":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:4756:9382":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:42047:9499":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:8271:13641":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:11493:14804":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:3667:9454":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:45670:14071":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11773:11123":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:21515:39773":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:3347:9154":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"0:2280:3666":{"crate_id":0,"path":["chrono","format","Pad"],"kind":"enum"},"5:1536:10428":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"11:2369:14932":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:3575:9165":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:8259:13639":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"21:105:33769":{"crate_id":21,"path":["num_traits","bounds","UpperBounded"],"kind":"trait"},"0:969:2363":{"crate_id":0,"path":["chrono","naive"],"kind":"module"},"1:4191:16970":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:11020:34151":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"18:481:10837":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11293:29609":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:14516:11440":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:10997:11002":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:41999:9784":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:45852:14088":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:6560:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:11225:9175":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:12264:14845":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:4992:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:40595:9321":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:11926:14972":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:10504:15520":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:8464:9288":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:5078:17011":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:3428:9475":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:44020:9259":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4932:12915":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:9123:14228":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:3569:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:34092:9144":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:8338:15025":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:46621:14175":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:1085:10440":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:10413:15608":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:46819:14181":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:40272:13971":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:47014:14194":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:43673:13723":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:10828:43093":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"11:2326:10440":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:12344:741":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:9392:14695":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:43088:9398":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:7967:9290":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:5546:13159":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"9:0:9002":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:6346:13725":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:11189:11009":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:6910:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11313:11016":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:8548:15029":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12056:11078":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:8862:9500":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:14025:11345":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:6650:13375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:40234:40025":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:11907:36516":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:11415:12585":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:12300:29700":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13455:11230":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:44486:9242":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"10:44:12529":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"0:2457:3803":{"crate_id":0,"path":["chrono","format","OffsetFormat"],"kind":"struct"},"16:2936:28649":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:4914:16982":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:15058:11625":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:5462:9405":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:952:9499":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:46886:14186":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:7355:12280":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:16138:11918":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"16:3669:10887":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:4743:12037":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"5:2298:42557":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:1723:12820":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:8791:9496":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:7382:10015":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:12351:1833":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"0:2335:3719":{"crate_id":0,"path":["chrono","format","Numeric","Second"],"kind":"variant"},"6:6460:13267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:8338:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:40557:9309":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12647:14852":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:12331:1159":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:6606:12160":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:7559:12302":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:9290:34159":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:22357:9436":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:6714:13399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:473:12612":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:1605:9499":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:79:1894":{"crate_id":2,"path":["core","usize"],"kind":"module"},"2:32195:9922":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:33746:9142":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:3644:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:16050:11198":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"6:8317:13653":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"14:187:28592":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:1970:9179":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:43702:7955":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:4701:9381":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:14876:11573":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:11634:11030":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:5445:13118":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:14051:11349":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:42607:9200":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:14079:11353":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:4934:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:43628:9307":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"21:373:10707":{"crate_id":21,"path":["num_traits","ops","checked","CheckedMul"],"kind":"trait"},"6:6491:13288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:6270:38376":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:5861:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:10710:9476":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:13497:11235":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"0:3062:2367":{"crate_id":0,"path":["chrono","offset","LocalResult"],"kind":"enum"},"1:4661:16992":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:497:12623":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:15:2401":{"crate_id":2,"path":["core","write"],"kind":"macro"},"21:481:10719":{"crate_id":21,"path":["num_traits","ops","saturating","SaturatingMul"],"kind":"trait"},"17:10982:29590":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:9938:29576":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:14386:11416":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:22780:13739":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:4395:15000":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6442:12139":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:2660:11982":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:7314:13480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:879:16930":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:15473:11731":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:2284:7908":{"crate_id":1,"path":["std","fs"],"kind":"module"},"1:9737:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"13:0:8999":{"crate_id":13,"path":["std_detect"],"kind":"module"},"11:687:10060":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:3893:14997":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:39512:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:8251:9469":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11467:11026":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:4761:17010":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"11:328:12512":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:3600:9433":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12433:11108":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:1477:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:3288:12514":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:10347:15045":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:9259:14235":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:21726:17061":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:23392:5769":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"type_alias"},"2:22424:17149":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:7642:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:8625:14212":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"17:10573:43097":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:40438:13978":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"0:2502:190":{"crate_id":0,"path":["chrono","format","Colons","None"],"kind":"variant"},"5:7592:22324":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:11005:15009":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:367:9789":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:7119:3070":{"crate_id":1,"path":["std","time","UNIX_EPOCH"],"kind":"constant"},"17:13855:11320":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:9364:14239":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"11:883:10438":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:8070:10508":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:2137:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:9404:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:10905:14785":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:5671:13215":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:11089:14790":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:5769:12059":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:676:16922":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:2680:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:15400:11712":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:6466:12144":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:3218:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:41087:9291":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:30868:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:3554:9163":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:21716:9436":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:44757:14985":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"0:2521:172":{"crate_id":0,"path":["chrono","format","Item"],"kind":"enum"},"9:330:12565":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:3975:10015":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:890:10015":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:42826:14017":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:12127:11083":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:5677:13218":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:2748:11986":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:41652:13995":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:40193:13965":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:11366:9265":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:5756:14861":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:22648:13731":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:5277:13043":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4870:12886":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:45831:14087":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"11:1025:10440":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:5075:12048":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:9311:15041":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:9344:34168":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:44055:9271":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:5466:9406":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:14977:11613":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:1699:12811":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:22788:13740":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:44039:9274":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:7755:12002":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:44548:9176":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:8192:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"0:2313:2343":{"crate_id":0,"path":["chrono","format","Numeric","Month"],"kind":"variant"},"17:12683:14855":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:13292:11199":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:3194:9156":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:44048:9270":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"0:2321:2365":{"crate_id":0,"path":["chrono","format","Numeric","IsoWeek"],"kind":"variant"},"2:10928:9436":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:41927:9651":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:44502:9236":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"21:385:10711":{"crate_id":21,"path":["num_traits","ops","checked","CheckedShr"],"kind":"trait"},"2:40394:13976":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:8605:16991":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"14:202:2361":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:13089:8277":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:6738:13404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:21728:13728":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:11083:38393":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:40423:22324":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:42410:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:15190:11658":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:2572:11978":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:13486:40932":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"11:844:10435":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:12213:14841":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:2462:7922":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:7389:13526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13375:11214":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:3332:9477":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:860:14860":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:5742:12054":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:3293:34387":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:10284:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:41910:10060":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:4875:16992":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:7910:29521":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:45732:14077":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:7052:14900":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12584:14783":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:2734:9459":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:6562:13329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:8720:9495":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:46446:14140":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:15822:11839":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:12150:11084":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:5278:15004":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:2123:14940":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"16:867:14763":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:10296:9201":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:8186:9430":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:0:9008":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:40873:9333":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"11:2124:10439":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:6706:14204":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:3549:9444":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:39589:13839":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"0:1978:2369":{"crate_id":0,"path":["chrono","round"],"kind":"module"},"11:1051:10441":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:5200:13003":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13946:11334":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:5528:13148":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"21:371:10712":{"crate_id":21,"path":["num_traits","ops","checked","CheckedSub"],"kind":"trait"},"5:3046:15515":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"0:2506:3835":{"crate_id":0,"path":["chrono","format","Colons","Maybe"],"kind":"variant"},"5:3035:10056":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:13844:11319":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:911:10428":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:4986:14778":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:8253:13638":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:7422:13684":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:32106:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:11252:14967":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:6066:12095":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:6441:13265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:2338:11961":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:5520:1704":{"crate_id":5,"path":["alloc","str"],"kind":"module"},"6:4885:12893":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:7867:10982":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"0:2369:3740":{"crate_id":0,"path":["chrono","format","Fixed","ShortMonthName"],"kind":"variant"},"2:41636:13993":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:15102:11638":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:11914:14271":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:2458:11973":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:7330:13492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:23076:13766":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"0:2535:3683":{"crate_id":0,"path":["chrono","format","Item","Numeric"],"kind":"variant"},"16:2394:11970":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:5415:13097":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:22766:10692":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:45817:14086":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:563:10849":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:1547:12715":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:4912:16980":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:14560:11447":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:3057:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:5064:12981":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"0:946:2362":{"crate_id":0,"path":["chrono","format","ParseResult"],"kind":"type_alias"},"2:3197:9157":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"0:2405:3787":{"crate_id":0,"path":["chrono","format","Fixed","RFC3339"],"kind":"variant"},"21:189:10696":{"crate_id":21,"path":["num_traits","cast","NumCast"],"kind":"trait"},"17:14271:11400":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:2535:13672":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"21:479:10720":{"crate_id":21,"path":["num_traits","ops","saturating","SaturatingSub"],"kind":"trait"},"2:40666:9312":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"18:113:16064":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"0:2311:3697":{"crate_id":0,"path":["chrono","format","Numeric","IsoYearMod100"],"kind":"variant"},"1:11278:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:13568:11259":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:4971:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"0:2331:3715":{"crate_id":0,"path":["chrono","format","Numeric","Hour12"],"kind":"variant"},"17:9737:29556":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:15569:11769":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12408:11105":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:12543:14851":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:8022:9779":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:44478:9239":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:10756:9779":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:13877:11327":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:959:10435":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:6435:13262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:2206:9768":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:11967:9251":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:7432:42483":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:32108:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:10294:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:5190:40925":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:15957:11860":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"21:307:10702":{"crate_id":21,"path":["num_traits","int","PrimInt"],"kind":"trait"},"16:6758:12189":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:13686:13725":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:12485:29702":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:3254:12515":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:12355:1809":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:2323:28647":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"21:0:2444":{"crate_id":21,"path":["num_traits"],"kind":"module"},"0:2578:3859":{"crate_id":0,"path":["chrono","format","ParseErrorKind"],"kind":"enum"},"6:5266:13035":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:39340:9172":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:7633:43082":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:2961:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:10234:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:43924:9269":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:8648:13508":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:6563:10429":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:2773:9470":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:5400:13091":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"16:5037:12047":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:5270:963":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:46866:14184":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:5101:17013":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13424:11221":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"21:435:10717":{"crate_id":21,"path":["num_traits","ops","mul_add","MulAddAssign"],"kind":"trait"},"2:40379:13974":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:5885:9444":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:39437:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7473:12099":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:32076:6475":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:1638:12517":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:5146:12987":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10720:43092":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:12354:1827":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:1566:10433":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:8288:13646":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:1489:10060":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:46379:14137":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:12768:29559":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"21:531:10728":{"crate_id":21,"path":["num_traits","pow","Pow"],"kind":"trait"},"5:5931:10429":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:43683:14984":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:6813:12202":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11075:11005":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:14489:11436":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:4913:12043":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:8175:14920":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:12251:14844":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:7056:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:2684:11983":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:4143:16967":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:11818:14998":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:726:10874":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:4113:42660":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:10288:9198":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:12328:11092":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:1164:16086":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:2072:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:4358:14961":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:39452:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:8619:15029":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"0:2395:3775":{"crate_id":0,"path":["chrono","format","Fixed","TimezoneOffsetTripleColon"],"kind":"variant"},"2:42072:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:6678:13382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:588:9776":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:5665:13213":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:46429:14139":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:14284:11402":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:21471:39775":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:10534:43091":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"0:2399:3782":{"crate_id":0,"path":["chrono","format","Fixed","TimezoneOffset"],"kind":"variant"},"11:2569:9393":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"0:2305:3690":{"crate_id":0,"path":["chrono","format","Numeric","YearMod100"],"kind":"variant"},"1:11353:14706":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"16:2548:11977":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:9463:7956":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:12371:11144":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:45898:14091":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"16:6665:29514":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:4993:16979":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:9112:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:8226:29522":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:4314:16090":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:13738:11300":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:16176:11932":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:13663:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:33333:2562":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"21:260:3669":{"crate_id":21,"path":["num_traits","identities","Zero"],"kind":"trait"},"17:15608:11784":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:1627:12515":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:256:14763":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:12353:1821":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:7877:14707":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:30489:10541":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:38072:9149":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:15281:11678":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:15624:11788":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:479:12615":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:7857:12320":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:22595:13730":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:10639:38372":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:4093:16965":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:5981:9444":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:41802:14009":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:11659:14265":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:2508:11975":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:7452:13535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:668:14987":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:5598:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:22999:13759":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"2:6681:9336":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:8169:9428":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"5:1555:10432":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:8224:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:40657:9326":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:22755:9357":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:16079:11905":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:10914:14242":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:7907:9288":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:5169:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"11:1566:28579":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"0:2356:3731":{"crate_id":0,"path":["chrono","format","InternalNumeric"],"kind":"struct"},"17:13509:11236":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:6098:29510":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10251:10989":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:11214:14966":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:6621:13362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"5:7104:42694":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:43581:13721":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:22966:13756":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"17:15760:11826":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:559:12664":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:9807:29562":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"20:0:2443":{"crate_id":20,"path":["iana_time_zone"],"kind":"module"},"1:8512:9318":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"15:0:9007":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:44490:9240":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4876:12888":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:13473:11231":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:5415:12052":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:43742:9254":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:12597:11119":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"11:2443:10429":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:8196:9427":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:4711:9210":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:12478:11113":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:22988:13758":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:5283:13046":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:40679:9327":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:46222:14116":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"0:2589:3877":{"crate_id":0,"path":["chrono","format","ParseErrorKind","TooLong"],"kind":"variant"},"17:12201:14840":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:6900:13457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:10769:43095":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:7111:12248":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:45956:14102":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:3330:9476":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:12395:8273":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:23043:13763":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"}},"external_crates":{"20":{"name":"iana_time_zone","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"num_traits","html_root_url":"https://docs.rs/num-traits/0.2/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}