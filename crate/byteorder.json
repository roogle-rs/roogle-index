{"root":"0:0:3176","crate_version":"1.5.0","includes_private":false,"index":{"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1579,0],"end":[1579,50]},"visibility":"default","docs":"All types that implement `Write` get methods defined in `WriteBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3839:3468","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_u64","write_uint","write_u16","write_u8","write_i128","write_i64","write_u128","write_int","write_u32","write_i16","write_u24","write_int128","write_uint128","write_i32","write_i24","write_i8","write_u48","write_f64","write_f32","write_i48"],"trait":{"name":"WriteBytesExt","id":"0:106:2507","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"generic":"W"},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:2:2918-0:340:2538":{"id":"b:2:2918-0:340:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2916:3983","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2920:28109"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:340:2538":{"id":"0:340:2538","crate_id":0,"name":"LittleEndian","span":{"filename":"src/lib.rs","begin":[1843,0],"end":[1843,24]},"visibility":"public","docs":"Defines little-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"has_stripped_variants":false,"variants":[],"impls":["a:2:36000:251-0:340:2538","a:2:3408:263-0:340:2538","a:2:3443:3985-0:340:2538","a:2:36058:3898-0:340:2538","a:2:45850:3937-0:340:2538","a:2:45851:3936-0:340:2538","b:2:2860-0:340:2538","b:2:2863-0:340:2538","b:2:2918-0:340:2538","b:2:3175-0:340:2538","b:2:3179-0:340:2538","b:2:3185-0:340:2538","b:2:3190-0:340:2538","b:2:4055-0:340:2538","b:5:816-0:340:2538","0:341","0:343","0:344","0:346","0:348","0:351","0:353","0:354","0:356","0:253","0:291"]}}},"0:21:3318":{"id":"0:21:3318","crate_id":0,"name":"read_u8","span":{"filename":"src/io.rs","begin":[55,4],"end":[59,5]},"visibility":"default","docs":"Reads an unsigned 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![2, 5]);\nassert_eq!(2, rdr.read_u8().unwrap());\nassert_eq!(5, rdr.read_u8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:212:2698":{"id":"0:212:2698","crate_id":0,"name":"write_int128","span":{"filename":"src/lib.rs","begin":[926,4],"end":[928,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i128"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:207:2689":{"id":"0:207:2689","crate_id":0,"name":"write_i32","span":{"filename":"src/lib.rs","begin":[814,4],"end":[816,5]},"visibility":"default","docs":"Writes a signed 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:261:2567":{"id":"0:261:2567","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[1940,4],"end":[1942,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:210:2696":{"id":"0:210:2696","crate_id":0,"name":"write_i128","span":{"filename":"src/lib.rs","begin":[880,4],"end":[882,5]},"visibility":"default","docs":"Writes a signed 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read n-byte `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i128"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:263:2593":{"id":"0:263:2593","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[1950,4],"end":[1952,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:335":{"id":"0:335","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:36002:260","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"2:3188:150":{"id":"2:3188:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}}},"0:102:2773":{"id":"0:102:2773","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/io.rs","begin":[1039,4],"end":[1044,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Safety\n\nThis method is unsafe because there are no guarantees made about the\nfloating point values. In particular, this method does not check for\nsignaling NaNs, which may result in undefined behavior.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f64_into` instead"},"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:184:2600":{"id":"0:184:2600","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[328,4],"end":[328,37]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:236:2808":{"id":"0:236:2808","crate_id":0,"name":"write_i64_into","span":{"filename":"src/lib.rs","begin":[1512,4],"end":[1517,5]},"visibility":"default","docs":"Writes signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:262:2579":{"id":"0:262:2579","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[1945,4],"end":[1947,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:213:2700":{"id":"0:213:2700","crate_id":0,"name":"write_f32","span":{"filename":"src/lib.rs","begin":[949,4],"end":[951,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"f32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:306:2631":{"id":"0:306:2631","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2194,4],"end":[2201,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:339:1376":{"id":"0:339:1376","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1812,55],"end":[1812,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:45754:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:34760:208","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:88:2738":{"id":"0:88:2738","crate_id":0,"name":"read_i16_into","span":{"filename":"src/io.rs","begin":[747,4],"end":[754,5]},"visibility":"default","docs":"Reads a sequence of signed 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:73:2675":{"id":"0:73:2675","crate_id":0,"name":"read_f32","span":{"filename":"src/io.rs","begin":[499,4],"end":[503,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian single-precision floating point number from a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n]);\nassert_eq!(f32::consts::PI, rdr.read_f32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"f32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:270:2620":{"id":"0:270:2620","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[1983,4],"end":[1985,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:298:2610":{"id":"0:298:2610","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[2156,4],"end":[2161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:2862:3673":{"id":"2:2862:3673","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:272:2626":{"id":"0:272:2626","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[1993,4],"end":[1995,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,16],"end":[1812,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3403:121","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:133:2624":{"id":"0:133:2624","crate_id":0,"name":"write_u64","span":{"filename":"src/io.rs","begin":[1367,4],"end":[1371,5]},"visibility":"default","docs":"Writes an unsigned 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u64::<BigEndian>(918733457491587).unwrap();\nwtr.write_u64::<BigEndian>(143).unwrap();\nassert_eq!(wtr, b\"\\x00\\x03\\x43\\x95\\x4d\\x60\\x86\\x83\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:61:2576":{"id":"0:61:2576","crate_id":0,"name":"read_uint","span":{"filename":"src/io.rs","begin":[427,4],"end":[431,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0x74, 0xfa]);\nassert_eq!(8418554, rdr.read_uint::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:175:2537":{"id":"0:175:2537","crate_id":0,"name":"Sealed","span":{"filename":"src/lib.rs","begin":[172,4],"end":[172,23]},"visibility":"public","docs":"Sealed stops crates other than byteorder from implementing any traits\nthat use it.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:312:2776":{"id":"0:312:2776","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2224,4],"end":[2226,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:314:2782":{"id":"0:314:2782","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2234,4],"end":[2236,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3185-0:340:2538":{"id":"b:2:3185-0:340:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3188:150","2:3189:1927"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:348":{"id":"0:348","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,33],"end":[1842,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:11235:165","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:349:923"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:254:60":{"id":"0:254:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1846,4],"end":[1848,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:46:2652":{"id":"0:46:2652","crate_id":0,"name":"read_i48","span":{"filename":"src/io.rs","begin":[295,4],"end":[299,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x9d, 0x71, 0xab, 0xe7, 0x97, 0x8f]);\nassert_eq!(-108363435763825, rdr.read_i48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:178:2563":{"id":"0:178:2563","crate_id":0,"name":"ByteOrder","span":{"filename":"src/lib.rs","begin":[212,0],"end":[1794,1]},"visibility":"public","docs":"`ByteOrder` describes types that can serialize integers as bytes.\n\nNote that `Self` does not appear anywhere in this trait's definition!\nTherefore, in order to use it, you'll need to use syntax like\n`T::read_u16(&[0, 1])` where `T` implements `ByteOrder`.\n\nThis crate provides two types that implement `ByteOrder`: [`BigEndian`]\nand [`LittleEndian`].\nThis trait is sealed and cannot be implemented for callers to avoid\nbreaking backwards compatibility when adding new derived traits.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, BigEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:179:2567","0:180:2575","0:181:2579","0:182:2586","0:183:2593","0:184:2600","0:185:2576","0:186:2610","0:187:2615","0:188:2617","0:189:2620","0:190:2622","0:191:2624","0:192:2626","0:193:2618","0:194:2631","0:195:2636","0:196:2641","0:197:2647","0:198:2652","0:199:2657","0:200:2662","0:201:2642","0:202:2669","0:203:2675","0:204:2682","0:205:2684","0:206:2686","0:207:2689","0:208:2691","0:209:2693","0:210:2696","0:211:2687","0:212:2698","0:213:2700","0:214:2703","0:215:2712","0:216:2720","0:217:2726","0:218:2732","0:219:2738","0:220:2744","0:221:2748","0:222:2752","0:223:2759","0:225:2765","0:226:2769","0:228:2773","0:229:2776","0:230:2779","0:231:2782","0:232:2785","0:233:2799","0:234:2804","0:235:2806","0:236:2808","0:237:2810","0:238:2812","0:239:2814","0:240:2823","0:241:2828","0:242:2832","0:243:2836","0:244:2841","0:245:2845","0:246:2849","0:247:2853","0:248:2856","0:249:2858"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3403:121","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:3227:127","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2957:147","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11235:165","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"2:2988:207","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2952:213","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2994:214","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"private::Sealed","id":"0:175:2537","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:260","0:291"]}}},"2:4057:1940":{"id":"2:4057:1940","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:43501:7463","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:100:2769":{"id":"0:100:2769","crate_id":0,"name":"read_f64_into","span":{"filename":"src/io.rs","begin":[987,4],"end":[994,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:90:2744":{"id":"0:90:2744","crate_id":0,"name":"read_i32_into","span":{"filename":"src/io.rs","begin":[782,4],"end":[789,5]},"visibility":"default","docs":"Reads a sequence of signed 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:92:2748":{"id":"0:92:2748","crate_id":0,"name":"read_i64_into","span":{"filename":"src/io.rs","begin":[820,4],"end":[827,5]},"visibility":"default","docs":"Reads a sequence of signed 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:79:2712":{"id":"0:79:2712","crate_id":0,"name":"read_u16_into","span":{"filename":"src/io.rs","begin":[562,4],"end":[569,5]},"visibility":"default","docs":"Reads a sequence of unsigned 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:36002:260","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:115:2617":{"id":"0:115:2617","crate_id":0,"name":"write_u24","span":{"filename":"src/io.rs","begin":[1205,4],"end":[1209,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u24::<BigEndian>(267).unwrap();\nwtr.write_u24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\x00\\x01\\x0b\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:203:2675":{"id":"0:203:2675","crate_id":0,"name":"read_f32","span":{"filename":"src/lib.rs","begin":[725,4],"end":[727,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"f32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:247:2853":{"id":"0:247:2853","crate_id":0,"name":"from_slice_i128","span":{"filename":"src/lib.rs","begin":[1774,4],"end":[1779,5]},"visibility":"default","docs":"Converts the given slice of signed 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i128(&mut numbers);\nassert_eq!(numbers, [5i128.to_be(), 65000i128.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:251:60":{"id":"0:251:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1816,4],"end":[1818,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2863-0:340:2538":{"id":"b:2:2863-0:340:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2865:28108"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:330":{"id":"0:330","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,33],"end":[1812,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:11235:165","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:331:923"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:183:2593":{"id":"0:183:2593","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[309,4],"end":[309,35]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:67:2610":{"id":"0:67:2610","crate_id":0,"name":"read_uint128","span":{"filename":"src/io.rs","begin":[460,4],"end":[464,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:327:849":{"id":"0:327:849","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1812,22],"end":[1812,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:341":{"id":"0:341","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,9],"end":[1842,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:342:510"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:83:2726":{"id":"0:83:2726","crate_id":0,"name":"read_u64_into","span":{"filename":"src/io.rs","begin":[635,4],"end":[642,5]},"visibility":"default","docs":"Reads a sequence of unsigned 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:288:2836":{"id":"0:288:2836","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2093,4],"end":[2099,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3190-0:322:2539":{"id":"b:2:3190-0:322:2539","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3193:150","2:3194:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:342:510":{"id":"0:342:510","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1842,9],"end":[1842,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:3443:3985-0:322:2539":{"id":"a:2:3443:3985-0:322:2539","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3443:3985","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:234:2804":{"id":"0:234:2804","crate_id":0,"name":"write_i16_into","span":{"filename":"src/lib.rs","begin":[1456,4],"end":[1461,5]},"visibility":"default","docs":"Writes signed 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:320:2856":{"id":"0:320:2856","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2280,4],"end":[2289,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:139:2626":{"id":"0:139:2626","crate_id":0,"name":"write_u128","span":{"filename":"src/io.rs","begin":[1402,4],"end":[1406,5]},"visibility":"default","docs":"Writes an unsigned 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u128"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:52:2657":{"id":"0:52:2657","crate_id":0,"name":"read_i64","span":{"filename":"src/io.rs","begin":[347,4],"end":[351,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i64::min_value(), rdr.read_i64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:23:3325":{"id":"0:23:3325","crate_id":0,"name":"read_i8","span":{"filename":"src/io.rs","begin":[85,4],"end":[89,5]},"visibility":"default","docs":"Reads a signed 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![0x02, 0xfb]);\nassert_eq!(2, rdr.read_i8().unwrap());\nassert_eq!(-5, rdr.read_i8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:197:2647":{"id":"0:197:2647","crate_id":0,"name":"read_i32","span":{"filename":"src/lib.rs","begin":[590,4],"end":[592,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:204:2682":{"id":"0:204:2682","crate_id":0,"name":"read_f64","span":{"filename":"src/lib.rs","begin":[748,4],"end":[750,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"f64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:2865:28108":{"id":"2:2865:28108","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3175-0:322:2539":{"id":"b:2:3175-0:322:2539","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3178:4018"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:290:2858":{"id":"0:290:2858","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2114,4],"end":[2123,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:226:2769":{"id":"0:226:2769","crate_id":0,"name":"read_f64_into","span":{"filename":"src/lib.rs","begin":[1269,4],"end":[1275,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:242:2832":{"id":"0:242:2832","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[1660,4],"end":[1660,43]},"visibility":"default","docs":"Converts the given slice of unsigned 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u64(&mut numbers);\nassert_eq!(numbers, [5u64.to_be(), 65000u64.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"2:2920:28109":{"id":"2:2920:28109","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"is_mutable":true,"type":{"generic":"T"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:292:2567":{"id":"0:292:2567","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[2128,4],"end":[2130,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:216:2720":{"id":"0:216:2720","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[1020,4],"end":[1020,50]},"visibility":"default","docs":"Reads unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:321:2858":{"id":"0:321:2858","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2292,4],"end":[2301,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:3408:263-0:340:2538":{"id":"a:2:3408:263-0:340:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"5:818:4085":{"id":"5:818:4085","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"0:200:2662":{"id":"0:200:2662","crate_id":0,"name":"read_i128","span":{"filename":"src/lib.rs","begin":[656,4],"end":[658,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:278:2720":{"id":"0:278:2720","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2031,4],"end":[2033,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:11-0:20:2506":{"id":"0:11-0:20:2506","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,20],"end":[82,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"use":{"source":"crate::io::ReadBytesExt","name":"ReadBytesExt","id":"0:20:2506","is_glob":false}}},"0:112:2684":{"id":"0:112:2684","crate_id":0,"name":"write_i16","span":{"filename":"src/io.rs","begin":[1178,4],"end":[1182,5]},"visibility":"default","docs":"Writes a signed 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i16::<BigEndian>(193).unwrap();\nwtr.write_i16::<BigEndian>(-132).unwrap();\nassert_eq!(wtr, b\"\\x00\\xc1\\xff\\x7c\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i16"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:302:2624":{"id":"0:302:2624","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[2174,4],"end":[2176,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:319:2836":{"id":"0:319:2836","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2271,4],"end":[2277,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:209:2693":{"id":"0:209:2693","crate_id":0,"name":"write_i64","span":{"filename":"src/lib.rs","begin":[858,4],"end":[860,5]},"visibility":"default","docs":"Writes a signed 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:285:2823":{"id":"0:285:2823","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2066,4],"end":[2072,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:303:2626":{"id":"0:303:2626","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[2179,4],"end":[2181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:36058:3898-0:322:2539":{"id":"a:2:36058:3898-0:322:2539","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:36058:3898","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:355:741":{"id":"0:355:741","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:345:849":{"id":"0:345:849","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1842,22],"end":[1842,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1938,0],"end":[2124,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_i128_into","read_f64","write_i128_into","write_i16_into","from_slice_i128","read_i48","from_slice_i16","read_f32_into_unchecked","write_int128","read_f32_into","write_i32","write_u48","write_i24","read_i32_into","write_i64_into","read_i16_into","write_i8_into","write_f64_into","read_i128","from_slice_i32","read_u48","read_i32","read_i24","read_f64_into","write_i128","write_i64","write_int","write_i16","write_u24","read_i64_into","read_f32","write_i32_into","read_int128","write_f32_into","read_i64","from_slice_i64","read_f64_into_unchecked","read_int","write_f64","read_u24","read_i16","write_f32","write_i48"],"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:261:2567","0:262:2579","0:263:2593","0:264:2600","0:265:2576","0:267:2610","0:269:2615","0:270:2620","0:271:2624","0:272:2626","0:273:2618","0:275:2631","0:277:2712","0:278:2720","0:279:2726","0:280:2732","0:281:2776","0:282:2779","0:283:2782","0:284:2785","0:285:2823","0:286:2828","0:287:2832","0:288:2836","0:289:2856","0:290:2858"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"a:2:3408:263-0:322:2539":{"id":"a:2:3408:263-0:322:2539","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:151:2631":{"id":"0:151:2631","crate_id":0,"name":"write_uint128","span":{"filename":"src/io.rs","begin":[1493,4],"end":[1501,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:182:2586":{"id":"0:182:2586","crate_id":0,"name":"read_u48","span":{"filename":"src/lib.rs","begin":[288,4],"end":[290,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:187:2615":{"id":"0:187:2615","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[387,4],"end":[387,41]},"visibility":"default","docs":"Writes an unsigned 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_u16(&mut buf, 1_000);\nassert_eq!(1_000, LittleEndian::read_u16(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"2:3194:1925":{"id":"2:3194:1925","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:46058:239","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:211:2687":{"id":"0:211:2687","crate_id":0,"name":"write_int","span":{"filename":"src/lib.rs","begin":[903,4],"end":[905,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:5:816-0:322:2539":{"id":"b:5:816-0:322:2539","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["5:818:4085","5:819:4086","5:820:4087"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:324:510":{"id":"0:324:510","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1812,9],"end":[1812,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:229:2776":{"id":"0:229:2776","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[1330,4],"end":[1330,51]},"visibility":"default","docs":"Writes unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:186:2610":{"id":"0:186:2610","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[368,4],"end":[368,55]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:157:2700":{"id":"0:157:2700","crate_id":0,"name":"write_f32","span":{"filename":"src/io.rs","begin":[1541,4],"end":[1545,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian single-precision floating point number to a `Write`:\n\n```rust\nuse std::f32;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f32::<BigEndian>(f32::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x49\\x0f\\xdb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:195:2636":{"id":"0:195:2636","crate_id":0,"name":"read_i16","span":{"filename":"src/lib.rs","begin":[546,4],"end":[548,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i16"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:108:3486":{"id":"0:108:3486","crate_id":0,"name":"write_i8","span":{"filename":"src/io.rs","begin":[1126,4],"end":[1128,5]},"visibility":"default","docs":"Writes a signed 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_i8(2).unwrap();\nwtr.write_i8(-5).unwrap();\nassert_eq!(wtr, b\"\\x02\\xfb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i8"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:357:1376":{"id":"0:357:1376","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1842,55],"end":[1842,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:45754:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:34760:208","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:87:3425":{"id":"0:87:3425","crate_id":0,"name":"read_i8_into","span":{"filename":"src/io.rs","begin":[716,4],"end":[719,5]},"visibility":"default","docs":"Reads a sequence of signed 8 bit integers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to read into a `&mut [i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `i8` individually.)\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 251, 3]);\nlet mut dst = [0; 3];\nrdr.read_i8_into(&mut dst).unwrap();\nassert_eq!([2, -5, 3], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:249:2858":{"id":"0:249:2858","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[1793,4],"end":[1793,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 double-precision (8 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:208:2691":{"id":"0:208:2691","crate_id":0,"name":"write_i48","span":{"filename":"src/lib.rs","begin":[836,4],"end":[838,5]},"visibility":"default","docs":"Writes a signed 48 bit integer `n` to `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:55:2600":{"id":"0:55:2600","crate_id":0,"name":"read_u128","span":{"filename":"src/io.rs","begin":[376,4],"end":[380,5]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83,\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83\n]);\nassert_eq!(16947640962301618749969007319746179, rdr.read_u128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:230:2779":{"id":"0:230:2779","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[1353,4],"end":[1353,51]},"visibility":"default","docs":"Writes unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:130:2691":{"id":"0:130:2691","crate_id":0,"name":"write_i48","span":{"filename":"src/io.rs","begin":[1340,4],"end":[1344,5]},"visibility":"default","docs":"Writes a signed 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i48::<BigEndian>(-108363435763825).unwrap();\nwtr.write_i48::<BigEndian>(77).unwrap();\nassert_eq!(wtr, b\"\\x9d\\x71\\xab\\xe7\\x97\\x8f\\x00\\x00\\x00\\x00\\x00\\x4d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:235:2806":{"id":"0:235:2806","crate_id":0,"name":"write_i32_into","span":{"filename":"src/lib.rs","begin":[1484,4],"end":[1489,5]},"visibility":"default","docs":"Writes signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:269:2615":{"id":"0:269:2615","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[1978,4],"end":[1980,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:3193:150":{"id":"2:3193:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Infallible","id":"2:35924:3715","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"0:257:2882":{"id":"0:257:2882","crate_id":0,"name":"NativeEndian","span":{"filename":"src/lib.rs","begin":[1891,0],"end":[1891,37]},"visibility":"public","docs":"Defines system native-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\nOn this platform, this is an alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":["#[cfg(target_endian = \"little\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:245:2845":{"id":"0:245:2845","crate_id":0,"name":"from_slice_i32","span":{"filename":"src/lib.rs","begin":[1724,4],"end":[1729,5]},"visibility":"default","docs":"Converts the given slice of signed 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i32(&mut numbers);\nassert_eq!(numbers, [5i32.to_be(), 65000i32.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:222:2752":{"id":"0:222:2752","crate_id":0,"name":"read_i128_into","span":{"filename":"src/lib.rs","begin":[1177,4],"end":[1182,5]},"visibility":"default","docs":"Reads signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:228:2773":{"id":"0:228:2773","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/lib.rs","begin":[1305,4],"end":[1307,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f64_into` instead"},"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:264:2600":{"id":"0:264:2600","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[1955,4],"end":[1957,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:188:2617":{"id":"0:188:2617","crate_id":0,"name":"write_u24","span":{"filename":"src/lib.rs","begin":[406,4],"end":[408,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:232:2785":{"id":"0:232:2785","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[1399,4],"end":[1399,53]},"visibility":"default","docs":"Writes unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:214:2703":{"id":"0:214:2703","crate_id":0,"name":"write_f64","span":{"filename":"src/lib.rs","begin":[972,4],"end":[974,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"f64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:279:2726":{"id":"0:279:2726","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2036,4],"end":[2038,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3179-0:322:2539":{"id":"b:2:3179-0:322:2539","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3181:880"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:244:2841":{"id":"0:244:2841","crate_id":0,"name":"from_slice_i16","span":{"filename":"src/lib.rs","begin":[1699,4],"end":[1704,5]},"visibility":"default","docs":"Converts the given slice of signed 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 6500];\nBigEndian::from_slice_i16(&mut numbers);\nassert_eq!(numbers, [5i16.to_be(), 6500i16.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:331:923":{"id":"0:331:923","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1812,33],"end":[1812,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"__H"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:11243:169","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:354":{"id":"0:354","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2952:213","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:355:741"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:118:2686":{"id":"0:118:2686","crate_id":0,"name":"write_i24","span":{"filename":"src/io.rs","begin":[1232,4],"end":[1236,5]},"visibility":"default","docs":"Writes a signed 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i24::<BigEndian>(-34253).unwrap();\nwtr.write_i24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\xff\\x7a\\x33\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:318:2832":{"id":"0:318:2832","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2262,4],"end":[2268,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:295:2600":{"id":"0:295:2600","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[2143,4],"end":[2145,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:280:2732":{"id":"0:280:2732","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2041,4],"end":[2043,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:289:2856":{"id":"0:289:2856","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2102,4],"end":[2111,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"5:820:4087":{"id":"5:820:4087","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:238:2812":{"id":"0:238:2812","crate_id":0,"name":"write_f32_into","span":{"filename":"src/lib.rs","begin":[1569,4],"end":[1574,5]},"visibility":"default","docs":"Writes IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"f32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:34:2641":{"id":"0:34:2641","crate_id":0,"name":"read_i24","span":{"filename":"src/io.rs","begin":[191,4],"end":[195,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:160:2703":{"id":"0:160:2703","crate_id":0,"name":"write_f64","span":{"filename":"src/io.rs","begin":[1570,4],"end":[1574,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian double-precision floating point number to a `Write`:\n\n```rust\nuse std::f64;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f64::<BigEndian>(f64::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x09\\x21\\xfb\\x54\\x44\\x2d\\x18\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:70:2669":{"id":"0:70:2669","crate_id":0,"name":"read_int128","span":{"filename":"src/io.rs","begin":[468,4],"end":[472,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:121:2620":{"id":"0:121:2620","crate_id":0,"name":"write_u32","span":{"filename":"src/io.rs","begin":[1259,4],"end":[1263,5]},"visibility":"default","docs":"Writes an unsigned 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u32::<BigEndian>(267).unwrap();\nwtr.write_u32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\x00\\x00\\x01\\x0b\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:49:2593":{"id":"0:49:2593","crate_id":0,"name":"read_u64","span":{"filename":"src/io.rs","begin":[321,4],"end":[325,5]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83]);\nassert_eq!(918733457491587, rdr.read_u64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:3181:880":{"id":"2:3181:880","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:337:741":{"id":"0:337:741","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1049,0],"end":[1049,48]},"visibility":"default","docs":"All types that implement `Read` get methods defined in `ReadBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3782:3306","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["read_i128_into","read_i8","read_f64","read_u128","read_i48","read_u32","read_uint","read_f32_into_unchecked","read_u16","read_f32_into","read_i32_into","read_i16_into","read_uint128","read_u128_into","read_i128","read_u64_into","read_u32_into","read_u48","read_i32","read_i24","read_f64_into","read_i64_into","read_u8","read_f32","read_int128","read_u64","read_i64","read_i8_into","read_u16_into","read_f64_into_unchecked","read_int","read_u24","read_i16"],"trait":{"name":"ReadBytesExt","id":"0:20:2506","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"generic":"R"},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:192:2626":{"id":"0:192:2626","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[486,4],"end":[486,43]},"visibility":"default","docs":"Writes an unsigned 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:243:2836":{"id":"0:243:2836","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[1679,4],"end":[1679,45]},"visibility":"default","docs":"Converts the given slice of unsigned 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u128(&mut numbers);\nassert_eq!(numbers, [5u128.to_be(), 65000u128.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:252:2867":{"id":"0:252:2867","crate_id":0,"name":"BE","span":{"filename":"src/lib.rs","begin":[1824,0],"end":[1824,24]},"visibility":"public","docs":"A type alias for [`BigEndian`].\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:313:2779":{"id":"0:313:2779","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2229,4],"end":[2231,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:36000:251-0:340:2538":{"id":"a:2:36000:251-0:340:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:2:36058:3898-0:340:2538":{"id":"a:2:36058:3898-0:340:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:36058:3898","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:328":{"id":"0:328","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,29],"end":[1812,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2957:147","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:282:2779":{"id":"0:282:2779","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2051,4],"end":[2053,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:231:2782":{"id":"0:231:2782","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[1376,4],"end":[1376,51]},"visibility":"default","docs":"Writes unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:241:2828":{"id":"0:241:2828","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[1641,4],"end":[1641,43]},"visibility":"default","docs":"Converts the given slice of unsigned 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u32(&mut numbers);\nassert_eq!(numbers, [5u32.to_be(), 65000u32.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:275:2631":{"id":"0:275:2631","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2012,4],"end":[2023,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:3178:4018":{"id":"2:3178:4018","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3152:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:4055-0:322:2539":{"id":"b:2:4055-0:322:2539","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:4057:1940"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:239:2814":{"id":"0:239:2814","crate_id":0,"name":"write_f64_into","span":{"filename":"src/lib.rs","begin":[1598,4],"end":[1603,5]},"visibility":"default","docs":"Writes IEEE754 double-precision (8 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"f64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:255:2871":{"id":"0:255:2871","crate_id":0,"name":"LE","span":{"filename":"src/lib.rs","begin":[1854,0],"end":[1854,27]},"visibility":"public","docs":"A type alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:237:2810":{"id":"0:237:2810","crate_id":0,"name":"write_i128_into","span":{"filename":"src/lib.rs","begin":[1540,4],"end":[1545,5]},"visibility":"default","docs":"Writes signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:336":{"id":"0:336","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2952:213","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:337:741"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:206:2686":{"id":"0:206:2686","crate_id":0,"name":"write_i24","span":{"filename":"src/lib.rs","begin":[792,4],"end":[794,5]},"visibility":"default","docs":"Writes a signed 24 bit integer `n` to `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:196:2641":{"id":"0:196:2641","crate_id":0,"name":"read_i24","span":{"filename":"src/lib.rs","begin":[568,4],"end":[570,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:154:2698":{"id":"0:154:2698","crate_id":0,"name":"write_int128","span":{"filename":"src/io.rs","begin":[1508,4],"end":[1516,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i128"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:246:2849":{"id":"0:246:2849","crate_id":0,"name":"from_slice_i64","span":{"filename":"src/lib.rs","begin":[1749,4],"end":[1754,5]},"visibility":"default","docs":"Converts the given slice of signed 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i64(&mut numbers);\nassert_eq!(numbers, [5i64.to_be(), 65000i64.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:322:2539":{"id":"0:322:2539","crate_id":0,"name":"BigEndian","span":{"filename":"src/lib.rs","begin":[1813,0],"end":[1813,21]},"visibility":"public","docs":"Defines big-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 4];\nBigEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, BigEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"has_stripped_variants":false,"variants":[],"impls":["a:2:36000:251-0:322:2539","a:2:3408:263-0:322:2539","a:2:3443:3985-0:322:2539","a:2:36058:3898-0:322:2539","a:2:45850:3937-0:322:2539","a:2:45851:3936-0:322:2539","b:2:2860-0:322:2539","b:2:2863-0:322:2539","b:2:2918-0:322:2539","b:2:3175-0:322:2539","b:2:3179-0:322:2539","b:2:3185-0:322:2539","b:2:3190-0:322:2539","b:2:4055-0:322:2539","b:5:816-0:322:2539","0:323","0:325","0:326","0:328","0:330","0:333","0:335","0:336","0:338","0:250","0:260"]}}},"0:310:2726":{"id":"0:310:2726","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2214,4],"end":[2216,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3185-0:322:2539":{"id":"b:2:3185-0:322:2539","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3188:150","2:3189:1927"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:142:2696":{"id":"0:142:2696","crate_id":0,"name":"write_i128","span":{"filename":"src/io.rs","begin":[1410,4],"end":[1414,5]},"visibility":"default","docs":"Writes a signed 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i128"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:277:2712":{"id":"0:277:2712","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2026,4],"end":[2028,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:333":{"id":"0:333","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,39],"end":[1812,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2988:207","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:334:518"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2126,0],"end":[2302,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_i128_into","read_f64","write_i128_into","write_i16_into","from_slice_i128","read_i48","from_slice_i16","read_f32_into_unchecked","write_int128","read_f32_into","write_i32","write_u48","write_i24","read_i32_into","write_i64_into","read_i16_into","write_i8_into","write_f64_into","read_i128","from_slice_i32","read_u48","read_i32","read_i24","read_f64_into","write_i128","write_i64","write_int","write_i16","write_u24","read_i64_into","read_f32","write_i32_into","read_int128","write_f32_into","read_i64","from_slice_i64","read_f64_into_unchecked","read_int","write_f64","read_u24","read_i16","write_f32","write_i48"],"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:292:2567","0:293:2579","0:294:2593","0:295:2600","0:296:2576","0:298:2610","0:300:2615","0:301:2620","0:302:2624","0:303:2626","0:304:2618","0:306:2631","0:308:2712","0:309:2720","0:310:2726","0:311:2732","0:312:2776","0:313:2779","0:314:2782","0:315:2785","0:316:2823","0:317:2828","0:318:2832","0:319:2836","0:320:2856","0:321:2858"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:96:2759":{"id":"0:96:2759","crate_id":0,"name":"read_f32_into","span":{"filename":"src/io.rs","begin":[902,4],"end":[909,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:81:2720":{"id":"0:81:2720","crate_id":0,"name":"read_u32_into","span":{"filename":"src/io.rs","begin":[597,4],"end":[604,5]},"visibility":"default","docs":"Reads a sequence of unsigned 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:109:2615":{"id":"0:109:2615","crate_id":0,"name":"write_u16","span":{"filename":"src/io.rs","begin":[1151,4],"end":[1155,5]},"visibility":"default","docs":"Writes an unsigned 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\\x03\\x00\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u16"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:308:2712":{"id":"0:308:2712","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2204,4],"end":[2206,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:300:2615":{"id":"0:300:2615","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[2164,4],"end":[2166,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2918-0:322:2539":{"id":"b:2:2918-0:322:2539","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2916:3983","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2920:28109"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:217:2726":{"id":"0:217:2726","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[1043,4],"end":[1043,50]},"visibility":"default","docs":"Reads unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:31:2575":{"id":"0:31:2575","crate_id":0,"name":"read_u24","span":{"filename":"src/io.rs","begin":[165,4],"end":[169,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:185:2576":{"id":"0:185:2576","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[348,4],"end":[348,51]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:283:2782":{"id":"0:283:2782","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2056,4],"end":[2058,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:311:2732":{"id":"0:311:2732","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2219,4],"end":[2221,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:323":{"id":"0:323","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,9],"end":[1812,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:324:510"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:127:2622":{"id":"0:127:2622","crate_id":0,"name":"write_u48","span":{"filename":"src/io.rs","begin":[1313,4],"end":[1317,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u48::<BigEndian>(52360336390828).unwrap();\nwtr.write_u48::<BigEndian>(541).unwrap();\nassert_eq!(wtr, b\"\\x2f\\x9f\\x17\\x40\\x3a\\xac\\x00\\x00\\x00\\x00\\x02\\x1d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2860-0:340:2538":{"id":"b:2:2860-0:340:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2862:3673"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:25:2567":{"id":"0:25:2567","crate_id":0,"name":"read_u16","span":{"filename":"src/io.rs","begin":[112,4],"end":[116,5]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:98:2765":{"id":"0:98:2765","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/io.rs","begin":[948,4],"end":[953,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\n\nReads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f32_into` instead"},"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:215:2712":{"id":"0:215:2712","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[997,4],"end":[997,50]},"visibility":"default","docs":"Reads unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:317:2828":{"id":"0:317:2828","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2253,4],"end":[2259,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:4055-0:340:2538":{"id":"b:2:4055-0:340:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:4057:1940"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:218:2732":{"id":"0:218:2732","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[1066,4],"end":[1066,52]},"visibility":"default","docs":"Reads unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:273:2618":{"id":"0:273:2618","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[1998,4],"end":[2009,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:190:2622":{"id":"0:190:2622","crate_id":0,"name":"write_u48","span":{"filename":"src/lib.rs","begin":[446,4],"end":[448,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:191:2624":{"id":"0:191:2624","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[467,4],"end":[467,41]},"visibility":"default","docs":"Writes an unsigned 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:304:2618":{"id":"0:304:2618","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[2184,4],"end":[2191,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:233:2799":{"id":"0:233:2799","crate_id":0,"name":"write_i8_into","span":{"filename":"src/lib.rs","begin":[1428,4],"end":[1433,5]},"visibility":"default","docs":"Writes signed 8 bit integers from `src` into `dst`.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to write from a `&[i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `u8` individually.)\n\n# Panics\n\nPanics when `buf.len() != src.len()`.\n\n# Examples\n\nWrite and read `i8` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian, ReadBytesExt};\n\nlet mut bytes = [0; 4];\nlet numbers_given = [1, 2, 0xf, 0xe];\nLittleEndian::write_i8_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nbytes.as_ref().read_i8_into(&mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:201:2642":{"id":"0:201:2642","crate_id":0,"name":"read_int","span":{"filename":"src/lib.rs","begin":[679,4],"end":[681,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:85:2732":{"id":"0:85:2732","crate_id":0,"name":"read_u128_into","span":{"filename":"src/io.rs","begin":[673,4],"end":[683,5]},"visibility":"default","docs":"Reads a sequence of unsigned 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:219:2738":{"id":"0:219:2738","crate_id":0,"name":"read_i16_into","span":{"filename":"src/lib.rs","begin":[1090,4],"end":[1095,5]},"visibility":"default","docs":"Reads signed 16 bit integers from `src` to `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3190-0:340:2538":{"id":"b:2:3190-0:340:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3193:150","2:3194:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:3175-0:340:2538":{"id":"b:2:3175-0:340:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3178:4018"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:12-0:106:2507":{"id":"0:12-0:106:2507","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,34],"end":[82,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"use":{"source":"crate::io::WriteBytesExt","name":"WriteBytesExt","id":"0:106:2507","is_glob":false}}},"0:294:2593":{"id":"0:294:2593","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[2138,4],"end":[2140,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1815,0],"end":[1819,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3227:127","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:251:60"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:106:2507":{"id":"0:106:2507","crate_id":0,"name":"WriteBytesExt","span":{"filename":"src/io.rs","begin":[1073,0],"end":[1575,1]},"visibility":"public","docs":"Extends [`Write`] with methods for writing numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a [`Write`]:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, vec![2, 5, 3, 0]);\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:107:3479","0:108:3486","0:109:2615","0:112:2684","0:115:2617","0:118:2686","0:121:2620","0:124:2689","0:127:2622","0:130:2691","0:133:2624","0:136:2693","0:139:2626","0:142:2696","0:145:2618","0:148:2687","0:151:2631","0:154:2698","0:157:2700","0:160:2703"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3839:3468","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:163"]}}},"0:352:518":{"id":"0:352:518","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1842,39],"end":[1842,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:34760:208","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2863-0:322:2539":{"id":"b:2:2863-0:322:2539","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2865:28108"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:346":{"id":"0:346","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,29],"end":[1842,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2957:147","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:334:518":{"id":"0:334:518","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1812,39],"end":[1812,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:34760:208","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:107:3479":{"id":"0:107:3479","crate_id":0,"name":"write_u8","span":{"filename":"src/io.rs","begin":[1098,4],"end":[1100,5]},"visibility":"default","docs":"Writes an unsigned 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_u8(2).unwrap();\nwtr.write_u8(5).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:3443:3985-0:340:2538":{"id":"a:2:3443:3985-0:340:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3443:3985","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:351":{"id":"0:351","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,39],"end":[1842,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2988:207","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:352:518"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:0:3176":{"id":"0:0:3176","crate_id":0,"name":"byteorder","span":{"filename":"src/lib.rs","begin":[1,0],"end":[3975,1]},"visibility":"public","docs":"This crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].\n\nThe organization of the crate is pretty simple. A trait, [`ByteOrder`], specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]\nand [`LittleEndian`] implement these methods. Finally, [`ReadBytesExt`] and\n[`WriteBytesExt`] provide convenience methods available to all types that\nimplement [`Read`] and [`Write`].\n\nAn alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve\ncode clarity.\n\nAn additional alias, [`NativeEndian`], is provided for the endianness of the\nlocal platform. This is convenient when serializing data for use and\nconversions are not desired.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`] type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a [`Write`] type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n\n# Optional Features\n\nThis crate optionally provides support for 128 bit values (`i128` and `u128`)\nwhen built with the `i128` feature enabled.\n\nThis crate can also be used without the standard library.\n\n# Alternatives\n\nNote that as of Rust 1.32, the standard numeric types provide built-in methods\nlike `to_le_bytes` and `from_le_bytes`, which support some of the same use\ncases.\n\n[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness\n[`ByteOrder`]: trait.ByteOrder.html\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`ReadBytesExt`]: trait.ReadBytesExt.html\n[`WriteBytesExt`]: trait.WriteBytesExt.html\n[`NetworkEndian`]: type.NetworkEndian.html\n[`NativeEndian`]: type.NativeEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":["#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:11-0:20:2506","0:12-0:106:2507","0:178:2563","0:322:2539","0:252:2867","0:340:2538","0:255:2871","0:256:2879","0:257:2882"],"is_stripped":false}}},"a:2:45850:3937-0:340:2538":{"id":"a:2:45850:3937-0:340:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:45850:3937","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"5:819:4086":{"id":"5:819:4086","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:45851:3936-0:340:2538":{"id":"a:2:45851:3936-0:340:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:45851:3936","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:28:2636":{"id":"0:28:2636","crate_id":0,"name":"read_i16","span":{"filename":"src/io.rs","begin":[139,4],"end":[143,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0xc1, 0xff, 0x7c]);\nassert_eq!(193, rdr.read_i16::<BigEndian>().unwrap());\nassert_eq!(-132, rdr.read_i16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:199:2657":{"id":"0:199:2657","crate_id":0,"name":"read_i64","span":{"filename":"src/lib.rs","begin":[634,4],"end":[636,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:189:2620":{"id":"0:189:2620","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[427,4],"end":[427,41]},"visibility":"default","docs":"Writes an unsigned 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:356":{"id":"0:356","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,55],"end":[1842,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","lt","le"],"trait":{"name":"PartialOrd","id":"2:2994:214","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:357:1376"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:271:2624":{"id":"0:271:2624","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[1988,4],"end":[1990,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:344":{"id":"0:344","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,22],"end":[1842,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:345:849"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:198:2652":{"id":"0:198:2652","crate_id":0,"name":"read_i48","span":{"filename":"src/lib.rs","begin":[612,4],"end":[614,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:45851:3936-0:322:2539":{"id":"a:2:45851:3936-0:322:2539","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:45851:3936","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,16],"end":[1842,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3403:121","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:94:2752":{"id":"0:94:2752","crate_id":0,"name":"read_i128_into","span":{"filename":"src/io.rs","begin":[858,4],"end":[868,5]},"visibility":"default","docs":"Reads a sequence of signed 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:223:2759":{"id":"0:223:2759","crate_id":0,"name":"read_f32_into","span":{"filename":"src/lib.rs","begin":[1207,4],"end":[1213,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:205:2684":{"id":"0:205:2684","crate_id":0,"name":"write_i16","span":{"filename":"src/lib.rs","begin":[770,4],"end":[772,5]},"visibility":"default","docs":"Writes a signed 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i16"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:316:2823":{"id":"0:316:2823","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2244,4],"end":[2250,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:220:2744":{"id":"0:220:2744","crate_id":0,"name":"read_i32_into","span":{"filename":"src/lib.rs","begin":[1119,4],"end":[1124,5]},"visibility":"default","docs":"Reads signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:5:816-0:340:2538":{"id":"b:5:816-0:340:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["5:818:4085","5:819:4086","5:820:4087"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:40:2647":{"id":"0:40:2647","crate_id":0,"name":"read_i32","span":{"filename":"src/io.rs","begin":[243,4],"end":[247,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:225:2765":{"id":"0:225:2765","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/lib.rs","begin":[1242,4],"end":[1244,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f32_into` instead"},"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:240:2823":{"id":"0:240:2823","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[1622,4],"end":[1622,43]},"visibility":"default","docs":"Converts the given slice of unsigned 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u16(&mut numbers);\nassert_eq!(numbers, [5u16.to_be(), 65000u16.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:179:2567":{"id":"0:179:2567","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[229,4],"end":[229,35]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:315:2785":{"id":"0:315:2785","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2239,4],"end":[2241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:193:2618":{"id":"0:193:2618","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[506,4],"end":[506,57]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:58:2662":{"id":"0:58:2662","crate_id":0,"name":"read_i128","span":{"filename":"src/io.rs","begin":[402,4],"end":[406,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i128::min_value(), rdr.read_i128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:36000:251-0:322:2539":{"id":"a:2:36000:251-0:322:2539","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:124:2689":{"id":"0:124:2689","crate_id":0,"name":"write_i32","span":{"filename":"src/io.rs","begin":[1286,4],"end":[1290,5]},"visibility":"default","docs":"Writes a signed 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i32::<BigEndian>(-34253).unwrap();\nwtr.write_i32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\xff\\xff\\x7a\\x33\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3179-0:340:2538":{"id":"b:2:3179-0:340:2538","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3181:880"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:45850:3937-0:322:2539":{"id":"a:2:45850:3937-0:322:2539","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:45850:3937","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:136:2693":{"id":"0:136:2693","crate_id":0,"name":"write_i64","span":{"filename":"src/io.rs","begin":[1394,4],"end":[1398,5]},"visibility":"default","docs":"Writes a signed 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i64::<BigEndian>(i64::min_value()).unwrap();\nwtr.write_i64::<BigEndian>(i64::max_value()).unwrap();\nassert_eq!(wtr, b\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:284:2785":{"id":"0:284:2785","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2061,4],"end":[2063,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:265:2576":{"id":"0:265:2576","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[1960,4],"end":[1966,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1845,0],"end":[1849,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3227:127","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2538","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:254:60"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:181:2579":{"id":"0:181:2579","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[269,4],"end":[269,35]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:37:2579":{"id":"0:37:2579","crate_id":0,"name":"read_u32","span":{"filename":"src/io.rs","begin":[217,4],"end":[221,5]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:267:2610":{"id":"0:267:2610","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[1969,4],"end":[1975,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:309:2720":{"id":"0:309:2720","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2209,4],"end":[2211,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:281:2776":{"id":"0:281:2776","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2046,4],"end":[2048,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:194:2631":{"id":"0:194:2631","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[526,4],"end":[526,61]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:202:2669":{"id":"0:202:2669","crate_id":0,"name":"read_int128","span":{"filename":"src/lib.rs","begin":[702,4],"end":[704,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:76:2682":{"id":"0:76:2682","crate_id":0,"name":"read_f64","span":{"filename":"src/io.rs","begin":[530,4],"end":[534,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian double-precision floating point number from a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n]);\nassert_eq!(f64::consts::PI, rdr.read_f64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"f64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:286:2828":{"id":"0:286:2828","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2075,4],"end":[2081,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:296:2576":{"id":"0:296:2576","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[2148,4],"end":[2153,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:349:923":{"id":"0:349:923","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1842,33],"end":[1842,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"__H"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:11243:169","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:287:2832":{"id":"0:287:2832","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2084,4],"end":[2090,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:43:2586":{"id":"0:43:2586","crate_id":0,"name":"read_u48","span":{"filename":"src/io.rs","begin":[269,4],"end":[273,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xb6, 0x71, 0x6b, 0xdc, 0x2b, 0x31]);\nassert_eq!(200598257150769, rdr.read_u48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:293:2579":{"id":"0:293:2579","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[2133,4],"end":[2135,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:221:2748":{"id":"0:221:2748","crate_id":0,"name":"read_i64_into","span":{"filename":"src/lib.rs","begin":[1148,4],"end":[1153,5]},"visibility":"default","docs":"Reads signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:326":{"id":"0:326","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,22],"end":[1812,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:327:849"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:64:2642":{"id":"0:64:2642","crate_id":0,"name":"read_int","span":{"filename":"src/io.rs","begin":[452,4],"end":[456,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xc1, 0xff, 0x7c]);\nassert_eq!(-4063364, rdr.read_int::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:248:2856":{"id":"0:248:2856","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[1786,4],"end":[1786,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 single-precision (4 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"2:3189:1927":{"id":"2:3189:1927","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:46058:239","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:256:2879":{"id":"0:256:2879","crate_id":0,"name":"NetworkEndian","span":{"filename":"src/lib.rs","begin":[1880,0],"end":[1880,35]},"visibility":"public","docs":"Defines network byte order serialization.\n\nNetwork byte order is defined by [RFC 1700][1] to be big-endian, and is\nreferred to in several protocol specifications.  This type is an alias of\n[`BigEndian`].\n\n[1]: https://tools.ietf.org/html/rfc1700\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, NetworkEndian, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, NetworkEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:148:2687":{"id":"0:148:2687","crate_id":0,"name":"write_int","span":{"filename":"src/io.rs","begin":[1478,4],"end":[1486,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite signed 56 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_int::<BigEndian>(-3548172039376767, 7).unwrap();\nwtr.write_int::<BigEndian>(43, 7).unwrap();\nassert_eq!(wtr, b\"\\xf3\\x64\\xf4\\xd1\\xfd\\xb0\\x81\\x00\\x00\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:20:2506":{"id":"0:20:2506","crate_id":0,"name":"ReadBytesExt","span":{"filename":"src/io.rs","begin":[30,0],"end":[1045,1]},"visibility":"public","docs":"Extends [`Read`] with methods for reading numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`]:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:21:3318","0:23:3325","0:25:2567","0:28:2636","0:31:2575","0:34:2641","0:37:2579","0:40:2647","0:43:2586","0:46:2652","0:49:2593","0:52:2657","0:55:2600","0:58:2662","0:61:2576","0:64:2642","0:67:2610","0:70:2669","0:73:2675","0:76:2682","0:79:2712","0:81:2720","0:83:2726","0:85:2732","0:87:3425","0:88:2738","0:90:2744","0:92:2748","0:94:2752","0:96:2759","0:98:2765","0:100:2769","0:102:2773"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3782:3306","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:104"]}}},"0:338":{"id":"0:338","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,55],"end":[1812,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","ge","lt","le"],"trait":{"name":"PartialOrd","id":"2:2994:214","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:339:1376"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:2:2860-0:322:2539":{"id":"b:2:2860-0:322:2539","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2539","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2862:3673"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:180:2575":{"id":"0:180:2575","crate_id":0,"name":"read_u24","span":{"filename":"src/lib.rs","begin":[248,4],"end":[250,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:145:2618":{"id":"0:145:2618","crate_id":0,"name":"write_uint","span":{"filename":"src/io.rs","begin":[1442,4],"end":[1450,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite unsigned 40 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_uint::<BigEndian>(312550384361, 5).unwrap();\nwtr.write_uint::<BigEndian>(43, 5).unwrap();\nassert_eq!(wtr, b\"\\x48\\xc5\\x74\\x62\\xe9\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3253:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2563","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:301:2620":{"id":"0:301:2620","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[2169,4],"end":[2171,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:780:8419":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:8633:23835":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:5501:6739":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:12168:3827":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:8570:7865":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"11:0:3571":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:7621:28255":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"1:799:8422":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:6392:28360":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:12119:4109":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:5024:3732":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:45790:4110":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:11631:8169":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:11934:8182":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:6824:7034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:14759:4941":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:10650:2538":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:6096:8240":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:3530:3846":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:9786:3803":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"2:50789:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"11:454:6088":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"16:5415:5637":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:46900:3728":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:5107:6580":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:14666:4929":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:13264:8232":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"16:7966:5908":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:46629:3718":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:13328:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:2229:210":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:11921:8181":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:12361:4116":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:12740:28383":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:1141:8336":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:48042:7717":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:11581:4566":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:50344:7791":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:45841:3924":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:50290:7789":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:9802:3935":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:11945:254":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:14771:4942":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:9567:8510":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:11431:28204":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:4053:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:7446:7136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:15529:5148":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:13050:4683":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:6841:5736":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:25642:35449":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:6701:6994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"17:10412:23890":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:16619:5449":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"11:1668:37490":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:11669:8171":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:11053:28369":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:12965:777":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"2:48240:7731":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:51497:7773":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1:6988:7639":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:25160:2537":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:3510:16452":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:15169:5025":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:48571:7753":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:10050:9455":{"crate_id":2,"path":["core","random","RandomSource"],"kind":"trait"},"17:16066:5298":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:6678:8265":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"2:3803:224":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:631:9243":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"11:719:8321":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:12969:965":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:6472:7320":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:14246:4847":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:48579:7755":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:15942:5265":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:16059:5297":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:16739:5494":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:7031:7855":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"11:1923:6097":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:5314:9434":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:16284:5373":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:3866:4173":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:3282:8377":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:6738:8458":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:680:4534":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:7492:5838":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:461:8416":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:9824:174":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:50695:7804":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:13174:4570":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:1792:6098":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:2746:5569":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:2918:5577":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:16694:4772":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:5010:7124":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:7413:8281":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:8328:7258":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:2752:3779":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"16:4954:5623":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:46263:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:6681:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:13039:4681":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:9036:3932":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"1:5896:8451":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8596:3101":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:11947:4570":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:7256:5812":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:13312:8236":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:549:6250":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:44177:7601":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:6729:8277":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:6121:5586":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:45682:7663":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:13201:8164":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:43288:16463":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:5377:5636":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:45500:182":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:5316:5634":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:14403:4884":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"11:2662:37485":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:45660:33938":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:6701:16826":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"1:657:9261":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"17:12853:8223":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:6639:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:1649:8322":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:8134:5599":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:3532:3847":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:2201:8352":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"11:1382:8334":{"crate_id":11,"path":["hashbrown","raw_entry","RawOccupiedEntryMut"],"kind":"struct"},"17:14991:4992":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:11707:174":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:3720:3854":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:12958:1829":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:4871:5620":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:14174:4820":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:8212:8477":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:5687:5640":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:6887:5583":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:46967:3728":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:51370:7829":{"crate_id":2,"path":["core","core_arch","simd","u16x64"],"kind":"struct"},"17:14652:4626":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:6335:5677":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:11403:8483":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:5055:6561":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:563:6258":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:12333:7980":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:15772:5224":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:3677:153":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:8707:3896":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:1557:4109":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:4300:9382":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:11030:8502":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:15802:5227":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"11:2447:4110":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:11022:3718":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:26390:33910":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:7539:5847":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:47202:7690":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:26644:7380":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:10534:23894":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:5360:6663":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:50776:7807":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:485:8143":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:16272:5370":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:44349:3826":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:44369:8403":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"17:16292:5376":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:14431:4891":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"2:48254:7734":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:4963:9431":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:14466:7622":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:9724:9476":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13590:4665":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"0:0:3176":{"crate_id":0,"path":["byteorder"],"kind":"module"},"10:0:3570":{"crate_id":10,"path":["adler"],"kind":"module"},"2:27275:249":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:13385:23899":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:11746:4572":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:8148:5600":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:8533:7863":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:36090:118":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"5:1264:35931":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:1601:6338":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"11:1930:6098":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"14:7:8316":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:8308:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:44098:7593":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"11:2606:22885":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:44125:33933":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:4097:8441":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:10845:4550":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:309:35722":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:15721:5210":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:51194:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:48137:7601":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:6424:8453":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:12288:4122":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:2807:3839":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:1700:6403":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:50897:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:4620:283":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:16781:5505":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:15537:5151":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"11:2171:8327":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:2128:8432":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:16076:5301":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:1493:6276":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:856:5848":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:5394:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:50884:7811":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:8580:8486":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:12151:6100":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:11395:8498":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"6:7537:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:16836:5521":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:34787:3999":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:45548:9365":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:47888:7710":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:47820:3827":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12987:4721":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:4508:3803":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:12904:4660":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:51489:7833":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:11508:28367":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:51561:7837":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:9842:7948":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:6062:5587":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7946:5595":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:36000:251":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:3881:159":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:8220:5918":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:49952:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:51635:7773":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:4738:28361":{"crate_id":2,"path":["core","cell","lazy","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"16:7880:5691":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:13570:7715":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:50425:7794":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:16369:5399":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:4436:3803":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:7306:7078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:5490:6734":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"11:371:37486":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:8093:8311":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:12933:4665":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:8043:34805":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:1129:8334":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:9488:7936":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:5474:8447":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13015:4679":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:7988:7303":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:7728:3934":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:5522:6748":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"17:10680:4544":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:45007:7641":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:2215:1447":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"15:0:3574":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:8094:16435":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:5330:6654":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:51140:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:7835:23831":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:5123:9398":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:48575:7754":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11407:37526":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:26008:9595":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:11135:3844":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:6034:7032":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:12979:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:47796:7704":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:1786:6097":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:47181:3747":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:51073:7818":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:51507:7834":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:1284:37338":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:5677:6817":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:11026:3720":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:46300:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:4466:3803":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:26065:9588":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:35977:8401":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:8267:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:44140:7598":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:4656:16255":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:50060:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:47749:4113":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:47942:4117":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:5659:6808":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:13570:4721":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:9453:8501":{"crate_id":1,"path":["std","pipe","PipeWriter"],"kind":"struct"},"1:1054:6095":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:14162:4819":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:4692:5616":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:11351:152":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"16:3139:4430":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:2885:3840":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:11024:3719":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:6995:5750":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:15780:5225":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"16:544:5538":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:50195:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"11:2144:5848":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:747:9262":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:15965:5268":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:6660:6979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:11646:28240":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:11722:4586":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12915:24026":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:10092:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:7103:35722":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:9811:8474":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:11338:8164":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:887:166":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:25631:4174":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:3853:4110":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:11581:34669":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"2:50222:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:2857:7282":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:13531:7711":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:1966:16394":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"2:35970:5901":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:44471:7614":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:5424:6692":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:44594:7629":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13300:8235":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:14805:164":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:11132:3848":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:13850:16483":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:6873:5742":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:6850:5737":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:5880:8450":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:804:9265":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:25969:35664":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:48424:16498":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:43464:4172":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:7334:5818":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:47729:4114":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:46636:3720":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:1619:6095":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:16149:5320":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:47870:7709":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:10713:4546":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"11:2385:8327":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:14791:4945":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:11537:8167":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:51767:7773":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"16:7762:5884":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:2298:9243":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:26233:7343":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:8480:5967":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:45522:7647":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:2682:5566":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"18:623:37532":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4976:6520":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5604:6781":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:15225:5032":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:14720:119":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:5290:9432":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:1660:223":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:12308:7978":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:14964:4990":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:11836:4576":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:7712:4030":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:26425:33912":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:13554:7712":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:12410:8204":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:51316:7827":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:47970:7713":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:15267:5039":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:7452:7138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:12953:1993":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:4900:5621":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"16:7279:5813":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:6623:5724":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:9133:7925":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:11643:8170":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11348:23912":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:51569:7773":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"17:11980:8184":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:14218:4837":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:9114:16439":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:41929:16457":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"7:0:2026":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:13025:4680":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:4927:5622":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:5196:5630":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12172:4594":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"14:162:8316":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:321:8142":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:8566:158":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:7189:23828":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:7742:8370":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:4066:8351":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:10777:8515":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:14746:4940":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:2626:7279":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:11321:7861":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"16:7027:5759":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:16018:5283":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:15005:4995":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:2157:9324":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:3827:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:3443:3985":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:10452:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:13095:4687":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6736:37509":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"18:589:4395":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"11:2250:6100":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:11028:3721":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:3584:3848":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"11:914:22890":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:316:8141":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:25144:35447":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:12959:1930":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:16121:5312":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"11:2577:8351":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"18:598:37530":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:4260:4030":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:7939:7300":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:14259:4848":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:10229:23884":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:44200:16280":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:11292:8523":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:12476:8210":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:47628:4104":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:45925:7672":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"1:4863:9413":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"18:635:4406":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:5290:6634":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:7220:5799":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:47405:7696":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"11:2644:6102":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"10:36:6121":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:50951:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:6203:23822":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:7465:35785":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:4160:8332":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:4331:9384":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:12472:8442":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:47637:4103":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:4894:6482":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:11474:23909":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:10939:4552":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:6882:198":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:13828:8388":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:3887:4435":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"15:405:22925":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:37245:9504":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:7916:8303":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"18:521:28102":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:2397:23957":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:1035:4109":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:25609:9515":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:3683:155":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:12964:799":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:16331:5385":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:50033:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:5016:6539":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:12962:779":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"5:7784:223":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:7041:5589":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:16422:5415":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11240:37524":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:7421:23829":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:10919:3826":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:8623:5980":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13081:24027":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:3624:16462":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:11717:34670":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"17:14705:4933":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:48641:7763":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:4956:6511":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:8202:4534":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:7575:7941":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"14:216:6065":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:1765:4030":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:6217:233":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:0:3576":{"crate_id":17,"path":["object"],"kind":"module"},"16:6981:5601":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:44389:9327":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"11:935:8329":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:1818:35722":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:45965:7673":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"2:48084:7718":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:6600:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:10603:23896":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:9593:28188":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:50749:7806":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:7339:7101":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:51693:7843":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:12700:4656":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:48567:7752":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:574:6263":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"6:4989:6525":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:3999:8352":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:2754:3780":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:11387:28239":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:51383:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:11015:123":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:11548:23911":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:11407:8524":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:10794:3742":{"crate_id":2,"path":["core","fmt","builders","FromFn"],"kind":"struct"},"2:7977:16282":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:47924:4119":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:44992:7640":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:7998:8372":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:12388:28379":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:12966:971":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:1694:6402":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:5683:6820":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:14477:4900":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:50182:7785":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:14271:4851":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:9198:4109":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:7575:7214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:3782:3306":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:25971:3779":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"11:420:37488":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:6438:23823":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:4094:8440":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:4268:8332":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:48587:7757":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:8083:8351":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:14679:4930":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:5582:16479":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"11:2501:8342":{"crate_id":11,"path":["hashbrown","table","IterHashMut"],"kind":"struct"},"1:9816:8475":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:11132:8161":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:47173:7689":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:9458:8502":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:47698:4097":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:25339:9510":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"12:0:3572":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:2702:5567":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:5307:6645":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:50330:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:15989:5275":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:13276:8233":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:3565:5863":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:44585:7628":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:481:4382":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:14857:4970":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:1498:6278":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:50411:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:6565:6931":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:50465:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:36088:3987":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:2391:35813":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:6406:5687":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:8543:5974":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"3:358:239":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:6711:8269":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:7348:7102":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:6778:7018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"16:7209:5798":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"19:0:1372":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:51599:7773":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"16:6901:5745":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:10758:8429":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:12957:1793":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:477:6206":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:894:8239":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:3238:150":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"5:7703:4096":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:50762:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:25132:35444":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:495:6214":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:5460:6713":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:12840:8222":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:10900:8158":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"2:44562:7626":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:1244:8325":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8049:30643":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:2838:5573":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:4981:5624":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:14536:35249":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:536:6243":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:9153:35199":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:51551:7773":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:11032:3722":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:8708:5987":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:47790:7703":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:11517:4561":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:14339:4855":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:3507:16451":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:4150:5611":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:50614:7801":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"15:317:22916":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:51617:7773":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"18:573:4384":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:44104:7594":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:11410:34665":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"2:2287:3768":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"1:3627:3844":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:12971:1971":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:6420:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:4353:9386":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:41984:16458":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:6254:5666":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:3352:35928":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:35966:8400":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:11619:4569":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:12968:959":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"18:538:4392":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:4596:8443":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:4118:5610":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:6864:23826":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:43512:7464":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:51059:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:8977:8498":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:7000:7321":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:16110:5308":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:6527:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:26410:33911":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:6201:7852":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:0:599":{"crate_id":2,"path":["core"],"kind":"module"},"1:2963:3842":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:47165:3748":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"4:0:3567":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:9806:248":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:1011:4110":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:2504:5558":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:11093:37521":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:8326:7857":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:51235:7824":{"crate_id":2,"path":["core","core_arch","simd","f16x32"],"kind":"struct"},"6:7561:7205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:11054:37520":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:1096:8321":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:16895:5532":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:610:28327":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:12943:4667":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:14535:4907":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:4544:9411":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:15196:5029":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"11:1370:9282":{"crate_id":11,"path":["hashbrown","raw_entry","RawEntryMut"],"kind":"enum"},"2:8412:7329":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:6820:23825":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:37379:16449":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:2632:3768":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:3840:4109":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:4523:9409":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:4635:35732":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:51525:7835":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"11:851:8331":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:45850:3937":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:2295:3794":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:4359:9387":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8881:8494":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:9666:8512":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:6810:8459":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"11:2650:6103":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:1081:8351":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"18:651:4384":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:4298:35722":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:3701:8352":{"crate_id":5,"path":["alloc","collections","btree","set","CursorMut"],"kind":"struct"},"2:46450:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:7110:8465":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"11:1936:6099":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:6632:6966":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:15615:5194":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"18:96:28092":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:44976:3742":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:2284:3795":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:4842:5619":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6267:5667":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:9580:7941":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:5085:9413":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:8302:7252":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:9613:7944":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:10812:4549":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:8595:8315":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:37831:16455":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:11994:4586":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:7762:35810":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:7986:7226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:49979:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:994:4109":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:47005:3729":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:3586:3849":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:45782:4109":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:9532:8505":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:5294:3803":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"16:6950:5749":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:10977:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"16:2658:5565":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:7516:7181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:8523:7862":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:4824:6430":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:14765:7340":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"11:682:4109":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:11279:4586":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"11:806:6095":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"16:3439:5606":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:7904:5903":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:8011:5598":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:11807:8176":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"9:319:6160":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:542:6246":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:8422:8483":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:3311:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"18:531:4389":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:3680:154":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:7314:7083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:5125:9400":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:25221:9512":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:11034:3723":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:9003:7912":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:9773:199":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:13990:4789":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:2548:5560":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:50303:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:8176:5916":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:8199:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:14120:4814":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:48834:7767":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:7366:7111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:9932:8430":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:2952:213":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:26677:7383":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:34401:3728":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:50168:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"14:222:6067":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:0:329":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:26303:7345":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:4345:9385":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10959:4553":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:11018:123":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:50317:7790":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:3489:32738":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:14077:4804":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:12973:1959":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:1504:6281":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:2184:3760":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:7168:8468":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:45881:4249":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:2878:5575":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5630:6798":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:1037:6094":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:7389:7129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:48094:7719":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:12293:4605":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:7330:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:8926:7909":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:46959:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:12978:1510":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:13314:4169":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:46374:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:11655:4570":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:8892:9364":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:47766:7699":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:51154:7821":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:2638:5564":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:5469:6719":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"7:78:22801":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:45716:7664":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:48858:8413":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"5:1588:4030":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:37312:9506":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:2854:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:5253:5632":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:2858:5574":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:50857:7810":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:3149:175":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:7383:5822":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:47988:7714":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:15814:5230":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:6479:7852":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:8652:134":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:1434:8325":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:44453:7611":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:596:8144":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:36549:5861":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:3159:273":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:4808:5618":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:13973:4787":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"11:1896:4109":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:26178:7342":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:5447:5638":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:2618:5563":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:11341:7862":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:12528:7983":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:16858:5523":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:4701:3803":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"2:48868:192":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:155:5536":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:48763:7766":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2:3876:270":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:5647:5639":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:26655:7381":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:2673:9356":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"16:6606:219":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:12144:8191":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:13917:4772":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:48410:7738":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:26374:7356":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:540:197":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:11493:28365":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:582:6268":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:16929:4804":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:8958:7911":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"5:3128:35934":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:44239:7604":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:8887:8496":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:51086:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:50155:7784":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:3660:16265":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"5:5455:7290":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"14:189:22903":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:49925:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:5143:230":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:6419:5541":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:12921:9006":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:5044:6555":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:48847:34062":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:8675:3843":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:26341:7353":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:11654:7760":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"5:6289:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:38004:16456":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:5642:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:15052:5002":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:14138:4815":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:11635:7936":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:6237:5661":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"18:689:4410":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:2988:207":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:15852:5244":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:16382:5404":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:48267:7735":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:15155:5024":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:3887:16252":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:1230:5848":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:4764:5617":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:16132:5313":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"11:99:6081":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:49966:7777":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:51046:7817":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"6:4835:6438":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:49885:7774":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:14827:4951":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:3130:7275":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:25162:9513":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:43424:227":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:9448:8500":{"crate_id":1,"path":["std","pipe","PipeReader"],"kind":"struct"},"1:2164:831":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"15:299:22915":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:12722:4586":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:9148:9447":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:15827:5236":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:14052:4799":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:11514:28368":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:8119:28258":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"1:12956:357":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:9188:7930":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"11:1409:8336":{"crate_id":11,"path":["hashbrown","raw_entry","RawEntryBuilder"],"kind":"struct"},"1:5551:216":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:6450:6868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:3710:8353":{"crate_id":5,"path":["alloc","collections","btree","set","CursorMutKey"],"kind":"struct"},"16:6026:5582":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:8609:5602":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:4900:6484":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:4771:7311":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:44491:7616":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:13852:4754":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:51167:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"11:1401:8335":{"crate_id":11,"path":["hashbrown","raw_entry","RawVacantEntryMut"],"kind":"struct"},"17:16712:4782":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:44509:7619":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:9778:8461":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"9:491:6183":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:10334:23887":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:5270:16274":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:12879:8225":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:34113:9369":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:16102:5307":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:51777:2214":{"crate_id":2,"path":["core","core_arch","x86","bf16"],"kind":"struct"},"2:45694:7909":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:13729:4734":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"11:874:8325":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"5:7820:4030":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:10099:8484":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:12765:4658":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:8063:23832":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:51248:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:6759:7015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:5447:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:48074:3823":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:8875:3823":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:14465:4898":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:16476:5425":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:12411:8440":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:8264:5926":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:14588:8396":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:3152:157":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:6040:5585":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:11181:8162":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:45993:223":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"17:11794:8175":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:14056:123":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:6673:6983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:6814:7031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:12451:8441":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:2988:5580":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:3046:22962":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:46524:8390":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:5076:6570":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:4403:9389":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:812:266":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:16654:5479":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:1758:4109":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:5260:6619":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:5496:6737":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:8352:7264":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:1520:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:11311:7950":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:44414:4097":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:6900:7060":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:12986:2800":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:7194:7328":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:5346:5635":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:7465:9507":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12436:8206":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:5846:8448":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:6874:7045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:6463:6869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:6731:8454":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:10121:131":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:7205:7325":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:3585:5607":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"2:25881:9592":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:15066:5004":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6747:5726":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:44634:7632":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:11349:1793":{"crate_id":2,"path":["core","slice"],"kind":"module"},"2:36001:253":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:3306:5548":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:1534:6294":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:15873:5248":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:50938:7813":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:26611:7377":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"16:8055:8310":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:5009:6536":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:46411:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:4915:6491":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:12667:4653":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:13409:4502":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:25213:2537":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:12266:4603":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:51397:7830":{"crate_id":2,"path":["core","core_arch","simd","i32x32"],"kind":"struct"},"16:7935:5904":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:12540:28208":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:48112:7721":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:2308:7269":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"18:563:4394":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12018:4591":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:25329:2537":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:14150:4818":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:50074:7781":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"0:322:2539":{"crate_id":0,"path":["byteorder","BigEndian"],"kind":"enum"},"1:2393:133":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"17:12321:4609":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:7412:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:50911:7812":{"crate_id":2,"path":["core","core_arch","simd","f16x16"],"kind":"struct"},"6:1593:6333":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:46643:3721":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:2706:2505":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:50546:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:16139:5315":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:7518:5845":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:8316:2537":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:11316:7952":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:6792:5730":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:16094:5305":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:51262:7825":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:5274:6625":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:14233:4843":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:7794:32015":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:5127:9401":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:9464:211":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:10052:9456":{"crate_id":2,"path":["core","random","Random"],"kind":"trait"},"2:50438:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:46917:7686":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:42039:16459":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:16593:4754":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:15209:5030":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:12143:4110":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:47666:4106":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:26710:7386":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"5:6888:8332":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:13344:16485":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:12280:4604":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:5455:34654":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"16:5222:5631":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:13711:4731":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:8340:7262":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:44273:7605":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:6806:5581":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:3127:4085":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:16798:5507":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:7752:7293":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:50492:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:3413:3736":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:50843:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:521:6234":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5236:6608":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:29675:286":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:13666:8238":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:48583:7756":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:1511:6284":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:3693:5608":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:6359:7319":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:51479:7773":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:44969:7638":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:9204:7933":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:8008:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:14915:4983":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:16872:5527":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:26688:7384":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:26622:7378":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"16:4265:5614":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:50803:7808":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12239:4601":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:4861:6458":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:3933:35722":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:47577:8410":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:12199:4597":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:8255:7242":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:821:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"9:0:3569":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:12339:7981":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:15705:5207":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:6656:8259":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:11849:23929":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:14388:4880":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:483:6209":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:48359:7737":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:11932:2537":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:14418:4889":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"17:15036:5001":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:6300:5674":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:26452:7368":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:8577:177":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:13004:4678":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"3:0:541":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:11425:8166":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:5249:6612":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:11142:37522":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:9739:9478":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"18:735:28100":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:13102:24028":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:4032:9366":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:8807:3855":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:6749:7008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:12044:28371":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:51221:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:15116:5021":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:8952:8494":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"18:0:3577":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:6638:8249":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2:44337:7609":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:2857:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:16350:5398":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"11:1900:4030":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:51356:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"11:709:4030":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:0:1069":{"crate_id":6,"path":["libc"],"kind":"module"},"17:15668:5200":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:50924:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:5414:6685":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:46945:33998":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"11:2474:6101":{"crate_id":11,"path":["hashbrown","table","IterHash"],"kind":"struct"},"16:6911:5746":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:15550:5158":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:2433:22960":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:13689:23869":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:12288:8530":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:51289:7826":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:45734:7665":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:25215:9509":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:1707:6406":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:3925:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:10510:23893":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:918:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:6824:28361":{"crate_id":1,"path":["std","sync","lazy_lock","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"1:12972:1953":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:4889:8381":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:6382:6824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:43404:228":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:16440:5421":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:5671:6815":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:46622:3719":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:44983:7639":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:37446:16448":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:12967:953":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:13779:9340":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"0:340:2538":{"crate_id":0,"path":["byteorder","LittleEndian"],"kind":"enum"},"2:26563:2537":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"16:8206:5588":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:1771:8332":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:51019:7816":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:13111:4688":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13133:8228":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:7987:5909":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:7584:7217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:2364:201":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:12950:444":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:8317:23834":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:2794:5571":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:7800:7294":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:12547:7984":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:1025:4030":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:44541:7624":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:6617:7852":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:7468:5837":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:7369:5592":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:7398:37510":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:8525:5971":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"16:7505:5842":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10141:23882":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:4602:8379":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:11416:8452":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:11862:8529":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"16:6586:5721":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"2:8532:16440":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4948:6509":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:1573:6319":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:7869:7295":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:46038:225":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"2:36059:3988":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:35991:7453":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:48908:7771":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:10390:23889":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5439:6698":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:3642:128":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:6880:7046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"11:1725:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:3255:150":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:6766:7016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"5:3984:3101":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:50735:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:8582:8312":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:2722:5568":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:4668:3803":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:4239:5613":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:11379:28237":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"11:953:8330":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:43685:16285":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:2338:7272":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:5623:6795":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:11289:37525":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:3134:35932":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:46098:4109":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:14557:4914":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:16919:4799":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:10963:239":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:16032:5290":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:6692:6988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"17:15898:5253":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:1234:8145":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:9644:8512":{"crate_id":1,"path":["std","sync","mpmc","TryIter"],"kind":"struct"},"2:26459:7371":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:8099:8374":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:1087:8331":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:4393:9388":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:4515:9408":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:5505:8447":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11672:7948":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:51343:7828":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:11332:7958":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:3629:3845":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:5732:4091":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:16000:5279":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:12252:4602":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:14743:284":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:9560:8509":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:14089:4805":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:5224:6601":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:36002:260":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:12308:4608":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:13673:4726":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"5:7014:4030":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:5558:6761":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:5549:1041":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:13821:16482":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:8562:5977":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:14731:4937":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:12377:24001":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"13:272:6080":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:11241:165":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"5:7263:16515":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:7165:5786":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:50209:7786":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:4940:6507":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:3848:32248":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:3910:34876":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:16258:5364":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:8586:3897":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:51032:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:6527:233":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:4933:6503":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:2074:8430":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:13634:23901":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:5338:6658":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:2187:3101":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:47806:3826":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:7182:8472":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:5012:7126":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:3677:3833":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"0:252:2867":{"crate_id":0,"path":["byteorder","BE"],"kind":"type_alias"},"2:6281:3803":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:44500:7618":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:50020:7779":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:14868:4095":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:44553:7625":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:45535:7649":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:50816:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:13754:4735":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:2017:8428":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"9:49:8984":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:8341:7858":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"5:3340:4109":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:13468:4714":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:1634:168":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11564:8168":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:12974:1965":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:6444:6867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:11235:165":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:12333:4611":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:3712:9297":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:50398:7793":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:11243:169":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:11370:3822":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:2648:9348":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:50114:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:50708:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:10457:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:36761:5858":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:12509:4620":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:2588:5562":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:6791:7025":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:12937:28236":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:8014:7229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:14563:217":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:8407:9314":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:8267:3853":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:7895:7296":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:10964:3468":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:44359:7313":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"2:51723:7844":{"crate_id":2,"path":["core","core_arch","x86","__m128h"],"kind":"struct"},"17:16731:5493":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:9045:3931":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:5368:6664":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:50533:7798":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:16484:5428":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:3495:5862":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:13125:4691":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:11020:133":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"11:1916:6096":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:48119:7602":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:1922:8351":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:16086:5304":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:5966:8452":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:37513:16450":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:3492:32739":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:5353:6662":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:50371:7792":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:50722:7805":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:12087:8187":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:2916:3983":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"1:5205:9397":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"18:754:4425":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:5314:6647":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:8295:5930":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:50236:7787":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:4199:8442":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:49939:7776":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:43364:223":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"9:381:22809":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:918:202":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:6438:6864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5301:6642":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:44532:7623":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:10909:4426":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"2:37658:16454":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:34380:3765":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:11967:8183":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:15692:5202":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:1135:8335":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:9680:7945":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:49871:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:1671:6392":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:5636:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:1448:8330":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:43349:226":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:11358:7961":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"6:5038:6552":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:5170:5629":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:5243:6609":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:46337:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:34760:208":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:3480:9503":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:2015:8427":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:5600:1793":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"1:8798:3853":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:1253:8327":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:47720:4111":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:11689:7964":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:26483:9367":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:5400:6677":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:7287:16516":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:11397:8165":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"11:1363:8333":{"crate_id":11,"path":["hashbrown","raw_entry","RawEntryBuilderMut"],"kind":"struct"},"1:11930:6180":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:12101:8188":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:15594:5189":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:7951:7302":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:13876:4768":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:44114:7595":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:26318:7349":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:2568:5561":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:51759:7846":{"crate_id":2,"path":["core","core_arch","x86","__m512h"],"kind":"struct"},"17:14494:4903":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:1775:8351":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:5280:5633":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:51741:7845":{"crate_id":2,"path":["core","core_arch","x86","__m256h"],"kind":"struct"},"5:6934:35722":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12068:8185":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:501:6217":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:8506:4482":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:3750:3803":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:8284:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:2232:209":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:9636:4109":{"crate_id":1,"path":["std","sync","mpmc","Iter"],"kind":"struct"},"2:43444:229":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:8318:7257":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:12955:1402":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:43501:7463":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"11:696:4110":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13517:4718":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:15866:5247":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:1636:6367":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"14:31:8316":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:10281:23886":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:13957:4783":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:455:8414":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:43494:8402":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:48591:7758":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:51683:7773":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1:8516:7861":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:8665:8487":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:5268:6623":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:50128:7783":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:15470:5096":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:716:8418":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:13425:4712":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:25233:7341":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:25090:3999":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:6037:9453":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:10632:23897":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:2456:8151":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:7872:2891":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:1715:6410":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:9652:4030":{"crate_id":1,"path":["std","sync","mpmc","IntoIter"],"kind":"struct"},"16:6387:8242":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:1353:8146":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:8666:5901":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:1661:6386":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:10255:23885":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:13900:4769":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:5488:466":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"5:6754:9597":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:1679:6393":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:12526:24002":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"11:830:8351":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:3122:2537":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:51701:7773":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"17:12225:4600":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:8040:37516":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:8387:9267":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:14512:4904":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:11591:23912":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"9:413:22810":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:47709:4098":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:48225:7725":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:10938:30594":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:8825:250":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:13328:4171":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:45015:7643":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:3138:35933":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"18:706:4413":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:5383:3927":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"10:44:6122":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"9:471:22807":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:12951:1247":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:16300:5377":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:15129:5022":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:8816:3822":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:15405:5045":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:45798:4030":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"18:515:4387":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"18:765:28101":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:51127:7820":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:49898:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:901:8141":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:46114:4030":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:5649:6807":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:47220:7695":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:7732:8332":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:50573:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:46890:7675":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:2076:8431":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:8545:152":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:8528:16441":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:50452:7795":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:13610:4723":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12182:4595":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:4819:3730":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:14978:4991":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:12042:4593":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:11904:8178":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:50641:7802":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:7804:37513":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:5229:8155":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:8981:7111":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:44431:8404":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:5320:6650":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:51627:7840":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:6724:7003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:50479:7796":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:3373:6098":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:8257:28384":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:44769:7635":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:12250:4108":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:6201:8332":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:4:1337":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:48768:163":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:12978:4677":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:15882:5249":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:47838:4115":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:10639:35200":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:9512:7938":{"crate_id":1,"path":["std","random","DefaultRandomSource"],"kind":"struct"},"5:3347:6097":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:51208:7823":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:13781:4741":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:48128:7593":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:2479:2939":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:469:6116":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:11573:4565":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:10665:2539":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:44523:7622":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:51302:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:50870:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:13189:4586":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"17:10894:8157":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"2:44163:7600":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"9:346:22823":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:51437:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:14446:4893":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:46106:4110":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:11822:8177":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:6732:7004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:8327:7856":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:16811:5513":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:25744:2537":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:50600:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:45872:3978":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:13656:4683":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10484:23892":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:3937:8154":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:9860:7949":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:5725:2538":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:50668:7803":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"11:2670:6106":{"crate_id":11,"path":["hashbrown","raw","ProbeSeq"],"kind":"struct"},"16:6939:5748":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:12211:4121":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:48103:7720":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:7978:16283":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:51731:7773":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:11574:34667":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"18:680:4407":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12957:4672":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:8025:5910":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:26288:7344":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:8296:7251":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:5299:9433":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"3:754:7305":{"crate_id":3,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"8:0:3568":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:7786:37512":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:5860:8449":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:12968:4676":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:7237:246":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:47739:4112":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:11030:219":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:796:8420":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:10650:7660":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"2:25943:2537":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:48896:6119":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:557:6255":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:8290:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"14:204:16499":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:5548:6755":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"11:1577:8337":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"11:1904:8332":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4811:6421":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:6741:7007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"14:40:4769":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:2448:5549":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:1071:8332":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:5215:6596":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"9:436:22808":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:239:8343":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:13546:4719":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2:51515:7773":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"17:13324:8237":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:46487:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:2484:5557":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:25604:2537":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"11:756:8322":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:12452:8208":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:1518:6286":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:44783:7636":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:34348:3764":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:35984:3731":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"14:167:22896":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"11:2335:5848":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:44193:7602":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:12947:4102":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"11:2691:7295":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:25919:9593":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:44280:7606":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:4885:234":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:8588:3841":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:5740:2539":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:8401:9268":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:2948:5578":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"13:125:37493":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:4531:9410":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:8511:8484":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"15:338:8979":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:11769:4574":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:12866:8224":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:16765:5500":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:9526:119":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:2902:28329":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"11:2416:4109":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:13608:4121":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:10035:218":{"crate_id":2,"path":["core","pin","PinCoerceUnsized"],"kind":"trait"},"6:8273:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:15021:4997":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:25341:7341":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:1669:8350":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:3123:3716":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13811:4745":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:4958:7312":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:43386:225":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"11:1561:22891":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:1688:6399":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:8131:28259":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:12926:9269":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"18:613:37531":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:12402:4119":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:47656:4105":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:8249:7241":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:10779:4548":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:2425:8148":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:5083:5626":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:4677:8444":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:8868:3827":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"11:793:6094":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:7728:28377":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:44610:4404":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:2489:3797":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:6545:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:1543:6300":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:36973:16447":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:5403:8156":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:6082:5643":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:906:8142":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:1567:6317":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:7347:5820":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:44288:7607":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:25119:35441":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:5376:6665":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:12218:7690":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"1:4415:9392":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:8359:4624":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:3012:22961":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"11:1909:8351":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:51591:7838":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:51657:7841":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:7485:7155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:2212:8353":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:10448:23891":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"11:2359:8325":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:755:8344":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:1112:8333":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:8559:131":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:5142:5628":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:6343:16818":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:50681:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:26093:9589":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:12464:8209":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:5182:8446":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:5063:6566":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:44575:7627":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:2286:3796":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"17:16322:5383":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:8118:223":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:6300:28356":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:12488:4618":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"7:31:22794":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:2474:151":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:51665:7773":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"6:590:6272":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:8933:7910":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:3985:4443":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"2:25121:35443":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"11:819:8332":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:11708:4527":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:48204:16497":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:4343:4110":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"18:643:4384":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:3401:279":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"11:2160:8325":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:8261:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:608:8135":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:12160:8196":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:50006:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:6494:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"0:256:2879":{"crate_id":0,"path":["byteorder","NetworkEndian"],"kind":"type_alias"},"6:6474:6877":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:14102:4806":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:7156:5785":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:10779:8514":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:12554:7984":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:51113:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:12134:8190":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:10211:23883":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:4966:6517":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:12641:8211":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:43252:4248":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:1999:738":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:692:9249":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:15434:5065":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:48325:7736":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:49858:7772":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:12963:782":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"9:227:7690":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5126:6581":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:14892:4982":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12742:4657":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:26472:7372":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:4407:9390":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:16909:5533":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:1018:9284":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:9760:7947":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:13898:16491":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:12114:8189":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:3403:121":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:15758:5219":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:13147:8230":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:2091:3803":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"6:5170:6585":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:25957:9594":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:5385:6669":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:12074:8186":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:15650:5195":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:16311:5382":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:45773:185":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:12351:4698":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:8336:8479":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:489:6212":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:43336:7457":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:7720:7292":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:6186:5655":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:3108:5603":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:5070:6568":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:6915:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:16009:5282":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"18:698:4411":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:50978:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:6765:3933":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:3450:3793":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:12976:1030":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:44759:3825":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:46017:227":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"6:5146:6583":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:15977:5274":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:7113:9467":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:51329:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:7963:8371":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"5:7792:3101":{"crate_id":5,"path":["alloc","collections","btree","set","Cursor"],"kind":"struct"},"1:11622:7935":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:44462:7613":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:3800:3813":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:42094:16460":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:7911:7297":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:3832:5609":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:15957:5267":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:3893:16251":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:50276:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:2738:713":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:50627:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:16431:5419":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:45983:7674":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"17:16461:5424":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:8162:5590":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:2964:5579":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:44322:16554":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4848:6448":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:12975:1947":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:8102:5914":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:12322:8476":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:12790:8215":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:12282:7973":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:7713:37511":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:519:4488":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:15143:5023":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:8938:9412":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:12687:8214":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:5507:6740":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:5540:6750":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:9062:7922":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:12294:7977":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:45754:206":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:9521:8503":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:5088:6579":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"18:507:4384":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:5481:6728":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:5058:5625":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:26022:3779":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"2:50263:7788":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:2898:5576":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:1118:9282":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:3253:239":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:5739:133":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"11:515:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:34386:3766":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:6835:8280":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:12914:4101":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:50587:7800":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:9765:8387":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2:14424:8392":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:11278:3744":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:50965:7814":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:12212:4599":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:5431:1320":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:12423:4615":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"2:51100:7819":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:46152:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:3857:3814":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:6157:5650":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:51005:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:25108:35438":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:48652:16586":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:5073:3733":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:5587:6774":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:5728:4090":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:1797:6099":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:13441:23900":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:922:8345":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:47212:7694":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:48599:7760":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:12416:4117":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:15240:5036":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:1403:5848":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:11179:4624":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:12816:8220":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:16052:5296":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:16883:5529":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:8845:3824":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:7461:7142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:12905:8533":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:3584:8152":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:50560:7799":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:10982:156":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:5507:3828":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"11:2656:6104":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:1555:6309":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:47420:7697":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:6460:23824":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:3219:8438":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:51410:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:3962:132":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:6771:7017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:8862:3826":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:43332:9296":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:26352:33908":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:5015:16263":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:12893:8226":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:45851:3936":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"18:80:28091":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"11:2682:6111":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:6171:5653":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:26600:7376":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:46058:239":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:8107:28256":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"2:2177:712":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:48563:7751":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:12366:8201":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:14064:4802":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:44301:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:6109:5648":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:11435:37527":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:15740:5211":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:6366:5683":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:1629:6363":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:46984:150":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:15:2940":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:5531:6749":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"6:7359:7107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:5683:35722":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:12323:4115":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:4402:5615":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:3515:16453":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"3:769:7306":{"crate_id":3,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"1:9110:7690":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:12804:8219":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:3655:3859":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11502:23910":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:4995:6528":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:13839:4413":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:8855:3825":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:13060:4684":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:3407:6099":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:915:9368":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:44624:7631":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:6717:7002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:11842:7969":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"16:6967:5584":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:13160:8231":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:14951:4988":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:42673:16461":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"11:121:6082":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:16197:5357":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:0:3575":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:7602:7220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:4294:9383":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:9572:8511":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:7200:7327":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:1262:8330":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:45810:3934":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:7956:5907":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:14191:4828":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:9539:9475":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:48771:176":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:7459:8282":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4909:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:5003:6533":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:6624:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"18:659:8136":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:8145:28260":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"2:51181:7822":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:14454:4895":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:47646:4107":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"11:2552:8332":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:6709:6998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:12124:4481":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:6610:233":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:13071:4685":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:8565:7864":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:5158:6584":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:1647:6375":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:38177:5867":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:10644:9004":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:36091:280":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"17:13937:4782":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:7297:16517":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:5046:3734":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:568:6260":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:13341:23898":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:9658:4109":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:50249:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:13494:7706":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:9105:162":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:48775:232":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:25134:35446":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:11129:3846":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:14811:4946":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:15844:5241":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"11:899:8327":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:48885:7770":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:13838:4753":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:9674:4030":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:7440:35781":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:12444:4118":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:0:1821":{"crate_id":1,"path":["std"],"kind":"module"},"17:15676:5201":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:16606:4768":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:16753:5498":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"17:13504:4716":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:48595:7759":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:25837:9591":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:48476:7749":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:8944:8497":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:50992:7815":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"5:7776:4030":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:8670:8488":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:7429:7131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:6735:9596":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:47677:4099":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:4493:32014":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:50384:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:4506:4109":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:6142:23821":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:1980:594":{"crate_id":2,"path":["core","intrinsics","copy_nonoverlapping"],"kind":"function"},"2:4614:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:3408:263":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:3505:8351":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:6130:267":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:11044:8160":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:14040:4798":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:7693:28375":{"crate_id":1,"path":["std","sys","sync","once_box","OnceBox"],"kind":"struct"},"2:47424:4100":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:26721:7387":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:48024:7716":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"14:0:3573":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:48793:220":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:15659:5199":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:9475:7935":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:2957:147":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:6481:6881":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:44481:146":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:3803:8153":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:12654:8212":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:50830:7809":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:15925:5257":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:1628:8331":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"11:2524:4030":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:6522:6902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10362:23888":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"0:178:2563":{"crate_id":0,"path":["byteorder","ByteOrder"],"kind":"trait"},"11:2675:6109":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:7828:4030":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:13480:4715":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:16825:5516":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:16396:5406":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:13238:4694":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"11:384:8982":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:15183:5028":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:1780:6096":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:2465:5551":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:1638:8321":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:3867:3817":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:13214:4693":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:7467:7144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:51533:7773":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"16:6571:5718":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:7880:9276":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:34413:33920":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"5:7389:282":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:49993:7778":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:6667:6980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:14524:4906":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"11:316:6083":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:7977:5596":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:6456:3803":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:3839:3468":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:13288:8234":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:12977:2036":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:51675:7842":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:45576:7656":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:4921:6494":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:3227:127":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:1572:4110":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"18:718:4417":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"18:726:4420":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:4885:9414":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:10558:23895":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:11893:4583":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:4894:8382":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:14203:4831":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:8031:7239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:3143:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:2476:8436":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:9108:4247":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:10746:4547":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:5082:9435":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:26666:7382":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:2483:3812":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:5667:215":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:3155:274":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"16:8500:5968":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12828:8221":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:5008:7122":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:3486:32592":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:47779:7702":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:15949:5266":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:11283:3745":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:48445:7743":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:51749:7773":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"5:962:9283":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:1731:6415":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:12430:4120":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:6992:8464":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"0:257:2882":{"crate_id":0,"path":["byteorder","NativeEndian"],"kind":"type_alias"},"11:1597:8338":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:7072:23827":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:5707:23820":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:11695:8173":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"18:581:3999":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:51785:7847":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:44153:7599":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:5198:6587":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:40053:5868":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:50047:7780":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:26633:7379":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:5205:6589":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:15255:4683":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:5136:6582":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:8759:190":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:2660:9354":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:7975:259":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5594:6776":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:4637:16254":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:13845:16484":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:11448:7937":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:2994:214":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:51424:7831":{"crate_id":2,"path":["core","core_arch","simd","u32x32"],"kind":"struct"},"16:6779:5729":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:3671:3895":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:46929:5945":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"16:2528:5559":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:14441:8395":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"16:4182:5612":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:3124:22963":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:15890:5251":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:2051:8429":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:324:3899":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:26699:7385":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"17:11873:23930":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:9215:7934":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:6612:6958":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:16044:5293":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:50101:7782":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"0:255:2871":{"crate_id":0,"path":["byteorder","LE"],"kind":"type_alias"},"1:6376:284":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"9:168:8995":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:14009:4794":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:16410:5413":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:4714:35732":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:2413:22933":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:3386:35929":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:2906:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"13:0:3566":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:15558:5159":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:4983:6523":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:44440:3824":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:50141:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:35924:3715":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:4590:8378":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:2634:9344":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:51543:7836":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:44407:3829":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:9501:7937":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:1104:8322":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"18:491:4383":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:7355:5591":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:6535:6908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:9801:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:6508:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:9709:9477":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"5:1248:37337":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:51471:7832":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:26366:7355":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:25746:9511":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:5026:6546":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:7302:5814":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4888:6481":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:5513:6742":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:5111:5627":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:22:865":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:1159:35722":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:25098:35438":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:5912:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:14602:4920":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:1525:6289":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:44311:7608":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:2650:9349":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:12970:946":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:3146:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:51275:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:5755:5641":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"5:7924:16554":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:14579:4915":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:12952:506":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:15794:5226":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:48826:8411":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:14926:4985":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:12571:28381":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"6:5284:6631":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:11733:8164":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:5576:6769":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:50357:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:11682:8172":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:41:9298":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:4751:8445":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:5344:6659":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:5989:16515":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:1588:6331":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:14626:4921":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:527:6237":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:46226:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:15082:5008":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:6500:22932":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:11191:37523":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:4724:8380":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12397:8202":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:14940:4987":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7055:5761":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:7997:5597":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:50519:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:44998:3854":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:49912:7775":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:10921:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:14718:4935":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"18:670:8140":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:14639:4924":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:3485:9505":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:1610:6094":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:46189:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:48435:7739":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:16498:5431":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:15279:5043":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:26051:2537":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"2:4968:3731":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:2411:7278":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"11:345:6086":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:15094:5010":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:2159:2504":{"crate_id":2,"path":["core","mem","align_of"],"kind":"function"},"2:44185:7593":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:46128:208":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:8230:23833":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:14869:4973":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:4998:9387":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:2770:5570":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:12342:4612":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:9697:7946":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:16847:5522":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:48785:240":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:9918:8388":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:7551:23830":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:14692:4932":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:50087:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:50654:7773":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:26098:9587":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:48458:7747":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:14028:4795":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:1419:8327":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:11230:8163":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:2924:3831":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:6624:7854":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:3381:6096":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:5406:6680":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:16245:5358":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:6694:8268":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:2246:8147":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:113:28093":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:7546:7198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:51609:7839":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:50506:7797":{"crate_id":2,"path":["core","core_arch","simd","f16x8"],"kind":"struct"},"2:36058:3898":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:5569:6767":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:47190:169":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:7013:5757":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:2818:5572":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:2892:34662":{"crate_id":2,"path":["core","clone","uninit","InitializingSlice"],"kind":"struct"},"1:10104:28364":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:6412:6849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:6321:7290":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:6653:6978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:5184:6586":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:48617:135":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:11750:7965":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"11:2402:8341":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":34}