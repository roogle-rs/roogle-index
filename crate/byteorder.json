{"root":"0:0:2255","crate_version":"1.4.3","includes_private":false,"index":{"2:13472:60318":{"id":"2:13472:60318","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:318:1667":{"id":"0:318:1667","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[2219,4],"end":[2227,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:251:1836":{"id":"0:251:1836","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[1347,4],"end":[1347,51]},"visibility":"default","docs":"Writes unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:261:1880":{"id":"0:261:1880","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[1616,4],"end":[1616,43]},"visibility":"default","docs":"Converts the given slice of unsigned 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u16(&mut numbers);\nassert_eq!(numbers, [5u16.to_be(), 65000u16.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:58:1636":{"id":"0:58:1636","crate_id":0,"name":"read_u32","span":{"filename":"src/io.rs","begin":[217,4],"end":[221,5]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9240:2987-0:360:1595":{"id":"a:2:9240:2987-0:360:1595","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9240:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13477:60321":{"id":"2:13477:60321","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:145:1746":{"id":"0:145:1746","crate_id":0,"name":"write_i32","span":{"filename":"src/io.rs","begin":[1286,4],"end":[1290,5]},"visibility":"default","docs":"Writes a signed 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i32::<BigEndian>(-34253).unwrap();\nwtr.write_i32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\xff\\xff\\x7a\\x33\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:115:1809":{"id":"0:115:1809","crate_id":0,"name":"read_i128_into","span":{"filename":"src/io.rs","begin":[858,4],"end":[868,5]},"visibility":"default","docs":"Reads a sequence of signed 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i128"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3162:228":{"id":"2:3162:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3164:127","2:3165:1414"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3253:211-0:341:1596":{"id":"a:2:3253:211-0:341:1596","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3253:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:97:1739":{"id":"0:97:1739","crate_id":0,"name":"read_f64","span":{"filename":"src/io.rs","begin":[530,4],"end":[534,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian double-precision floating point number from a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n]);\nassert_eq!(f64::consts::PI, rdr.read_f64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"f64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5837:3148":{"id":"5:5837:3148","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:34260"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3476:116":{"id":"2:3476:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3477:221","2:3478:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:260:1871":{"id":"0:260:1871","crate_id":0,"name":"write_f64_into","span":{"filename":"src/lib.rs","begin":[1592,4],"end":[1597,5]},"visibility":"default","docs":"Writes IEEE754 double-precision (8 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:341:1596":{"id":"b:5:787-0:341:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:3143","5:790:3144","5:791:3145"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3088:2768":{"id":"2:3088:2768","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3087:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:288:1633":{"id":"0:288:1633","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[1992,4],"end":[2004,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6895:3539":{"id":"1:6895:3539","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6896:57742"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13407:3984":{"id":"2:13407:3984","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15939:2656"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49383:4273","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55:1698":{"id":"0:55:1698","crate_id":0,"name":"read_i24","span":{"filename":"src/io.rs","begin":[191,4],"end":[195,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3153:74":{"id":"2:3153:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3155:3078"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:359:997":{"id":"0:359:997","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1806,55],"end":[1806,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:37572:178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13387:60306":{"id":"2:13387:60306","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15945:2661"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13458:2739":{"id":"2:13458:2739","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:8428:120","prim@char":"1:15939:2656","self::pattern":"2:13018:3955","str::matches":"1:15945:2661"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49611:4284","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:240:1783":{"id":"0:240:1783","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[1039,4],"end":[1039,50]},"visibility":"default","docs":"Reads unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:284:1624":{"id":"0:284:1624","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[1972,4],"end":[1974,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:223:1719":{"id":"0:223:1719","crate_id":0,"name":"read_i128","span":{"filename":"src/lib.rs","begin":[652,4],"end":[654,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:216:1675":{"id":"0:216:1675","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[502,4],"end":[502,57]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:73:1714":{"id":"0:73:1714","crate_id":0,"name":"read_i64","span":{"filename":"src/io.rs","begin":[347,4],"end":[351,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i64::min_value(), rdr.read_i64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6091:60954":{"id":"5:6091:60954","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1395"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13392:304":{"id":"2:13392:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15945:2661","`u8`":"1:15956:2670"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:234:1744":{"id":"0:234:1744","crate_id":0,"name":"write_int","span":{"filename":"src/lib.rs","begin":[899,4],"end":[901,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6084:60952":{"id":"5:6084:60952","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2946","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:3154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2946","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:3154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:258:1867":{"id":"0:258:1867","crate_id":0,"name":"write_i128_into","span":{"filename":"src/lib.rs","begin":[1534,4],"end":[1539,5]},"visibility":"default","docs":"Writes signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i128"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3156:149":{"id":"2:3156:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3158:3079"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:321:1681":{"id":"0:321:1681","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[2240,4],"end":[2242,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:225:1726":{"id":"0:225:1726","crate_id":0,"name":"read_int128","span":{"filename":"src/lib.rs","begin":[698,4],"end":[700,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:142:1677":{"id":"0:142:1677","crate_id":0,"name":"write_u32","span":{"filename":"src/io.rs","begin":[1259,4],"end":[1263,5]},"visibility":"default","docs":"Writes an unsigned 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u32::<BigEndian>(267).unwrap();\nwtr.write_u32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\x00\\x00\\x01\\x0b\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:358":{"id":"0:358","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,55],"end":[1806,65]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["le","ge","lt","gt"],"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2951:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:359:997"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6085:2836":{"id":"5:6085:2836","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:336:1885":{"id":"0:336:1885","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2335,4],"end":[2341,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:313:1624":{"id":"0:313:1624","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[2188,4],"end":[2190,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3565:4033":{"id":"2:3565:4033","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3567:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3561:3618","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:127:1564":{"id":"0:127:1564","crate_id":0,"name":"WriteBytesExt","span":{"filename":"src/io.rs","begin":[1073,0],"end":[1575,1]},"visibility":"public","docs":"Extends [`Write`] with methods for writing numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a [`Write`]:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, vec![2, 5, 3, 0]);\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:128:2538","0:129:2545","0:130:1672","0:133:1741","0:136:1674","0:139:1743","0:142:1677","0:145:1746","0:148:1679","0:151:1748","0:154:1681","0:157:1750","0:160:1683","0:163:1753","0:166:1675","0:169:1744","0:172:1688","0:175:1755","0:178:1757","0:181:1760"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"io::Write","id":"1:4717:2527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:106:1789":{"id":"0:106:1789","crate_id":0,"name":"read_u128_into","span":{"filename":"src/io.rs","begin":[673,4],"end":[683,5]},"visibility":"default","docs":"Reads a sequence of unsigned 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8867:3932":{"id":"2:8867:3932","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7908:3934","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:365:660":{"id":"0:365:660","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1836,22],"end":[1836,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10232:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10221:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:250:1833":{"id":"0:250:1833","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[1324,4],"end":[1324,51]},"visibility":"default","docs":"Writes unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13423:3125":{"id":"2:13423:3125","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47440:176","prim@char":"1:15939:2656","self::pattern":"2:13018:3955"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:221:1709":{"id":"0:221:1709","crate_id":0,"name":"read_i48","span":{"filename":"src/lib.rs","begin":[608,4],"end":[610,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3506:131":{"id":"2:3506:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3508:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3509:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:350":{"id":"0:350","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,33],"end":[1806,37]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10510:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:351:715"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:210:1672":{"id":"0:210:1672","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[383,4],"end":[383,41]},"visibility":"default","docs":"Writes an unsigned 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_u16(&mut buf, 1_000);\nassert_eq!(1_000, LittleEndian::read_u16(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13487:55352":{"id":"2:13487:55352","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13018:3955","prim@char":"1:15939:2656"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:276:1928":{"id":"0:276:1928","crate_id":0,"name":"LE","span":{"filename":"src/lib.rs","begin":[1848,0],"end":[1848,27]},"visibility":"public","docs":"A type alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"0:259:1869":{"id":"0:259:1869","crate_id":0,"name":"write_f32_into","span":{"filename":"src/lib.rs","begin":[1563,4],"end":[1568,5]},"visibility":"default","docs":"Writes IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3380:3585":{"id":"2:3380:3585","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3382:181","2:3383:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:100:1769":{"id":"0:100:1769","crate_id":0,"name":"read_u16_into","span":{"filename":"src/io.rs","begin":[562,4],"end":[569,5]},"visibility":"default","docs":"Reads a sequence of unsigned 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:108:2483":{"id":"0:108:2483","crate_id":0,"name":"read_i8_into","span":{"filename":"src/io.rs","begin":[716,4],"end":[719,5]},"visibility":"default","docs":"Reads a sequence of signed 8 bit integers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to read into a `&mut [i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `i8` individually.)\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 251, 3]);\nlet mut dst = [0; 3];\nrdr.read_i8_into(&mut dst).unwrap();\nassert_eq!([2, -5, 3], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:203:1632":{"id":"0:203:1632","crate_id":0,"name":"read_u24","span":{"filename":"src/lib.rs","begin":[244,4],"end":[246,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13481:60323":{"id":"2:13481:60323","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13018:3955","prim@char":"1:15939:2656"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61:1704":{"id":"0:61:1704","crate_id":0,"name":"read_i32","span":{"filename":"src/io.rs","begin":[243,4],"end":[247,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:151:1748":{"id":"0:151:1748","crate_id":0,"name":"write_i48","span":{"filename":"src/io.rs","begin":[1340,4],"end":[1344,5]},"visibility":"default","docs":"Writes a signed 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i48::<BigEndian>(-108363435763825).unwrap();\nwtr.write_i48::<BigEndian>(77).unwrap();\nassert_eq!(wtr, b\"\\x9d\\x71\\xab\\xe7\\x97\\x8f\\x00\\x00\\x00\\x00\\x00\\x4d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13043:3958":{"id":"2:13043:3958","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13045:3080","2:13046:59232","2:13047:59233"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13037:3957","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:175:1755":{"id":"0:175:1755","crate_id":0,"name":"write_int128","span":{"filename":"src/io.rs","begin":[1508,4],"end":[1516,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2850:3152":{"id":"2:2850:3152","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2852:54560"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2847:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3253:211":{"id":"2:3253:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:253:1842":{"id":"0:253:1842","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[1393,4],"end":[1393,53]},"visibility":"default","docs":"Writes unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:335:1880":{"id":"0:335:1880","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2326,4],"end":[2332,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3196:1414":{"id":"2:3196:1414","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47567:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3166:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13382:793":{"id":"2:13382:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15939:2656"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3543:3930":{"id":"2:3543:3930","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3545:237","2:3546:206","2:3547:58936"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:166:1675":{"id":"0:166:1675","crate_id":0,"name":"write_uint","span":{"filename":"src/io.rs","begin":[1442,4],"end":[1450,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite unsigned 40 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_uint::<BigEndian>(312550384361, 5).unwrap();\nwtr.write_uint::<BigEndian>(43, 5).unwrap();\nassert_eq!(wtr, b\"\\x48\\xc5\\x74\\x62\\xe9\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8582:157":{"id":"2:8582:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8583:3090","2:8584:922","2:8585:3092","2:8588:3093","2:8589:495","2:8591:3094","2:8594:3095","2:8595:3096","2:8596:3097","2:8597:3098","2:8599:1969","2:8601:3099","2:8602:3100","2:8604:841","2:8607:3101","2:8614:3102","2:8616:3103","2:8619:3104","2:8620:3105","2:8621:3106","2:8623:3107","2:8625:3108","2:8628:1306","2:8629:2935","2:8630:3109","2:8634:3110","2:8637:3111","2:8638:3112","2:8639:3113","2:8641:3114","2:8642:2238","2:8644:3115","2:8647:3116","2:8649:3117","2:8659:3118","2:8674:3119","2:8676:3120","2:8680:3121","2:8689:3122","2:8692:3123","2:8694:3124","2:8697:276","2:8704:294","2:8711:3125","2:8718:3126","2:8727:3127","2:8737:1014","2:8744:3128","2:8751:1998","2:8752:3070","2:8753:3074","2:8765:3073","2:8772:3072","2:8784:3071","2:8791:3129","2:8792:3130","2:8797:3131","2:8800:3132","2:8803:3133","2:8804:3134","2:8806:3135","2:8808:415","2:8811:3136","2:8814:997","2:8817:3137","2:8820:604","2:8823:3138","2:8826:907","2:8828:826","2:8830:792","2:8832:713","2:8834:696","2:8836:3139","2:8837:3140","2:8845:3141"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:248:1826":{"id":"0:248:1826","crate_id":0,"name":"read_f64_into","span":{"filename":"src/lib.rs","begin":[1264,4],"end":[1269,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:356":{"id":"0:356","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,44],"end":[1806,53]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2905:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:357:604"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9240:2987-0:341:1596":{"id":"a:2:9240:2987-0:341:1596","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9240:2987","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:12957:3627":{"id":"2:12957:3627","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12958:126","2:12959:54694"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3265:220":{"id":"2:3265:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:211:1674":{"id":"0:211:1674","crate_id":0,"name":"write_u24","span":{"filename":"src/lib.rs","begin":[402,4],"end":[404,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3294:2942":{"id":"2:3294:2942","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:207:1657":{"id":"0:207:1657","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[324,4],"end":[324,37]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:244:1805":{"id":"0:244:1805","crate_id":0,"name":"read_i64_into","span":{"filename":"src/lib.rs","begin":[1144,4],"end":[1149,5]},"visibility":"default","docs":"Reads signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13385:60305":{"id":"2:13385:60305","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23427:4002":{"id":"2:23427:4002","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23428:1268","2:23429:1267","2:23430:1265","2:23431:1264"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22839:4005","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13396:55314":{"id":"2:13396:55314","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47440:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5833:3147":{"id":"5:5833:3147","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:300:1783":{"id":"0:300:1783","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2080,4],"end":[2082,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13484:8915":{"id":"2:13484:8915","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13018:3955","prim@char":"1:15939:2656"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10510:142":{"id":"2:10510:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10511:715","2:10513:3214"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:319:1672":{"id":"0:319:1672","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[2230,4],"end":[2232,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3182-0:341:1596":{"id":"b:2:3182-0:341:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3159:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3156:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3185:3079"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:4660:2364":{"id":"1:4660:2364","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4661:2014","1:4662:54199","1:4664:54200","1:4665:54201","1:4666:2875","1:4667:2377","1:4668:8872","1:4670:54202","1:4671:3114","1:4672:1949","1:4673:3098","1:4675:2935"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:163:1753":{"id":"0:163:1753","crate_id":0,"name":"write_i128","span":{"filename":"src/io.rs","begin":[1410,4],"end":[1414,5]},"visibility":"default","docs":"Writes a signed 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i128"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13455:60313":{"id":"2:13455:60313","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:91:1726":{"id":"0:91:1726","crate_id":0,"name":"read_int128","span":{"filename":"src/io.rs","begin":[468,4],"end":[472,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i128"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79:1719":{"id":"0:79:1719","crate_id":0,"name":"read_i128","span":{"filename":"src/io.rs","begin":[402,4],"end":[406,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i128::min_value(), rdr.read_i128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i128"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:342":{"id":"0:342","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,9],"end":[1806,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:343:408"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:273:1924":{"id":"0:273:1924","crate_id":0,"name":"BE","span":{"filename":"src/lib.rs","begin":[1818,0],"end":[1818,24]},"visibility":"public","docs":"A type alias for [`BigEndian`].\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"2:9239:2988":{"id":"2:9239:2988","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13427:3085":{"id":"2:13427:3085","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13018:3955","prim@char":"1:15939:2656","`None`":"2:47440:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6893:3507":{"id":"1:6893:3507","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6894:58730"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:212:1677":{"id":"0:212:1677","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[423,4],"end":[423,41]},"visibility":"default","docs":"Writes an unsigned 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6103:60955":{"id":"5:6103:60955","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:209:1667":{"id":"0:209:1667","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[364,4],"end":[364,55]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3713:224":{"id":"2:3713:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3714:181","2:3715:3896","2:3716:686","2:3717:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3718:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3713:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13037:3957":{"id":"2:13037:3957","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13039:3977","2:13040:922","2:13041:60106","2:13042:60107"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5687:3547":{"id":"1:5687:3547","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5688:5191","1:5689:54773"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:287:1657":{"id":"0:287:1657","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[1987,4],"end":[1989,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:204:1636":{"id":"0:204:1636","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[265,4],"end":[265,35]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:789:3143":{"id":"5:789:3143","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"1:5681:3545":{"id":"1:5681:3545","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5682:54743","1:5683:4533"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3197-0:341:1596":{"id":"b:2:3197-0:341:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3156:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3166:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3200:127","2:3201:1413"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:181:1760":{"id":"0:181:1760","crate_id":0,"name":"write_f64","span":{"filename":"src/io.rs","begin":[1570,4],"end":[1574,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian double-precision floating point number to a `Write`:\n\n```rust\nuse std::f64;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f64::<BigEndian>(f64::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x09\\x21\\xfb\\x54\\x44\\x2d\\x18\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"f64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22713:4004":{"id":"2:22713:4004","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22714:4001","2:22715:59254","2:22716:59684","2:22717:1758","2:22718:1733","2:22719:43598","2:22720:59685","2:22721:59686","2:22722:59687","2:22723:59688","2:22724:59689","2:22725:59690","2:22726:59691","2:22727:59692","2:22728:9314","2:22729:59693","2:22730:59294","2:22731:8647","2:22732:59005","2:22733:59004","2:22734:59006","2:22735:59255","2:22736:59256","2:22737:59257","2:22738:59258"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22815:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:7908:3934":{"id":"2:7908:3934","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7909:59785","2:7910:59786","2:7911:59783","2:7912:59781","2:7913:59787","2:7914:59784","2:7915:59782"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2951:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3419:3924":{"id":"2:3419:3924","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3421:1232"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8863:3409":{"id":"2:8863:3409","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13411:4768":{"id":"2:13411:4768","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49661:2887","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10283:2775":{"id":"2:10283:2775","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10284:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5823:3498":{"id":"1:5823:3498","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5824:57812"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13431:54568":{"id":"2:13431:54568","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13018:3955","prim@char":"1:15939:2656","`DoubleEndedIterator`":"2:8428:120","str::rsplit":"1:15945:2661","str::split_whitespace":"1:15945:2661"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49407:2886","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:215:1683":{"id":"0:215:1683","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[482,4],"end":[482,43]},"visibility":"default","docs":"Writes an unsigned 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3265:220-0:360:1595":{"id":"a:2:3265:220-0:360:1595","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3265:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13446:55347":{"id":"2:13446:55347","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13018:3955","str::rsplitn":"1:15945:2661","prim@char":"1:15939:2656"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49511:3182","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:343:408":{"id":"0:343:408","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1806,9],"end":[1806,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:314:1636":{"id":"0:314:1636","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[2193,4],"end":[2195,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13405:55336":{"id":"2:13405:55336","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15945:2661"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23736:3946":{"id":"2:23736:3946","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23737:4001"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23732:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:331:1833":{"id":"0:331:1833","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2290,4],"end":[2296,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:317:1633":{"id":"0:317:1633","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[2208,4],"end":[2216,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,9],"end":[1836,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:362:408"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:242:1795":{"id":"0:242:1795","crate_id":0,"name":"read_i16_into","span":{"filename":"src/lib.rs","begin":[1086,4],"end":[1091,5]},"visibility":"default","docs":"Reads signed 16 bit integers from `src` to `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13408:1949":{"id":"2:13408:1949","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49393:2884","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3166:227":{"id":"2:3166:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168:127","2:3169:1413"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:245:1809":{"id":"0:245:1809","crate_id":0,"name":"read_i128_into","span":{"filename":"src/lib.rs","begin":[1173,4],"end":[1178,5]},"visibility":"default","docs":"Reads signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2910:124":{"id":"2:2910:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2905:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:328:1777":{"id":"0:328:1777","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2275,4],"end":[2277,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3561:3618":{"id":"2:3561:3618","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3563:181","2:3564:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13409:9523":{"id":"2:13409:9523","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15945:2661"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49681:4287","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13493:60325":{"id":"2:13493:60325","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15939:2656","self::pattern":"2:13018:3955"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70:1650":{"id":"0:70:1650","crate_id":0,"name":"read_u64","span":{"filename":"src/io.rs","begin":[321,4],"end":[325,5]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83]);\nassert_eq!(918733457491587, rdr.read_u64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:304:1839":{"id":"0:304:1839","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2108,4],"end":[2114,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:293:1683":{"id":"0:293:1683","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[2037,4],"end":[2039,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3331:4009":{"id":"2:3331:4009","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3333:181","2:3334:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9371:3565":{"id":"1:9371:3565","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9372:57897","1:9373:57898","1:9374:57899","1:9375:57900","1:9376:57901","1:9377:40230","1:9378:57896"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:136:1674":{"id":"0:136:1674","crate_id":0,"name":"write_u24","span":{"filename":"src/io.rs","begin":[1205,4],"end":[1209,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u24::<BigEndian>(267).unwrap();\nwtr.write_u24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\x00\\x01\\x0b\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6993:3506":{"id":"1:6993:3506","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6994:57796"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:213:1679":{"id":"0:213:1679","crate_id":0,"name":"write_u48","span":{"filename":"src/lib.rs","begin":[442,4],"end":[444,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:348":{"id":"0:348","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,29],"end":[1806,31]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2910:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:22802:4146":{"id":"2:22802:4146","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22803:59254","2:22804:1225","2:22805:1226","2:22806:59255","2:22807:59256","2:22808:59257","2:22809:59258","2:22810:59259","2:22811:59260","2:22812:59261"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22815:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:52:1632":{"id":"0:52:1632","crate_id":0,"name":"read_u24","span":{"filename":"src/io.rs","begin":[165,4],"end":[169,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:133:1741":{"id":"0:133:1741","crate_id":0,"name":"write_i16","span":{"filename":"src/io.rs","begin":[1178,4],"end":[1182,5]},"visibility":"default","docs":"Writes a signed 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i16::<BigEndian>(193).unwrap();\nwtr.write_i16::<BigEndian>(-132).unwrap();\nassert_eq!(wtr, b\"\\x00\\xc1\\xff\\x7c\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i16"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3150:75":{"id":"2:3150:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3152:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13470:60317":{"id":"2:13470:60317","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:46:1624":{"id":"0:46:1624","crate_id":0,"name":"read_u16","span":{"filename":"src/io.rs","begin":[112,4],"end":[116,5]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u16"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:791:3145":{"id":"5:791:3145","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3185:3079":{"id":"2:3185:3079","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3159:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3321:3699":{"id":"2:3321:3699","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3323:181","2:3324:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:235:1755":{"id":"0:235:1755","crate_id":0,"name":"write_int128","span":{"filename":"src/lib.rs","begin":[922,4],"end":[924,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:294:1675":{"id":"0:294:1675","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[2042,4],"end":[2053,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10222:2527":{"id":"2:10222:2527","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10223:1530","2:10224:54881","2:10226:54352"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13384:9312":{"id":"2:13384:9312","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3261:218":{"id":"2:3261:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[78,20],"end":[78,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::ReadBytesExt","name":"ReadBytesExt","id":"0:41:1563","glob":false}},"2:13417:55031":{"id":"2:13417:55031","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13018:3955","prim@char":"1:15939:2656"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3984:68":{"id":"2:3984:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3985:1426"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:2872:104":{"id":"2:2872:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2873:408","2:2874:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:148:1679":{"id":"0:148:1679","crate_id":0,"name":"write_u48","span":{"filename":"src/io.rs","begin":[1313,4],"end":[1317,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u48::<BigEndian>(52360336390828).unwrap();\nwtr.write_u48::<BigEndian>(541).unwrap();\nassert_eq!(wtr, b\"\\x2f\\x9f\\x17\\x40\\x3a\\xac\\x00\\x00\\x00\\x00\\x02\\x1d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3188:681":{"id":"2:3188:681","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3294:2942-0:360:1595":{"id":"a:2:3294:2942-0:360:1595","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3294:2942","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5753:3492":{"id":"1:5753:3492","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5754:58685","1:5755:58687","1:5756:58686","1:5757:58688"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:201:1620":{"id":"0:201:1620","crate_id":0,"name":"ByteOrder","span":{"filename":"src/lib.rs","begin":[208,0],"end":[1788,1]},"visibility":"public","docs":"`ByteOrder` describes types that can serialize integers as bytes.\n\nNote that `Self` does not appear anywhere in this trait's definition!\nTherefore, in order to use it, you'll need to use syntax like\n`T::read_u16(&[0, 1])` where `T` implements `ByteOrder`.\n\nThis crate provides two types that implement `ByteOrder`: [`BigEndian`]\nand [`LittleEndian`].\nThis trait is sealed and cannot be implemented for callers to avoid\nbreaking backwards compatibility when adding new derived traits.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, BigEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:202:1624","0:203:1632","0:204:1636","0:205:1643","0:206:1650","0:207:1657","0:208:1633","0:209:1667","0:210:1672","0:211:1674","0:212:1677","0:213:1679","0:214:1681","0:215:1683","0:216:1675","0:217:1688","0:218:1693","0:219:1698","0:220:1704","0:221:1709","0:222:1714","0:223:1719","0:224:1699","0:225:1726","0:226:1732","0:227:1739","0:228:1741","0:229:1743","0:230:1746","0:231:1748","0:232:1750","0:233:1753","0:234:1744","0:235:1755","0:236:1757","0:237:1760","0:238:1769","0:239:1777","0:240:1783","0:241:1789","0:242:1795","0:243:1801","0:244:1805","0:245:1809","0:246:1816","0:247:1822","0:248:1826","0:249:1830","0:250:1833","0:251:1836","0:252:1839","0:253:1842","0:254:1856","0:255:1861","0:256:1863","0:257:1865","0:258:1867","0:259:1869","0:260:1871","0:261:1880","0:262:1885","0:263:1889","0:264:1893","0:265:1898","0:266:1902","0:267:1906","0:268:1910","0:269:1913","0:270:1915"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10272:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3231:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2910:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10510:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2941:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2905:183","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2951:184","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"private::Sealed","id":"0:198:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:283","0:312"]}},"5:790:3144":{"id":"5:790:3144","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:266:1902":{"id":"0:266:1902","crate_id":0,"name":"from_slice_i32","span":{"filename":"src/lib.rs","begin":[1718,4],"end":[1723,5]},"visibility":"default","docs":"Converts the given slice of signed 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i32(&mut numbers);\nassert_eq!(numbers, [5i32.to_be(), 65000i32.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,55],"end":[1836,65]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["le","ge","lt","gt"],"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2951:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:378:997"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:323:1675":{"id":"0:323:1675","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[2250,4],"end":[2257,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23051:17366":{"id":"2:23051:17366","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23052:6636","2:23053:59174","2:23054:59175"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23044:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:64:1643":{"id":"0:64:1643","crate_id":0,"name":"read_u48","span":{"filename":"src/io.rs","begin":[269,4],"end":[273,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xb6, 0x71, 0x6b, 0xdc, 0x2b, 0x31]);\nassert_eq!(200598257150769, rdr.read_u48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8860:3408":{"id":"2:8860:3408","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13402:3713":{"id":"2:13402:3713","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3561:3618","str::slice_mut_unchecked":"1:15945:2661","`str`":"1:15945:2661"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:220:1704":{"id":"0:220:1704","crate_id":0,"name":"read_i32","span":{"filename":"src/lib.rs","begin":[586,4],"end":[588,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3200:127":{"id":"2:3200:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38753:2767","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"1:1079:3531":{"id":"1:1079:3531","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:3143","1:1081:4423","1:1082:54709","1:1083:54710","1:1084:54711","1:1085:54712","1:1086:54713"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3385:3586":{"id":"2:3385:3586","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3387:181","2:3388:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:214:1681":{"id":"0:214:1681","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[463,4],"end":[463,41]},"visibility":"default","docs":"Writes an unsigned 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:246:1816":{"id":"0:246:1816","crate_id":0,"name":"read_f32_into","span":{"filename":"src/lib.rs","begin":[1203,4],"end":[1208,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:369":{"id":"0:369","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,33],"end":[1836,37]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10510:142","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:370:715"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13746:150":{"id":"2:13746:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13747:181","2:13748:150","2:13749:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:337:1889":{"id":"0:337:1889","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2344,4],"end":[2350,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:344":{"id":"0:344","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,16],"end":[1806,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:239:1777":{"id":"0:239:1777","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[1016,4],"end":[1016,50]},"visibility":"default","docs":"Reads unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:269:1913":{"id":"0:269:1913","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[1780,4],"end":[1780,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 single-precision (4 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:5:787-0:360:1595":{"id":"b:5:787-0:360:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:222","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:3143","5:790:3144","5:791:3145"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13420:55033":{"id":"2:13420:55033","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13018:3955","prim@char":"1:15939:2656"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3500:2943":{"id":"2:3500:2943","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3501:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13449:55349":{"id":"2:13449:55349","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15939:2656","self::pattern":"2:13018:3955","str::splitn":"1:15945:2661"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49529:3180","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:113:1805":{"id":"0:113:1805","crate_id":0,"name":"read_i64_into","span":{"filename":"src/io.rs","begin":[820,4],"end":[827,5]},"visibility":"default","docs":"Reads a sequence of signed 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i64"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:341:1596":{"id":"0:341:1596","crate_id":0,"name":"BigEndian","span":{"filename":"src/lib.rs","begin":[1807,0],"end":[1807,21]},"visibility":"public","docs":"Defines big-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 4];\nBigEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, BigEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:9239:2988-0:341:1596","a:2:3253:211-0:341:1596","a:2:9240:2987-0:341:1596","a:2:3265:220-0:341:1596","a:2:3294:2942-0:341:1596","b:2:3186-0:341:1596","b:2:3986-0:341:1596","b:2:2856-0:341:1596","b:2:3197-0:341:1596","b:2:2853-0:341:1596","b:2:3182-0:341:1596","b:2:3192-0:341:1596","b:5:787-0:341:1596","0:342","0:344","0:345","0:347","0:348","0:350","0:353","0:355","0:356","0:358","0:271","0:283"]}},"0:301:1789":{"id":"0:301:1789","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2085,4],"end":[2087,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:275:59":{"id":"0:275:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1840,4],"end":[1842,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3294:2942-0:341:1596":{"id":"a:2:3294:2942-0:341:1596","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3294:2942","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3201:1413":{"id":"2:3201:1413","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47567:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3166:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:333:1839":{"id":"0:333:1839","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2308,4],"end":[2314,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:129:2545":{"id":"0:129:2545","crate_id":0,"name":"write_i8","span":{"filename":"src/io.rs","begin":[1126,4],"end":[1128,5]},"visibility":"default","docs":"Writes a signed 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_i8(2).unwrap();\nwtr.write_i8(-5).unwrap();\nassert_eq!(wtr, b\"\\x02\\xfb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i8"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:265:1898":{"id":"0:265:1898","crate_id":0,"name":"from_slice_i16","span":{"filename":"src/lib.rs","begin":[1693,4],"end":[1698,5]},"visibility":"default","docs":"Converts the given slice of signed 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 6500];\nBigEndian::from_slice_i16(&mut numbers);\nassert_eq!(numbers, [5i16.to_be(), 6500i16.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10287:2777":{"id":"2:10287:2777","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10288:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:256:1863":{"id":"0:256:1863","crate_id":0,"name":"write_i32_into","span":{"filename":"src/lib.rs","begin":[1478,4],"end":[1483,5]},"visibility":"default","docs":"Writes signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i32"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3195:127":{"id":"2:3195:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3166:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"2:3718:137":{"id":"2:3718:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3720:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3713:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13410:9521":{"id":"2:13410:9521","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15945:2661"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49690:4288","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13390:54773":{"id":"2:13390:54773","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12489:4390"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:206:1650":{"id":"0:206:1650","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[305,4],"end":[305,35]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3348:4017":{"id":"2:3348:4017","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:181","2:3350:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:347":{"id":"0:347","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,29],"end":[1806,31]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3262:217","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:374":{"id":"0:374","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,44],"end":[1836,53]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3261:218","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1839,0],"end":[1843,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3231:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:275:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:322:1683":{"id":"0:322:1683","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[2245,4],"end":[2247,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10520:146":{"id":"2:10520:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10521:652","2:10522:1967","2:10523:2538","2:10524:1672","2:10525:1677","2:10526:1681","2:10527:1683","2:10528:56460","2:10529:2545","2:10530:1741","2:10531:1746","2:10532:1750","2:10533:1753","2:10534:56461","2:10535:56462","2:10536:1530"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13398:55315":{"id":"2:13398:55315","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3326:3588":{"id":"2:3326:3588","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3328:181","2:3329:1353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:254:1856":{"id":"0:254:1856","crate_id":0,"name":"write_i8_into","span":{"filename":"src/lib.rs","begin":[1422,4],"end":[1427,5]},"visibility":"default","docs":"Writes signed 8 bit integers from `src` into `dst`.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to write from a `&[i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `u8` individually.)\n\n# Panics\n\nPanics when `buf.len() != src.len()`.\n\n# Examples\n\nWrite and read `i8` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian, ReadBytesExt};\n\nlet mut bytes = [0; 4];\nlet numbers_given = [1, 2, 0xf, 0xe];\nLittleEndian::write_i8_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nbytes.as_ref().read_i8_into(&mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13461:60314":{"id":"2:13461:60314","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:15939:2656","self::pattern":"2:13018:3955","str::matches":"1:15945:2661","`DoubleEndedIterator`":"2:8428:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49629:4285","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2856-0:341:1596":{"id":"b:2:2856-0:341:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2850:3152","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2858:54560"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2858:54560":{"id":"2:2858:54560","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13391:60307":{"id":"2:13391:60307","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:327:1769":{"id":"0:327:1769","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2270,4],"end":[2272,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3509:132":{"id":"2:3509:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3511:181","2:3512:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:271":{"id":"0:271","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1809,0],"end":[1813,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3231:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:272:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:104:1783":{"id":"0:104:1783","crate_id":0,"name":"read_u64_into","span":{"filename":"src/io.rs","begin":[635,4],"end":[642,5]},"visibility":"default","docs":"Reads a sequence of unsigned 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10272:109":{"id":"2:10272:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10273:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:315:1650":{"id":"0:315:1650","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[2198,4],"end":[2200,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13393:1797":{"id":"2:13393:1797","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15956:2670"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3197-0:360:1595":{"id":"b:2:3197-0:360:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3156:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3166:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3200:127","2:3201:1413"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:197:1591":{"id":"0:197:1591","crate_id":0,"name":"private","span":{"filename":"src/lib.rs","begin":[165,0],"end":[165,11]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:198:1594"],"is_stripped":true}},"2:3231:115":{"id":"2:3231:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3232:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:121:1826":{"id":"0:121:1826","crate_id":0,"name":"read_f64_into","span":{"filename":"src/io.rs","begin":[987,4],"end":[994,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:117:1816":{"id":"0:117:1816","crate_id":0,"name":"read_f32_into","span":{"filename":"src/io.rs","begin":[902,4],"end":[909,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13496:60326":{"id":"2:13496:60326","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13018:3955","prim@char":"1:15939:2656"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13412:60309":{"id":"2:13412:60309","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49671:4286","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:228:1741":{"id":"0:228:1741","crate_id":0,"name":"write_i16","span":{"filename":"src/lib.rs","begin":[766,4],"end":[768,5]},"visibility":"default","docs":"Writes a signed 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10555:2814":{"id":"2:10555:2814","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10556:146","2:10557:9012","2:10558:58574"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23099:4093":{"id":"2:23099:4093","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23736:3946","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23090:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:169:1744":{"id":"0:169:1744","crate_id":0,"name":"write_int","span":{"filename":"src/io.rs","begin":[1478,4],"end":[1486,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite signed 56 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_int::<BigEndian>(-3548172039376767, 7).unwrap();\nwtr.write_int::<BigEndian>(43, 7).unwrap();\nassert_eq!(wtr, b\"\\xf3\\x64\\xf4\\xd1\\xfd\\xb0\\x81\\x00\\x00\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:119:1822":{"id":"0:119:1822","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/io.rs","begin":[948,4],"end":[953,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\n\nReads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f32_into` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6107:54710":{"id":"5:6107:54710","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15945:2661"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:178:1757":{"id":"0:178:1757","crate_id":0,"name":"write_f32","span":{"filename":"src/io.rs","begin":[1541,4],"end":[1545,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian single-precision floating point number to a `Write`:\n\n```rust\nuse std::f32;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f32::<BigEndian>(f32::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x49\\x0f\\xdb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"f32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3364:4022":{"id":"2:3364:4022","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3366:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:376:604":{"id":"0:376:604","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1836,44],"end":[1836,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:351:715":{"id":"0:351:715","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1806,33],"end":[1806,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::hash::Hasher","id":"2:10520:146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:325:1688":{"id":"0:325:1688","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2260,4],"end":[2267,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3192-0:341:1596":{"id":"b:2:3192-0:341:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3166:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3162:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3195:127","2:3196:1414"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13383:3086":{"id":"2:13383:3086","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2856-0:360:1595":{"id":"b:2:2856-0:360:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2850:3152","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2858:54560"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13499:4175":{"id":"2:13499:4175","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12957:3627","`FromStr`":"2:12957:3627"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47567:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12957:3627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12957:3627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:219:1698":{"id":"0:219:1698","crate_id":0,"name":"read_i24","span":{"filename":"src/lib.rs","begin":[564,4],"end":[566,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:309:1893":{"id":"0:309:1893","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2153,4],"end":[2159,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:208:1633":{"id":"0:208:1633","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[344,4],"end":[344,51]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3356:3701":{"id":"2:3356:3701","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3358:1354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5819:3497":{"id":"1:5819:3497","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5820:57922"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13048:3959":{"id":"2:13048:3959","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:243:1801":{"id":"0:243:1801","crate_id":0,"name":"read_i32_into","span":{"filename":"src/lib.rs","begin":[1115,4],"end":[1120,5]},"visibility":"default","docs":"Reads signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:54460","1:2579:2639","1:2580:58345","1:2581:58346","1:2582:56548"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10272:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10279:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:76:1657":{"id":"0:76:1657","crate_id":0,"name":"read_u128","span":{"filename":"src/io.rs","begin":[376,4],"end":[380,5]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83,\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83\n]);\nassert_eq!(16947640962301618749969007319746179, rdr.read_u128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u128"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:233:1753":{"id":"0:233:1753","crate_id":0,"name":"write_i128","span":{"filename":"src/lib.rs","begin":[876,4],"end":[878,5]},"visibility":"default","docs":"Writes a signed 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read n-byte `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13440:60310":{"id":"2:13440:60310","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:15939:2656","`DoubleEndedIterator`":"2:8428:120","self::pattern":"2:13018:3955","str::rsplit_terminator":"1:15945:2661","str::split":"1:15945:2661"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49457:4277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:330:1789":{"id":"0:330:1789","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2285,4],"end":[2287,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6824:3537":{"id":"1:6824:3537","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6825:8206"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:264:1893":{"id":"0:264:1893","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[1673,4],"end":[1673,45]},"visibility":"default","docs":"Converts the given slice of unsigned 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u128(&mut numbers);\nassert_eq!(numbers, [5u128.to_be(), 65000u128.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3401:3915":{"id":"2:3401:3915","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:181","2:3404:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22902:3567":{"id":"2:22902:3567","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22892:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10291:2778":{"id":"2:10291:2778","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10292:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:229:1743":{"id":"0:229:1743","crate_id":0,"name":"write_i24","span":{"filename":"src/lib.rs","begin":[788,4],"end":[790,5]},"visibility":"default","docs":"Writes a signed 24 bit integer `n` to `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130:1672":{"id":"0:130:1672","crate_id":0,"name":"write_u16","span":{"filename":"src/io.rs","begin":[1151,4],"end":[1155,5]},"visibility":"default","docs":"Writes an unsigned 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\\x03\\x00\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u16"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3360:4006":{"id":"2:3360:4006","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3362:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2847:97":{"id":"2:2847:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2849:2726"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,39],"end":[1806,42]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2941:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:354:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13478:60322":{"id":"2:13478:60322","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13018:3955","prim@char":"1:15939:2656"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13048:3959","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4742:2881":{"id":"1:4742:2881","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4743:54564","1:4744:54565","1:4745:54567","1:4747:2880","1:4748:54566","1:4750:54568","1:4751:4768"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4660:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:290:1672":{"id":"0:290:1672","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[2022,4],"end":[2024,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:231:1748":{"id":"0:231:1748","crate_id":0,"name":"write_i48","span":{"filename":"src/lib.rs","begin":[832,4],"end":[834,5]},"visibility":"default","docs":"Writes a signed 48 bit integer `n` to `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13404:55335":{"id":"2:13404:55335","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15945:2661"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3390:3587":{"id":"2:3390:3587","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3392:181","2:3393:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:345":{"id":"0:345","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,22],"end":[1806,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10272:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:346:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:292:1681":{"id":"0:292:1681","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[2032,4],"end":[2034,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13452:60312":{"id":"2:13452:60312","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3759:3902":{"id":"2:3759:3902","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13501:4423":{"id":"2:13501:4423","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:298:1769":{"id":"0:298:1769","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2070,4],"end":[2072,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4735:2878":{"id":"1:4735:2878","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4736:58605","1:4737:40625","1:4738:58606","1:4739:58607"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3352:3700":{"id":"2:3352:3700","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3354:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:226:1732":{"id":"0:226:1732","crate_id":0,"name":"read_f32","span":{"filename":"src/lib.rs","begin":[721,4],"end":[723,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13508:60328":{"id":"2:13508:60328","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15939:2656"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49724:4291","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:338:1893":{"id":"0:338:1893","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2353,4],"end":[2359,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3986-0:341:1596":{"id":"b:2:3986-0:341:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3984:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3988:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13434:9522":{"id":"2:13434:9522","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13018:3955","prim@char":"1:15939:2656"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12810:3184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13490:60324":{"id":"2:13490:60324","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13018:3955","prim@char":"1:15939:2656"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3796:3903":{"id":"2:3796:3903","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:26:1562":{"id":"0:26:1562","crate_id":0,"name":"io","span":{"filename":"src/io.rs","begin":[1,0],"end":[1592,1]},"visibility":"crate","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:41:1563","0:127:1564"],"is_stripped":true}},"0:88:1667":{"id":"0:88:1667","crate_id":0,"name":"read_uint128","span":{"filename":"src/io.rs","begin":[460,4],"end":[464,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u128"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:252:1839":{"id":"0:252:1839","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[1370,4],"end":[1370,51]},"visibility":"default","docs":"Writes unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:160:1683":{"id":"0:160:1683","crate_id":0,"name":"write_u128","span":{"filename":"src/io.rs","begin":[1402,4],"end":[1406,5]},"visibility":"default","docs":"Writes an unsigned 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u128"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6088:60953":{"id":"5:6088:60953","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:172:1688":{"id":"0:172:1688","crate_id":0,"name":"write_uint128","span":{"filename":"src/io.rs","begin":[1493,4],"end":[1501,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3395:3912":{"id":"2:3395:3912","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:181","2:3398:1231"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3415:3922":{"id":"2:3415:3922","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3417:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:3143","5:785:3144","5:786:3145"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:272:59":{"id":"0:272:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1810,4],"end":[1812,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:44:2383":{"id":"0:44:2383","crate_id":0,"name":"read_i8","span":{"filename":"src/io.rs","begin":[85,4],"end":[89,5]},"visibility":"default","docs":"Reads a signed 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![0x02, 0xfb]);\nassert_eq!(2, rdr.read_i8().unwrap());\nassert_eq!(-5, rdr.read_i8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i8"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2905:183":{"id":"2:2905:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2907:604","2:2908:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13437:55345":{"id":"2:13437:55345","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:15945:2661","prim@char":"1:15939:2656","self::pattern":"2:13018:3955","`DoubleEndedIterator`":"2:8428:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49425:3178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:363":{"id":"0:363","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,16],"end":[1836,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3411:3920":{"id":"2:3411:3920","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3342:4014":{"id":"2:3342:4014","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:181","2:3345:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3186-0:341:1596":{"id":"b:2:3186-0:341:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3159:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3188:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:316:1657":{"id":"0:316:1657","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[2203,4],"end":[2205,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:2255":{"id":"0:0:2255","crate_id":0,"name":"byteorder","span":{"filename":"src/lib.rs","begin":[1,0],"end":[4052,1]},"visibility":"public","docs":"This crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].\n\nThe organization of the crate is pretty simple. A trait, [`ByteOrder`], specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]\nand [`LittleEndian`] implement these methods. Finally, [`ReadBytesExt`] and\n[`WriteBytesExt`] provide convenience methods available to all types that\nimplement [`Read`] and [`Write`].\n\nAn alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve\ncode clarity.\n\nAn additional alias, [`NativeEndian`], is provided for the endianness of the\nlocal platform. This is convenient when serializing data for use and\nconversions are not desired.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`] type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a [`Write`] type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n\n# Optional Features\n\nThis crate optionally provides support for 128 bit values (`i128` and `u128`)\nwhen built with the `i128` feature enabled.\n\nThis crate can also be used without the standard library.\n\n# Alternatives\n\nNote that as of Rust 1.32, the standard numeric types provide built-in methods\nlike `to_le_bytes` and `from_le_bytes`, which support some of the same use\ncases.\n\n[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness\n[`ByteOrder`]: trait.ByteOrder.html\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`ReadBytesExt`]: trait.ReadBytesExt.html\n[`WriteBytesExt`]: trait.WriteBytesExt.html\n[`NetworkEndian`]: type.NetworkEndian.html\n[`NativeEndian`]: type.NativeEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":["#![deny(missing_docs)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:201:1620","0:341:1596","0:273:1924","0:360:1595","0:276:1928","0:277:1936","0:278:1939","0:20","0:23"],"is_stripped":false}},"2:9240:2987":{"id":"2:9240:2987","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8347:3950":{"id":"2:8347:3950","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8349:3135"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5020:3513":{"id":"1:5020:3513","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5021:3172","1:5022:58330"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:355":{"id":"0:355","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,44],"end":[1806,53]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3261:218","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:128:2538":{"id":"0:128:2538","crate_id":0,"name":"write_u8","span":{"filename":"src/io.rs","begin":[1098,4],"end":[1100,5]},"visibility":"default","docs":"Writes an unsigned 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_u8(2).unwrap();\nwtr.write_u8(5).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u8"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:303:1836":{"id":"0:303:1836","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2099,4],"end":[2105,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13381":{"id":"2:13381","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12478:1338","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13382:793","2:13383:3086","2:13384:9312","2:13385:60305","2:13387:60306","2:13390:54773","2:13391:60307","2:13392:304","2:13393:1797","2:13394:55313","2:13396:55314","2:13398:55315","2:13400:55316","2:13402:3713","2:13403:60308","2:13404:55335","2:13405:55336","2:13406:4308","2:13407:3984","2:13408:1949","2:13409:9523","2:13410:9521","2:13411:4768","2:13412:60309","2:13413:9263","2:13414:55351","2:13417:55031","2:13420:55033","2:13423:3125","2:13427:3085","2:13431:54568","2:13434:9522","2:13437:55345","2:13440:60310","2:13443:60311","2:13446:55347","2:13449:55349","2:13452:60312","2:13455:60313","2:13458:2739","2:13461:60314","2:13464:60315","2:13467:60316","2:13470:60317","2:13472:60318","2:13474:60319","2:13476:60320","2:13477:60321","2:13478:60322","2:13481:60323","2:13484:8915","2:13487:55352","2:13490:60324","2:13493:60325","2:13496:60326","2:13499:4175","2:13501:4423","2:13502:54711","2:13503:54712","2:13504:54713","2:13505:60327","2:13507:3533","2:13508:60328"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:42:2376":{"id":"0:42:2376","crate_id":0,"name":"read_u8","span":{"filename":"src/io.rs","begin":[55,4],"end":[59,5]},"visibility":"default","docs":"Reads an unsigned 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![2, 5]);\nassert_eq!(2, rdr.read_u8().unwrap());\nassert_eq!(5, rdr.read_u8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:370:715":{"id":"0:370:715","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1836,33],"end":[1836,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::hash::Hasher","id":"2:10520:146","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:310:1913":{"id":"0:310:1913","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2162,4],"end":[2171,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:257:1865":{"id":"0:257:1865","crate_id":0,"name":"write_i64_into","span":{"filename":"src/lib.rs","begin":[1506,4],"end":[1511,5]},"visibility":"default","docs":"Writes signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i64"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13467:60316":{"id":"2:13467:60316","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13018:3955","prim@char":"1:15939:2656","str::match_indices":"1:15945:2661","`DoubleEndedIterator`":"2:8428:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49575:4282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4035:3558":{"id":"2:4035:3558","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4036:56548"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:267:1906":{"id":"0:267:1906","crate_id":0,"name":"from_slice_i64","span":{"filename":"src/lib.rs","begin":[1743,4],"end":[1748,5]},"visibility":"default","docs":"Converts the given slice of signed 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i64(&mut numbers);\nassert_eq!(numbers, [5i64.to_be(), 65000i64.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:283":{"id":"0:283","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1970,0],"end":[2184,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_i8_into","write_f64_into","read_i128","from_slice_i32","read_u48","read_i32","read_i24","read_f64_into","write_i128","write_i64","write_int","write_i16","write_u24","read_i64_into","read_f32","write_i32_into","read_int128","write_f32_into","read_i64","from_slice_i64","read_f64_into_unchecked","read_int","read_u24","read_i16","write_f32","write_f64","write_i48","read_i128_into","read_f64","write_i128_into","write_i16_into","from_slice_i128","read_i48","from_slice_i16","read_f32_into_unchecked","write_int128","read_f32_into","write_i32","write_u48","write_i24","read_i32_into","write_i64_into","read_i16_into"],"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:284:1624","0:285:1636","0:286:1650","0:287:1657","0:288:1633","0:289:1667","0:290:1672","0:291:1677","0:292:1681","0:293:1683","0:294:1675","0:296:1688","0:298:1769","0:299:1777","0:300:1783","0:301:1789","0:302:1833","0:303:1836","0:304:1839","0:305:1842","0:306:1880","0:307:1885","0:308:1889","0:309:1893","0:310:1913","0:311:1915"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[78,34],"end":[78,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::WriteBytesExt","name":"WriteBytesExt","id":"0:127:1564","glob":false}},"0:320:1677":{"id":"0:320:1677","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[2235,4],"end":[2237,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:249:1830":{"id":"0:249:1830","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/lib.rs","begin":[1299,4],"end":[1301,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f64_into` instead"},"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3424:3927":{"id":"2:3424:3927","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3426:1235"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13476:60320":{"id":"2:13476:60320","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3263:106":{"id":"2:3263:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14130:141":{"id":"2:14130:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14131:277","2:14132:518","2:14133:280","2:14134:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3159:135":{"id":"2:3159:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3161:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:291:1677":{"id":"0:291:1677","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[2027,4],"end":[2029,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13413:9263":{"id":"2:13413:9263","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49699:4289","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13502:54711":{"id":"2:13502:54711","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102:1777":{"id":"0:102:1777","crate_id":0,"name":"read_u32_into","span":{"filename":"src/io.rs","begin":[597,4],"end":[604,5]},"visibility":"default","docs":"Reads a sequence of unsigned 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2855:2726":{"id":"2:2855:2726","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4717:2527":{"id":"1:4717:2527","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4718:1967","1:4719:54350","1:4721:54351","1:4722:4691","1:4723:2539","1:4724:8960","1:4725:54352","1:4734:3114"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13503:54712":{"id":"2:13503:54712","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:367":{"id":"0:367","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,29],"end":[1836,31]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2910:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:308:1889":{"id":"0:308:1889","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2144,4],"end":[2150,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:285:1636":{"id":"0:285:1636","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[1977,4],"end":[1979,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13464:60315":{"id":"2:13464:60315","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:15939:2656","self::pattern":"2:13018:3955","`DoubleEndedIterator`":"2:8428:120","str::rmatch_indices":"1:15945:2661"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49557:4281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:296:1688":{"id":"0:296:1688","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2056,4],"end":[2067,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:366":{"id":"0:366","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,29],"end":[1836,31]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3262:217","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:49:1693":{"id":"0:49:1693","crate_id":0,"name":"read_i16","span":{"filename":"src/io.rs","begin":[139,4],"end":[143,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0xc1, 0xff, 0x7c]);\nassert_eq!(193, rdr.read_i16::<BigEndian>().unwrap());\nassert_eq!(-132, rdr.read_i16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i16"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:364":{"id":"0:364","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,22],"end":[1836,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10272:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:365:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8393:2945":{"id":"2:8393:2945","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8395:3087","2:8397:3088","2:8398:3089"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13474:60319":{"id":"2:13474:60319","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22839:4005":{"id":"2:22839:4005","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22840:4001","2:22841:1245","2:22842:1270"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5775:3495":{"id":"1:5775:3495","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5776:7136","1:5777:57922","1:5778:5641","1:5779:57923","1:5780:3842","1:5781:3843","1:5782:57924","1:5783:1302","1:5784:57925","1:5785:57926","1:5786:57927","1:5787:57928","1:5788:57929","1:5789:57930","1:5790:57931","1:5791:57932"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:332:1836":{"id":"0:332:1836","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2299,4],"end":[2305,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:362:408":{"id":"0:362:408","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1836,9],"end":[1836,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6897:3540":{"id":"1:6897:3540","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6898:58308"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:302:1833":{"id":"0:302:1833","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2090,4],"end":[2096,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13731:138":{"id":"2:13731:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13732:181","2:13733:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10293:2779":{"id":"2:10293:2779","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10294:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:334:1842":{"id":"0:334:1842","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2317,4],"end":[2323,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8343:3948":{"id":"2:8343:3948","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8345:3134"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:307:1885":{"id":"0:307:1885","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2135,4],"end":[2141,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:157:1750":{"id":"0:157:1750","crate_id":0,"name":"write_i64","span":{"filename":"src/io.rs","begin":[1394,4],"end":[1398,5]},"visibility":"default","docs":"Writes a signed 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i64::<BigEndian>(i64::min_value()).unwrap();\nwtr.write_i64::<BigEndian>(i64::max_value()).unwrap();\nassert_eq!(wtr, b\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3192-0:360:1595":{"id":"b:2:3192-0:360:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3166:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3162:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3195:127","2:3196:1414"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2941:177":{"id":"2:2941:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2942:415","2:2943:1998","2:2944:3070","2:2945:3077"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2910:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2951:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:299:1777":{"id":"0:299:1777","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2075,4],"end":[2077,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:202:1624":{"id":"0:202:1624","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[225,4],"end":[225,35]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:6471:3537":{"id":"1:6471:3537","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6472:3842","1:6473:3843","1:6474:8205","1:6475:58410","1:6477:58414","1:6479:58411","1:6480:58412","1:6482:58413"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:85:1699":{"id":"0:85:1699","crate_id":0,"name":"read_int","span":{"filename":"src/io.rs","begin":[452,4],"end":[456,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xc1, 0xff, 0x7c]);\nassert_eq!(-4063364, rdr.read_int::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:378:997":{"id":"0:378:997","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1836,55],"end":[1836,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:37572:178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:277:1936":{"id":"0:277:1936","crate_id":0,"name":"NetworkEndian","span":{"filename":"src/lib.rs","begin":[1874,0],"end":[1874,35]},"visibility":"public","docs":"Defines network byte order serialization.\n\nNetwork byte order is defined by [RFC 1700][1] to be big-endian, and is\nreferred to in several protocol specifications.  This type is an alias of\n[`BigEndian`].\n\n[1]: https://tools.ietf.org/html/rfc1700\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, NetworkEndian, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, NetworkEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"b:2:2853-0:360:1595":{"id":"b:2:2853-0:360:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2847:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2855:2726"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:7829:3641":{"id":"1:7829:3641","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7830:57918"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5769:3494":{"id":"1:5769:3494","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5770:5641","1:5771:7925"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3724:3896":{"id":"2:3724:3896","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3726:57202"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:94:1732":{"id":"0:94:1732","crate_id":0,"name":"read_f32","span":{"filename":"src/io.rs","begin":[499,4],"end":[503,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian single-precision floating point number from a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n]);\nassert_eq!(f32::consts::PI, rdr.read_f32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"f32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:312":{"id":"0:312","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2186,0],"end":[2384,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_i8_into","write_f64_into","read_i128","from_slice_i32","read_u48","read_i32","read_i24","read_f64_into","write_i128","write_i64","write_int","write_i16","write_u24","read_i64_into","read_f32","write_i32_into","read_int128","write_f32_into","read_i64","from_slice_i64","read_f64_into_unchecked","read_int","read_u24","read_i16","write_f32","write_f64","write_i48","read_i128_into","read_f64","write_i128_into","write_i16_into","from_slice_i128","read_i48","from_slice_i16","read_f32_into_unchecked","write_int128","read_f32_into","write_i32","write_u48","write_i24","read_i32_into","write_i64_into","read_i16_into"],"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:313:1624","0:314:1636","0:315:1650","0:316:1657","0:317:1633","0:318:1667","0:319:1672","0:320:1677","0:321:1681","0:322:1683","0:323:1675","0:325:1688","0:327:1769","0:328:1777","0:329:1783","0:330:1789","0:331:1833","0:332:1836","0:333:1839","0:334:1842","0:335:1880","0:336:1885","0:337:1889","0:338:1893","0:339:1913","0:340:1915"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:227:1739":{"id":"0:227:1739","crate_id":0,"name":"read_f64","span":{"filename":"src/lib.rs","begin":[744,4],"end":[746,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3489:2888":{"id":"2:3489:2888","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3490:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3476:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10281:2774":{"id":"2:10281:2774","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10282:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:224:1699":{"id":"0:224:1699","crate_id":0,"name":"read_int","span":{"filename":"src/lib.rs","begin":[675,4],"end":[677,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13028:3954":{"id":"2:13028:3954","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13030:3957","2:13031:59749","2:13032:59750","2:13033:59751","2:13034:59753","2:13035:59752","2:13036:59754"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3182-0:360:1595":{"id":"b:2:3182-0:360:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3159:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3156:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3185:3079"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13504:54713":{"id":"2:13504:54713","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5831:3491":{"id":"1:5831:3491","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5832:5641"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6719:3495":{"id":"1:6719:3495","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6720:57827","1:6721:7482","1:6722:7483","1:6723:7485","1:6724:7484","1:6725:7486","1:6726:7487","1:6727:7489","1:6728:5683","1:6729:7492","1:6730:7493","1:6731:7494","1:6732:7495","1:6733:7496","1:6734:7497","1:6735:7490","1:6736:7491"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:247:1822":{"id":"0:247:1822","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/lib.rs","begin":[1237,4],"end":[1239,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f32_into` instead"},"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:346:660":{"id":"0:346:660","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1806,22],"end":[1806,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10232:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10221:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:270:1915":{"id":"0:270:1915","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[1787,4],"end":[1787,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 double-precision (8 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:6493:3569":{"id":"1:6493:3569","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6494:57775","1:6495:7560","1:6496:57776","1:6497:57777","1:6498:57778","1:6499:57779"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23432:17385":{"id":"2:23432:17385","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23433:59004","2:23434:59005","2:23435:59006"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23427:4002","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:205:1643":{"id":"0:205:1643","crate_id":0,"name":"read_u48","span":{"filename":"src/lib.rs","begin":[284,4],"end":[286,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3186-0:360:1595":{"id":"b:2:3186-0:360:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3159:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3188:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:232:1750":{"id":"0:232:1750","crate_id":0,"name":"write_i64","span":{"filename":"src/lib.rs","begin":[854,4],"end":[856,5]},"visibility":"default","docs":"Writes a signed 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8428:120":{"id":"2:8428:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8429:3080","2:8430:3081","2:8431:3082","2:8432:3083","2:8436:3084","2:8439:3085"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3632:3242":{"id":"2:3632:3242","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3634:60089","2:3635:60090","2:3636:55351"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3701:3241":{"id":"2:3701:3241","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3632:3242","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,39],"end":[1836,42]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2941:177","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:373:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:306:1880":{"id":"0:306:1880","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2126,4],"end":[2132,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:123:1830":{"id":"0:123:1830","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/io.rs","begin":[1039,4],"end":[1044,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Safety\n\nThis method is unsafe because there are no guarantees made about the\nfloating point values. In particular, this method does not check for\nsignaling NaNs, which may result in undefined behavior.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f64_into` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1338","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:60952","5:6085:2836","5:6088:60953","5:6091:60954","5:6103:60955","5:6104:60956","5:6105:2908","5:6106:54709","5:6107:54710"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:82:1633":{"id":"0:82:1633","crate_id":0,"name":"read_uint","span":{"filename":"src/io.rs","begin":[427,4],"end":[431,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0x74, 0xfa]);\nassert_eq!(8418554, rdr.read_uint::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8453:2944":{"id":"2:8453:2944","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8454:793","2:8455:3086"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8582:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:340:1915":{"id":"0:340:1915","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2374,4],"end":[2383,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:238:1769":{"id":"0:238:1769","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[993,4],"end":[993,50]},"visibility":"default","docs":"Reads unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:10279:119":{"id":"2:10279:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10280:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6104:60956":{"id":"5:6104:60956","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8368:216","`Box<str>`":"5:432:2946"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2946","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:3154","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13400:55316":{"id":"2:13400:55316","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:41:1563":{"id":"0:41:1563","crate_id":0,"name":"ReadBytesExt","span":{"filename":"src/io.rs","begin":[30,0],"end":[1045,1]},"visibility":"public","docs":"Extends [`Read`] with methods for reading numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`]:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:42:2376","0:44:2383","0:46:1624","0:49:1693","0:52:1632","0:55:1698","0:58:1636","0:61:1704","0:64:1643","0:67:1709","0:70:1650","0:73:1714","0:76:1657","0:79:1719","0:82:1633","0:85:1699","0:88:1667","0:91:1726","0:94:1732","0:97:1739","0:100:1769","0:102:1777","0:104:1783","0:106:1789","0:108:2483","0:109:1795","0:111:1801","0:113:1805","0:115:1809","0:117:1816","0:119:1822","0:121:1826","0:123:1830"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"io::Read","id":"1:4660:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:236:1757":{"id":"0:236:1757","crate_id":0,"name":"write_f32","span":{"filename":"src/lib.rs","begin":[945,4],"end":[947,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"f32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:222:1714":{"id":"0:222:1714","crate_id":0,"name":"read_i64","span":{"filename":"src/lib.rs","begin":[630,4],"end":[632,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:373:415":{"id":"0:373:415","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1836,39],"end":[1836,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:37572:178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:262:1885":{"id":"0:262:1885","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[1635,4],"end":[1635,43]},"visibility":"default","docs":"Converts the given slice of unsigned 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u32(&mut numbers);\nassert_eq!(numbers, [5u32.to_be(), 65000u32.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:10914:214":{"id":"2:10914:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10916:181","2:10917:55313","2:10918:55314","2:10919:55315","2:10920:55316","2:10921:753","2:10922:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10905:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:360:1595":{"id":"0:360:1595","crate_id":0,"name":"LittleEndian","span":{"filename":"src/lib.rs","begin":[1837,0],"end":[1837,24]},"visibility":"public","docs":"Defines little-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:9239:2988-0:360:1595","a:2:3253:211-0:360:1595","a:2:9240:2987-0:360:1595","a:2:3265:220-0:360:1595","a:2:3294:2942-0:360:1595","b:2:3186-0:360:1595","b:2:3986-0:360:1595","b:2:2856-0:360:1595","b:2:3197-0:360:1595","b:2:2853-0:360:1595","b:2:3182-0:360:1595","b:2:3192-0:360:1595","b:5:787-0:360:1595","0:361","0:363","0:364","0:366","0:367","0:369","0:372","0:374","0:375","0:377","0:274","0:312"]}},"2:2951:184":{"id":"2:2951:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2953:997","2:2954:826","2:2955:792","2:2956:713","2:2957:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2905:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3407:3918":{"id":"2:3407:3918","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3409:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3986-0:360:1595":{"id":"b:2:3986-0:360:1595","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3984:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3988:1426"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3258:2518":{"id":"2:3258:2518","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3253:211-0:360:1595":{"id":"a:2:3253:211-0:360:1595","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3253:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:2:3265:220-0:341:1596":{"id":"a:2:3265:220-0:341:1596","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3265:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:354:415":{"id":"0:354:415","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1806,39],"end":[1806,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:37572:178","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5761:3493":{"id":"1:5761:3493","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5762:5641","1:5763:54907","1:5764:54908"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:329:1783":{"id":"0:329:1783","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2280,4],"end":[2282,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8380:136":{"id":"2:8380:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8382:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:241:1789":{"id":"0:241:1789","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[1062,4],"end":[1062,52]},"visibility":"default","docs":"Reads unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:217:1688":{"id":"0:217:1688","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[522,4],"end":[522,61]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:311:1915":{"id":"0:311:1915","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2174,4],"end":[2183,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:154:1681":{"id":"0:154:1681","crate_id":0,"name":"write_u64","span":{"filename":"src/io.rs","begin":[1367,4],"end":[1371,5]},"visibility":"default","docs":"Writes an unsigned 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u64::<BigEndian>(918733457491587).unwrap();\nwtr.write_u64::<BigEndian>(143).unwrap();\nassert_eq!(wtr, b\"\\x00\\x03\\x43\\x95\\x4d\\x60\\x86\\x83\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3262:217":{"id":"2:3262:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12465:3238":{"id":"2:12465:3238","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12466:3090","2:12467:58867"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10289:189":{"id":"2:10289:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10290:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3373:3907":{"id":"2:3373:3907","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:181","2:3375:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3503:130":{"id":"2:3503:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3506:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:305:1842":{"id":"0:305:1842","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2117,4],"end":[2123,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22766:3998":{"id":"2:22766:3998","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22767:4001","2:22768:59254","2:22769:1225","2:22770:1226","2:22771:43598","2:22772:59291","2:22773:9480","2:22774:59292","2:22775:59293","2:22776:59294","2:22777:59255","2:22778:59256","2:22779:59257","2:22780:59258","2:22781:59259","2:22782:59260","2:22783:59261"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3263:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22815:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:139:1743":{"id":"0:139:1743","crate_id":0,"name":"write_i24","span":{"filename":"src/io.rs","begin":[1232,4],"end":[1236,5]},"visibility":"default","docs":"Writes a signed 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i24::<BigEndian>(-34253).unwrap();\nwtr.write_i24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\xff\\x7a\\x33\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67:1709":{"id":"0:67:1709","crate_id":0,"name":"read_i48","span":{"filename":"src/io.rs","begin":[295,4],"end":[299,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x9d, 0x71, 0xab, 0xe7, 0x97, 0x8f]);\nassert_eq!(-108363435763825, rdr.read_i48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2853-0:341:1596":{"id":"b:2:2853-0:341:1596","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3258:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2847:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2855:2726"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:237:1760":{"id":"0:237:1760","crate_id":0,"name":"write_f64","span":{"filename":"src/lib.rs","begin":[968,4],"end":[970,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"f64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6591:3549":{"id":"1:6591:3549","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6592:57820","1:6593:57821"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:230:1746":{"id":"0:230:1746","crate_id":0,"name":"write_i32","span":{"filename":"src/lib.rs","begin":[810,4],"end":[812,5]},"visibility":"default","docs":"Writes a signed 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5809:3496":{"id":"1:5809:3496","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5810:54747","1:5811:54748","1:5812:54749","1:5813:54750"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:109:1795":{"id":"0:109:1795","crate_id":0,"name":"read_i16_into","span":{"filename":"src/io.rs","begin":[747,4],"end":[754,5]},"visibility":"default","docs":"Reads a sequence of signed 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i16"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:198:1594":{"id":"0:198:1594","crate_id":0,"name":"Sealed","span":{"filename":"src/lib.rs","begin":[168,4],"end":[168,23]},"visibility":"public","docs":"Sealed stops crates other than byteorder from implementing any traits\nthat use it.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10285:2776":{"id":"2:10285:2776","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10286:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6821:3535":{"id":"1:6821:3535","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6822:54765","1:6823:54766"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10593:1594","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,44],"end":[1836,53]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2905:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:376:604"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3368:4024":{"id":"2:3368:4024","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3370:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:255:1861":{"id":"0:255:1861","crate_id":0,"name":"write_i16_into","span":{"filename":"src/lib.rs","begin":[1450,4],"end":[1455,5]},"visibility":"default","docs":"Writes signed 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i16"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:289:1667":{"id":"0:289:1667","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[2007,4],"end":[2019,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:218:1693":{"id":"0:218:1693","crate_id":0,"name":"read_i16","span":{"filename":"src/lib.rs","begin":[542,4],"end":[544,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13406:4308":{"id":"2:13406:4308","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15939:2656"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49377:4272","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:268:1910":{"id":"0:268:1910","crate_id":0,"name":"from_slice_i128","span":{"filename":"src/lib.rs","begin":[1768,4],"end":[1773,5]},"visibility":"default","docs":"Converts the given slice of signed 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i128(&mut numbers);\nassert_eq!(numbers, [5i128.to_be(), 65000i128.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4767:3904":{"id":"2:4767:3904","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4768:3090","2:4769:59361","2:4770:3093"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:278:1939":{"id":"0:278:1939","crate_id":0,"name":"NativeEndian","span":{"filename":"src/lib.rs","begin":[1885,0],"end":[1885,37]},"visibility":"public","docs":"Defines system native-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\nOn this platform, this is an alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":["#[cfg(target_endian = \"little\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"a:2:9239:2988-0:360:1595":{"id":"a:2:9239:2988-0:360:1595","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9239:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1595","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13414:55351":{"id":"2:13414:55351","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13018:3955","prim@char":"1:15939:2656"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6105:2908":{"id":"5:6105:2908","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3336:4011":{"id":"2:3336:4011","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3338:181","2:3339:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8384:151":{"id":"2:8384:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8385:3090","2:8386:3091","2:8387:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3988:1426":{"id":"2:3988:1426","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:45976:3559","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9239:2988-0:341:1596":{"id":"a:2:9239:2988-0:341:1596","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9239:2988","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:357:604":{"id":"0:357:604","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1806,44],"end":[1806,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14204:3153":{"id":"2:14204:3153","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14205:54784","2:14206:54785","2:14207:54786","2:14208:54787","2:14209:54788","2:14210:54789","2:14211:3114"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13507:3533":{"id":"2:13507:3533","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15939:2656"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49715:3534","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13505:60327":{"id":"2:13505:60327","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15939:2656"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49706:4290","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13443:60311":{"id":"2:13443:60311","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"1:15945:2661","str::split":"1:15945:2661","prim@char":"1:15939:2656","self::pattern":"2:13018:3955"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49475:4278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13028:3954","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13043:3958","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:339:1913":{"id":"0:339:1913","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2362,4],"end":[2371,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:286:1650":{"id":"0:286:1650","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[1982,4],"end":[1984,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6106:54709":{"id":"5:6106:54709","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15945:2661"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13403:60308":{"id":"2:13403:60308","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:15945:2661","crate::ops::IndexMut":"2:3565:4033","`str`":"1:15945:2661"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:111:1801":{"id":"0:111:1801","crate_id":0,"name":"read_i32_into","span":{"filename":"src/io.rs","begin":[782,4],"end":[789,5]},"visibility":"default","docs":"Reads a sequence of signed 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i32"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:4072:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1620","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13394:55313":{"id":"2:13394:55313","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47440:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47440:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10914:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:263:1889":{"id":"0:263:1889","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[1654,4],"end":[1654,43]},"visibility":"default","docs":"Converts the given slice of unsigned 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u64(&mut numbers);\nassert_eq!(numbers, [5u64.to_be(), 65000u64.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"paths":{"1:2181:3579":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:5197:7277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:4341:7152":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:2218:4483":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:15940:2657":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:22766:3998":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:46358:4290":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:4660:2364":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:32462:59015":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"2:48580:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"8:0:2627":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:7908:3934":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:14033:3905":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:12010:5770":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:24147:39963":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:10317:5149":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:11616:3661":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:4869:4217":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:15954:2668":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:49968:3970":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:11323:3823":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:1653:3602":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:5561:4802":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:2733:4827":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:51714:4099":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:4317:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:13272:6103":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:15957:2671":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:11378:3832":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:56270:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:5532:3827":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:1596:6841":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:5314:1595":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:10516:142":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"17:12118:5790":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:14000:6306":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:9440:5568":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:46727:2883":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:3905:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:46566:4062":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:7870:4913":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:6591:4964":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:15946:2662":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:10584:5209":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:10052:8093":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:2991:5090":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:11153:2886":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:48740:2818":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"12:2059:3579":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:12431:5855":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:14748:3548":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:1736:6929":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:9743:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:13733:6234":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:47619:3173":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:3118:5092":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"12:895:4716":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:15945:2661":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:2178:2937":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:10061:8094":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:10529:5579":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:4699:5374":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:24767:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:4671:6340":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:46604:7743":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:12275:5811":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:11604:5686":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:9404:5567":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:37596:3069":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:6464:4919":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:3978:7018":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"9:1020:4654":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:14204:3153":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:14050:5423":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:10914:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:13043:3958":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:5469:7404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"12:399:4723":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:45913:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"12:114:61504":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:3360:4006":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4517:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:15956:2670":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:6176:4952":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:12810:3184":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"12:432:4722":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:3145:5091":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:10681:12137":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11328:5910":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:47829:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"12:2412:6638":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:24199:4340":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:7024:5124":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:5228:7290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:51390:4138":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:9574:5162":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:9034:47747":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:10160:5575":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"18:152:54039":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:4023:7042":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"9:603:8570":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:5414:7389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:10620:3767":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12028:5771":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:3642:2894":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:8959:3868":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"5:5788:5369":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:46496:5390":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"12:2036:3091":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:10876:3798":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:24563:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:11159:5630":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:1156:8184":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:12034:58400":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:46627:4072":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:13331:6115":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11499:5663":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"14:56:5658":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:11888:3170":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:15953:2667":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:13986:6303":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:56309:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10801:8113":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:3500:2943":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13582:6181":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:3772:6326":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"11:54:4708":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:46656:4074":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:11628:5690":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:69:4456":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:12700:3777":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:13540:6172":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:6993:3506":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:1527:6802":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:24461:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:4120:7090":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:13356:6123":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:3365:4825":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:10864:5615":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"18:705:5473":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:49629:4285":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:8144:60157":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:3488:5089":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:23904:4323":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:3041:5081":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:51230:4117":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"12:1147:3612":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:8860:3408":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:6999:4969":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:51766:7774":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:5823:3498":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:3970:5369":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:8087:2910":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:49810:3960":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:2889:5096":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:15274:3525":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:15070:3645":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:2866:5077":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:15062:7929":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:12208:5802":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:830:5269":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:47559:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:1617:6855":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:12327:5819":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:6682:4920":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:8515:3732":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:51468:4130":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:12385:5845":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:3730:2896":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:4467:2906":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:3258:2518":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:11377:3182":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:48217:2776":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:9088:47749":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:12795:5920":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:6091:7509":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:7366:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:10289:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:3522:5489":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:6620:5108":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:4300:7131":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:7295:4924":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:6491:4068":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:7961:3768":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"2:12699:4276":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:5384:4790":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:11406:5639":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:13511:8191":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:6733:7496":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:23626:3243":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:15938:2655":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:543:6741":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:9296:5564":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:9794:5415":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"1:15169:3715":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:13018:3955":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:6353:3839":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:3380:3585":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:1045:3552":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"18:0:2636":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:10279:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:14898:5426":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:13963:6299":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:10850:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"12:1784:5367":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:15952:2666":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:8130:3576":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:903:3749":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:10403:5170":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:10819:3574":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:5855:4817":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:4426:2903":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:8138:4490":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:4362:3091":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:6644:4965":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"9:996:4653":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:13564:6177":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:46418:4351":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:47636:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:5766:4814":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:624:6791":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"12:353:6631":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:7928:4039":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:46311:4291":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:3218:5084":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:157:40585":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:3150:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:46952:7749":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:1505:3605":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13306:6106":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:47498:3091":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"12:1162:4717":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:12521:5868":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:9173:2980":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:5029:6351":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:49856:3967":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:12775:4283":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:4506:6336":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:53247:4115":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:47745:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"12:379:4724":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:7303:4981":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:11809:5735":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:57644:7837":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:11572:5680":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:13163:6074":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:4306:7134":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:5210:7278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"5:1694:4544":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:9162:5218":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:1463:3601":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:8176:4435":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:12456:5859":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:5672:4806":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:9655:58322":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:5611:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:4133:7094":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:47703:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"18:745:61522":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12307:5818":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:5580:4803":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:12051:5774":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:7966:54776":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"16:5790:4815":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:6691:4966":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:5681:3545":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"18:850:5270":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:13530:54782":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:10304:5146":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:50366:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:1623:3610":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:4046:7050":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:4599:5372":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:12489:4390":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:3166:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:10844:5171":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:2968:5079":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:5169:2793":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:9368:5566":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:10272:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:12480:5862":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:9961:8090":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:1563:6818":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:9769:61514":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:3200:2875":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:45846:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:7467:4908":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:3264:5086":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:10095:5248":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:45867:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:11981:5765":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:4008:8083":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:12741:5905":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"12:2280:3612":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:12221:5803":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:11419:3181":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:22543:60017":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:4358:7163":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:2777:4551":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:11199:5633":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:45969:3901":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:13296:6105":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:6233:3838":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:10571:8106":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"12:2066:3580":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:5996:4948":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:6238:4909":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:50289:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:8772:3858":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:46696:4078":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:2754:4826":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:49611:4284":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:14536:7926":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"9:27:4636":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"18:867:5272":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11714:5707":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:10293:2779":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:45729:3410":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:4439:7197":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:670:40917":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:13746:6240":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:49511:3182":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:14761:3638":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:5536:4498":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:13857:8171":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:6893:7610":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:6124:7525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:6688:4508":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"7:38:45418":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:11118:3173":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:632:6796":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:10938:8119":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:9959:4258":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:6014:4949":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:49350:4357":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:46506:8176":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:8298:4530":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:8444:4538":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:47507:2984":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:12073:5783":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:3348:4017":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:4717:2527":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:10905:1594":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"18:791:5265":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:15156:3709":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:3091:5139":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:3759:3172":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:5140:4226":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:2462:8193":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:10814:5206":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:10420:5225":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:9332:5151":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:3329:3172":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:13377:6127":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"15:230:4740":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:15950:2664":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:6577:4963":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"11:46:6641":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:11254:5217":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:13402:6132":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:7683:3631":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4364:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:0:2635":{"crate_id":17,"path":["object"],"kind":"module"},"5:6764:2867":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:48210:2774":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:10892:2175":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:53200:4097":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"14:216:46099":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:53137:4132":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:4203:7107":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:12537:5870":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:10291:2778":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"12:2398:6636":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"14:0:2632":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:3892:6962":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:7766:3635":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:10149:8088":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:13094:3962":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:46747:4071":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:823:5417":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:22955:4001":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:4601:2911":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"15:269:4745":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:7849:5388":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:15959:2673":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:10001:47798":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"17:2543:5165":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:4157:5210":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:9240:2987":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:11847:5743":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:2062:2867":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:6252:4955":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:53410:7823":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:5292:7324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:584:6770":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:49205:3164":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:15409:7933":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:24529:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"18:838:3957":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"0:277:1936":{"crate_id":0,"path":["byteorder","NetworkEndian"],"kind":"typedef"},"17:9210:47751":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"5:8160:3091":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"9:963:4652":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:53478:7827":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:12685:5898":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:50975:7769":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:3419:3924":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:1533:6805":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"9:234:4612":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"16:2912:5078":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:8227:5399":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:51618:4110":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:15962:2676":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:4145:7103":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:2598:8194":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"6:4431:7192":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:10394:5637":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:8379:4425":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:50151:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:6136:4945":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:10520:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:13497:6158":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:24699:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:13904:3635":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:13240:6090":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:14043:4312":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:11794:5729":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:4005:7033":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:11921:3171":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"18:611:5276":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:2850:3152":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:10200:8096":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:994:4488":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:13598:6184":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:7212:3576":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:32121:4378":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"12:1682:4732":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:12262:5810":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:13866:3633":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:10128:5251":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:10555:2814":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:11275:54706":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:24495:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:2166:3576":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6780:4967":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:11147:2884":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:13924:6290":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:45997:4039":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:3555:2893":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:8061:3769":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:50123:4301":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:15955:2669":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:12699:5901":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:14183:2903":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:53399:7822":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:11166:3515":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"17:8929:47745":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6005:7481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:8009:5399":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:11087:2912":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:11750:5712":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:11100:5221":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:23997:4182":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:5255:7310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:3370:3578":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"18:821:5268":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:10353:5232":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:1554:6813":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:3194:3778":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13180:6076":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"13:232:6630":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:9889:5417":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:4066:7061":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:13731:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:4388:3804":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"18:621:5472":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:5953:7453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:14:1967":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:5346:4905":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:5392:4407":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:4506:2902":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:9933:8089":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:9649:8084":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"9:900:6692":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:2793:3554":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:1939:3577":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:11996:3637":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:13453:6144":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:4643:5374":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:6858:7602":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:50299:7768":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:11640:5693":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:2847:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:8263:3617":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:4523:7230":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"2:51261:4105":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:12074:3172":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:5986:3891":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:7320:8195":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13477:6151":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"12:928:3602":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:3040:7621":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:12129:3736":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"1:6116:3829":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:13172:6075":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:3195:5083":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:4230:6329":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:10489:5172":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:22545:60020":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:46737:4081":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:6166:4951":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"18:713:3069":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:14583:58558":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:46675:4076":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:8380:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:2437:8191":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:4955:6349":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:4633:2867":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:52317:4111":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:4215:3576":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:12494:5864":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:3396:3581":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:3984:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:6051:7500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:46934:7748":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:13810:6258":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"15:0:2633":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:13788:6253":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:7226:4978":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:3395:3912":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:7119:4834":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:2399:8189":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:14993:3696":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:32261:2940":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:9094:3855":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"9:0:2628":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:11015:8125":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:46448:4353":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:15689:5427":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:12215:3683":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:46586:4064":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:11392:3841":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:24068:4178":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:11223:3523":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:2170:3577":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:12011:3638":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:5522:7415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:10106:5249":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:9943:61519":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:45757:3931":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:8422:3658":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"1:1476:3576":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:3039:60184":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:7333:4925":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:3197:2014":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:12725:5903":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:10836:3505":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:49284:3157":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:5837:3148":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11947:5755":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:53286:4135":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"9:749:4589":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:23101:4001":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4410:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:53364:7819":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:511:6725":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:3241:5085":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:11298:7898":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:3326:3588":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:3172:5082":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11118:47753":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:7786:4917":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:8343:3948":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:4371:7168":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:23090:1594":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:5433:4793":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:47490:3173":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:8849:5215":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:7195:4975":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:10967:3678":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:1215:4546":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:2366:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:5420:7392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:50307:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:4724:3995":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:6897:3540":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:14518:7920":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:6881:7608":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:10962:8121":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:2187:3580":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:51044:4124":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:6176:7565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:48467:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:49715:3534":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:15943:2659":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:6719:3495":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:8344:4532":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:11130:2882":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:48443:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:48506:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:7205:4976":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:578:6767":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:12090:3091":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:9361:3954":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:699:3744":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:8680:3848":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:10560:2815":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:24801:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:6893:3507":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:13927:59026":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:51125:4137":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:10468:5168":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:661:5279":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:3271:2795":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:5815:4816":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:8954:5161":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:510:8080":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:13842:6273":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:4306:3173":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:13685:6233":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:11378:5153":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"5:5889:5380":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:10725:4555":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:3231:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:15961:2675":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"12:1103:3610":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:24109:39962":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:48203:2775":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:3714:6325":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:681:5637":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:1236:8082":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:2175:3578":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:1908:41888":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:12982:5973":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:8146:61375":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:12343:5824":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:12759:4280":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:11318:3822":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:10427:8169":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:3319:3781":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:12021:5396":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:3743:5203":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:12260:3697":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:52534:4120":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:5020:3513":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"17:12467:5860":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:10558:8103":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:9799:5416":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:14498:3543":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:12116:3735":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:6821:3535":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:13746:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:7697:3632":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:12712:5902":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:13243:8170":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"17:11337:5155":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:3506:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:10962:3677":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:4073:7064":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:4227:7109":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:1630:6862":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:1760:6938":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:24014:7635":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:22566:60015":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:14985:58560":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:24665:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:47550:3055":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:2203:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:13394:6130":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:4241:7110":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:4890:6347":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:4242:5369":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:6214:7584":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:3632:3242":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:50131:4304":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"18:668:5280":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:46257:4203":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:15433:4749":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:4419:7188":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:3088:2768":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:6768:5117":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:5130:7234":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:7477:4928":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:3429:4829":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:14523:3504":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:4074:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:11573:3660":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"18:897:5274":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:4294:2913":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"6:1723:6926":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:3411:3920":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:48777:3658":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:10988:8123":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:3796:3903":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:6106:7514":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:49982:3971":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:47482:3172":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:4072:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:5892:3886":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"2:24212:4339":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:5407:7388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:9748:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:13048:3959":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:607:8081":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:24835:4326":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:47871:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:3543:3930":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:10884:2895":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:24177:7656":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:3713:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11696:5706":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:5809:3496":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:1161:12138":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:15964:2678":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:48987:4421":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:4535:6337":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:4387:7174":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"10:0:2629":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:1079:3531":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:3476:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12568:5875":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:7406:4910":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:1021:3769":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:7151:2975":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:14876:5424":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:3364:4022":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:15175:3716":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:9689:61520":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:12756:5909":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:8166:3769":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:13248:40195":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:7711:3633":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:4742:2881":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"12:2392:6635":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:4255:3840":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:6357:4957":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:11533:3658":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:10626:1307":{"crate_id":2,"path":["core","slice"],"kind":"module"},"16:7073:4970":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:5761:3493":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:51342:7773":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"18:755:61523":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:50996:7770":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:3368:4024":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:10615:3753":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:12771:5910":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:1729:3833":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:2484:47836":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:9729:61511":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:51069:4116":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:897:3748":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:1486:3577":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:9241:2986":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:8942:3421":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:5833:3147":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:3966:7013":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:9799:8087":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:5819:3497":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:812:5267":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:56322:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:88:40519":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:13912:6288":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:2200:5371":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:10827:5207":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:9551:5216":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:13781:60066":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:13898:6281":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:5753:4813":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"3:300:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:11981:3636":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:542:4837":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:1011:3172":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:7250:4980":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:6221:7587":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:48039:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:3287:5087":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:51951:4139":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:14972:3637":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:10275:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:9886:8088":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:6971:3541":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:3509:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:13609:6188":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:46548:4060":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13318:6109":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:10253:5229":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5167:7260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:3759:3902":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:56296:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5269:7311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:46647:4073":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:3868:6945":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:13882:54783":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:10279:5143":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:6032:4833":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:50003:3973":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:6824:3537":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:5295:46169":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13772:6249":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10448:5169":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"12:1256:3613":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:32310:59016":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"17:13620:6189":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:13221:6089":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:45976:3559":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:3338:4824":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"0:360:1595":{"crate_id":0,"path":["byteorder","LittleEndian"],"kind":"enum"},"5:4515:4520":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"17:13532:6169":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:14094:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:3390:3587":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:1708:6917":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:13799:6257":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:5987:7472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:12442:5857":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:6085:7507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:3882:2175":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:50396:3555":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:525:6733":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:14892:5425":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:6087:4904":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:11080:2910":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:9133:47750":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:1658:6887":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:531:6736":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:10117:5250":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:46618:4066":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:15012:7928":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:11519:5673":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:8362:7625":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:52030:4127":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:10704:13121":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:46372:4413":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:8391:4426":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:5408:3820":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:2171:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:12408:5854":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:786:5417":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"6:591:6773":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:7649:3629":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:14130:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:22802:4146":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"9:1075:4655":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:14959:3636":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:47627:3091":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:12659:5896":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:3262:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:5085:4225":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:2330:4548":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:4995:6350":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:51846:7776":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:3253:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:46229:3534":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:10510:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:4033:7045":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:6731:7494":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"18:886:5273":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:13154:6070":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:24083:7643":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"14:194:46093":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:4735:2878":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:5707:4807":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:48494:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:10594:3745":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"12:1183:4718":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:11160:2887":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:6015:3895":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:52348:4114":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:8384:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:6887:7609":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:4501:7220":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:46557:4061":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:4395:7178":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:1572:6824":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5371:7373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:6002:3894":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:12610:5883":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10599:8108":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:48991:3159":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:5969:7465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:13933:6294":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:53501:7828":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"7:0:1478":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:8330:4531":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:6744:5115":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:3385:3586":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:10281:2774":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"4:0:2626":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:50352:4311":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:50139:4303":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:51666:4095":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"12:2040:3576":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:49407:2886":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:5975:4947":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:15334:3820":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:11968:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:32302:2941":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:3342:4014":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"5:3951:3577":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:46398:4207":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:49931:3969":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:4331:7146":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:616:6786":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:49575:4282":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"12:2419:3584":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:563:6758":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:7642:4462":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:22564:60019":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"12:0:2631":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:2163:3091":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:13520:6166":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:49316:3175":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:13258:6098":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:5960:4822":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:12168:5587":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:24733:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:4386:6332":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:3652:5398":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:11665:5696":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:1492:3602":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:6644:7599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:4905:4218":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"9:41:4637":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:6554:4962":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:23736:3946":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:46535:2882":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:45936:3240":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:7420:4927":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:23099:4093":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:10232:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:46636:4069":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:1432:3173":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:3321:3699":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:15963:2677":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:10071:5253":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:8414:3769":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"12:2253:3610":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:10972:2897":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:5978:7471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"14:11:8153":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:48748:7759":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"12:183:4725":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:8106:3154":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:3336:4011":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:10222:2527":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:11767:5720":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:46235:7732":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:46706:4079":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:7174:4973":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:4127:7092":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:50384:3556":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:8873:8196":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:10950:8120":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:11360:3515":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:1919:485":{"crate_id":2,"path":["core","intrinsics","copy_nonoverlapping"],"kind":"function"},"16:7158:4972":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11616:5689":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:50343:4310":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:3362:3580":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:2492:2855":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:10666:12135":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:8115:3091":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:11678:5697":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:46365:4412":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:9528:2884":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:5945:7448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:3320:5140":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:11231:5219":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"14:47:8153":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4449:7203":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:5018:4219":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:5241:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:1597:3172":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:6923:7616":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"18:740:8076":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:3730:3899":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:10623:8110":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:48461:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:51021:4136":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:2314:5231":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:15942:2658":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:22839:4005":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:3718:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:1690:6910":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:3549:6324":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:6672:4498":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:13365:3834":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10887:5616":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:48795:7764":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:11437:3538":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"12:2404:61499":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:51092:4104":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:11277:5634":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:7856:4985":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:49306:3177":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"15:248:4741":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:13370:6125":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:12096:3734":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:5548:7430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:923:4487":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:10028:8091":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:9659:61517":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:1700:6916":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:7738:4982":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:46298:4416":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:4425:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:51870:7777":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:10405:8208":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:8393:2945":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"12:856:3601":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:9476:5569":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:48224:2777":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"12:2045:3577":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:3373:3907":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:2843:5076":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:51179:4129":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:6152:4906":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:4823:6345":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:50135:4302":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:8863:3409":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:13884:6279":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:6028:7499":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:4949:2788":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:7289:8195":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:38753:2767":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:46011:2789":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"5:1644:3601":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:5563:7441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11045:47752":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:4164:7104":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:11588:5685":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:15125:3707":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:6185:7568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:46925:3421":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:8453:2944":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"12:1203:4719":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:5456:4794":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"18:802:5266":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:3153:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:3957:7008":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:8446:3577":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"18:730:61524":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:7042:5125":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:13041:6025":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:9239:2988":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:6964:2984":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:4401:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:3044:60183":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:10221:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"6:6864:7603":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:11970:5762":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:6518:4961":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:10788:8111":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:3945:7005":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:4304:6330":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:52108:4134":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:6895:3539":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"5:1235:4547":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:6636:4923":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7378:4911":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:49904:3968":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:52995:4128":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:8582:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:37572:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"9:927:45522":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:1540:6808":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:6239:7590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12247:5807":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:3862:6944":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:6475:3576":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:11190:3516":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:11405:3183":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:10435:8099":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:15910:12140":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"12:2269:3611":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:3565:4033":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:1522:3607":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:47567:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:9719:8085":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:5687:3547":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:8347:3950":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:6935:7618":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:23044:1594":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:7392:4912":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:4443:3172":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:2276:2851":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:10824:3777":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:9371:3565":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:3294:2942":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"18:783:5473":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:6413:4737":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:3335:3786":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"12:162:4721":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:13119:6069":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:49365:4155":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:23732:1594":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:10224:8098":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:13819:6260":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:7884:4914":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:47955:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:46244:4202":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:7804:4916":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:12155:5795":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:3087:1594":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"0:0:2255":{"crate_id":0,"path":["byteorder"],"kind":"module"},"2:49245:3158":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:48765:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:1584:6833":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:15905:8578":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:14513:7918":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:1311:5254":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:50186:4366":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"17:12095:5784":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12182:5799":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:6636:7597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:7453:4907":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4040:7048":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:5159:7258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:4712:3994":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4262:7111":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:1497:3603":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:12363:8192":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:15418:57917":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:49475:4278":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:4026:3680":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:12632:5894":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:10543:5619":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13760:6246":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:2460:8192":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:3360:1562":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:51689:4098":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:10593:1594":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:6718:5113":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:537:6738":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:12373:5843":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:3038:3143":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:1602:6843":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4494:7217":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:24131:39954":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:22498:3069":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:1457:3612":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:14189:2901":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:10041:8092":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:2872:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:2159:3172":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:14566:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:2751:3553":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:23975:7633":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:48081:4356":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:12161:3738":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13590:6183":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:2910:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"13:120:46065":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4377:7171":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:46684:4077":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13554:6174":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:7475:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:10285:2776":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:12287:5812":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:2253:2852":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:14573:2877":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:10331:5171":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"6:3918:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:1618:3091":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:4112:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:12082:3731":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:5274:7312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4183:7105":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:3018:5080":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:5014:2790":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:56283:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3259:3065":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:4035:3558":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:52741:4140":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:11186:3184":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:5415:2867":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:46413:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:47541:2985":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:10455:5418":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:5595:4804":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:53384:7821":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:4101:7080":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:46342:4411":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:11415:7481":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:49214:3168":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:6614:59390":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:49234:3167":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12195:5800":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:7216:4977":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:721:5475":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:4281:7123":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:12917:5922":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:5386:7375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"12:2052:3578":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:23638:59983":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:4083:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:46056:4159":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:9208:8196":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:3489:2888":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:3772:3173":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"0:278:1939":{"crate_id":0,"path":["byteorder","NativeEndian"],"kind":"typedef"},"12:933:3605":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:10975:8122":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:53074:4112":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:11555:5678":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:4459:7204":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:4736:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:8902:47744":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"5:7620:4461":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:299:8079":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:9097:3685":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4478:7212":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:5632:4805":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:11464:2976":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:8867:3932":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:610:6783":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:5609:1307":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"17:11932:5751":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"9:692:4587":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:2192:3581":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:50016:8179":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"9:776:4634":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:53344:7817":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:294:8078":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:24597:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:13054:6032":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:5192:2792":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:12023:54705":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"17:9896:61513":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:161:40586":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:5421:4792":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:1646:3612":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:38816:3067":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:1194:12139":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:2381:2854":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:11196:3521":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:3997:7031":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:15921:54708":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:6391:4958":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:858:5271":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:46319:4410":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"14:189:8153":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:1153:8182":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:46288:4415":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:51284:4109":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:374:4479":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:48756:2817":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:52077:4131":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:10687:3590":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:47473:3090":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:13037:3957":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:24631:3239":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:3407:3918":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:3894:4539":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:56348:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5379:7374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13978:6300":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:48476:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"5:3341:4480":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:11358:5154":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:9264:1595":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:5405:3819":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"18:695:5281":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:15960:2674":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:0:2634":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:7823:4918":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:51540:4118":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:11643:3664":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:49839:3966":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:6219:4954":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:1136:3560":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:24091:7644":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"11:0:2630":{"crate_id":11,"path":["adler"],"kind":"module"},"1:4391:3805":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:9746:3813":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:3401:3915":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:5964:3889":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:12736:4279":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:45805:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"12:940:3606":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:48564:2773":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"6:4293:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:13637:6196":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:46963:7751":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:6208:4953":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:7650:1969":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11993:5767":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6605:4921":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"14:231:4428":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"13:0:2625":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:11372:3893":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"12:971:3608":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:6126:4950":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:23427:4002":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"5:1195:61031":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:6591:3549":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:7829:3641":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:12552:5874":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:3800:6327":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:9662:5414":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:46004:4040":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"5:7379:3091":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:1450:3600":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:6614:7596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"16:7761:4983":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:5831:3491":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"9:157:4604":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"0:201:1620":{"crate_id":0,"path":["byteorder","ByteOrder"],"kind":"trait"},"2:48787:7763":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"0:276:1928":{"crate_id":0,"path":["byteorder","LE"],"kind":"typedef"},"17:9245:5150":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:12185:3854":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:13098:6064":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:11386:3821":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:11738:5711":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:49529:3180":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:22902:3567":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:45821:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:6954:4430":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:5528:7416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"18:637:5473":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11026:8126":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:23051:17366":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"18:645:5278":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:11822:5739":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:5564:12141":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:51587:4106":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:7838:4144":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:3263:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:3392:5093":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:7342:4939":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:8203:3091":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:7549:4915":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"5:3839:5369":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:51641:4113":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4060:7058":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:2553:4552":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:51303:7772":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:14264:3423":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:8508:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:11255:7892":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"2:3159:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:1607:3173":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:3064:5138":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:2773:5102":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"12:2072:3581":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11835:5740":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:1522:6800":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:6068:7502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:15951:2665":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:10140:5171":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:46273:4205":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:9280:1596":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:1717:6923":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:15355:3827":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:1501:3604":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:12582:5877":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6110:4944":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:6269:4956":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:10635:5580":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:10179:5577":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:5185:7273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:11147:5629":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:3503:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:47440:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12040:5773":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:1472:3611":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:6870:7604":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:6021:5075":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:12200:3690":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:49145:4271":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:25205:4209":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:10912:8114":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:136:54038":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:12693:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:4215:7108":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:49825:3963":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:3261:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:3506:5088":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:22713:4004":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:2794:4828":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:5400:7386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:1676:6899":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"12:2032:3172":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:8323:3769":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:11140:2883":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:4350:6331":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:1635:3600":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:49196:3165":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:15937:2654":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:7541:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:0:1329":{"crate_id":1,"path":["std"],"kind":"module"},"2:52270:4107":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"12:764:3173":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:2310:4566":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:6491:4960":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:51156:4125":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:12220:3695":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:12234:5805":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"12:880:3577":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:12598:5881":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:53540:7829":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:1442:3091":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"12:869:3576":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"12:750:3172":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:6155:7551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:49724:4291":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:7894:4942":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:23833:4322":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11915:5745":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:15032:3695":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:4922:6348":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:11312:3821":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:8160:3625":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:13192:6081":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:10829:3504":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:1419:3172":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:2401:8190":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:12957:3627":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:47913:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:1528:3608":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:11143:2886":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:1091:5369":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:49671:4286":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:13602:3628":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:9849:61516":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:13506:6159":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:4428:2904":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"12:1121:3611":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:46665:4075":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:9761:3814":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:2816:5095":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:5875:5378":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:10926:8118":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:11096:2877":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:49706:4290":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:22511:59979":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:1486:3613":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:2512:5227":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:5330:1596":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:49699:4289":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:5347:7361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:5231:6352":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:55912:3942":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"9:686:4585":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:9954:4257":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:9809:61518":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:7279:5126":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:5191:7276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:49425:3178":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:1637:3611":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:4790:6344":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:13547:6173":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:50147:4298":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5221:7286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:49681:4287":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5459:7402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:6569:5110":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:4448:6334":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:12465:3238":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:51198:7771":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:10477:5167":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:11298:3178":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13282:6104":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"12:843:3600":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11434:5643":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:5775:3495":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:12507:5865":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:605:6781":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"16:7185:4974":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:47661:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:6873:4070":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:11962:3634":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:22526:59979":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:14186:2905":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:7146:4971":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:3990:7027":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:49993:3972":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:4465:2905":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:1441:3610":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:49297:3174":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:53448:7825":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:4734:6342":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:47611:3172":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"12:952:3607":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7264:4922":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:11193:3517":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"17:11962:5760":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:32296:2849":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:13627:6191":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:6812:7600":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:46379:4414":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:1663:3603":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:6471:3537":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:9839:5171":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:3488:3577":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:10730:2882":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"5:7824:5382":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:10283:2775":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:6418:4067":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:1744:6933":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:1622:6857":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:5312:7340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:3333:3785":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:50115:4296":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:11482:3648":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:11411:3536":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:51491:4133":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:5023:4220":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:52383:4096":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"14:250:6585":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:9186:5159":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:9759:8086":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:53325:4100":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:11001:8124":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"0:273:1924":{"crate_id":0,"path":["byteorder","BE"],"kind":"typedef"},"16:6101:4902":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:5149:2791":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:7514:4926":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:3162:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:4654:2867":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:6493:3569":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:5927:4820":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"5:7257:5369":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12645:5895":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:53373:7820":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:547:4811":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:57623:7836":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:4193:7106":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:12210:3682":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:10458:5526":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:13977:3634":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:10721:8201":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:11263:3185":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:9065:47748":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:2951:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13780:6252":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:13865:6274":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:13062:6034":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:8724:3849":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:50173:3702":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:11094:3172":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:3424:3927":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:13028:3954":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:49326:3176":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:3561:3618":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:3724:3896":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:53425:7824":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:11336:3179":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:767:5483":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:11653:5695":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:46526:4058":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:49661:2887":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:1547:6810":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:49377:4272":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:432:2946":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4052:7053":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:6366:4738":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:14744:8201":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:49457:4277":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:8313:4352":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12671:5897":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:3742:3900":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:11482:5658":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:13446:6143":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:11367:3890":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:51437:4126":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:10611:8109":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:46716:4080":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:5998:7477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:12019:7914":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"1:5994:3892":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:4470:7210":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:5282:7317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:8837:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:15958:2672":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:4504:2901":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:3345:3791":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:11626:3172":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:4013:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:9495:54863":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:5505:4799":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:13348:6120":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:10211:8097":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:2753:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"9:809:3658":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:7826:3639":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:8673:3846":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:8197:3091":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:52191:4119":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:2945:5101":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:3676:2889":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4272:7118":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"12:1703:4733":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:5095:2789":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"7:85:45425":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:4050:3557":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:11108:2879":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"18:169:54040":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:4678:2876":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:5488:4798":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:6731:5114":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:3415:3922":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:4852:6346":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:5753:3492":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:14549:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:49787:3956":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:13574:6180":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:1655:3613":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:3375:4481":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:4325:7144":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:10081:5143":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:47997:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:4641:6339":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:10287:2777":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:9971:61512":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:56335:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:6899:7611":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:5359:7366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:7236:4979":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:11726:5710":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"18:651:5275":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"12:1666:4731":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:10656:5582":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:13465:6150":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"9:1056:4647":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:6852:7601":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:5585:4152":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:569:6761":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:13205:6086":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:4394:3806":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:10480:5420":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:49224:3166":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:13386:6128":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:11226:3598":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"2:49383:4273":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:13729:3643":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:13429:6136":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:3356:3701":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:46595:4065":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:2941:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:3336:3579":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:3881:6954":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:3939:6328":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:7843:4984":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:10638:3423":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:12145:3737":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:10502:5578":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:4614:6338":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:3604:5493":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:12946:5942":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:8463:4457":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"14:244:6583":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:11391:3180":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:13822:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:11225:3169":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:6807:4968":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:1674:3604":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:5273:4831":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:7571:4903":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:24055:4177":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:4704:6341":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"12:472:61501":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:11632:3663":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:5769:3494":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:6257:4461":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:3265:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:12702:5422":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:10673:47936":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:3048:60186":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:48528:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:7736:4059":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:3701:3241":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"12:1238:4720":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"12:815:3604":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:8250:3584":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11458:5657":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:13488:6155":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:22815:1594":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"12:787:3603":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:5360:4789":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:51814:7775":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:6729:7492":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:11220:3522":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"6:6200:7575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:3281:3066":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:53353:7818":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:49271:3156":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:1534:3609":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:15944:2660":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:6072:4889":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:2262:4549":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"16:5522:4800":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:15939:2656":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:4726:54880":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:53463:7826":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:5717:4809":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:22892:1594":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:46431:4352":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:45890:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:8121:4489":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:10605:57916":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:46336:3534":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12142:5792":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:11539:5674":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:9622:5413":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:50127:4300":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:15949:2663":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:24030:7638":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:28016:3953":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"12:466:61500":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:15141:3708":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:5428:7394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:3972:7015":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:4347:7155":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:6910:7615":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:23432:17385":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:4767:3904":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:32362:59013":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"6:519:6730":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:50119:4299":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:13942:6296":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:9600:61515":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:11779:5723":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:9667:58320":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:3331:4009":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:6424:4959":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:2267:4034":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:4511:7225":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:5736:4810":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:15444:4749":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:5407:4791":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:4417:6333":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:4477:6335":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:3156:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:10377:5230":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"12:979:3609":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:3317:2820":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:4095:7077":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:9007:3624":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:49393:2884":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:24184:4383":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:12783:5913":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:3951:7006":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:599:6778":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:3352:3700":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:10868:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"12:777:3091":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:49690:4288":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:10516:5173":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:10236:5164":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:49557:4281":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:46943:2911":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:11556:3659":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:52884:4108":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:5472:4797":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:6949:5121":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:1843:5369":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:12205:3860":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:47787:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"19:117:5468":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"18:775:5473":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"0:341:1596":{"crate_id":0,"path":["byteorder","BigEndian"],"kind":"enum"},"16:4762:6343":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:7111:5382":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:11304:47754":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:6100:7513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:46918:7747":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11082:5160":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:22896:3566":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:7663:3630":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:1511:3606":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:50143:4297":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:12240:3696":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:2905:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:1665:6891":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:15296:3819":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:46576:4063":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:10697:3614":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:7453:5369":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11186:5631":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"9:722:4588":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:8428:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"9:469:8560":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:12041:7915":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"17:10266:5228":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:51323:4094":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:10407:5226":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:5436:7396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:8522:3733":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:9005:47746":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"}},"external_crates":{"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}