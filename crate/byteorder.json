{"root":"0:0:2333","crate_version":"1.4.3","includes_private":false,"index":{"2:2254:24593":{"id":"2:2254:24593","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:245:1998":{"id":"0:245:1998","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[1780,4],"end":[1780,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 single-precision (4 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:2740:3000-0:336:1681":{"id":"a:2:2740:3000-0:336:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:3000","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12113:34168":{"id":"2:12113:34168","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43820:6836","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12168:34175":{"id":"2:12168:34175","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11784:13439","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11986:419","str::match_indices":"2:12165:34174"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43724:6832","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11804:13437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2252-0:317:1682":{"id":"b:2:2252-0:317:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2246:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2254:24593"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:314:1978":{"id":"0:314:1978","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2353,4],"end":[2359,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10-0:19:1649":{"id":"0:10-0:19:1649","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[78,20],"end":[78,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::ReadBytesExt","name":"ReadBytesExt","id":"0:19:1649","glob":false}}},"2:12204:25143":{"id":"2:12204:25143","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:317:1682":{"id":"b:2:3319-0:317:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1509"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2549-0:317:1682":{"id":"b:2:2549-0:317:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2519:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:128","2:2553:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:320":{"id":"0:320","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,16],"end":[1806,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:45:1795":{"id":"0:45:1795","crate_id":0,"name":"read_i48","span":{"filename":"src/io.rs","begin":[295,4],"end":[299,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x9d, 0x71, 0xab, 0xe7, 0x97, 0x8f]);\nassert_eq!(-108363435763825, rdr.read_i48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:1890":{"id":"0:91:1890","crate_id":0,"name":"read_i64_into","span":{"filename":"src/io.rs","begin":[820,4],"end":[827,5]},"visibility":"default","docs":"Reads a sequence of signed 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336:1681":{"id":"0:336:1681","crate_id":0,"name":"LittleEndian","span":{"filename":"src/lib.rs","begin":[1837,0],"end":[1837,24]},"visibility":"public","docs":"Defines little-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:8321:3049-0:336:1681","a:2:8322:3048-0:336:1681","a:2:2683:220-0:336:1681","a:2:2740:3000-0:336:1681","a:2:2700:228-0:336:1681","b:2:2554-0:336:1681","b:2:2543-0:336:1681","b:2:2252-0:336:1681","b:2:2539-0:336:1681","b:2:2249-0:336:1681","b:2:2549-0:336:1681","b:2:3319-0:336:1681","b:5:680-0:336:1681","0:353","0:340","0:348","0:351","0:337","0:250","0:350","0:339","0:345","0:343","0:342","0:288"]}}},"0:327:734":{"id":"0:327:734","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1806,33],"end":[1806,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:9443:145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1049,0],"end":[1049,48]},"visibility":"default","docs":"All types that implement `Read` get methods defined in `ReadBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3437:2454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["read_u32","read_uint","read_f64_into","read_u16","read_u8","read_i64_into","read_uint128","read_i16_into","read_u128_into","read_i128","read_u64_into","read_u32_into","read_i8_into","read_u48","read_i32","read_f64_into_unchecked","read_i24","read_i8","read_i128_into","read_f32","read_int128","read_u64","read_i64","read_u16_into","read_int","read_u24","read_i16","read_f32_into_unchecked","read_f32_into","read_f64","read_i32_into","read_u128","read_i48"],"trait":{"name":"ReadBytesExt","id":"0:19:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"R"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:184:1719":{"id":"0:184:1719","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[344,4],"end":[344,51]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:265:1753":{"id":"0:265:1753","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[2007,4],"end":[2019,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:1881":{"id":"0:87:1881","crate_id":0,"name":"read_i16_into","span":{"filename":"src/io.rs","begin":[747,4],"end":[754,5]},"visibility":"default","docs":"Reads a sequence of signed 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:237:1965":{"id":"0:237:1965","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[1616,4],"end":[1616,43]},"visibility":"default","docs":"Converts the given slice of unsigned 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u16(&mut numbers);\nassert_eq!(numbers, [5u16.to_be(), 65000u16.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:287:2000":{"id":"0:287:2000","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2174,4],"end":[2183,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:336:1681":{"id":"b:5:680-0:336:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2265:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3211","5:683:3212","5:684:3213"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:348":{"id":"0:348","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,39],"end":[1836,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2349:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:349:430"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:206:1832":{"id":"0:206:1832","crate_id":0,"name":"write_i32","span":{"filename":"src/lib.rs","begin":[810,4],"end":[812,5]},"visibility":"default","docs":"Writes a signed 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12202:25140":{"id":"2:12202:25140","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:1805":{"id":"0:199:1805","crate_id":0,"name":"read_i128","span":{"filename":"src/lib.rs","begin":[652,4],"end":[654,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:1836":{"id":"0:208:1836","crate_id":0,"name":"write_i64","span":{"filename":"src/lib.rs","begin":[854,4],"end":[856,5]},"visibility":"default","docs":"Writes a signed 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:2000":{"id":"0:246:2000","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[1787,4],"end":[1787,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 double-precision (8 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:2545:699":{"id":"2:2545:699","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:1779":{"id":"0:27:1779","crate_id":0,"name":"read_i16","span":{"filename":"src/io.rs","begin":[139,4],"end":[143,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0xc1, 0xff, 0x7c]);\nassert_eq!(193, rdr.read_i16::<BigEndian>().unwrap());\nassert_eq!(-132, rdr.read_i16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:292:1743":{"id":"0:292:1743","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[2203,4],"end":[2205,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:1825":{"id":"0:203:1825","crate_id":0,"name":"read_f64","span":{"filename":"src/lib.rs","begin":[744,4],"end":[746,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2554-0:317:1682":{"id":"b:2:2554-0:317:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2557:128","2:2558:1495"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:247":{"id":"0:247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1809,0],"end":[1813,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2590:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:248:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12092:34165":{"id":"2:12092:34165","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12124:3192":{"id":"2:12124:3192","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41597:179","prim@char":"1:11986:419","self::pattern":"2:11784:13439"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41595:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12210:34188":{"id":"2:12210:34188","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4536:34188"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43873:6725","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,55],"end":[1836,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["le","lt","ge","gt"],"trait":{"name":"PartialOrd","id":"2:2355:189","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:354:1044"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12175:34178":{"id":"2:12175:34178","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261:1722":{"id":"0:261:1722","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[1977,4],"end":[1979,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2740:3000-0:317:1682":{"id":"a:2:2740:3000-0:317:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:2740:3000","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2553:1496":{"id":"2:2553:1496","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:41739:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:1649":{"id":"0:19:1649","crate_id":0,"name":"ReadBytesExt","span":{"filename":"src/io.rs","begin":[30,0],"end":[1045,1]},"visibility":"public","docs":"Extends [`Read`] with methods for reading numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`]:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:20:2466","0:22:2473","0:24:1710","0:27:1779","0:30:1718","0:33:1784","0:36:1722","0:39:1790","0:42:1729","0:45:1795","0:48:1736","0:51:1800","0:54:1743","0:57:1805","0:60:1719","0:63:1785","0:66:1753","0:69:1812","0:72:1818","0:75:1825","0:78:1855","0:80:1863","0:82:1869","0:84:1875","0:86:2573","0:87:1881","0:89:1886","0:91:1890","0:93:1894","0:95:1901","0:97:1907","0:99:1911","0:101:1915"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3437:2454","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:103"]}}},"0:210:1830":{"id":"0:210:1830","crate_id":0,"name":"write_int","span":{"filename":"src/lib.rs","begin":[899,4],"end":[901,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2549-0:336:1681":{"id":"b:2:2549-0:336:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2519:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2552:128","2:2553:1496"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:251:60":{"id":"0:251:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1840,4],"end":[1842,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2558:1495":{"id":"2:2558:1495","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:41739:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:264:1719":{"id":"0:264:1719","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[1992,4],"end":[2004,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:34162":{"id":"2:12085:34162","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12205:25144":{"id":"2:12205:25144","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:187:1760":{"id":"0:187:1760","crate_id":0,"name":"write_u24","span":{"filename":"src/lib.rs","begin":[402,4],"end":[404,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2628":{"id":"0:106:2628","crate_id":0,"name":"write_u8","span":{"filename":"src/io.rs","begin":[1098,4],"end":[1100,5]},"visibility":"default","docs":"Writes an unsigned 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_u8(2).unwrap();\nwtr.write_u8(5).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5512:34838":{"id":"5:5512:34838","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3007","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:3007","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:150:1774":{"id":"0:150:1774","crate_id":0,"name":"write_uint128","span":{"filename":"src/io.rs","begin":[1493,4],"end":[1501,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12206:25145":{"id":"2:12206:25145","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:244:1995":{"id":"0:244:1995","crate_id":0,"name":"from_slice_i128","span":{"filename":"src/lib.rs","begin":[1768,4],"end":[1773,5]},"visibility":"default","docs":"Converts the given slice of signed 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i128(&mut numbers);\nassert_eq!(numbers, [5i128.to_be(), 65000i128.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:193:1774":{"id":"0:193:1774","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[522,4],"end":[522,61]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:277:1875":{"id":"0:277:1875","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2085,4],"end":[2087,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12159:2829":{"id":"2:12159:2829","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11784:13439","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11986:419","str::rmatches":"2:12162:34173"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43760:6834","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:336:1681":{"id":"a:2:2700:228-0:336:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:317:1682":{"id":"0:317:1682","crate_id":0,"name":"BigEndian","span":{"filename":"src/lib.rs","begin":[1807,0],"end":[1807,21]},"visibility":"public","docs":"Defines big-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 4];\nBigEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, BigEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:8321:3049-0:317:1682","a:2:8322:3048-0:317:1682","a:2:2683:220-0:317:1682","a:2:2740:3000-0:317:1682","a:2:2700:228-0:317:1682","b:2:2554-0:317:1682","b:2:2543-0:317:1682","b:2:2252-0:317:1682","b:2:2539-0:317:1682","b:2:2249-0:317:1682","b:2:2549-0:317:1682","b:2:3319-0:317:1682","b:5:680-0:317:1682","0:331","0:247","0:334","0:326","0:320","0:321","0:323","0:329","0:259","0:324","0:332","0:318"]}}},"b:2:2252-0:336:1681":{"id":"b:2:2252-0:336:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2246:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2254:24593"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5511":{"id":"5:5511","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5512:34838","5:5513:2906","5:5516:34839","5:5519:34840","5:5527:34841","5:5528:34842","5:5529:2974","5:5530:26421","5:5531:26422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12115:25281":{"id":"2:12115:25281","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11986:419","self::pattern":"2:11784:13439"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286:1998":{"id":"0:286:1998","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2162,4],"end":[2171,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:339":{"id":"0:339","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,16],"end":[1836,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12107:6840":{"id":"2:12107:6840","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11986:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43526:6821","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:1863":{"id":"0:80:1863","crate_id":0,"name":"read_u32_into","span":{"filename":"src/io.rs","begin":[597,4],"end":[604,5]},"visibility":"default","docs":"Reads a sequence of unsigned 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63:1785":{"id":"0:63:1785","crate_id":0,"name":"read_int","span":{"filename":"src/io.rs","begin":[452,4],"end":[456,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xc1, 0xff, 0x7c]);\nassert_eq!(-4063364, rdr.read_int::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:224:1911":{"id":"0:224:1911","crate_id":0,"name":"read_f64_into","span":{"filename":"src/lib.rs","begin":[1264,4],"end":[1269,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12156:34172":{"id":"2:12156:34172","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41595:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11804:13437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:30:1718":{"id":"0:30:1718","crate_id":0,"name":"read_u24","span":{"filename":"src/io.rs","begin":[165,4],"end":[169,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179:1718":{"id":"0:179:1718","crate_id":0,"name":"read_u24","span":{"filename":"src/lib.rs","begin":[244,4],"end":[246,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8322:3048-0:336:1681":{"id":"a:2:8322:3048-0:336:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8322:3048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12185:24685":{"id":"2:12185:24685","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11986:419","self::pattern":"2:11784:13439"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41595:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126:1765":{"id":"0:126:1765","crate_id":0,"name":"write_u48","span":{"filename":"src/io.rs","begin":[1313,4],"end":[1317,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u48::<BigEndian>(52360336390828).unwrap();\nwtr.write_u48::<BigEndian>(541).unwrap();\nassert_eq!(wtr, b\"\\x2f\\x9f\\x17\\x40\\x3a\\xac\\x00\\x00\\x00\\x00\\x02\\x1d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:321":{"id":"0:321","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,22],"end":[1806,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9215:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:322:673"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:107:2635":{"id":"0:107:2635","crate_id":0,"name":"write_i8","span":{"filename":"src/io.rs","begin":[1126,4],"end":[1128,5]},"visibility":"default","docs":"Writes a signed 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_i8(2).unwrap();\nwtr.write_i8(-5).unwrap();\nassert_eq!(wtr, b\"\\x02\\xfb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i8"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2539-0:317:1682":{"id":"b:2:2539-0:317:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:3146"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:290:1722":{"id":"0:290:1722","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[2193,4],"end":[2195,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39:1790":{"id":"0:39:1790","crate_id":0,"name":"read_i32","span":{"filename":"src/io.rs","begin":[243,4],"end":[247,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89:1886":{"id":"0:89:1886","crate_id":0,"name":"read_i32_into","span":{"filename":"src/io.rs","begin":[782,4],"end":[789,5]},"visibility":"default","docs":"Reads a sequence of signed 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:1839":{"id":"0:209:1839","crate_id":0,"name":"write_i128","span":{"filename":"src/lib.rs","begin":[876,4],"end":[878,5]},"visibility":"default","docs":"Writes a signed 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read n-byte `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212:1843":{"id":"0:212:1843","crate_id":0,"name":"write_f32","span":{"filename":"src/lib.rs","begin":[945,4],"end":[947,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"f32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:306:1875":{"id":"0:306:1875","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2285,4],"end":[2287,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:349:430":{"id":"0:349:430","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1836,39],"end":[1836,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30921:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:248:60":{"id":"0:248:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1810,4],"end":[1812,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:204:1827":{"id":"0:204:1827","crate_id":0,"name":"write_i16","span":{"filename":"src/lib.rs","begin":[766,4],"end":[768,5]},"visibility":"default","docs":"Writes a signed 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217:1875":{"id":"0:217:1875","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[1062,4],"end":[1062,52]},"visibility":"default","docs":"Reads unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:236:1956":{"id":"0:236:1956","crate_id":0,"name":"write_f64_into","span":{"filename":"src/lib.rs","begin":[1592,4],"end":[1597,5]},"visibility":"default","docs":"Writes IEEE754 double-precision (8 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"f64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319:423":{"id":"0:319:423","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1806,9],"end":[1806,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:25239":{"id":"2:12097:25239","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41597:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41595:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8321:3049-0:336:1681":{"id":"a:2:8321:3049-0:336:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8321:3049","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:69:1812":{"id":"0:69:1812","crate_id":0,"name":"read_int128","span":{"filename":"src/io.rs","begin":[468,4],"end":[472,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330:430":{"id":"0:330:430","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1806,39],"end":[1806,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30921:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12111:31711":{"id":"2:12111:31711","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12110:31701"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43839:6838","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:177:1706":{"id":"0:177:1706","crate_id":0,"name":"ByteOrder","span":{"filename":"src/lib.rs","begin":[208,0],"end":[1788,1]},"visibility":"public","docs":"`ByteOrder` describes types that can serialize integers as bytes.\n\nNote that `Self` does not appear anywhere in this trait's definition!\nTherefore, in order to use it, you'll need to use syntax like\n`T::read_u16(&[0, 1])` where `T` implements `ByteOrder`.\n\nThis crate provides two types that implement `ByteOrder`: [`BigEndian`]\nand [`LittleEndian`].\nThis trait is sealed and cannot be implemented for callers to avoid\nbreaking backwards compatibility when adding new derived traits.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, BigEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:178:1710","0:179:1718","0:180:1722","0:181:1729","0:182:1736","0:183:1743","0:184:1719","0:185:1753","0:186:1758","0:187:1760","0:188:1763","0:189:1765","0:190:1767","0:191:1769","0:192:1761","0:193:1774","0:194:1779","0:195:1784","0:196:1790","0:197:1795","0:198:1800","0:199:1805","0:200:1785","0:201:1812","0:202:1818","0:203:1825","0:204:1827","0:205:1829","0:206:1832","0:207:1834","0:208:1836","0:209:1839","0:210:1830","0:211:1841","0:212:1843","0:213:1846","0:214:1855","0:215:1863","0:216:1869","0:217:1875","0:218:1881","0:219:1886","0:220:1890","0:221:1894","0:222:1901","0:223:1907","0:224:1911","0:225:1915","0:226:1918","0:227:1921","0:228:1924","0:229:1927","0:230:1941","0:231:1946","0:232:1948","0:233:1950","0:234:1952","0:235:1954","0:236:1956","0:237:1965","0:238:1970","0:239:1974","0:240:1978","0:241:1983","0:242:1987","0:243:1991","0:244:1995","0:245:1998","0:246:2000"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2265:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:2695:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:9215:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2590:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2318:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:9435:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"2:2349:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2313:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2355:189","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"private::Sealed","id":"0:174:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:259","0:288"]}}},"0:190:1767":{"id":"0:190:1767","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[463,4],"end":[463,41]},"visibility":"default","docs":"Writes an unsigned 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:350":{"id":"0:350","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,44],"end":[1836,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2693:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12094:314":{"id":"2:12094:314","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12003:1518"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:334":{"id":"0:334","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,55],"end":[1806,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["le","lt","ge","gt"],"trait":{"name":"PartialOrd","id":"2:2355:189","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:335:1044"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:338:423":{"id":"0:338:423","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1836,9],"end":[1836,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197:1795":{"id":"0:197:1795","crate_id":0,"name":"read_i48","span":{"filename":"src/lib.rs","begin":[608,4],"end":[610,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:342":{"id":"0:342","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,29],"end":[1836,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2694:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12141:34169":{"id":"2:12141:34169","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11784:13439","str::split":"2:12132:25271","prim@char":"1:11986:419","`DoubleEndedIterator`":"2:7306:121","str::rsplit_terminator":"2:12144:34170"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43606:6827","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2683:220-0:317:1682":{"id":"a:2:2683:220-0:317:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:259":{"id":"0:259","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1970,0],"end":[2184,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["from_slice_i32","read_f64_into","write_int128","write_i32","write_u48","write_i24","read_i64_into","write_i32_into","read_i16_into","write_f32_into","read_i128","from_slice_i64","read_u48","read_i32","read_f64_into_unchecked","read_i24","write_i128","write_i64","read_i128_into","write_i16","write_u24","write_int","read_f32","write_i16_into","read_int128","write_i128_into","from_slice_i128","read_i64","from_slice_i16","read_int","read_u24","read_i16","write_f32","write_f64","write_i48","read_f32_into","read_f32_into_unchecked","read_f64","read_i32_into","write_i64_into","write_f64_into","write_i8_into","read_i48"],"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:260:1710","0:261:1722","0:262:1736","0:263:1743","0:264:1719","0:265:1753","0:266:1758","0:267:1763","0:268:1767","0:269:1769","0:270:1761","0:272:1774","0:274:1855","0:275:1863","0:276:1869","0:277:1875","0:278:1918","0:279:1921","0:280:1924","0:281:1927","0:282:1965","0:283:1970","0:284:1974","0:285:1978","0:286:1998","0:287:2000"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12147:25277":{"id":"2:12147:25277","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11986:419","self::pattern":"2:11784:13439","str::rsplitn":"2:12150:25279"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43660:3247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12084:3153":{"id":"2:12084:3153","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12101:25241":{"id":"2:12101:25241","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:1710":{"id":"0:178:1710","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[225,4],"end":[225,35]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12091:26403":{"id":"2:12091:26403","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11352:13440"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:345":{"id":"0:345","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,33],"end":[1836,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:9435:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:346:734"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12093:315":{"id":"2:12093:315","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12094:314","`u8`":"1:12003:1518"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12112:27895":{"id":"2:12112:27895","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43810:2945","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:93:1894":{"id":"0:93:1894","crate_id":0,"name":"read_i128_into","span":{"filename":"src/io.rs","begin":[858,4],"end":[868,5]},"visibility":"default","docs":"Reads a sequence of signed 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263:1743":{"id":"0:263:1743","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[1987,4],"end":[1989,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:120:1763":{"id":"0:120:1763","crate_id":0,"name":"write_u32","span":{"filename":"src/io.rs","begin":[1259,4],"end":[1263,5]},"visibility":"default","docs":"Writes an unsigned 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u32::<BigEndian>(267).unwrap();\nwtr.write_u32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\x00\\x00\\x01\\x0b\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12150:25279":{"id":"2:12150:25279","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11986:419","str::splitn":"2:12147:25277","self::pattern":"2:11784:13439"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43678:3245","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11804:13437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:352:615":{"id":"0:352:615","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1836,44],"end":[1836,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:239:1974":{"id":"0:239:1974","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[1654,4],"end":[1654,43]},"visibility":"default","docs":"Converts the given slice of unsigned 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u64(&mut numbers);\nassert_eq!(numbers, [5u64.to_be(), 65000u64.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,22],"end":[1836,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9215:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:341:673"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:254:2024":{"id":"0:254:2024","crate_id":0,"name":"NativeEndian","span":{"filename":"src/lib.rs","begin":[1885,0],"end":[1885,37]},"visibility":"public","docs":"Defines system native-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\nOn this platform, this is an alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":["#[cfg(target_endian = \"little\")]"],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:12203:25141":{"id":"2:12203:25141","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39634:25153","Self::is_ascii":"2:12202:25140"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41595:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39634:25153","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12106:25264":{"id":"2:12106:25264","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12105:25263"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:274:1855":{"id":"0:274:1855","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2070,4],"end":[2072,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:1769":{"id":"0:269:1769","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[2037,4],"end":[2039,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:3212":{"id":"5:683:3212","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1855":{"id":"0:78:1855","crate_id":0,"name":"read_u16_into","span":{"filename":"src/io.rs","begin":[562,4],"end":[569,5]},"visibility":"default","docs":"Reads a sequence of unsigned 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519:34840":{"id":"5:5519:34840","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5531:26422":{"id":"5:5531:26422","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12206:25145"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252:2013":{"id":"0:252:2013","crate_id":0,"name":"LE","span":{"filename":"src/lib.rs","begin":[1848,0],"end":[1848,27]},"visibility":"public","docs":"A type alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:2:2683:220-0:336:1681":{"id":"a:2:2683:220-0:336:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2543-0:317:1682":{"id":"b:2:2543-0:317:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2545:699"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2249-0:317:1682":{"id":"b:2:2249-0:317:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2243:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:2816"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12114:31706":{"id":"2:12114:31706","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43848:6839","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:243:1991":{"id":"0:243:1991","crate_id":0,"name":"from_slice_i64","span":{"filename":"src/lib.rs","begin":[1743,4],"end":[1748,5]},"visibility":"default","docs":"Converts the given slice of signed 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i64(&mut numbers);\nassert_eq!(numbers, [5i64.to_be(), 65000i64.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:332":{"id":"0:332","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,44],"end":[1806,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2313:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:333:615"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:267:1763":{"id":"0:267:1763","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[2027,4],"end":[2029,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:1763":{"id":"0:188:1763","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[423,4],"end":[423,41]},"visibility":"default","docs":"Writes an unsigned 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:282:1965":{"id":"0:282:1965","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2126,4],"end":[2132,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:34166":{"id":"2:12103:34166","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11992:1415","str::slice_mut_unchecked":"2:12104:34167","crate::ops::Index":"2:2980:8088"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:289:1710":{"id":"0:289:1710","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[2188,4],"end":[2190,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:25271":{"id":"2:12132:25271","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11784:13439","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11986:419","str::split_whitespace":"2:12110:31701","str::rsplit":"2:12138:25275"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43556:2949","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135:1836":{"id":"0:135:1836","crate_id":0,"name":"write_i64","span":{"filename":"src/io.rs","begin":[1394,4],"end":[1398,5]},"visibility":"default","docs":"Writes a signed 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i64::<BigEndian>(i64::min_value()).unwrap();\nwtr.write_i64::<BigEndian>(i64::max_value()).unwrap();\nassert_eq!(wtr, b\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12105:25263":{"id":"2:12105:25263","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12106:25264"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:298:1769":{"id":"0:298:1769","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[2245,4],"end":[2247,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:2573":{"id":"0:86:2573","crate_id":0,"name":"read_i8_into","span":{"filename":"src/io.rs","begin":[716,4],"end":[719,5]},"visibility":"default","docs":"Reads a sequence of signed 8 bit integers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to read into a `&mut [i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `i8` individually.)\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 251, 3]);\nlet mut dst = [0; 3];\nrdr.read_i8_into(&mut dst).unwrap();\nassert_eq!([2, -5, 3], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2251:2816":{"id":"2:2251:2816","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:285:1978":{"id":"0:285:1978","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2153,4],"end":[2159,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24:1710":{"id":"0:24:1710","crate_id":0,"name":"read_u16","span":{"filename":"src/io.rs","begin":[112,4],"end":[116,5]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2700:228-0:317:1682":{"id":"a:2:2700:228-0:317:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:11-0:105:1650":{"id":"0:11-0:105:1650","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[78,34],"end":[78,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::WriteBytesExt","name":"WriteBytesExt","id":"0:105:1650","glob":false}}},"0:276:1869":{"id":"0:276:1869","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2080,4],"end":[2082,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12188:25284":{"id":"2:12188:25284","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11986:419","self::pattern":"2:11784:13439"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41595:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11804:13437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12171:34176":{"id":"2:12171:34176","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:114:1760":{"id":"0:114:1760","crate_id":0,"name":"write_u24","span":{"filename":"src/io.rs","begin":[1205,4],"end":[1209,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u24::<BigEndian>(267).unwrap();\nwtr.write_u24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\x00\\x01\\x0b\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:231:1946":{"id":"0:231:1946","crate_id":0,"name":"write_i16_into","span":{"filename":"src/lib.rs","begin":[1450,4],"end":[1455,5]},"visibility":"default","docs":"Writes signed 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"i16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:346:734":{"id":"0:346:734","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1836,33],"end":[1836,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:9443:145","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:1758":{"id":"0:108:1758","crate_id":0,"name":"write_u16","span":{"filename":"src/io.rs","begin":[1151,4],"end":[1155,5]},"visibility":"default","docs":"Writes an unsigned 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\\x03\\x00\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u16"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:315:1998":{"id":"0:315:1998","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2362,4],"end":[2371,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12162:34173":{"id":"2:12162:34173","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11784:13439","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11986:419","str::matches":"2:12159:2829"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43778:6835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11804:13437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:1818":{"id":"0:202:1818","crate_id":0,"name":"read_f32","span":{"filename":"src/lib.rs","begin":[721,4],"end":[723,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:242:1987":{"id":"0:242:1987","crate_id":0,"name":"from_slice_i32","span":{"filename":"src/lib.rs","begin":[1718,4],"end":[1723,5]},"visibility":"default","docs":"Converts the given slice of signed 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i32(&mut numbers);\nassert_eq!(numbers, [5i32.to_be(), 65000i32.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310:1927":{"id":"0:310:1927","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2317,4],"end":[2323,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8321:3049-0:317:1682":{"id":"a:2:8321:3049-0:317:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:8321:3049","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:156:1843":{"id":"0:156:1843","crate_id":0,"name":"write_f32","span":{"filename":"src/io.rs","begin":[1541,4],"end":[1545,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian single-precision floating point number to a `Write`:\n\n```rust\nuse std::f32;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f32::<BigEndian>(f32::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x49\\x0f\\xdb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f32"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:1841":{"id":"0:153:1841","crate_id":0,"name":"write_int128","span":{"filename":"src/io.rs","begin":[1508,4],"end":[1516,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i128"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:1805":{"id":"0:57:1805","crate_id":0,"name":"read_i128","span":{"filename":"src/io.rs","begin":[402,4],"end":[406,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i128::min_value(), rdr.read_i128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:189:1765":{"id":"0:189:1765","crate_id":0,"name":"write_u48","span":{"filename":"src/lib.rs","begin":[442,4],"end":[444,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:354:1044":{"id":"0:354:1044","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1836,55],"end":[1836,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41595:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30921:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:294:1753":{"id":"0:294:1753","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[2219,4],"end":[2227,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:1911":{"id":"0:99:1911","crate_id":0,"name":"read_f64_into","span":{"filename":"src/io.rs","begin":[987,4],"end":[994,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:281:1927":{"id":"0:281:1927","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2117,4],"end":[2123,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:317:1682":{"id":"b:5:680-0:317:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2265:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:3211","5:683:3212","5:684:3213"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:238:1970":{"id":"0:238:1970","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[1635,4],"end":[1635,43]},"visibility":"default","docs":"Converts the given slice of unsigned 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u32(&mut numbers);\nassert_eq!(numbers, [5u32.to_be(), 65000u32.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:192:1761":{"id":"0:192:1761","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[502,4],"end":[502,57]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:333:615":{"id":"0:333:615","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1806,44],"end":[1806,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12099:25240":{"id":"2:12099:25240","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:2542:3146":{"id":"2:2542:3146","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2516:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221:1894":{"id":"0:221:1894","crate_id":0,"name":"read_i128_into","span":{"filename":"src/lib.rs","begin":[1173,4],"end":[1178,5]},"visibility":"default","docs":"Reads signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180:1722":{"id":"0:180:1722","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[265,4],"end":[265,35]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:20:2466":{"id":"0:20:2466","crate_id":0,"name":"read_u8","span":{"filename":"src/io.rs","begin":[55,4],"end":[59,5]},"visibility":"default","docs":"Reads an unsigned 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![2, 5]);\nassert_eq!(2, rdr.read_u8().unwrap());\nassert_eq!(5, rdr.read_u8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323":{"id":"0:323","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,29],"end":[1806,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:2694:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:213:1846":{"id":"0:213:1846","crate_id":0,"name":"write_f64","span":{"filename":"src/lib.rs","begin":[968,4],"end":[970,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"f64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:229:1927":{"id":"0:229:1927","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[1393,4],"end":[1393,53]},"visibility":"default","docs":"Writes unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:240:1978":{"id":"0:240:1978","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[1673,4],"end":[1673,45]},"visibility":"default","docs":"Converts the given slice of unsigned 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u128(&mut numbers);\nassert_eq!(numbers, [5u128.to_be(), 65000u128.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:291:1736":{"id":"0:291:1736","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[2198,4],"end":[2200,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3319-0:336:1681":{"id":"b:2:3319-0:336:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3321:1509"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:275:1863":{"id":"0:275:1863","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2075,4],"end":[2077,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:3321:1509":{"id":"2:3321:1509","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:39426:6587","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:219:1886":{"id":"0:219:1886","crate_id":0,"name":"read_i32_into","span":{"filename":"src/lib.rs","begin":[1115,4],"end":[1120,5]},"visibility":"default","docs":"Reads signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:1825":{"id":"0:75:1825","crate_id":0,"name":"read_f64","span":{"filename":"src/io.rs","begin":[530,4],"end":[534,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian double-precision floating point number from a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n]);\nassert_eq!(f64::consts::PI, rdr.read_f64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"f64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54:1743":{"id":"0:54:1743","crate_id":0,"name":"read_u128","span":{"filename":"src/io.rs","begin":[376,4],"end":[380,5]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83,\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83\n]);\nassert_eq!(16947640962301618749969007319746179, rdr.read_u128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:233:1950":{"id":"0:233:1950","crate_id":0,"name":"write_i64_into","span":{"filename":"src/lib.rs","begin":[1506,4],"end":[1511,5]},"visibility":"default","docs":"Writes signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"i64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:293:1719":{"id":"0:293:1719","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[2208,4],"end":[2216,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324":{"id":"0:324","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,29],"end":[1806,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2318:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12178:34180":{"id":"2:12178:34180","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:331":{"id":"0:331","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,44],"end":[1806,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:2693:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:159:1846":{"id":"0:159:1846","crate_id":0,"name":"write_f64","span":{"filename":"src/io.rs","begin":[1570,4],"end":[1574,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian double-precision floating point number to a `Write`:\n\n```rust\nuse std::f64;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f64::<BigEndian>(f64::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x09\\x21\\xfb\\x54\\x44\\x2d\\x18\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f64"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:307:1918":{"id":"0:307:1918","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2290,4],"end":[2296,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:3213":{"id":"5:684:3213","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:1729":{"id":"0:181:1729","crate_id":0,"name":"read_u48","span":{"filename":"src/lib.rs","begin":[284,4],"end":[286,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12138:25275":{"id":"2:12138:25275","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11784:13439","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11986:419","str::split":"2:12132:25271"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43574:3243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11804:13437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:311:1965":{"id":"0:311:1965","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2326,4],"end":[2332,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:241:1983":{"id":"0:241:1983","crate_id":0,"name":"from_slice_i16","span":{"filename":"src/lib.rs","begin":[1693,4],"end":[1698,5]},"visibility":"default","docs":"Converts the given slice of signed 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 6500];\nBigEndian::from_slice_i16(&mut numbers);\nassert_eq!(numbers, [5i16.to_be(), 6500i16.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:309:1924":{"id":"0:309:1924","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2308,4],"end":[2314,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:1650":{"id":"0:105:1650","crate_id":0,"name":"WriteBytesExt","span":{"filename":"src/io.rs","begin":[1073,0],"end":[1575,1]},"visibility":"public","docs":"Extends [`Write`] with methods for writing numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a [`Write`]:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, vec![2, 5, 3, 0]);\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":["0:106:2628","0:107:2635","0:108:1758","0:111:1827","0:114:1760","0:117:1829","0:120:1763","0:123:1832","0:126:1765","0:129:1834","0:132:1767","0:135:1836","0:138:1769","0:141:1839","0:144:1761","0:147:1830","0:150:1774","0:153:1841","0:156:1843","0:159:1846"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3494:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:162"]}}},"2:12109:2034":{"id":"2:12109:2034","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43542:2948","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222:1901":{"id":"0:222:1901","crate_id":0,"name":"read_f32_into","span":{"filename":"src/lib.rs","begin":[1203,4],"end":[1208,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:303:1855":{"id":"0:303:1855","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2270,4],"end":[2272,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284:1974":{"id":"0:284:1974","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2144,4],"end":[2150,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:318":{"id":"0:318","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,9],"end":[1806,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2265:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:319:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:234:1952":{"id":"0:234:1952","crate_id":0,"name":"write_i128_into","span":{"filename":"src/lib.rs","begin":[1534,4],"end":[1539,5]},"visibility":"default","docs":"Writes signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"i128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:182:1736":{"id":"0:182:1736","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[305,4],"end":[305,35]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2554-0:336:1681":{"id":"b:2:2554-0:336:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2557:128","2:2558:1495"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:295:1758":{"id":"0:295:1758","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[2230,4],"end":[2232,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1839,0],"end":[1843,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2590:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:251:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:305:1869":{"id":"0:305:1869","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2280,4],"end":[2282,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2249-0:336:1681":{"id":"b:2:2249-0:336:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2243:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2251:2816"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:183:1743":{"id":"0:183:1743","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[324,4],"end":[324,37]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:316:2000":{"id":"0:316:2000","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2374,4],"end":[2383,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:1719":{"id":"0:60:1719","crate_id":0,"name":"read_uint","span":{"filename":"src/io.rs","begin":[427,4],"end":[431,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0x74, 0xfa]);\nassert_eq!(8418554, rdr.read_uint::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:132:1767":{"id":"0:132:1767","crate_id":0,"name":"write_u64","span":{"filename":"src/io.rs","begin":[1367,4],"end":[1371,5]},"visibility":"default","docs":"Writes an unsigned 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u64::<BigEndian>(918733457491587).unwrap();\nwtr.write_u64::<BigEndian>(143).unwrap();\nassert_eq!(wtr, b\"\\x00\\x03\\x43\\x95\\x4d\\x60\\x86\\x83\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:1829":{"id":"0:205:1829","crate_id":0,"name":"write_i24","span":{"filename":"src/lib.rs","begin":[788,4],"end":[790,5]},"visibility":"default","docs":"Writes a signed 24 bit integer `n` to `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12095:25238":{"id":"2:12095:25238","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41597:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41595:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9886:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72:1818":{"id":"0:72:1818","crate_id":0,"name":"read_f32","span":{"filename":"src/io.rs","begin":[499,4],"end":[503,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian single-precision floating point number from a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n]);\nassert_eq!(f32::consts::PI, rdr.read_f32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"f32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:1761":{"id":"0:270:1761","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[2042,4],"end":[2053,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12121:25283":{"id":"2:12121:25283","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11986:419","self::pattern":"2:11784:13439"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11804:13437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253:2021":{"id":"0:253:2021","crate_id":0,"name":"NetworkEndian","span":{"filename":"src/lib.rs","begin":[1874,0],"end":[1874,35]},"visibility":"public","docs":"Defines network byte order serialization.\n\nNetwork byte order is defined by [RFC 1700][1] to be big-endian, and is\nreferred to in several protocol specifications.  This type is an alias of\n[`BigEndian`].\n\n[1]: https://tools.ietf.org/html/rfc1700\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, NetworkEndian, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, NetworkEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:84:1875":{"id":"0:84:1875","crate_id":0,"name":"read_u128_into","span":{"filename":"src/io.rs","begin":[673,4],"end":[683,5]},"visibility":"default","docs":"Reads a sequence of unsigned 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:1829":{"id":"0:117:1829","crate_id":0,"name":"write_i24","span":{"filename":"src/io.rs","begin":[1232,4],"end":[1236,5]},"visibility":"default","docs":"Writes a signed 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i24::<BigEndian>(-34253).unwrap();\nwtr.write_i24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\xff\\x7a\\x33\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12194:34184":{"id":"2:12194:34184","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11986:419","self::pattern":"2:11784:13439"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:1800":{"id":"0:198:1800","crate_id":0,"name":"read_i64","span":{"filename":"src/lib.rs","begin":[630,4],"end":[632,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:235:1954":{"id":"0:235:1954","crate_id":0,"name":"write_f32_into","span":{"filename":"src/lib.rs","begin":[1563,4],"end":[1568,5]},"visibility":"default","docs":"Writes IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"f32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:351":{"id":"0:351","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,44],"end":[1836,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2313:188","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:352:615"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:185:1753":{"id":"0:185:1753","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[364,4],"end":[364,55]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:216:1869":{"id":"0:216:1869","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[1039,4],"end":[1039,50]},"visibility":"default","docs":"Reads unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12135:25273":{"id":"2:12135:25273","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11986:419","self::pattern":"2:11784:13439"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11608:3249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530:26421":{"id":"5:5530:26421","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12205:25144"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33:1784":{"id":"0:33:1784","crate_id":0,"name":"read_i24","span":{"filename":"src/io.rs","begin":[191,4],"end":[195,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:283:1970":{"id":"0:283:1970","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2135,4],"end":[2141,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:299:1761":{"id":"0:299:1761","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[2250,4],"end":[2257,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141:1839":{"id":"0:141:1839","crate_id":0,"name":"write_i128","span":{"filename":"src/io.rs","begin":[1410,4],"end":[1414,5]},"visibility":"default","docs":"Writes a signed 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i128"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:1901":{"id":"0:95:1901","crate_id":0,"name":"read_f32_into","span":{"filename":"src/io.rs","begin":[902,4],"end":[909,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223:1907":{"id":"0:223:1907","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/lib.rs","begin":[1237,4],"end":[1239,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f32_into` instead"},"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12110:31701":{"id":"2:12110:31701","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12111:31711"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43830:6837","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12179:34181":{"id":"2:12179:34181","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11986:419","self::pattern":"2:11784:13439"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11809:13436","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12207:34187":{"id":"2:12207:34187","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4538:34187"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43855:6726","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:228:1924":{"id":"0:228:1924","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[1370,4],"end":[1370,51]},"visibility":"default","docs":"Writes unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:101:1915":{"id":"0:101:1915","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/io.rs","begin":[1039,4],"end":[1044,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Safety\n\nThis method is unsafe because there are no guarantees made about the\nfloating point values. In particular, this method does not check for\nsignaling NaNs, which may result in undefined behavior.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f64_into` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:162":{"id":"0:162","crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1579,0],"end":[1579,50]},"visibility":"default","docs":"All types that implement `Write` get methods defined in `WriteBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3494:2617","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:2690:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_u24","write_i16","write_int128","write_uint128","write_i8","write_i32","write_i24","write_u48","write_f64","write_f32","write_i48","write_u64","write_u8","write_uint","write_u16","write_i128","write_i64","write_u128","write_int","write_u32"],"trait":{"name":"WriteBytesExt","id":"0:105:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"W"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:211:1841":{"id":"0:211:1841","crate_id":0,"name":"write_int128","span":{"filename":"src/lib.rs","begin":[922,4],"end":[924,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i128"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2557:128":{"id":"2:2557:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32105:2856","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:341:673":{"id":"0:341:673","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1836,22],"end":[1836,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9190:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9179:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:34842":{"id":"5:5528:34842","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:3007","`String`":"5:7451:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:3007","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:3221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,29],"end":[1836,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2318:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:262:1736":{"id":"0:262:1736","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[1982,4],"end":[1984,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5513:2906":{"id":"5:5513:2906","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82:1869":{"id":"0:82:1869","crate_id":0,"name":"read_u64_into","span":{"filename":"src/io.rs","begin":[635,4],"end":[642,5]},"visibility":"default","docs":"Reads a sequence of unsigned 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:260:1710":{"id":"0:260:1710","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[1972,4],"end":[1974,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42:1729":{"id":"0:42:1729","crate_id":0,"name":"read_u48","span":{"filename":"src/io.rs","begin":[269,4],"end":[273,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xb6, 0x71, 0x6b, 0xdc, 0x2b, 0x31]);\nassert_eq!(200598257150769, rdr.read_u48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:225:1915":{"id":"0:225:1915","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/lib.rs","begin":[1299,4],"end":[1301,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f64_into` instead"},"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:174:1680":{"id":"0:174:1680","crate_id":0,"name":"Sealed","span":{"filename":"src/lib.rs","begin":[168,4],"end":[168,23]},"visibility":"public","docs":"Sealed stops crates other than byteorder from implementing any traits\nthat use it.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:304:1863":{"id":"0:304:1863","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2275,4],"end":[2277,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:195:1784":{"id":"0:195:1784","crate_id":0,"name":"read_i24","span":{"filename":"src/lib.rs","begin":[564,4],"end":[566,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191:1769":{"id":"0:191:1769","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[482,4],"end":[482,43]},"visibility":"default","docs":"Writes an unsigned 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:218:1881":{"id":"0:218:1881","crate_id":0,"name":"read_i16_into","span":{"filename":"src/lib.rs","begin":[1086,4],"end":[1091,5]},"visibility":"default","docs":"Reads signed 16 bit integers from `src` to `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:249:2009":{"id":"0:249:2009","crate_id":0,"name":"BE","span":{"filename":"src/lib.rs","begin":[1818,0],"end":[1818,24]},"visibility":"public","docs":"A type alias for [`BigEndian`].\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"5:682:3211":{"id":"5:682:3211","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:2:2543-0:336:1681":{"id":"b:2:2543-0:336:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2545:699"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12108:6851":{"id":"2:12108:6851","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11986:419"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43532:6822","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:1769":{"id":"0:138:1769","crate_id":0,"name":"write_u128","span":{"filename":"src/io.rs","begin":[1402,4],"end":[1406,5]},"visibility":"default","docs":"Writes an unsigned 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u128"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:227:1921":{"id":"0:227:1921","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[1347,4],"end":[1347,51]},"visibility":"default","docs":"Writes unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:313:1974":{"id":"0:313:1974","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2344,4],"end":[2350,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:1907":{"id":"0:97:1907","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/io.rs","begin":[948,4],"end":[953,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\n\nReads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f32_into` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:123:1832":{"id":"0:123:1832","crate_id":0,"name":"write_i32","span":{"filename":"src/io.rs","begin":[1286,4],"end":[1290,5]},"visibility":"default","docs":"Writes a signed 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i32::<BigEndian>(-34253).unwrap();\nwtr.write_i32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\xff\\xff\\x7a\\x33\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:147:1830":{"id":"0:147:1830","crate_id":0,"name":"write_int","span":{"filename":"src/io.rs","begin":[1478,4],"end":[1486,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite signed 56 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_int::<BigEndian>(-3548172039376767, 7).unwrap();\nwtr.write_int::<BigEndian>(43, 7).unwrap();\nassert_eq!(wtr, b\"\\xf3\\x64\\xf4\\xd1\\xfd\\xb0\\x81\\x00\\x00\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:296:1763":{"id":"0:296:1763","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[2235,4],"end":[2237,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:301:1774":{"id":"0:301:1774","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2260,4],"end":[2267,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12086:34163":{"id":"2:12086:34163","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1800":{"id":"0:51:1800","crate_id":0,"name":"read_i64","span":{"filename":"src/io.rs","begin":[347,4],"end":[351,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i64::min_value(), rdr.read_i64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12165:34174":{"id":"2:12165:34174","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11784:13439","`DoubleEndedIterator`":"2:7306:121","prim@char":"1:11986:419","str::rmatch_indices":"2:12168:34175"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43706:6831","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12144:34170":{"id":"2:12144:34170","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11784:13439","str::split":"2:12132:25271","prim@char":"1:11986:419","str::split_terminator":"2:12141:34169"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43624:6828","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11804:13437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12173:34177":{"id":"2:12173:34177","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:1753":{"id":"0:66:1753","crate_id":0,"name":"read_uint128","span":{"filename":"src/io.rs","begin":[460,4],"end":[464,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:1790":{"id":"0:196:1790","crate_id":0,"name":"read_i32","span":{"filename":"src/lib.rs","begin":[586,4],"end":[588,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288":{"id":"0:288","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2186,0],"end":[2384,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["from_slice_i32","read_f64_into","write_int128","write_i32","write_u48","write_i24","read_i64_into","write_i32_into","read_i16_into","write_f32_into","read_i128","from_slice_i64","read_u48","read_i32","read_f64_into_unchecked","read_i24","write_i128","write_i64","read_i128_into","write_i16","write_u24","write_int","read_f32","write_i16_into","read_int128","write_i128_into","from_slice_i128","read_i64","from_slice_i16","read_int","read_u24","read_i16","write_f32","write_f64","write_i48","read_f32_into","read_f32_into_unchecked","read_f64","read_i32_into","write_i64_into","write_f64_into","write_i8_into","read_i48"],"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:289:1710","0:290:1722","0:291:1736","0:292:1743","0:293:1719","0:294:1753","0:295:1758","0:296:1763","0:297:1767","0:298:1769","0:299:1761","0:301:1774","0:303:1855","0:304:1863","0:305:1869","0:306:1875","0:307:1918","0:308:1921","0:309:1924","0:310:1927","0:311:1965","0:312:1970","0:313:1974","0:314:1978","0:315:1998","0:316:2000"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:22:2473":{"id":"0:22:2473","crate_id":0,"name":"read_i8","span":{"filename":"src/io.rs","begin":[85,4],"end":[89,5]},"visibility":"default","docs":"Reads a signed 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![0x02, 0xfb]);\nassert_eq!(2, rdr.read_i8().unwrap());\nassert_eq!(-5, rdr.read_i8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12197:34185":{"id":"2:12197:34185","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11986:419","self::pattern":"2:11784:13439"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11804:13437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:266:1758":{"id":"0:266:1758","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[2022,4],"end":[2024,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:232:1948":{"id":"0:232:1948","crate_id":0,"name":"write_i32_into","span":{"filename":"src/lib.rs","begin":[1478,4],"end":[1483,5]},"visibility":"default","docs":"Writes signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"i32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12104:34167":{"id":"2:12104:34167","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11992:1415","crate::ops::IndexMut":"2:2984:8089","str::slice_unchecked":"2:12103:34166"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:215:1863":{"id":"0:215:1863","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[1016,4],"end":[1016,50]},"visibility":"default","docs":"Reads unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:308:1921":{"id":"0:308:1921","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2299,4],"end":[2305,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516:34839":{"id":"5:5516:34839","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:8322:3048-0:317:1682":{"id":"a:2:8322:3048-0:317:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:8322:3048","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5527:34841":{"id":"5:5527:34841","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280:1924":{"id":"0:280:1924","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2108,4],"end":[2114,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:268:1767":{"id":"0:268:1767","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[2032,4],"end":[2034,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2552:128":{"id":"2:2552:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:220:1890":{"id":"0:220:1890","crate_id":0,"name":"read_i64_into","span":{"filename":"src/lib.rs","begin":[1144,4],"end":[1149,5]},"visibility":"default","docs":"Reads signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:279:1921":{"id":"0:279:1921","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2099,4],"end":[2105,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:226:1918":{"id":"0:226:1918","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[1324,4],"end":[1324,51]},"visibility":"default","docs":"Writes unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12083:820":{"id":"2:12083:820","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11986:419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:312:1970":{"id":"0:312:1970","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2335,4],"end":[2341,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:34164":{"id":"2:12088:34164","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12086:34163"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,39],"end":[1806,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2349:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:330:430"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:144:1761":{"id":"0:144:1761","crate_id":0,"name":"write_uint","span":{"filename":"src/io.rs","begin":[1442,4],"end":[1450,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite unsigned 40 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_uint::<BigEndian>(312550384361, 5).unwrap();\nwtr.write_uint::<BigEndian>(43, 5).unwrap();\nassert_eq!(wtr, b\"\\x48\\xc5\\x74\\x62\\xe9\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:335:1044":{"id":"0:335:1044","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1806,55],"end":[1806,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:41595:181","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:30921:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12128:3152":{"id":"2:12128:3152","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41597:179","prim@char":"1:11986:419","self::pattern":"2:11784:13439"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41595:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11804:13437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12200:34186":{"id":"2:12200:34186","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11745:127","`FromStr`":"2:11744:8229"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41739:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11744:8229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11744:8229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:2974":{"id":"5:5529:2974","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12118:25282":{"id":"2:12118:25282","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11986:419","self::pattern":"2:11784:13439"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2539-0:336:1681":{"id":"b:2:2539-0:336:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2542:3146"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:214:1855":{"id":"0:214:1855","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[993,4],"end":[993,50]},"visibility":"default","docs":"Reads unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12182:34182":{"id":"2:12182:34182","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11986:419","self::pattern":"2:11784:13439"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:326":{"id":"0:326","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,33],"end":[1806,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:9435:141","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:317:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:327:734"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:129:1834":{"id":"0:129:1834","crate_id":0,"name":"write_i48","span":{"filename":"src/io.rs","begin":[1340,4],"end":[1344,5]},"visibility":"default","docs":"Writes a signed 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i48::<BigEndian>(-108363435763825).unwrap();\nwtr.write_i48::<BigEndian>(77).unwrap();\nassert_eq!(wtr, b\"\\x9d\\x71\\xab\\xe7\\x97\\x8f\\x00\\x00\\x00\\x00\\x00\\x4d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12209:8061":{"id":"2:12209:8061","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4539:8061"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43864:6717","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272:1774":{"id":"0:272:1774","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2056,4],"end":[2067,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,9],"end":[1836,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2265:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:336:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:338:423"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12191:34183":{"id":"2:12191:34183","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11986:419","self::pattern":"2:11784:13439"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11804:13437","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:297:1767":{"id":"0:297:1767","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[2240,4],"end":[2242,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:1812":{"id":"0:201:1812","crate_id":0,"name":"read_int128","span":{"filename":"src/lib.rs","begin":[698,4],"end":[700,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:36:1722":{"id":"0:36:1722","crate_id":0,"name":"read_u32","span":{"filename":"src/io.rs","begin":[217,4],"end":[221,5]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:111:1827":{"id":"0:111:1827","crate_id":0,"name":"write_i16","span":{"filename":"src/io.rs","begin":[1178,4],"end":[1182,5]},"visibility":"default","docs":"Writes a signed 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i16::<BigEndian>(193).unwrap();\nwtr.write_i16::<BigEndian>(-132).unwrap();\nassert_eq!(wtr, b\"\\x00\\xc1\\xff\\x7c\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i16"}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:1779":{"id":"0:194:1779","crate_id":0,"name":"read_i16","span":{"filename":"src/lib.rs","begin":[542,4],"end":[544,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2333":{"id":"0:0:2333","crate_id":0,"name":"byteorder","span":{"filename":"src/lib.rs","begin":[1,0],"end":[4052,1]},"visibility":"public","docs":"This crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].\n\nThe organization of the crate is pretty simple. A trait, [`ByteOrder`], specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]\nand [`LittleEndian`] implement these methods. Finally, [`ReadBytesExt`] and\n[`WriteBytesExt`] provide convenience methods available to all types that\nimplement [`Read`] and [`Write`].\n\nAn alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve\ncode clarity.\n\nAn additional alias, [`NativeEndian`], is provided for the endianness of the\nlocal platform. This is convenient when serializing data for use and\nconversions are not desired.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`] type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a [`Write`] type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n\n# Optional Features\n\nThis crate optionally provides support for 128 bit values (`i128` and `u128`)\nwhen built with the `i128` feature enabled.\n\nThis crate can also be used without the standard library.\n\n# Alternatives\n\nNote that as of Rust 1.32, the standard numeric types provide built-in methods\nlike `to_le_bytes` and `from_le_bytes`, which support some of the same use\ncases.\n\n[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness\n[`ByteOrder`]: trait.ByteOrder.html\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`ReadBytesExt`]: trait.ReadBytesExt.html\n[`WriteBytesExt`]: trait.WriteBytesExt.html\n[`NetworkEndian`]: type.NetworkEndian.html\n[`NativeEndian`]: type.NativeEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":["#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:10-0:19:1649","0:11-0:105:1650","0:177:1706","0:317:1682","0:249:2009","0:336:1681","0:252:2013","0:253:2021","0:254:2024"],"is_stripped":false}}},"0:230:1941":{"id":"0:230:1941","crate_id":0,"name":"write_i8_into","span":{"filename":"src/lib.rs","begin":[1422,4],"end":[1427,5]},"visibility":"default","docs":"Writes signed 8 bit integers from `src` into `dst`.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to write from a `&[i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `u8` individually.)\n\n# Panics\n\nPanics when `buf.len() != src.len()`.\n\n# Examples\n\nWrite and read `i8` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian, ReadBytesExt};\n\nlet mut bytes = [0; 4];\nlet numbers_given = [1, 2, 0xf, 0xe];\nLittleEndian::write_i8_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nbytes.as_ref().read_i8_into(&mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"i8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12177:34179":{"id":"2:12177:34179","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12082":{"id":"2:12082","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12083:820","2:12084:3153","2:12085:34162","2:12086:34163","2:12088:34164","2:12091:26403","2:12092:34165","2:12093:315","2:12094:314","2:12095:25238","2:12097:25239","2:12099:25240","2:12101:25241","2:12103:34166","2:12104:34167","2:12105:25263","2:12106:25264","2:12107:6840","2:12108:6851","2:12109:2034","2:12110:31701","2:12111:31711","2:12112:27895","2:12113:34168","2:12114:31706","2:12115:25281","2:12118:25282","2:12121:25283","2:12124:3192","2:12128:3152","2:12132:25271","2:12135:25273","2:12138:25275","2:12141:34169","2:12144:34170","2:12147:25277","2:12150:25279","2:12153:34171","2:12156:34172","2:12159:2829","2:12162:34173","2:12165:34174","2:12168:34175","2:12171:34176","2:12173:34177","2:12175:34178","2:12177:34179","2:12178:34180","2:12179:34181","2:12182:34182","2:12185:24685","2:12188:25284","2:12191:34183","2:12194:34184","2:12197:34185","2:12200:34186","2:12202:25140","2:12203:25141","2:12204:25143","2:12205:25144","2:12206:25145","2:12207:34187","2:12209:8061","2:12210:34188"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:207:1834":{"id":"0:207:1834","crate_id":0,"name":"write_i48","span":{"filename":"src/lib.rs","begin":[832,4],"end":[834,5]},"visibility":"default","docs":"Writes a signed 48 bit integer `n` to `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48:1736":{"id":"0:48:1736","crate_id":0,"name":"read_u64","span":{"filename":"src/io.rs","begin":[321,4],"end":[325,5]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83]);\nassert_eq!(918733457491587, rdr.read_u64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:2920:210","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:177:1706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:1785":{"id":"0:200:1785","crate_id":0,"name":"read_int","span":{"filename":"src/lib.rs","begin":[675,4],"end":[677,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:322:673":{"id":"0:322:673","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1806,22],"end":[1806,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9190:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9179:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:186:1758":{"id":"0:186:1758","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[383,4],"end":[383,41]},"visibility":"default","docs":"Writes an unsigned 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_u16(&mut buf, 1_000);\nassert_eq!(1_000, LittleEndian::read_u16(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:278:1918":{"id":"0:278:1918","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2090,4],"end":[2096,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12153:34171":{"id":"2:12153:34171","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41595:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11789:7494","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"14:221:5272":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:48022:6989":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"11:1048:35489":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:2567:4780":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:48061:6990":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:21066:8286":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:11497:6824":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:3979:8163":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:5818:6059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"19:0:1040":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:551:7516":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:4696:8190":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:12769:4280":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:20658:33346":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:4754:5846":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:1464:5327":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:9697:3645":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:7099:7082":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4543:5787":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:582:8060":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:43855:6726":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:3777:4825":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:7427:6449":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:21132:6472":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:950:7459":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:1523:7474":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:42626:5151":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:12952:4309":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:7268:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:4536:4835":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10458:3925":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:41444:6776":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"5:3737:7475":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:9118:3884":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:1820:2921":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:2962:6429":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"14:165:19422":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:13574:4511":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:8961:7081":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:45791:6899":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:12921:4304":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:6386:7555":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:22049:31372":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:45742:6897":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:4965:4848":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:12011:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:4814:4843":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:6900:5029":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"14:40:4079":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:1411:3237":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:2523:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"11:630:3237":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:21112:8288":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:919:7452":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:1520:5508":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:5877:6092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:5044:5998":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:14380:4734":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"5:6771:3606":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"11:311:5324":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:5972:4756":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:12003:1518":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"14:215:5270":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:4:1023":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"11:844:7460":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:3301:2967":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:47894:6981":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:11290:20415":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:10486:3928":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:9777:20425":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:2910:2951":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:3810:4826":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:45760:6898":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:2465:4776":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:13303:4355":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:6470:4815":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:7739:4802":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:1558:3237":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:39634:25153":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:12727:4259":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:8711:20406":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"11:1838:5329":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:3987:8164":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:1473:5328":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:40198:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:4887:5910":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:8922:8253":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:11266:7607":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"11:2174:5334":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:43383:3225":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:2461:6433":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"14:160:7448":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:10918:7565":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:474:5423":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:7250:6381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:12891:4299":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:2405:1648":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:2821:13665":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:9036:7082":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:358:7515":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:43422:3224":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:4794:5868":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:2558:2960":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:10453:3684":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:11131:6878":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:11470:7537":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:11354:3848":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:6289:4939":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11815:4079":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"11:1826:3590":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:9475:7566":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:20628:33227":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:4928:4847":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:22525:3302":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:20809:1680":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:8841:20410":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:9599:3637":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:4004:3590":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:7474:4809":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:4128:30233":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:9913:7310":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:40245:8119":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"1:9050:27060":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:39343:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:12457:4222":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:7398:31377":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:6171:6224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"18:531:3743":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:8547:3237":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:10558:3361":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:6932:3620":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:7043:3664":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:1184:7289":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:6651:2053":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:6896:3676":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:9399:7298":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:927:7454":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:10931:7548":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:10266:7326":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:9368:7497":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:44472:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:10515:2971":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:3441:4822":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:8659:20405":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"18:538:3746":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:11168:7109":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"8:0:2717":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:7061:5053":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:9016:7589":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:1591:5332":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:4524:5777":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:3935:8160":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10280:7327":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:4323:4830":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:20675:33347":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:12966:4311":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:43283:7511":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:30387:31359":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:562:5476":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:12671:4250":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:6175:7382":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:9215:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:1059:7461":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:3583:3237":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:4693:8217":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:6015:6169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:46021:6907":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:43760:6834":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:3929:8161":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:2690:6436":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:11127:4034":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:12424:4214":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:5610:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:43435:3239":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4304:5652":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:30551:31402":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:12065:4128":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"15:394:19451":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:43977:6849":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:6688:6284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:10609:7351":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:8010:2963":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"5:7531:3608":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:40231:6735":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:5940:7375":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:4848:5890":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:9234:2864":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:3580:4823":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:40080:6722":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:11187:7086":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:12605:4241":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:9220:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:4389:5711":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:629:7471":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:3303:2968":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:1818:7527":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:6571:20349":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:6303:4795":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:8068:5177":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:20615:3129":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:4963:5957":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:11573:6833":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:4380:3628":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:4535:5782":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:5051:6001":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:2164:7294":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:6484:4956":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:40378:6742":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:6607:6255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:45612:6892":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:47885:6980":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:8564:7073":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11979:4112":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:41739:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:13749:4550":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"11:403:35492":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:3238:5332":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:43110:3226":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4800:5871":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:1580:5330":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"7:79:19330":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:8150:2978":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:11791:4078":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:256:7284":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:13513:4504":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:10359:3246":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:4374:5704":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:9443:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:21211:1680":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:5614:3606":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:44008:6853":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:4258:7490":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:7833:5136":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"0:0:2333":{"crate_id":0,"path":["byteorder"],"kind":"module"},"17:14282:4709":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"18:736:24372":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:10945:7361":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:1482:7468":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:41461:8156":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:21050:1680":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"5:1672:3568":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:2842:13667":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"11:836:7459":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:42651:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:6787:31900":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:8202:2947":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:541:5465":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:5237:1385":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"1:6063:3665":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:7654:3351":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:8288:8189":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:41581:6792":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:2683:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:47065:6941":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:47809:6976":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:44490:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:10013:3904":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"9:393:19338":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:673:8064":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:12354:4203":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:573:5481":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:5805:6058":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:8893:7078":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:5639:4861":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:22591:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:22078:6500":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:41713:3046":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:12851:4295":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"9:450:19337":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12479:4223":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"11:285:5321":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:7584:7442":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:4562:8208":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:44145:6858":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:3222:2969":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:8176:20357":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:6888:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:2689:4785":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:10410:7581":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:12001:750":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:5651:4800":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:2362:2888":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:5624:3662":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:1717:5632":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:1776:3608":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:10161:7323":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:12006:1517":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:11308:7115":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:5130:3603":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:5773:7553":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:9665:3639":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:532:5459":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11272:7370":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:1928:658":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:47874:6979":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:12878:4298":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:4506:4834":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:12004:1515":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:9274:2948":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:2787:8283":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:4791:3659":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:20947:8300":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:8405:7061":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:1590:5553":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:10906:3974":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:2857:4792":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:10943:27300":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:22657:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:7223:3580":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:5058:6004":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:9614:35524":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:9228:2862":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:6977:7413":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:5617:3661":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11767:4064":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:885:5328":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:12380:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:41663:3238":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:12174:4158":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:47905:6982":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:40368:6740":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:5342:4854":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:9224:2860":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:11123:30264":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:8294:7579":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"18:521:24374":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:9682:3640":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:7465:6450":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:7693:4804":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:1649:5597":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12539:4232":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:5008:5976":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:8542:20393":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:45546:6889":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:12053:4125":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:7407:4904":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:3894:4828":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"12:0:2721":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:9977:7302":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"10:44:5342":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:40885:3359":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:6427:4954":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:44311:6878":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:43624:6828":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:6957:3623":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:13757:4553":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:6980:28604":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:119:14021":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:6692:20350":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"11:2130:19411":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:10345:3248":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:40278:3629":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:2164:2898":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:10293:7328":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"18:96:24362":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:4841:4844":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:8234:7578":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:43464:3241":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:6081:2929":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:12035:4124":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:10199:3912":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:5028:4850":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:11957:8067":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:2516:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:6720:6295":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:564:3748":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6815:5021":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:4368:5703":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:4489:5758":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:3744:4824":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:7264:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:39301:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:11491:7538":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:14044:4625":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:11045:3976":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:2033:5054":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:2399:4773":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"11:2186:35490":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:13620:4520":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"11:1501:19417":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"18:652:3738":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:21557:3306":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:8322:3048":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:8005:7570":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12077:4129":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10845:3971":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:13448:4468":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:9149:7088":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:11832:4082":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:40927:6770":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:41871:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:21798:6474":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:956:7460":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"9:357:19352":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:40350:6737":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12303:4190":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:477:3652":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:854:3238":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:7906:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"13:226:5319":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:2826:5073":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:8209:2948":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:7517:6398":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12579:4238":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:3734:7537":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"13:0:2715":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:22492:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:1681:5615":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:32141:7501":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:7854:7566":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:2900:4794":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:4748:5844":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:39199:13420":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:7684:3361":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:1077:7467":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:4664:5807":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"0:253:2021":{"crate_id":0,"path":["byteorder","NetworkEndian"],"kind":"typedef"},"1:7765:7501":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:3669:8157":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:6589:6248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:12982:4315":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:10051:7315":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:7331:35512":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:9442:35523":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"16:7073:20352":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:45861:6902":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:41569:6791":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:5493:7548":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:40420:6749":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:7558:6407":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:2634:2962":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:4010:7488":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:9485:35522":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:7733:6999":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:13435:4461":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:47999:6988":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:11798:3767":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"18:671:7283":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:13043:4330":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:9806:20426":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"18:590:3749":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:47865:6978":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"11:723:5327":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:1841:7528":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:9990:3902":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:4022:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:2759:4788":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:1911:15370":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:39321:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:7564:6408":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:12574:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:40438:6751":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:4436:2872":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:4436:5733":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:43839:6838":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:9744:35517":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:2804:5069":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:526:5456":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11250:4008":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"16:2352:4771":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:9952:3871":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:615:7517":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:7592:20354":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:39440:5107":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"17:13923:4593":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"11:332:3557":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:6811:8284":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:13016:4328":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:42066:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:7463:6395":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:12010:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:41646:3157":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:11276:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:6531:3553":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"5:7247:3158":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:1629:589":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:47931:6984":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:11542:4036":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:4770:5855":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13125:4339":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:12007:1514":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:43660:3247":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:5424:7546":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:872:5327":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:13771:4556":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:7362:20353":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:10753:7003":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:21460:8293":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:45991:6906":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:7638:1680":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:41490:6783":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:9226:2861":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:4733:8176":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11164:3998":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:2715:4786":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:10799:7354":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:2850:13669":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:515:3741":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:2215:2097":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:635:7520":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:42586:6797":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:1673:5614":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:4027:8166":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:6724:5006":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:527:3653":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:11178:3999":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:12008:796":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"11:1121:7467":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:46727:6936":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:933:8077":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:41949:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:47663:6973":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11241:20539":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:3162:13489":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:2541:4779":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:2243:6432":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:2928:3003":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:908:3608":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:841:3237":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:8872:20411":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:4150:8185":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:4818:5879":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:7339:6443":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:11338:3301":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:3151:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:5925:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:5080:6010":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:11744:8229":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:2265:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:4724:4840":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:12552:3941":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:11199:4003":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:6057:19458":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:14341:4725":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:14395:4735":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:1273:7463":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"11:1831:3608":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:1765:612":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:46043:6908":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:1973:7290":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:41680:3045":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:5320:3568":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:13604:4517":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:7231:13650":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:568:5479":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:9478:2883":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:6136:6199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:11264:4011":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:46491:6920":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:39447:7503":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:8804:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:3183:35455":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:12346:4201":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:7367:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"16:7753:5124":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12815:4290":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12905:4302":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:2799:13662":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11109:3992":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:43962:6843":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:20673:33349":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:8748:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:2152:590":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:10249:7324":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:261:3568":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:7525:3878":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:7595:3681":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:13029:4329":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4955:5952":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:12435:4215":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"18:699:3765":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:11769:3695":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:11150:7087":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:45690:6895":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:43556:2949":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:4518:5774":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:7855:20356":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:5849:6080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"9:486:19336":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11155:3997":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:43574:3243":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"5:276:3007":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:5531:6458":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:46213:6913":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:41427:6774":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:11696:4051":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:41807:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:9875:7307":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:9655:7302":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:579:5484":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:6347:20348":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:10377:3918":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:10621:7352":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:5767:6039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:40429:6750":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:11888:4097":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:4476:4833":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:5841:3590":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:46851:6938":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:12677:3220":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:14301:4714":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:1012:7463":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:6841:6369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:7609:6419":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:12454:7499":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:43940:13451":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:4196:2929":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:44287:6872":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:39160:3353":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:1917:2922":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:9435:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:4764:389":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:21995:6488":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:41595:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:7930:2258":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:12646:4248":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:5829:6067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:6598:6254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:1500:5500":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:8798:7581":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:40660:2947":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:12089:4130":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:9023:7590":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:9887:7308":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:42859:6807":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:7914:7568":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:7227:13651":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:5439:7547":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:13949:4603":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:8899:20412":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:11520:3981":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:10883:3973":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:11996:645":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:2980:8088":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:7799:5132":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:9336:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:43343:3229":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:6539:8248":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4291:5643":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:12412:4212":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:2925:3002":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:4049:8170":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:5807:4880":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:43848:6839":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:23170:6509":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:9571:35521":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:9032:1682":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11388:20417":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:3264:2972":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:41798:3158":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:8166:5185":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:6142:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:624:35529":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:40037:6717":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:45945:6905":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11074:3981":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:12691:4253":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:47969:6986":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:11642:4044":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:6640:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:5836:6071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:40449:6752":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:4441:4832":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:43606:6827":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:9926:7311":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4729:5833":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:40406:6746":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:40151:6728":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"3:0:443":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:13167:4346":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:30351:2917":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:14205:4687":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:6606:3674":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:8924:20413":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:10339:7337":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:44188:6867":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:10361:3916":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"16:6232:7408":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:13882:4584":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:6834:13645":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"14:31:7448":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"11:365:3559":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:1709:5628":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:11260:7110":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:2832:5074":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:5382:1681":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:4045:13416":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"10:0:2719":{"crate_id":10,"path":["adler"],"kind":"module"},"2:4605:13505":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:5994:20346":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:14350:4729":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10633:3934":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:2594:2952":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:41790:3238":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:8537:7069":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"11:1611:3561":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:4568:5800":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:8478:7064":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"11:657:3158":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:5556:8234":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:7546:6405":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12826:4292":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:22624:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:8816:7074":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12106:4138":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:12005:1516":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:11322:3299":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:9886:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:2838:13666":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:7240:35511":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:11234:4007":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:6592:8250":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:5567:4799":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:4230:7539":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:1595:5555":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:2920:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:8192:2946":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:2293:19459":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:2752:8280":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:1732:2919":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:13964:4607":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:8993:24600":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:4862:5898":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:6763:5019":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:1075:7288":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:11099:7074":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:6675:7555":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:7639:6997":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:11987:1534":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:9016:1681":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:2313:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:3596:3238":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:9296:3889":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:21465:8301":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:9230:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:10654:3936":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:2663:4784":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:2960:34966":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"11:736:5328":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:8860:7583":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:41533:6790":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:2223:35446":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:40052:6719":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"11:399:35491":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:6796:6347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:11924:4104":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:6671:6283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"11:1852:5331":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:6536:7557":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:13109:4337":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:755:3779":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:47771:6975":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:5793:6054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:1068:7463":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:1302:7467":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:9528:35518":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"9:177:8013":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:45636:6893":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:21033:8291":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:3455:2938":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:40688:6763":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:10276:3244":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:11943:4105":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:13894:4585":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:2170:6426":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:40064:31398":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:7440:3604":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"15:306:19442":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:6540:4803":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:8159:2943":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:4868:4845":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:7859:7003":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:8455:6808":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:5775:6041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:21569:33230":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:44525:7512":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:21:686":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:5398:1682":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:12002:746":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:10961:7076":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:40124:6717":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:41722:3108":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:12333:4199":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:8997:20392":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:40520:6758":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:1536:5516":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:6864:5027":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:8428:7494":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:43454:3240":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:1746:6453":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"17:11498:4034":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:4389:2871":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:3635:3786":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:2748:2916":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:12502:4228":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:9821:3897":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4606:5802":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"0:254:2024":{"crate_id":0,"path":["byteorder","NativeEndian"],"kind":"typedef"},"16:8105:5183":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:14417:4741":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:878:3576":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:11852:4092":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:7849:3827":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:14259:4708":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:22723:6508":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:41404:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"0:252:2013":{"crate_id":0,"path":["byteorder","LE"],"kind":"typedef"},"6:7586:6413":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:9071:7085":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:7505:4810":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:2762:5067":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:10511:3932":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:123:14022":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:2803:4790":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:39261:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:11600:20419":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"16:4698:4839":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:11007:7366":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:3224:2970":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:5075:7542":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:6800:3619":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:40203:6734":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:4620:4838":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:8906:8254":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:7278:6384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:7889:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:43830:6837":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:10922:5401":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:6250:4936":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:40909:3635":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:14015:4618":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"11:749:3590":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:3317:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:7272:6382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:10303:3826":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:5383:2929":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:39461:6589":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:10080:7317":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:4380:5706":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:4564:4836":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:9096:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:45821:6900":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:47984:6987":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4616:5803":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:5553:4796":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:11293:7114":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:10844:3235":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:12000:749":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:2962:13419":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:49867:8303":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:4446:5739":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:11416:4029":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:7313:35513":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:1451:494":{"crate_id":2,"path":["core","intrinsics","copy_nonoverlapping"],"kind":"function"},"17:12004:4115":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:10981:7364":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:1843:7529":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:2212:7533":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"18:507:3738":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:898:3590":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:9876:1680":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:3346:2956":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:10110:7321":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:2219:2937":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:11038:3687":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:11993:1499":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"11:805:8077":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:410:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:45843:6901":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"18:614:35528":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:11591:4001":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:4335:2870":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:6077:6187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:5025:5984":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:4678:5808":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:45898:6904":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:10808:2943":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:10994:7365":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:4973:5963":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:11243:3689":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:3503:28050":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:43724:6832":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:41910:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:21681:8289":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:3867:4827":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:46357:6917":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:5301:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"16:8043:5174":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:2691:3117":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:40165:13512":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:2705:2875":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:1782:7526":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:5977:13941":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:1138:35367":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:22360:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:4468:8190":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:11669:4045":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:7445:7435":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:13673:4533":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:44588:6888":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:2510:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:42353:2859":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:9971:6787":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:11753:4063":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:10175:3907":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:6554:4968":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:3512:2939":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:9518:7300":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:8740:20407":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:1666:1096":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"0:249:2009":{"crate_id":0,"path":["byteorder","BE"],"kind":"typedef"},"16:2781:4789":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:4716:5829":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11568:20418":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:7575:6412":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:4949:5951":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:1982:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:6018:20347":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:46805:6937":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"11:2194:5337":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5900:6105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:5916:4896":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:4695:5817":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:2695:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:5704:4866":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:4987:2929":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:3993:8165":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:11804:13437":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:5964:3661":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:10430:3923":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:10403:3921":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:6805:6350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:7553:5116":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:41671:3158":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:20847:8294":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"15:327:7999":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:39277:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:6573:6236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:4626:5804":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:3220:4820":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"16:5612:4857":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:6713:5005":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:10123:3900":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:11335:7117":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:42596:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:6022:6170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4929:5940":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:6516:4966":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:13368:4406":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"18:80:24361":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:7295:6394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:21960:6485":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"18:574:3738":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:4409:2873":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"15:288:19441":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:6456:4798":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:8171:2944":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:14189:4683":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:6239:35515":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:35:3564":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13332:4375":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"18:609:7278":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:2966:34965":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"11:2168:5333":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:10724:7603":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:9716:35520":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:6372:4797":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:4463:5745":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:11985:945":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:13870:4578":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"0:336:1681":{"crate_id":0,"path":["byteorder","LittleEndian"],"kind":"enum"},"17:13069:4332":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:40215:31377":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10957:7362":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:43352:3233":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:6036:6175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:11323:7560":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:4685:5810":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:0:1407":{"crate_id":1,"path":["std"],"kind":"module"},"17:10529:4015":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:6214:7400":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:43362:3231":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6502:4964":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:6939:20351":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:41832:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:11210:4004":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:8239:8155":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:3965:8162":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:4957:3037":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:3379:2977":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:2767:5064":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:9180:2617":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:22558:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:13707:4536":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:1288:7461":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:39246:6581":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:2984:8089":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:5720:4868":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:13971:4608":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:21851:6475":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"13:110:35497":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:2737:3118":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:4496:5761":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:4158:8186":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:8215:2949":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:9130:7087":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:8152:4816":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:39387:3303":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:1257:5054":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10323:7331":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:7661:13649":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:5980:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:22099:6504":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:6648:6282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:3494:2617":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:4810:5875":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:11998:751":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:14197:4686":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:12618:4243":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:4787:5866":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:11989:1058":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:9344:35519":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"6:4483:5755":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:43706:6831":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:9028:7591":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:1733:5637":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:8276:7048":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:6872:4805":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:9048:3881":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:6487:3568":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:11534:6829":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"11:760:3608":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:1569:3608":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"11:1538:7470":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:46615:6934":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:10863:3907":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:10223:3914":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:1011:3568":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:9083:3883":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:7657:3352":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:8321:3049":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:1702:5625":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:3078:3305":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:13981:4611":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:14037:4623":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:7494:5114":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13795:4561":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:45658:6894":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:6044:6178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:8553:7072":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:12377:4208":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:944:7457":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11406:3691":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:42851:2887":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:4740:5840":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:5067:4851":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:7184:3221":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:42642:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:5363:20343":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:1780:7525":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:12585:3650":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:4254:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:22111:8159":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:10832:7356":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:4315:5660":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:43444:3242":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"16:4592:4837":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:822:3574":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:9222:2859":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:7658:7561":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:9561:7301":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:11991:1385":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:4475:5750":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:8115:2980":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:11034:7368":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"18:0:2726":{"crate_id":18,"path":["memchr"],"kind":"module"},"11:97:5320":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:10148:7322":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:7476:7485":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:20859:31179":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:47601:6972":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"7:32:19323":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:42367:2862":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"11:793:7468":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:10313:7330":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"18:681:3761":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:4365:3597":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:7761:7565":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:587:5489":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:7233:35452":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:39426:6587":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:42027:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:20811:8292":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:2373:4772":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:482:5428":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:3934:2929":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:21936:6481":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:8354:7051":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:1755:2918":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:13991:4614":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:2243:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:6639:3568":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:10812:3968":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"5:2035:2258":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:9468:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:6983:2976":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:3647:3158":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:2745:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:506:5439":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:3998:7487":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12394:4211":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:40308:3223":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:5979:6154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:11952:8024":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:30126:8158":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:8252:5192":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:7536:7610":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:1663:5608":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:14216:4692":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:2779:5068":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:4382:7541":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:13683:4534":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:14227:4693":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:10058:3238":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:14177:4680":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:1102:35366":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:7547:3612":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:1442:3158":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:2602:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:40871:6765":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:40506:3758":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"18:599:35530":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:7025:5048":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:7329:3005":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:43372:3232":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:46167:6911":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:2589:4781":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:6915:35510":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:4037:8167":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:47920:6983":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:10581:7348":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:6711:6291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:6820:6357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:8868:3158":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:11999:748":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:21679:1680":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:7631:5120":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:25980:6510":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:4490:8191":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:9101:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:21216:8287":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:10330:7334":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:4917:5931":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:3217:35456":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:727:3774":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4328:5670":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:6008:6167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:4879:1010":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:582:3878":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:2162:2897":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:7505:6396":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:2931:3004":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:2611:4782":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:7451:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3156:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:5799:6057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:498:3587":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:6931:7412":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:4396:4831":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4833:5883":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:3722:2258":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:8021:5173":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:2507:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:10969:7363":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:7414:6447":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:4704:5822":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:1574:5329":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:11557:6830":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:10317:3247":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:3836:7538":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13179:4353":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:5737:20345":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7622:7443":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:4842:5889":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:5015:5979":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:3262:2971":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:1921:8117":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:2314:4763":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:11935:7613":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:8210:5107":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:530:4753":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:4764:5852":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:9153:3885":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:12402:33883":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:21987:6487":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:2885:3658":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:582:3129":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:39419:7502":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:11789:7494":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:10034:3237":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:12936:4308":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:2355:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:2694:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:40116:6725":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:8986:7586":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:547:5468":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:8310:7050":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:12592:4240":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:11905:4099":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:11809:13436":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:3409:2929":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:10390:3920":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:13937:4600":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:10066:7316":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:6130:6198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:7727:8066":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:7433:5109":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:10126:3249":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:11111:7075":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:9665:35525":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:21920:6477":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:5689:4863":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:8938:8255":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:42224:7496":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:11566:7121":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:728:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:11454:4031":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:10444:3924":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:8852:3237":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:40158:6729":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:10499:3929":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:13803:4563":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:4811:802":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:4413:5725":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:12994:4317":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:11984:372":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:40919:6768":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:6067:6184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:13697:4535":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:5553:6185":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:44291:6873":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:4944:5949":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:6886:4806":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:4186:2869":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11220:20538":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"0:317:1682":{"crate_id":0,"path":["byteorder","BigEndian"],"kind":"enum"},"1:5374:7543":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"9:52:8002":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:4984:5969":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:4737:8179":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:4630:6277":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"16:149:3551":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:40288:7504":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:1492:7452":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:44134:13452":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:2757:8282":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:4628:6275":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:12526:4229":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:5863:6091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:14329:4723":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:2364:8134":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"0:177:1706":{"crate_id":0,"path":["byteorder","ByteOrder"],"kind":"trait"},"17:13999:4615":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:4263:7491":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:6441:3590":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"5:3802:3608":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"11:798:7454":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:2572:3640":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:4034:3568":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:7263:6442":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:2246:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:7351:8076":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13639:4521":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:0:2725":{"crate_id":17,"path":["object"],"kind":"module"},"17:434:3834":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:6350:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:6744:6307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:42105:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:8830:7075":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:14236:4695":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:44575:5340":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:7384:6444":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"11:2201:6443":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:5740:7549":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:3168:13488":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:4395:2929":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:9409:35526":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:40337:2946":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:10331:3245":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:43526:6821":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:8794:20409":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"11:968:5054":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:42146:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:3181:31964":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:2926:19485":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:10305:7547":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:42185:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:12659:4249":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:4166:2929":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"3:234:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:6834:6366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:5747:7552":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:41546:7048":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:21118:8290":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:45880:6903":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:10075:7527":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:2519:4778":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"11:1822:3158":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:9190:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:1979:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4456:5742":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"11:1517:7469":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:2846:13668":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:4556:5791":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:3171:3237":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:6156:6213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:2133:7291":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:10083:2949":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:47847:6977":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:1426:3238":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:7922:2961":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:47725:6974":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:43106:6815":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:12161:4157":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:7529:6400":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:45590:6891":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:8980:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:12133:4147":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"18:644:3738":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:44155:6862":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:46310:6916":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4908:5925":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:10568:7346":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:10520:3933":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:4814:8175":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:8387:3041":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13862:4577":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"10:36:5341":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:43991:6852":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:2959:3211":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:9483:2884":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:4632:6279":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:4900:4846":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:2513:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:8138:7447":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:9188:3886":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:4395:5713":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"16:5793:4879":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:11329:20416":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:20656:33344":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:11955:4108":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:7745:8107":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:41731:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:30921:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:595:5494":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4341:5680":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:44295:6874":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:5673:20344":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:2318:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:32105:2856":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:43873:6725":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:12009:1572":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:44275:6869":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:4638:5805":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:207:3566":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:5121:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:14315:4716":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:6317:7411":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:45720:6896":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:2470:1680":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:6868:6375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:6155:3669":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:8222:2945":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:11559:30900":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"9:507:5404":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:2773:13659":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:2962:19486":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:6290:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:6423:3359":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:7663:6998":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:20643:33227":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"15:0:2723":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:7515:5115":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:8332:6264":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:6323:4941":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:39365:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:2690:2608":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:7665:4813":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:12010:1138":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:42669:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:44083:6856":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:11341:7118":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:8975:7584":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:12429:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:12622:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:11990:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:13830:4567":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:1506:5503":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:47523:6971":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:6850:5025":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:44303:6876":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:9604:3907":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:10094:27307":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:46915:6940":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:3186:27731":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:4587:5801":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4506:5768":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:7255:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:5233:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:42876:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:11118:3993":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:11992:1415":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:21904:6476":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:14:2051":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:46259:6915":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:9866:7306":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:7648:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:10778:7004":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:2855:13670":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:2825:4791":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:5074:6007":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:3437:2454":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"18:636:3760":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:2378:8138":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:0:825":{"crate_id":6,"path":["libc"],"kind":"module"},"6:62:13967":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:5388:7544":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:40104:6724":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:12711:4254":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:2743:3120":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"18:690:3764":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:47271:6969":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:5100:4852":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:914:7468":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:4753:4841":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:7511:6397":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:7289:5090":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:6242:3661":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:5994:6156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:6028:6173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"11:986:7461":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:0:2724":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:1892:7530":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:5843:4887":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:2783:8281":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"11:695:7453":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:44283:6871":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:9223:3887":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:1527:5511":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:40471:6754":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:44351:6881":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:4236:3237":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:1495:5498":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:5987:6155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:8328:7580":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:2637:4783":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:41988:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:6128:4929":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:43500:6817":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"11:667:7452":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:653:14379":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:44120:6857":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:10788:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:12148:4153":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:46881:6939":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:40132:6726":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:719:3771":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:2049:7475":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:43810:2945":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:40458:6753":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"14:202:13453":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"18:766:24373":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:5068:6005":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13719:4539":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:6565:6231":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:2390:8144":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:12186:4161":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:41510:31370":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:12017:4116":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:8125:7444":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:9188:28099":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:43409:3223":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:11967:4109":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:14359:4731":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:1575:5541":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4723:5830":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:14403:4738":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"18:481:3736":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"11:2180:5335":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:494:5434":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:46137:6910":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:4781:5863":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:1045:5054":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:30949:3129":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:3212:5329":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:1545:5522":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:12318:4194":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:2471:2857":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"18:660:7279":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:6197:7397":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:42888:6808":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:4899:8215":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:44279:6870":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:5737:6014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:4428:3597":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:11098:3988":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:10597:7350":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:7130:30225":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:864:3158":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:10322:27306":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:8844:7076":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:44056:6855":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:4401:5716":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:7876:7005":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"11:2060:7463":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:4550:5789":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:2897:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:2349:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:3373:13471":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:12254:4165":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:9441:141":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"2:43542:2948":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:13854:4576":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:3113:2979":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:7384:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:13096:4336":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:10743:7096":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:5589:6460":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4469:5747":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:2105:20470":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:21110:1680":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:11352:13440":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:11855:13445":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:491:3737":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:3233:13418":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:42360:2861":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:20861:2897":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"9:426:19339":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:3330:3608":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:13659:4529":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:6850:6372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:7306:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:11144:3996":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:10798:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:5471:2929":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:9734:7304":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:44299:6875":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:7738:7000":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:2131:3587":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"11:0:2720":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:13914:4592":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:7523:6399":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:43091:6814":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:8143:2976":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6658:4992":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:1565:3590":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:10766:7104":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:10818:30262":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11429:7536":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:43864:6717":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:8086:5180":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:4041:8168":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:11997:647":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:6160:4934":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:7552:6406":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:2693:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:1631:5585":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:3204:5331":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:30373:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:10165:3234":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:44330:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:4650:5806":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:10786:7353":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:40878:6766":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:22033:31378":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:40094:6723":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:4166:8187":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:40184:6733":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:504:7287":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:42906:6813":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:2380:8139":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:40328:7505":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:5775:4874":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:9218:112":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:30445:31397":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:5368:3216":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:40894:6767":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:3671:3568":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11020:7367":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:2497:4777":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:10544:7342":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:10038:7314":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:46645:6935":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:4113:7489":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:9706:7303":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"14:187:19429":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:1586:5331":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:5044:7542":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:4618:8165":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:5364:3215":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:7012:5045":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:7484:5113":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:5882:6093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:9840:7305":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"11:1103:7466":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:5771:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:3519:7297":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:40043:6718":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:2922:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:3731:7536":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:1690:5621":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"9:330:5381":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:0:2716":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:11547:7120":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:8265:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:10097:7320":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"5:2141:6424":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:13591:4512":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:895:3237":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:4310:7540":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"16:2737:4787":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:7712:8065":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:40397:6745":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:2795:13660":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:6726:6296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:44482:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:7866:7004":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:2519:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:43334:3230":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:4785:31332":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:2791:13661":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13778:4558":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:923:7453":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:7525:4811":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:2740:3000":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:8743:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:4854:5893":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:13566:4510":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:14163:4674":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:1430:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:3178:5330":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:261:7285":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:4032:4829":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:44546:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:9966:3907":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:13905:4589":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:11784:13439":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:14054:4630":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:8632:20404":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:9232:2863":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:3186:7295":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:10877:3236":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:20994:2897":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"9:0:2718":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:10144:7595":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:5890:6098":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:5626:7373":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:6187:7554":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:13055:4331":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:12365:4206":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:632:7518":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:352:7514":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:2700:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:3385:7486":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"11:644:3238":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:8000:7569":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:1513:5506":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:6396:4951":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:43778:6835":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:14150:4668":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11371:4027":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:5990:6461":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"11:119:3555":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:4076:3238":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:8302:7576":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:3042:19487":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4992:5971":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:8916:8022":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:46569:6933":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5955:6142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:11573:7121":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"11:1818:3237":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6386:4950":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:5301:4853":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:4428:5731":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:9179:210":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"16:3058:3782":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:13557:4509":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:4179:8188":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:8771:20408":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:10931:7357":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:3141:3304":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:10238:3243":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:42867:2886":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:46189:6912":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:8605:20391":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:7707:5122":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:488:5431":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"17:9899:3900":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:7213:3590":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"16:4785:4842":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:2590:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:8495:8228":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:500:5436":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:40490:6756":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:20903:8299":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:12367:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:10512:2969":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:8323:3047":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:7374:28515":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:6790:3618":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4420:5729":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:6625:6264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:42898:6812":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:44533:6884":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:4325:3627":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:40530:6759":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:46388:6918":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"11:2049:7461":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:2970:34967":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"16:6986:5044":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:7201:6441":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:10671:20512":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13957:4606":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:11044:3688":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"11:1858:5332":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"16:2421:4774":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:10417:3922":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:9545:1385":{"crate_id":2,"path":["core","slice"],"kind":"module"},"2:43532:6822":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:1562:3158":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"7:0:1562":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6789:5020":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:10748:7098":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:14007:4617":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:5590:4801":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:6560:3158":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:6740:13653":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:11428:4030":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:2816:13664":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4895:5915":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:22085:6503":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:7284:3158":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:400:7286":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:5959:4900":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13732:4545":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:22426:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:8911:31243":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:4735:8178":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:40139:13511":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:7255:3045":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:40359:6739":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:22393:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:4996:4849":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:13456:4469":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:3183:30773":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:7763:20355":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"11:1845:5330":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:10471:3926":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:40900:2977":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:7539:4812":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:42346:2860":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:7463:5110":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:43514:6820":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"11:817:7457":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:2874:4793":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:1638:5589":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:42691:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:32145:6577":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:7277:3006":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:1636:2993":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:43678:3245":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:14102:4667":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:44168:6866":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"16:3025:4817":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"18:707:3767":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"18:113:24363":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:41655:3237":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:10203:3250":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:6705:6289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:2332:4765":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:2443:4775":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:45566:6890":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:10555:7343":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:12631:4245":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:46411:6919":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:11623:4041":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:10518:2967":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:4824:5880":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:10253:7325":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:7540:6404":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12757:4278":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:7292:3158":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:0:497":{"crate_id":2,"path":["core"],"kind":"module"},"17:12792:4289":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13155:4001":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:55:5164":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:40388:6743":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:6139:3650":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:8949:20414":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:3196:13417":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:1557:5531":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:12118:4141":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13492:4499":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:1503:7453":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:32232:3122":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:44563:6887":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:22012:31384":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:8228:7576":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:9850:20427":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:11467:4033":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:782:3571":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:6775:6333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:6438:4955":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:20980:8295":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:47413:6970":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:10234:8236":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:11726:4055":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:1696:5624":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:41782:3237":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:6618:6260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:7698:31241":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:21972:31389":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:14026:4622":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:5818:3663":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:640:8063":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:11608:3249":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:13847:4575":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12566:4237":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:9475:7299":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:7038:5051":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:7022:3677":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:3395:7296":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:6667:4993":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13427:4458":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:5967:6147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:7568:35514":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:11189:4001":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"11:1068:7465":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:30357:2998":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:46091:6909":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:11027:3686":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:3189:27735":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:4872:5904":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:11992:4114":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:3295:4821":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:5414:4855":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:2495:2959":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:7599:6417":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:44307:6877":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:4938:5946":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:22459:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:2921:3001":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:42614:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:12864:4297":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:6308:8377":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:5408:7545":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:46235:6914":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:11056:20537":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:1569:5539":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:4144:6457":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:13787:4559":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:1603:5560":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:47946:6985":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:5956:3603":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:9111:7086":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"14:0:2722":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:9106:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"11:1027:19416":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:9318:3890":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:21235:1680":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:43820:6836":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:44363:13745":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:7679:4814":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:9278:7528":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:554:5471":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:11968:27304":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:3513:3590":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:7576:3679":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:2811:13663":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"9:237:6808":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5920:6121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:6427:7556":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"5:7193:3158":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:21242:8296":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:4908:8216":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:40674:6762":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:10351:3915":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:13548:4505":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:1543:2929":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:3519:2941":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"14:7:7448":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:22690:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:9480:3683":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:30317:2997":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:39454:2870":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:6357:4947":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:1118:34954":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:11084:3983":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:9198:7092":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13083:4335":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:6463:3673":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:11872:4093":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:8874:7077":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:9166:7592":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:9939:7312":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:13140:4343":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:6332:4942":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:40481:6755":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:8283:7049":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:11986:419":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:5882:4890":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:12840:4294":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:21244:6472":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}