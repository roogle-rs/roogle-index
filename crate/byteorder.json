{"root":"0:0:3169","crate_version":"1.5.0","includes_private":false,"index":{"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1579,0],"end":[1579,50]},"visibility":"default","docs":"All types that implement `Write` get methods defined in `WriteBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3779:3461","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_uint128","write_i32","write_i8","write_i24","write_u48","write_f64","write_f32","write_i48","write_u64","write_uint","write_u8","write_u16","write_i128","write_i64","write_u128","write_int","write_i16","write_u24","write_u32","write_int128"],"trait":{"name":"WriteBytesExt","id":"0:106:2500","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"generic":"W"},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:87:3418":{"id":"0:87:3418","crate_id":0,"name":"read_i8_into","span":{"filename":"src/io.rs","begin":[716,4],"end":[719,5]},"visibility":"default","docs":"Reads a sequence of signed 8 bit integers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to read into a `&mut [i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `i8` individually.)\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 251, 3]);\nlet mut dst = [0; 3];\nrdr.read_i8_into(&mut dst).unwrap();\nassert_eq!([2, -5, 3], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:234:2797":{"id":"0:234:2797","crate_id":0,"name":"write_i16_into","span":{"filename":"src/lib.rs","begin":[1456,4],"end":[1461,5]},"visibility":"default","docs":"Writes signed 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:239:2807":{"id":"0:239:2807","crate_id":0,"name":"write_f64_into","span":{"filename":"src/lib.rs","begin":[1598,4],"end":[1603,5]},"visibility":"default","docs":"Writes IEEE754 double-precision (8 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"f64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:45861:3929-0:322:2532":{"id":"a:2:45861:3929-0:322:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:45861:3929","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:46:2645":{"id":"0:46:2645","crate_id":0,"name":"read_i48","span":{"filename":"src/io.rs","begin":[295,4],"end":[299,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x9d, 0x71, 0xab, 0xe7, 0x97, 0x8f]);\nassert_eq!(-108363435763825, rdr.read_i48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:100:2762":{"id":"0:100:2762","crate_id":0,"name":"read_f64_into","span":{"filename":"src/io.rs","begin":[987,4],"end":[994,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:331:921":{"id":"0:331:921","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1812,33],"end":[1812,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"__H"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:11233:169","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:335":{"id":"0:335","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:35993:260","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"2:3188:150":{"id":"2:3188:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}}},"0:154:2691":{"id":"0:154:2691","crate_id":0,"name":"write_int128","span":{"filename":"src/io.rs","begin":[1508,4],"end":[1516,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i128"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:3189:1925":{"id":"2:3189:1925","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:46033:239","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:3181:878":{"id":"2:3181:878","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:55:2593":{"id":"0:55:2593","crate_id":0,"name":"read_u128","span":{"filename":"src/io.rs","begin":[376,4],"end":[380,5]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83,\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83\n]);\nassert_eq!(16947640962301618749969007319746179, rdr.read_u128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:254:60":{"id":"0:254:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1846,4],"end":[1848,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:348":{"id":"0:348","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,33],"end":[1842,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:11225:165","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:349:921"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,16],"end":[1812,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3403:121","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:58:2655":{"id":"0:58:2655","crate_id":0,"name":"read_i128","span":{"filename":"src/io.rs","begin":[402,4],"end":[406,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i128::min_value(), rdr.read_i128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:92:2741":{"id":"0:92:2741","crate_id":0,"name":"read_i64_into","span":{"filename":"src/io.rs","begin":[820,4],"end":[827,5]},"visibility":"default","docs":"Reads a sequence of signed 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:265:2569":{"id":"0:265:2569","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[1960,4],"end":[1966,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:275:2624":{"id":"0:275:2624","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2012,4],"end":[2023,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:320:2849":{"id":"0:320:2849","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2280,4],"end":[2289,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:200:2655":{"id":"0:200:2655","crate_id":0,"name":"read_i128","span":{"filename":"src/lib.rs","begin":[656,4],"end":[658,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:317:2821":{"id":"0:317:2821","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2253,4],"end":[2259,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:4057:1938":{"id":"2:4057:1938","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:43492:7448","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:45861:3929-0:340:2531":{"id":"a:2:45861:3929-0:340:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:45861:3929","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:35993:260","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:248:2849":{"id":"0:248:2849","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[1786,4],"end":[1786,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 single-precision (4 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:319:2829":{"id":"0:319:2829","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2271,4],"end":[2277,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2860-0:322:2532":{"id":"b:2:2860-0:322:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2862:3665"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:309:2713":{"id":"0:309:2713","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2209,4],"end":[2211,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:251:60":{"id":"0:251:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1816,4],"end":[1818,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:242:2825":{"id":"0:242:2825","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[1660,4],"end":[1660,43]},"visibility":"default","docs":"Converts the given slice of unsigned 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u64(&mut numbers);\nassert_eq!(numbers, [5u64.to_be(), 65000u64.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:330":{"id":"0:330","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,33],"end":[1812,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:11225:165","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:331:921"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:61:2569":{"id":"0:61:2569","crate_id":0,"name":"read_uint","span":{"filename":"src/io.rs","begin":[427,4],"end":[431,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0x74, 0xfa]);\nassert_eq!(8418554, rdr.read_uint::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:23:3318":{"id":"0:23:3318","crate_id":0,"name":"read_i8","span":{"filename":"src/io.rs","begin":[85,4],"end":[89,5]},"visibility":"default","docs":"Reads a signed 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![0x02, 0xfb]);\nassert_eq!(2, rdr.read_i8().unwrap());\nassert_eq!(-5, rdr.read_i8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:181:2572":{"id":"0:181:2572","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[269,4],"end":[269,35]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:216:2713":{"id":"0:216:2713","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[1020,4],"end":[1020,50]},"visibility":"default","docs":"Reads unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:229:2769":{"id":"0:229:2769","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[1330,4],"end":[1330,51]},"visibility":"default","docs":"Writes unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:186:2603":{"id":"0:186:2603","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[368,4],"end":[368,55]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:195:2629":{"id":"0:195:2629","crate_id":0,"name":"read_i16","span":{"filename":"src/lib.rs","begin":[546,4],"end":[548,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i16"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:197:2640":{"id":"0:197:2640","crate_id":0,"name":"read_i32","span":{"filename":"src/lib.rs","begin":[590,4],"end":[592,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3190-0:322:2532":{"id":"b:2:3190-0:322:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3193:150","2:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:3408:263-0:340:2531":{"id":"a:2:3408:263-0:340:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:341":{"id":"0:341","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,9],"end":[1842,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:342:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:88:2731":{"id":"0:88:2731","crate_id":0,"name":"read_i16_into","span":{"filename":"src/io.rs","begin":[747,4],"end":[754,5]},"visibility":"default","docs":"Reads a sequence of signed 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"5:821:4079":{"id":"5:821:4079","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:352:516":{"id":"0:352:516","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1842,39],"end":[1842,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:34751:208","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:221:2741":{"id":"0:221:2741","crate_id":0,"name":"read_i64_into","span":{"filename":"src/lib.rs","begin":[1148,4],"end":[1153,5]},"visibility":"default","docs":"Reads signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:292:2560":{"id":"0:292:2560","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[2128,4],"end":[2130,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:25:2560":{"id":"0:25:2560","crate_id":0,"name":"read_u16","span":{"filename":"src/io.rs","begin":[112,4],"end":[116,5]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:316:2816":{"id":"0:316:2816","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2244,4],"end":[2250,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:3408:263-0:322:2532":{"id":"a:2:3408:263-0:322:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:52:2650":{"id":"0:52:2650","crate_id":0,"name":"read_i64","span":{"filename":"src/io.rs","begin":[347,4],"end":[351,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i64::min_value(), rdr.read_i64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:5:817-0:340:2531":{"id":"b:5:817-0:340:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:813:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["5:819:4077","5:820:4078","5:821:4079"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:222:2745":{"id":"0:222:2745","crate_id":0,"name":"read_i128_into","span":{"filename":"src/lib.rs","begin":[1177,4],"end":[1182,5]},"visibility":"default","docs":"Reads signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:96:2752":{"id":"0:96:2752","crate_id":0,"name":"read_f32_into","span":{"filename":"src/io.rs","begin":[902,4],"end":[909,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:28:2629":{"id":"0:28:2629","crate_id":0,"name":"read_i16","span":{"filename":"src/io.rs","begin":[139,4],"end":[143,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0xc1, 0xff, 0x7c]);\nassert_eq!(193, rdr.read_i16::<BigEndian>().unwrap());\nassert_eq!(-132, rdr.read_i16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:79:2705":{"id":"0:79:2705","crate_id":0,"name":"read_u16_into","span":{"filename":"src/io.rs","begin":[562,4],"end":[569,5]},"visibility":"default","docs":"Reads a sequence of unsigned 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:83:2719":{"id":"0:83:2719","crate_id":0,"name":"read_u64_into","span":{"filename":"src/io.rs","begin":[635,4],"end":[642,5]},"visibility":"default","docs":"Reads a sequence of unsigned 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:244:2834":{"id":"0:244:2834","crate_id":0,"name":"from_slice_i16","span":{"filename":"src/lib.rs","begin":[1699,4],"end":[1704,5]},"visibility":"default","docs":"Converts the given slice of signed 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 6500];\nBigEndian::from_slice_i16(&mut numbers);\nassert_eq!(numbers, [5i16.to_be(), 6500i16.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2863-0:340:2531":{"id":"b:2:2863-0:340:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2865:27994"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:337:739":{"id":"0:337:739","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:340:2531":{"id":"0:340:2531","crate_id":0,"name":"LittleEndian","span":{"filename":"src/lib.rs","begin":[1843,0],"end":[1843,24]},"visibility":"public","docs":"Defines little-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"has_stripped_variants":false,"variants":[],"impls":["a:2:35991:251-0:340:2531","a:2:3408:263-0:340:2531","a:2:3443:3977-0:340:2531","a:2:36049:3890-0:340:2531","a:2:45861:3929-0:340:2531","a:2:45862:3928-0:340:2531","b:2:2860-0:340:2531","b:2:2863-0:340:2531","b:2:2918-0:340:2531","b:2:3175-0:340:2531","b:2:3179-0:340:2531","b:2:3185-0:340:2531","b:2:3190-0:340:2531","b:2:4055-0:340:2531","b:5:817-0:340:2531","0:341","0:343","0:344","0:346","0:348","0:351","0:353","0:354","0:356","0:253","0:291"]}}},"0:34:2634":{"id":"0:34:2634","crate_id":0,"name":"read_i24","span":{"filename":"src/io.rs","begin":[191,4],"end":[195,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:160:2696":{"id":"0:160:2696","crate_id":0,"name":"write_f64","span":{"filename":"src/io.rs","begin":[1570,4],"end":[1574,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian double-precision floating point number to a `Write`:\n\n```rust\nuse std::f64;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f64::<BigEndian>(f64::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x09\\x21\\xfb\\x54\\x44\\x2d\\x18\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:180:2568":{"id":"0:180:2568","crate_id":0,"name":"read_u24","span":{"filename":"src/lib.rs","begin":[248,4],"end":[250,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:280:2725":{"id":"0:280:2725","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2041,4],"end":[2043,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:194:2624":{"id":"0:194:2624","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[526,4],"end":[526,61]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"b:2:3190-0:340:2531":{"id":"b:2:3190-0:340:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3193:150","2:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:345:847":{"id":"0:345:847","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1842,22],"end":[1842,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10972:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10953:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:355:739":{"id":"0:355:739","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:12-0:106:2500":{"id":"0:12-0:106:2500","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,34],"end":[82,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"use":{"source":"crate::io::WriteBytesExt","name":"WriteBytesExt","id":"0:106:2500","is_glob":false}}},"0:294:2586":{"id":"0:294:2586","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[2138,4],"end":[2140,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:43:2579":{"id":"0:43:2579","crate_id":0,"name":"read_u48","span":{"filename":"src/io.rs","begin":[269,4],"end":[273,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xb6, 0x71, 0x6b, 0xdc, 0x2b, 0x31]);\nassert_eq!(200598257150769, rdr.read_u48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:243:2829":{"id":"0:243:2829","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[1679,4],"end":[1679,45]},"visibility":"default","docs":"Converts the given slice of unsigned 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u128(&mut numbers);\nassert_eq!(numbers, [5u128.to_be(), 65000u128.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:342:508":{"id":"0:342:508","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1842,9],"end":[1842,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:230:2772":{"id":"0:230:2772","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[1353,4],"end":[1353,51]},"visibility":"default","docs":"Writes unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1938,0],"end":[2124,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_f32_into","write_i32","write_u48","write_i24","read_i32_into","write_i64_into","read_i16_into","write_i8_into","write_f64_into","read_i128","from_slice_i32","read_u48","read_i32","read_i24","read_f64_into","write_i128","write_i64","write_int","write_i16","write_u24","read_i64_into","read_f32","write_i32_into","read_int128","write_f32_into","read_i64","from_slice_i64","read_f64_into_unchecked","read_int","read_u24","read_i16","write_f32","write_f64","write_i48","read_i128_into","read_f64","write_i128_into","write_i16_into","from_slice_i128","read_i48","from_slice_i16","read_f32_into_unchecked","write_int128"],"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:261:2560","0:262:2572","0:263:2586","0:264:2593","0:265:2569","0:267:2603","0:269:2608","0:270:2613","0:271:2617","0:272:2619","0:273:2611","0:275:2624","0:277:2705","0:278:2713","0:279:2719","0:280:2725","0:281:2769","0:282:2772","0:283:2775","0:284:2778","0:285:2816","0:286:2821","0:287:2825","0:288:2829","0:289:2849","0:290:2851"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:237:2803":{"id":"0:237:2803","crate_id":0,"name":"write_i128_into","span":{"filename":"src/lib.rs","begin":[1540,4],"end":[1545,5]},"visibility":"default","docs":"Writes signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:35991:251-0:322:2532":{"id":"a:2:35991:251-0:322:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:35991:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:90:2737":{"id":"0:90:2737","crate_id":0,"name":"read_i32_into","span":{"filename":"src/io.rs","begin":[782,4],"end":[789,5]},"visibility":"default","docs":"Reads a sequence of signed 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:35991:251-0:340:2531":{"id":"a:2:35991:251-0:340:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:35991:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"a:2:45862:3928-0:322:2532":{"id":"a:2:45862:3928-0:322:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:45862:3928","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:272:2619":{"id":"0:272:2619","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[1993,4],"end":[1995,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3185-0:340:2531":{"id":"b:2:3185-0:340:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3188:150","2:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:49:2586":{"id":"0:49:2586","crate_id":0,"name":"read_u64","span":{"filename":"src/io.rs","begin":[321,4],"end":[325,5]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83]);\nassert_eq!(918733457491587, rdr.read_u64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:220:2737":{"id":"0:220:2737","crate_id":0,"name":"read_i32_into","span":{"filename":"src/lib.rs","begin":[1119,4],"end":[1124,5]},"visibility":"default","docs":"Reads signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:339:1374":{"id":"0:339:1374","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1812,55],"end":[1812,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:34751:208","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:115:2610":{"id":"0:115:2610","crate_id":0,"name":"write_u24","span":{"filename":"src/io.rs","begin":[1205,4],"end":[1209,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u24::<BigEndian>(267).unwrap();\nwtr.write_u24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\x00\\x01\\x0b\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:31:2568":{"id":"0:31:2568","crate_id":0,"name":"read_u24","span":{"filename":"src/io.rs","begin":[165,4],"end":[169,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:308:2705":{"id":"0:308:2705","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2204,4],"end":[2206,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:193:2611":{"id":"0:193:2611","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[506,4],"end":[506,57]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"2:3193:150":{"id":"2:3193:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Infallible","id":"2:35915:3707","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"0:184:2593":{"id":"0:184:2593","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[328,4],"end":[328,37]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:217:2719":{"id":"0:217:2719","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[1043,4],"end":[1043,50]},"visibility":"default","docs":"Reads unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:283:2775":{"id":"0:283:2775","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2056,4],"end":[2058,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:313:2772":{"id":"0:313:2772","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2229,4],"end":[2231,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:127:2615":{"id":"0:127:2615","crate_id":0,"name":"write_u48","span":{"filename":"src/io.rs","begin":[1313,4],"end":[1317,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u48::<BigEndian>(52360336390828).unwrap();\nwtr.write_u48::<BigEndian>(541).unwrap();\nassert_eq!(wtr, b\"\\x2f\\x9f\\x17\\x40\\x3a\\xac\\x00\\x00\\x00\\x00\\x02\\x1d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:121:2613":{"id":"0:121:2613","crate_id":0,"name":"write_u32","span":{"filename":"src/io.rs","begin":[1259,4],"end":[1263,5]},"visibility":"default","docs":"Writes an unsigned 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u32::<BigEndian>(267).unwrap();\nwtr.write_u32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\x00\\x00\\x01\\x0b\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3175-0:322:2532":{"id":"b:2:3175-0:322:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3178:4010"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:36049:3890-0:340:2531":{"id":"a:2:36049:3890-0:340:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:36049:3890","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:354":{"id":"0:354","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2952:213","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:355:739"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:215:2705":{"id":"0:215:2705","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[997,4],"end":[997,50]},"visibility":"default","docs":"Reads unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:314:2775":{"id":"0:314:2775","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2234,4],"end":[2236,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:3194:1923":{"id":"2:3194:1923","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:46033:239","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:3443:3977-0:340:2531":{"id":"a:2:3443:3977-0:340:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3443:3977","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:112:2677":{"id":"0:112:2677","crate_id":0,"name":"write_i16","span":{"filename":"src/io.rs","begin":[1178,4],"end":[1182,5]},"visibility":"default","docs":"Writes a signed 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i16::<BigEndian>(193).unwrap();\nwtr.write_i16::<BigEndian>(-132).unwrap();\nassert_eq!(wtr, b\"\\x00\\xc1\\xff\\x7c\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i16"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:277:2705":{"id":"0:277:2705","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2026,4],"end":[2028,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:2920:27995":{"id":"2:2920:27995","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"is_mutable":true,"type":{"generic":"T"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:11-0:20:2499":{"id":"0:11-0:20:2499","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,20],"end":[82,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"use":{"source":"crate::io::ReadBytesExt","name":"ReadBytesExt","id":"0:20:2499","is_glob":false}}},"0:231:2775":{"id":"0:231:2775","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[1376,4],"end":[1376,51]},"visibility":"default","docs":"Writes unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"5:819:4077":{"id":"5:819:4077","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"0:136:2686":{"id":"0:136:2686","crate_id":0,"name":"write_i64","span":{"filename":"src/io.rs","begin":[1394,4],"end":[1398,5]},"visibility":"default","docs":"Writes a signed 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i64::<BigEndian>(i64::min_value()).unwrap();\nwtr.write_i64::<BigEndian>(i64::max_value()).unwrap();\nassert_eq!(wtr, b\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:286:2821":{"id":"0:286:2821","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2075,4],"end":[2081,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:246:2842":{"id":"0:246:2842","crate_id":0,"name":"from_slice_i64","span":{"filename":"src/lib.rs","begin":[1749,4],"end":[1754,5]},"visibility":"default","docs":"Converts the given slice of signed 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i64(&mut numbers);\nassert_eq!(numbers, [5i64.to_be(), 65000i64.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:37:2572":{"id":"0:37:2572","crate_id":0,"name":"read_u32","span":{"filename":"src/io.rs","begin":[217,4],"end":[221,5]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:322:2532":{"id":"0:322:2532","crate_id":0,"name":"BigEndian","span":{"filename":"src/lib.rs","begin":[1813,0],"end":[1813,21]},"visibility":"public","docs":"Defines big-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 4];\nBigEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, BigEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"has_stripped_variants":false,"variants":[],"impls":["a:2:35991:251-0:322:2532","a:2:3408:263-0:322:2532","a:2:3443:3977-0:322:2532","a:2:36049:3890-0:322:2532","a:2:45861:3929-0:322:2532","a:2:45862:3928-0:322:2532","b:2:2860-0:322:2532","b:2:2863-0:322:2532","b:2:2918-0:322:2532","b:2:3175-0:322:2532","b:2:3179-0:322:2532","b:2:3185-0:322:2532","b:2:3190-0:322:2532","b:2:4055-0:322:2532","b:5:817-0:322:2532","0:323","0:325","0:326","0:328","0:330","0:333","0:335","0:336","0:338","0:250","0:260"]}}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1049,0],"end":[1049,48]},"visibility":"default","docs":"All types that implement `Read` get methods defined in `ReadBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3722:3299","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["read_u16","read_f32_into","read_i32_into","read_uint128","read_i16_into","read_u128_into","read_i128","read_u64_into","read_u32_into","read_u48","read_i32","read_i24","read_f64_into","read_i64_into","read_u8","read_f32","read_int128","read_u64","read_i64","read_i8_into","read_u16_into","read_f64_into_unchecked","read_int","read_u24","read_i16","read_i128_into","read_i8","read_f64","read_u128","read_i48","read_u32","read_uint","read_f32_into_unchecked"],"trait":{"name":"ReadBytesExt","id":"0:20:2499","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"generic":"R"},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:185:2569":{"id":"0:185:2569","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[348,4],"end":[348,51]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:219:2731":{"id":"0:219:2731","crate_id":0,"name":"read_i16_into","span":{"filename":"src/lib.rs","begin":[1090,4],"end":[1095,5]},"visibility":"default","docs":"Reads signed 16 bit integers from `src` to `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:328":{"id":"0:328","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,29],"end":[1812,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2957:147","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:70:2662":{"id":"0:70:2662","crate_id":0,"name":"read_int128","span":{"filename":"src/io.rs","begin":[468,4],"end":[472,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:334:516":{"id":"0:334:516","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1812,39],"end":[1812,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:34751:208","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:218:2725":{"id":"0:218:2725","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[1066,4],"end":[1066,52]},"visibility":"default","docs":"Reads unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:310:2719":{"id":"0:310:2719","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2214,4],"end":[2216,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:285:2816":{"id":"0:285:2816","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2066,4],"end":[2072,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:303:2619":{"id":"0:303:2619","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[2179,4],"end":[2181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:226:2762":{"id":"0:226:2762","crate_id":0,"name":"read_f64_into","span":{"filename":"src/lib.rs","begin":[1269,4],"end":[1275,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:321:2851":{"id":"0:321:2851","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2292,4],"end":[2301,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:36049:3890-0:322:2532":{"id":"a:2:36049:3890-0:322:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:36049:3890","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:2:3179-0:322:2532":{"id":"b:2:3179-0:322:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:2862:3665":{"id":"2:2862:3665","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:336":{"id":"0:336","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2952:213","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:337:739"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:281:2769":{"id":"0:281:2769","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2046,4],"end":[2048,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:191:2617":{"id":"0:191:2617","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[467,4],"end":[467,41]},"visibility":"default","docs":"Writes an unsigned 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"b:2:2863-0:322:2532":{"id":"b:2:2863-0:322:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2865:27994"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:209:2686":{"id":"0:209:2686","crate_id":0,"name":"write_i64","span":{"filename":"src/lib.rs","begin":[858,4],"end":[860,5]},"visibility":"default","docs":"Writes a signed 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:271:2617":{"id":"0:271:2617","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[1988,4],"end":[1990,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:212:2691":{"id":"0:212:2691","crate_id":0,"name":"write_int128","span":{"filename":"src/lib.rs","begin":[926,4],"end":[928,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i128"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:245:2838":{"id":"0:245:2838","crate_id":0,"name":"from_slice_i32","span":{"filename":"src/lib.rs","begin":[1724,4],"end":[1729,5]},"visibility":"default","docs":"Converts the given slice of signed 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i32(&mut numbers);\nassert_eq!(numbers, [5i32.to_be(), 65000i32.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2126,0],"end":[2302,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_f32_into","write_i32","write_u48","write_i24","read_i32_into","write_i64_into","read_i16_into","write_i8_into","write_f64_into","read_i128","from_slice_i32","read_u48","read_i32","read_i24","read_f64_into","write_i128","write_i64","write_int","write_i16","write_u24","read_i64_into","read_f32","write_i32_into","read_int128","write_f32_into","read_i64","from_slice_i64","read_f64_into_unchecked","read_int","read_u24","read_i16","write_f32","write_f64","write_i48","read_i128_into","read_f64","write_i128_into","write_i16_into","from_slice_i128","read_i48","from_slice_i16","read_f32_into_unchecked","write_int128"],"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:292:2560","0:293:2572","0:294:2586","0:295:2593","0:296:2569","0:298:2603","0:300:2608","0:301:2613","0:302:2617","0:303:2619","0:304:2611","0:306:2624","0:308:2705","0:309:2713","0:310:2719","0:311:2725","0:312:2769","0:313:2772","0:314:2775","0:315:2778","0:316:2816","0:317:2821","0:318:2825","0:319:2829","0:320:2849","0:321:2851"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:278:2713":{"id":"0:278:2713","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2031,4],"end":[2033,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:333":{"id":"0:333","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,39],"end":[1812,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2988:207","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:334:516"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:302:2617":{"id":"0:302:2617","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[2174,4],"end":[2176,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:67:2603":{"id":"0:67:2603","crate_id":0,"name":"read_uint128","span":{"filename":"src/io.rs","begin":[460,4],"end":[464,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3185-0:322:2532":{"id":"b:2:3185-0:322:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3188:150","2:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:40:2640":{"id":"0:40:2640","crate_id":0,"name":"read_i32","span":{"filename":"src/io.rs","begin":[243,4],"end":[247,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:233:2792":{"id":"0:233:2792","crate_id":0,"name":"write_i8_into","span":{"filename":"src/lib.rs","begin":[1428,4],"end":[1433,5]},"visibility":"default","docs":"Writes signed 8 bit integers from `src` into `dst`.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to write from a `&[i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `u8` individually.)\n\n# Panics\n\nPanics when `buf.len() != src.len()`.\n\n# Examples\n\nWrite and read `i8` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian, ReadBytesExt};\n\nlet mut bytes = [0; 4];\nlet numbers_given = [1, 2, 0xf, 0xe];\nLittleEndian::write_i8_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nbytes.as_ref().read_i8_into(&mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:196:2634":{"id":"0:196:2634","crate_id":0,"name":"read_i24","span":{"filename":"src/lib.rs","begin":[568,4],"end":[570,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:211:2680":{"id":"0:211:2680","crate_id":0,"name":"write_int","span":{"filename":"src/lib.rs","begin":[903,4],"end":[905,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:324:508":{"id":"0:324:508","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1812,9],"end":[1812,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:178:2556":{"id":"0:178:2556","crate_id":0,"name":"ByteOrder","span":{"filename":"src/lib.rs","begin":[212,0],"end":[1794,1]},"visibility":"public","docs":"`ByteOrder` describes types that can serialize integers as bytes.\n\nNote that `Self` does not appear anywhere in this trait's definition!\nTherefore, in order to use it, you'll need to use syntax like\n`T::read_u16(&[0, 1])` where `T` implements `ByteOrder`.\n\nThis crate provides two types that implement `ByteOrder`: [`BigEndian`]\nand [`LittleEndian`].\nThis trait is sealed and cannot be implemented for callers to avoid\nbreaking backwards compatibility when adding new derived traits.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, BigEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:179:2560","0:180:2568","0:181:2572","0:182:2579","0:183:2586","0:184:2593","0:185:2569","0:186:2603","0:187:2608","0:188:2610","0:189:2613","0:190:2615","0:191:2617","0:192:2619","0:193:2611","0:194:2624","0:195:2629","0:196:2634","0:197:2640","0:198:2645","0:199:2650","0:200:2655","0:201:2635","0:202:2662","0:203:2668","0:204:2675","0:205:2677","0:206:2679","0:207:2682","0:208:2684","0:209:2686","0:210:2689","0:211:2680","0:212:2691","0:213:2693","0:214:2696","0:215:2705","0:216:2713","0:217:2719","0:218:2725","0:219:2731","0:220:2737","0:221:2741","0:222:2745","0:223:2752","0:225:2758","0:226:2762","0:228:2766","0:229:2769","0:230:2772","0:231:2775","0:232:2778","0:233:2792","0:234:2797","0:235:2799","0:236:2801","0:237:2803","0:238:2805","0:239:2807","0:240:2816","0:241:2821","0:242:2825","0:243:2829","0:244:2834","0:245:2838","0:246:2842","0:247:2846","0:248:2849","0:249:2851"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3403:121","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:11005:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:3227:127","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2957:147","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11225:165","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"2:2988:207","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2952:213","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2994:214","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"private::Sealed","id":"0:175:2530","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:260","0:291"]}}},"0:85:2725":{"id":"0:85:2725","crate_id":0,"name":"read_u128_into","span":{"filename":"src/io.rs","begin":[673,4],"end":[683,5]},"visibility":"default","docs":"Reads a sequence of unsigned 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:323":{"id":"0:323","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,9],"end":[1812,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:324:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:279:2719":{"id":"0:279:2719","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2036,4],"end":[2038,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"5:820:4078":{"id":"5:820:4078","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:182:2579":{"id":"0:182:2579","crate_id":0,"name":"read_u48","span":{"filename":"src/lib.rs","begin":[288,4],"end":[290,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:192:2619":{"id":"0:192:2619","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[486,4],"end":[486,43]},"visibility":"default","docs":"Writes an unsigned 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:213:2693":{"id":"0:213:2693","crate_id":0,"name":"write_f32","span":{"filename":"src/lib.rs","begin":[949,4],"end":[951,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"f32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:106:2500":{"id":"0:106:2500","crate_id":0,"name":"WriteBytesExt","span":{"filename":"src/io.rs","begin":[1073,0],"end":[1575,1]},"visibility":"public","docs":"Extends [`Write`] with methods for writing numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a [`Write`]:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, vec![2, 5, 3, 0]);\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:107:3472","0:108:3479","0:109:2608","0:112:2677","0:115:2610","0:118:2679","0:121:2613","0:124:2682","0:127:2615","0:130:2684","0:133:2617","0:136:2686","0:139:2619","0:142:2689","0:145:2611","0:148:2680","0:151:2624","0:154:2691","0:157:2693","0:160:2696"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3779:3461","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:163"]}}},"0:81:2713":{"id":"0:81:2713","crate_id":0,"name":"read_u32_into","span":{"filename":"src/io.rs","begin":[597,4],"end":[604,5]},"visibility":"default","docs":"Reads a sequence of unsigned 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:102:2766":{"id":"0:102:2766","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/io.rs","begin":[1039,4],"end":[1044,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Safety\n\nThis method is unsafe because there are no guarantees made about the\nfloating point values. In particular, this method does not check for\nsignaling NaNs, which may result in undefined behavior.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f64_into` instead"},"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:204:2675":{"id":"0:204:2675","crate_id":0,"name":"read_f64","span":{"filename":"src/lib.rs","begin":[748,4],"end":[750,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"f64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:306:2624":{"id":"0:306:2624","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2194,4],"end":[2201,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:73:2668":{"id":"0:73:2668","crate_id":0,"name":"read_f32","span":{"filename":"src/io.rs","begin":[499,4],"end":[503,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian single-precision floating point number from a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n]);\nassert_eq!(f32::consts::PI, rdr.read_f32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"f32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:228:2766":{"id":"0:228:2766","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/lib.rs","begin":[1305,4],"end":[1307,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f64_into` instead"},"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:4055-0:340:2531":{"id":"b:2:4055-0:340:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:188:2610":{"id":"0:188:2610","crate_id":0,"name":"write_u24","span":{"filename":"src/lib.rs","begin":[406,4],"end":[408,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:263:2586":{"id":"0:263:2586","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[1950,4],"end":[1952,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:205:2677":{"id":"0:205:2677","crate_id":0,"name":"write_i16","span":{"filename":"src/lib.rs","begin":[770,4],"end":[772,5]},"visibility":"default","docs":"Writes a signed 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i16"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:357:1374":{"id":"0:357:1374","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1842,55],"end":[1842,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:45765:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:34751:208","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:198:2645":{"id":"0:198:2645","crate_id":0,"name":"read_i48","span":{"filename":"src/lib.rs","begin":[612,4],"end":[614,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:0:3169":{"id":"0:0:3169","crate_id":0,"name":"byteorder","span":{"filename":"src/lib.rs","begin":[1,0],"end":[3975,1]},"visibility":"public","docs":"This crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].\n\nThe organization of the crate is pretty simple. A trait, [`ByteOrder`], specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]\nand [`LittleEndian`] implement these methods. Finally, [`ReadBytesExt`] and\n[`WriteBytesExt`] provide convenience methods available to all types that\nimplement [`Read`] and [`Write`].\n\nAn alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve\ncode clarity.\n\nAn additional alias, [`NativeEndian`], is provided for the endianness of the\nlocal platform. This is convenient when serializing data for use and\nconversions are not desired.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`] type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a [`Write`] type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n\n# Optional Features\n\nThis crate optionally provides support for 128 bit values (`i128` and `u128`)\nwhen built with the `i128` feature enabled.\n\nThis crate can also be used without the standard library.\n\n# Alternatives\n\nNote that as of Rust 1.32, the standard numeric types provide built-in methods\nlike `to_le_bytes` and `from_le_bytes`, which support some of the same use\ncases.\n\n[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness\n[`ByteOrder`]: trait.ByteOrder.html\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`ReadBytesExt`]: trait.ReadBytesExt.html\n[`WriteBytesExt`]: trait.WriteBytesExt.html\n[`NetworkEndian`]: type.NetworkEndian.html\n[`NativeEndian`]: type.NativeEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":["#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:11-0:20:2499","0:12-0:106:2500","0:178:2556","0:322:2532","0:252:2860","0:340:2531","0:255:2864","0:256:2872","0:257:2875"],"is_stripped":false}}},"0:189:2613":{"id":"0:189:2613","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[427,4],"end":[427,41]},"visibility":"default","docs":"Writes an unsigned 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:201:2635":{"id":"0:201:2635","crate_id":0,"name":"read_int","span":{"filename":"src/lib.rs","begin":[679,4],"end":[681,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:139:2619":{"id":"0:139:2619","crate_id":0,"name":"write_u128","span":{"filename":"src/io.rs","begin":[1402,4],"end":[1406,5]},"visibility":"default","docs":"Writes an unsigned 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u128"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:133:2617":{"id":"0:133:2617","crate_id":0,"name":"write_u64","span":{"filename":"src/io.rs","begin":[1367,4],"end":[1371,5]},"visibility":"default","docs":"Writes an unsigned 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u64::<BigEndian>(918733457491587).unwrap();\nwtr.write_u64::<BigEndian>(143).unwrap();\nassert_eq!(wtr, b\"\\x00\\x03\\x43\\x95\\x4d\\x60\\x86\\x83\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:235:2799":{"id":"0:235:2799","crate_id":0,"name":"write_i32_into","span":{"filename":"src/lib.rs","begin":[1484,4],"end":[1489,5]},"visibility":"default","docs":"Writes signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2918-0:322:2532":{"id":"b:2:2918-0:322:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2916:3975","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2920:27995"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:118:2679":{"id":"0:118:2679","crate_id":0,"name":"write_i24","span":{"filename":"src/io.rs","begin":[1232,4],"end":[1236,5]},"visibility":"default","docs":"Writes a signed 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i24::<BigEndian>(-34253).unwrap();\nwtr.write_i24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\xff\\x7a\\x33\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:4055-0:322:2532":{"id":"b:2:4055-0:322:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1815,0],"end":[1819,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3227:127","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:251:60"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:199:2650":{"id":"0:199:2650","crate_id":0,"name":"read_i64","span":{"filename":"src/lib.rs","begin":[634,4],"end":[636,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2860-0:340:2531":{"id":"b:2:2860-0:340:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:35992:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2862:3665"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:817-0:322:2532":{"id":"b:5:817-0:322:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:813:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["5:819:4077","5:820:4078","5:821:4079"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:252:2860":{"id":"0:252:2860","crate_id":0,"name":"BE","span":{"filename":"src/lib.rs","begin":[1824,0],"end":[1824,24]},"visibility":"public","docs":"A type alias for [`BigEndian`].\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:346":{"id":"0:346","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,29],"end":[1842,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2957:147","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:206:2679":{"id":"0:206:2679","crate_id":0,"name":"write_i24","span":{"filename":"src/lib.rs","begin":[792,4],"end":[794,5]},"visibility":"default","docs":"Writes a signed 24 bit integer `n` to `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:225:2758":{"id":"0:225:2758","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/lib.rs","begin":[1242,4],"end":[1244,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f32_into` instead"},"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:349:921":{"id":"0:349:921","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1842,33],"end":[1842,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"__H"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:11233:169","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:282:2772":{"id":"0:282:2772","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2051,4],"end":[2053,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:142:2689":{"id":"0:142:2689","crate_id":0,"name":"write_i128","span":{"filename":"src/io.rs","begin":[1410,4],"end":[1414,5]},"visibility":"default","docs":"Writes a signed 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i128"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:247:2846":{"id":"0:247:2846","crate_id":0,"name":"from_slice_i128","span":{"filename":"src/lib.rs","begin":[1774,4],"end":[1779,5]},"visibility":"default","docs":"Converts the given slice of signed 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i128(&mut numbers);\nassert_eq!(numbers, [5i128.to_be(), 65000i128.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:203:2668":{"id":"0:203:2668","crate_id":0,"name":"read_f32","span":{"filename":"src/lib.rs","begin":[725,4],"end":[727,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"f32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:255:2864":{"id":"0:255:2864","crate_id":0,"name":"LE","span":{"filename":"src/lib.rs","begin":[1854,0],"end":[1854,27]},"visibility":"public","docs":"A type alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:351":{"id":"0:351","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,39],"end":[1842,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2988:207","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:352:516"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:223:2752":{"id":"0:223:2752","crate_id":0,"name":"read_f32_into","span":{"filename":"src/lib.rs","begin":[1207,4],"end":[1213,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:267:2603":{"id":"0:267:2603","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[1969,4],"end":[1975,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:183:2586":{"id":"0:183:2586","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[309,4],"end":[309,35]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:311:2725":{"id":"0:311:2725","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2219,4],"end":[2221,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3175-0:340:2531":{"id":"b:2:3175-0:340:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3178:4010"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:257:2875":{"id":"0:257:2875","crate_id":0,"name":"NativeEndian","span":{"filename":"src/lib.rs","begin":[1891,0],"end":[1891,37]},"visibility":"public","docs":"Defines system native-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\nOn this platform, this is an alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":["#[cfg(target_endian = \"little\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:356":{"id":"0:356","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,55],"end":[1842,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","le","gt","ge"],"trait":{"name":"PartialOrd","id":"2:2994:214","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:357:1374"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:179:2560":{"id":"0:179:2560","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[229,4],"end":[229,35]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:290:2851":{"id":"0:290:2851","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2114,4],"end":[2123,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:344":{"id":"0:344","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,22],"end":[1842,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:11005:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:345:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:301:2613":{"id":"0:301:2613","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[2169,4],"end":[2171,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:109:2608":{"id":"0:109:2608","crate_id":0,"name":"write_u16","span":{"filename":"src/io.rs","begin":[1151,4],"end":[1155,5]},"visibility":"default","docs":"Writes an unsigned 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\\x03\\x00\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u16"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:300:2608":{"id":"0:300:2608","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[2164,4],"end":[2166,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:124:2682":{"id":"0:124:2682","crate_id":0,"name":"write_i32","span":{"filename":"src/io.rs","begin":[1286,4],"end":[1290,5]},"visibility":"default","docs":"Writes a signed 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i32::<BigEndian>(-34253).unwrap();\nwtr.write_i32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\xff\\xff\\x7a\\x33\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,16],"end":[1842,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3403:121","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:284:2778":{"id":"0:284:2778","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2061,4],"end":[2063,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:98:2758":{"id":"0:98:2758","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/io.rs","begin":[948,4],"end":[953,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\n\nReads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f32_into` instead"},"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:273:2611":{"id":"0:273:2611","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[1998,4],"end":[2009,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:145:2611":{"id":"0:145:2611","crate_id":0,"name":"write_uint","span":{"filename":"src/io.rs","begin":[1442,4],"end":[1450,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite unsigned 40 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_uint::<BigEndian>(312550384361, 5).unwrap();\nwtr.write_uint::<BigEndian>(43, 5).unwrap();\nassert_eq!(wtr, b\"\\x48\\xc5\\x74\\x62\\xe9\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:296:2569":{"id":"0:296:2569","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[2148,4],"end":[2153,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:45862:3928-0:340:2531":{"id":"a:2:45862:3928-0:340:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:45862:3928","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"b:2:3179-0:340:2531":{"id":"b:2:3179-0:340:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:287:2825":{"id":"0:287:2825","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2084,4],"end":[2090,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:304:2611":{"id":"0:304:2611","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[2184,4],"end":[2191,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:249:2851":{"id":"0:249:2851","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[1793,4],"end":[1793,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 double-precision (8 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"a:2:3443:3977-0:322:2532":{"id":"a:2:3443:3977-0:322:2532","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3443:3977","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:64:2635":{"id":"0:64:2635","crate_id":0,"name":"read_int","span":{"filename":"src/io.rs","begin":[452,4],"end":[456,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xc1, 0xff, 0x7c]);\nassert_eq!(-4063364, rdr.read_int::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:202:2662":{"id":"0:202:2662","crate_id":0,"name":"read_int128","span":{"filename":"src/lib.rs","begin":[702,4],"end":[704,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:94:2745":{"id":"0:94:2745","crate_id":0,"name":"read_i128_into","span":{"filename":"src/io.rs","begin":[858,4],"end":[868,5]},"visibility":"default","docs":"Reads a sequence of signed 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:190:2615":{"id":"0:190:2615","crate_id":0,"name":"write_u48","span":{"filename":"src/lib.rs","begin":[446,4],"end":[448,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:236:2801":{"id":"0:236:2801","crate_id":0,"name":"write_i64_into","span":{"filename":"src/lib.rs","begin":[1512,4],"end":[1517,5]},"visibility":"default","docs":"Writes signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:293:2572":{"id":"0:293:2572","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[2133,4],"end":[2135,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:295:2593":{"id":"0:295:2593","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[2143,4],"end":[2145,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:270:2613":{"id":"0:270:2613","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[1983,4],"end":[1985,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:312:2769":{"id":"0:312:2769","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2224,4],"end":[2226,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:76:2675":{"id":"0:76:2675","crate_id":0,"name":"read_f64","span":{"filename":"src/io.rs","begin":[530,4],"end":[534,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian double-precision floating point number from a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n]);\nassert_eq!(f64::consts::PI, rdr.read_f64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"f64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1845,0],"end":[1849,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3227:127","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:254:60"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:256:2872":{"id":"0:256:2872","crate_id":0,"name":"NetworkEndian","span":{"filename":"src/lib.rs","begin":[1880,0],"end":[1880,35]},"visibility":"public","docs":"Defines network byte order serialization.\n\nNetwork byte order is defined by [RFC 1700][1] to be big-endian, and is\nreferred to in several protocol specifications.  This type is an alias of\n[`BigEndian`].\n\n[1]: https://tools.ietf.org/html/rfc1700\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, NetworkEndian, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, NetworkEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:151:2624":{"id":"0:151:2624","crate_id":0,"name":"write_uint128","span":{"filename":"src/io.rs","begin":[1493,4],"end":[1501,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:210:2689":{"id":"0:210:2689","crate_id":0,"name":"write_i128","span":{"filename":"src/lib.rs","begin":[880,4],"end":[882,5]},"visibility":"default","docs":"Writes a signed 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read n-byte `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i128"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:187:2608":{"id":"0:187:2608","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[387,4],"end":[387,41]},"visibility":"default","docs":"Writes an unsigned 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_u16(&mut buf, 1_000);\nassert_eq!(1_000, LittleEndian::read_u16(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:148:2680":{"id":"0:148:2680","crate_id":0,"name":"write_int","span":{"filename":"src/io.rs","begin":[1478,4],"end":[1486,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite signed 56 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_int::<BigEndian>(-3548172039376767, 7).unwrap();\nwtr.write_int::<BigEndian>(43, 7).unwrap();\nassert_eq!(wtr, b\"\\xf3\\x64\\xf4\\xd1\\xfd\\xb0\\x81\\x00\\x00\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:3178:4010":{"id":"2:3178:4010","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3152:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:318:2825":{"id":"0:318:2825","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2262,4],"end":[2268,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:20:2499":{"id":"0:20:2499","crate_id":0,"name":"ReadBytesExt","span":{"filename":"src/io.rs","begin":[30,0],"end":[1045,1]},"visibility":"public","docs":"Extends [`Read`] with methods for reading numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`]:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:21:3311","0:23:3318","0:25:2560","0:28:2629","0:31:2568","0:34:2634","0:37:2572","0:40:2640","0:43:2579","0:46:2645","0:49:2586","0:52:2650","0:55:2593","0:58:2655","0:61:2569","0:64:2635","0:67:2603","0:70:2662","0:73:2668","0:76:2675","0:79:2705","0:81:2713","0:83:2719","0:85:2725","0:87:3418","0:88:2731","0:90:2737","0:92:2741","0:94:2745","0:96:2752","0:98:2758","0:100:2762","0:102:2766"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3722:3299","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:104"]}}},"0:157:2693":{"id":"0:157:2693","crate_id":0,"name":"write_f32","span":{"filename":"src/io.rs","begin":[1541,4],"end":[1545,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian single-precision floating point number to a `Write`:\n\n```rust\nuse std::f32;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f32::<BigEndian>(f32::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x49\\x0f\\xdb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:207:2682":{"id":"0:207:2682","crate_id":0,"name":"write_i32","span":{"filename":"src/lib.rs","begin":[814,4],"end":[816,5]},"visibility":"default","docs":"Writes a signed 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:261:2560":{"id":"0:261:2560","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[1940,4],"end":[1942,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:289:2849":{"id":"0:289:2849","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2102,4],"end":[2111,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:315:2778":{"id":"0:315:2778","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2239,4],"end":[2241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:208:2684":{"id":"0:208:2684","crate_id":0,"name":"write_i48","span":{"filename":"src/lib.rs","begin":[836,4],"end":[838,5]},"visibility":"default","docs":"Writes a signed 48 bit integer `n` to `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:107:3472":{"id":"0:107:3472","crate_id":0,"name":"write_u8","span":{"filename":"src/io.rs","begin":[1098,4],"end":[1100,5]},"visibility":"default","docs":"Writes an unsigned 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_u8(2).unwrap();\nwtr.write_u8(5).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:326":{"id":"0:326","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,22],"end":[1812,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:11005:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:327:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:130:2684":{"id":"0:130:2684","crate_id":0,"name":"write_i48","span":{"filename":"src/io.rs","begin":[1340,4],"end":[1344,5]},"visibility":"default","docs":"Writes a signed 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i48::<BigEndian>(-108363435763825).unwrap();\nwtr.write_i48::<BigEndian>(77).unwrap();\nassert_eq!(wtr, b\"\\x9d\\x71\\xab\\xe7\\x97\\x8f\\x00\\x00\\x00\\x00\\x00\\x4d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2556","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:264:2593":{"id":"0:264:2593","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[1955,4],"end":[1957,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:269:2608":{"id":"0:269:2608","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[1978,4],"end":[1980,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:298:2603":{"id":"0:298:2603","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[2156,4],"end":[2161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:2865:27994":{"id":"2:2865:27994","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:327:847":{"id":"0:327:847","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1812,22],"end":[1812,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10972:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10953:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:108:3479":{"id":"0:108:3479","crate_id":0,"name":"write_i8","span":{"filename":"src/io.rs","begin":[1126,4],"end":[1128,5]},"visibility":"default","docs":"Writes a signed 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_i8(2).unwrap();\nwtr.write_i8(-5).unwrap();\nassert_eq!(wtr, b\"\\x02\\xfb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i8"}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2918-0:340:2531":{"id":"b:2:2918-0:340:2531","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2916:3975","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2531","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2920:27995"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:241:2821":{"id":"0:241:2821","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[1641,4],"end":[1641,43]},"visibility":"default","docs":"Converts the given slice of unsigned 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u32(&mut numbers);\nassert_eq!(numbers, [5u32.to_be(), 65000u32.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:232:2778":{"id":"0:232:2778","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[1399,4],"end":[1399,53]},"visibility":"default","docs":"Writes unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:262:2572":{"id":"0:262:2572","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[1945,4],"end":[1947,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:288:2829":{"id":"0:288:2829","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2093,4],"end":[2099,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:240:2816":{"id":"0:240:2816","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[1622,4],"end":[1622,43]},"visibility":"default","docs":"Converts the given slice of unsigned 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u16(&mut numbers);\nassert_eq!(numbers, [5u16.to_be(), 65000u16.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:21:3311":{"id":"0:21:3311","crate_id":0,"name":"read_u8","span":{"filename":"src/io.rs","begin":[55,4],"end":[59,5]},"visibility":"default","docs":"Reads an unsigned 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![2, 5]);\nassert_eq!(2, rdr.read_u8().unwrap());\nassert_eq!(5, rdr.read_u8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3193:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:214:2696":{"id":"0:214:2696","crate_id":0,"name":"write_f64","span":{"filename":"src/lib.rs","begin":[972,4],"end":[974,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"f64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:338":{"id":"0:338","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,55],"end":[1812,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","le","gt","ge"],"trait":{"name":"PartialOrd","id":"2:2994:214","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2532","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:339:1374"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:175:2530":{"id":"0:175:2530","crate_id":0,"name":"Sealed","span":{"filename":"src/lib.rs","begin":[172,4],"end":[172,23]},"visibility":"public","docs":"Sealed stops crates other than byteorder from implementing any traits\nthat use it.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:238:2805":{"id":"0:238:2805","crate_id":0,"name":"write_f32_into","span":{"filename":"src/lib.rs","begin":[1569,4],"end":[1574,5]},"visibility":"default","docs":"Writes IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"f32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"2:43485:8388":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:1966:16308":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"6:571:6247":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:16293:5395":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:3450:3785":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:12940:4675":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:12754:8207":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4813:6414":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:51676:7758":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"17:14563:4920":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:6438:23714":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:7004:7306":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:50356:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:48536:7743":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:9112:4104":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:11545:4565":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:7074:8454":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"8:0:3561":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:2295:3786":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:4998:6520":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:50343:7778":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:45801:4105":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:46611:3712":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:3893:16165":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12336:8190":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:4067:8337":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:2658:5561":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:43355:223":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:37995:16370":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:7449:7126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:46073:4104":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:13933:4790":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:8959:3923":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:1587:168":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:14929:4991":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"11:1886:8323":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:5458:34524":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"2:15:2933":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:3439:5602":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:10529:23786":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"16:8011:5594":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:4269:8323":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:12191:7964":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"11:1672:37357":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:25112:35305":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:5273:6615":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:6779:7009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:8206:5584":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:25089:35300":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:1564:6301":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:10820:8143":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"5:1449:8321":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:26624:7364":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"16:7413:8267":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:51058:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:11659:8150":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:51478:7758":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"17:11581:4566":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:8590:3889":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:15482:5155":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:546:6234":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:1092:8315":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:8950:3924":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"2:4590:8364":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:1712:6394":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:3841:4104":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:51536:7823":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:45958:7659":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"11:1062:22781":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:46604:3710":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"14:222:6063":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:4053:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:2425:8134":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:51004:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:5786:8434":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:3193:239":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"11:1003:5844":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:44322:7593":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:5679:133":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"14:40:4765":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:11555:28128":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:7896:7281":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:46201:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:2878:5571":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:46275:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:47783:4110":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:8782:3819":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:46462:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:6939:5744":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:3443:3977":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"16:7880:5687":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"18:689:4406":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:15956:5286":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:11351:8152":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:3129:35796":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:44621:4400":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:4118:5606":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:51562:7758":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:41920:16371":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:13820:8374":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:2638:5560":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:5204:6580":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:3803:224":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:13523:7696":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:675:9171":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:25123:35306":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:45968:223":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"2:48212:7720":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"18:718:4413":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:7646:28265":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:12362:8192":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:8162:5586":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:3139:35795":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"11:309:6079":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"11:1047:8317":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:11893:8169":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:5436:6687":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:4808:5614":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:12171:8516":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:7417:7115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:13837:16398":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:12437:7970":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:50964:7801":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2:5491:465":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:12856:1957":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:10954:28257":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:11318:8438":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:50397:7780":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"3:741:7290":{"crate_id":3,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"16:6638:8235":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2:47969:7701":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:10410:23782":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6995:5746":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:43377:225":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:5263:6609":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:15645:5206":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:16807:5525":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:26365:7341":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:12830:4656":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"11:1103:8319":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:2948:5574":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"16:3887:4431":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:11225:165":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:48803:8399":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:16026:5303":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:12454:28269":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"14:204:16413":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"18:608:8121":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:5977:9374":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:51355:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:45693:7648":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:4656:16169":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"2:44360:3818":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"2:12315:4110":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:16246:5379":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:44987:3730":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:7198:7313":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:7072:23718":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:36050:3980":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:7088:8458":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"16:7055:5757":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:11243:7848":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"5:310:35584":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:5631:6788":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:5672:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:14448:4902":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:10207:23776":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:5083:5622":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:3677:153":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:6862:7029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:48421:7734":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:14263:4851":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:5576:6758":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:12838:1400":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:1589:4022":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:15797:5244":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:15776:5240":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:49978:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:10181:23775":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:2916:3975":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"17:12742:8206":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:6889:8323":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:6236:8444":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:6754:7000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"6:4972:6507":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:16689:5496":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2:11564:34537":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"17:11860:8168":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:25320:2530":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:48149:16411":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:7279:5809":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15968:5289":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:5296:6629":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:8270:7233":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:1717:4022":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:2594:9268":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"9:346:22717":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:16819:5528":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:5059:6552":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:12000:8172":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:50383:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:4992:6517":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:6040:5581":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"18:659:8122":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:10436:23783":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:14062:4811":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:45559:9286":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:10576:2531":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:12912:4717":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:4898:6473":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:6043:7838":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:828:8322":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:43279:16377":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:13265:23788":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:15901:5270":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:11517:23802":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"2:50680:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:2413:22824":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:596:8130":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13800:4764":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:47167:7680":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:14432:8381":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:8244:7843":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:14711:119":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:11018:3713":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:12819:8212":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:485:8129":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:5159:8141":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:35957:8386":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:44573:7611":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:26279:7329":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:579:6252":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:12050:4477":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:5346:5631":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:51369:7816":{"crate_id":2,"path":["core","core_arch","simd","u32x32"],"kind":"struct"},"2:25151:2530":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:48528:7741":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:6406:5683":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:13831:4409":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:3881:159":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:2215:1445":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:3972:9287":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"11:2146:8317":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:1611:6088":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:12841:23916":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13494:4717":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:6712:6987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:51112:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:3585:5603":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"1:12788:8519":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:50127:7770":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:50464:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:9507:9392":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:50815:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:12834:1245":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:9546:119":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:14888:4986":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:43340:226":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:11571:34539":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"16:8040:37384":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:25633:35311":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:15093:5021":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:6186:5651":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:26602:7362":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:9684:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:12846:780":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:47887:4112":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13735:4741":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:2091:3795":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:3567:3839":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:14503:4911":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:0:3568":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:9765:8373":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"2:12906:4096":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:10534:7645":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"5:1573:4105":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:3341:4104":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:51153:7808":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:36752:5854":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:26224:7328":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:7935:5900":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:26712:7372":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:12280:4117":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:6802:7015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:7829:4022":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:16735:5509":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:8976:7907":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"11:683:4105":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:51580:7758":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1:1021:6089":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:3832:5605":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:1966:8414":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:6720:6988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2:3122:2530":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:12259:4607":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:6370:6808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:50640:7789":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:16618:4768":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:16224:5373":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:2619:9276":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"6:4965:6504":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:7575:7928":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:14734:284":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:13514:4661":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:51180:7809":{"crate_id":2,"path":["core","core_arch","simd","f16x32"],"kind":"struct"},"1:12804:8924":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:51328:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:45861:3929":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:1629:8322":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:12177:7963":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:6981:5597":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12648:4582":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:46892:33868":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:5529:6734":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:12411:7969":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:51342:7815":{"crate_id":2,"path":["core","core_arch","simd","i32x32"],"kind":"struct"},"2:51628:7758":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"6:5342:6646":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:5058:5621":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:5906:8438":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:51416:7817":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:4954:5619":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"11:1878:4104":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:782:8408":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:2627:7264":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:2429:2932":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:46386:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:25081:3991":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"9:413:22704":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:48516:7738":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:25330:9424":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:9434:8489":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:10903:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:13613:23759":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:6620:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:12623:28271":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:12847:797":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:51668:7829":{"crate_id":2,"path":["core","core_arch","x86","__m128h"],"kind":"struct"},"5:7964:8357":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:46425:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:3711:8339":{"crate_id":5,"path":["alloc","collections","btree","set","CursorMutKey"],"kind":"struct"},"1:2343:133":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"17:3527:8138":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:49938:7763":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:2106:9244":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"11:852:8312":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7804:37381":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:5403:6669":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:46864:7671":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:15067:5019":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10591:2532":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:47869:4114":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:8633:23726":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:5687:5636":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:4945:6495":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:3655:3851":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:15983:5293":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:50370:7779":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:50883:7798":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:3660:3849":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"16:6300:5670":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:12430:7970":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:4433:31888":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:12206:4600":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:12849:969":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:11416:28256":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:6935:35584":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:1685:6383":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:1160:35584":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:12436:4113":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:12414:4614":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:3413:3728":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:1234:8131":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:13546:7697":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:492:6198":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:8789:3815":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:8326:7246":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:12820:28124":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:4968:3723":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:3507:16365":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:4402:5611":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"0:322:2532":{"crate_id":0,"path":["byteorder","BigEndian"],"kind":"enum"},"6:5458:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:5333:8142":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:11033:3843":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:7019:9386":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:13580:4679":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"14:0:3566":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"11:123:6078":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:6911:5742":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:5593:6765":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"11:2375:8328":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:6967:5580":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:7912:7282":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"14:216:6061":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:7327:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:49857:7760":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:6689:6978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:11524:7920":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:9129:7919":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:901:8127":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:12040:8175":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:2838:5569":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:6669:6969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:44400:9247":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:13988:4798":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"7:31:22688":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12859:4661":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:50437:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:5015:6530":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:46597:3711":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:15179:4679":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:14683:4937":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:7881:9196":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:4150:5607":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:11274:23802":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:50586:7787":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:5383:6659":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:5552:1039":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:3807:3809":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:4437:3795":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:10484:23785":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"11:2226:6094":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:7714:31889":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:2828:3832":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:51045:7804":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:13914:4785":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"11:1891:8337":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"11:807:8337":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:25204:2530":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:50491:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:12203:4116":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:9102:7915":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:8429:8470":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"18:765:27987":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:4355:9313":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:14990:5000":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:480:6193":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:3683:155":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:25595:2530":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:44464:7596":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:6729:6991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"16:8666:5897":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:26613:7363":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:5122:8432":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:25110:35303":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:6482:6874":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11819:4579":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:4825:9335":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:25099:35300":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"2:44564:7610":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"0:255:2864":{"crate_id":0,"path":["byteorder","LE"],"kind":"type_alias"},"6:5558:6751":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11507:4562":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"17:15806:5245":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:15696:5220":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:51261:7812":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:16400:5421":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:14342:4885":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"1:6399:7838":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:5755:5637":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:5547:6745":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:49951:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:5456:7275":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:3131:7260":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:50262:7775":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:15942:5279":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:9802:3927":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:44418:3821":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:12222:7967":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:51220:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:13897:4783":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:5295:3795":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:25212:9426":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:51301:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:48532:7742":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:44250:7589":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12691:4654":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:51288:7813":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:3524:3843":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:5445:8433":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:1658:6370":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:11005:123":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:5254:9355":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13841:4768":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:10661:8501":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:12271:28267":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:44994:7624":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:48716:176":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:9442:4022":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:45727:7649":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:12408:4112":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:48039:7704":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:8496:8472":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:15358:5061":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:46906:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"16:7551:23721":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:14389:4894":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:822:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:51496:7758":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:46103:208":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:13562:7700":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:6898:8450":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:9047:7910":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:51554:7824":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:3934:35584":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:50775:7794":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:3353:35790":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:6873:5738":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:51646:7758":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"16:6571:5714":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:44451:3816":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:48520:7739":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"16:2770:5566":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:12378:8194":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:2426:8422":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:4536:8429":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:13071:8216":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:10784:3730":{"crate_id":2,"path":["core","fmt","builders","FromFn"],"kind":"struct"},"5:6457:3795":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"11:2135:8316":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:3195:150":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:7977:5592":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:48738:220":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:5063:9319":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:13019:4683":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:12861:1508":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:51514:7758":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"16:5142:5624":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"13:272:6076":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:12855:1951":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:15726:5223":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:4984:6512":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:26554:2530":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:9689:248":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:12101:7675":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"2:35961:5897":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"5:1661:223":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:46349:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:43395:228":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:9448:7923":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:3238:150":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:22:863":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:5025:9334":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:12355:8428":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:50316:7777":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:15149:5028":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:8500:5964":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12779:8209":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"19:0:1370":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:10672:4543":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:15394:5092":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:8525:5967":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"4:0:3560":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13653:4730":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:5253:5628":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:4927:5618":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:7015:4022":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:11433:34535":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"2:3910:34746":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:5135:6567":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11215:37393":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"15:317:22807":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:11672:4568":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:10316:23779":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:2286:3788":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"2:45003:7625":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:8314:7242":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:11648:4582":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:4239:5609":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:14629:4929":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:5414:8433":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:47611:4101":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:25872:9506":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:8847:7895":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:4669:3795":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:14459:4903":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12013:8173":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:1195:8316":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:8570:158":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:1435:8316":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:6729:8263":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:48390:7728":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:9118:7918":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:3128:4077":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:7713:4022":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:1531:6278":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:8504:3833":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:48270:7721":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:5022:9356":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:11634:4523":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:6050:7839":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:47159:7679":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:44211:16194":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:10137:23773":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:2903:3834":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:50505:7784":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:1540:6284":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:3624:16376":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:13762:4749":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:6766:7002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:10005:131":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:5583:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:48841:6102":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:45992:227":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"11:783:6089":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11830:8164":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:16056:5309":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:4922:6487":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:12857:1963":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:26690:7370":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:9109:162":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:11333:28090":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:12854:1969":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:49924:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:36540:5857":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:8336:7248":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:1204:8317":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:1691:6386":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:9378:211":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:7466:35647":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:8581:8473":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:14401:4896":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:50761:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:15629:5203":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"14:189:22794":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:12077:6094":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:7972:30515":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:7504:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:5111:5623":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:7441:35643":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:38168:5863":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:5323:3919":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:13597:4722":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"6:5625:6785":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:14756:7325":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"17:16274:5394":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:14026:4802":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12626:4652":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:15191:5035":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:50707:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:5612:6779":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:51506:7822":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:4240:9303":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:4271:9305":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:50181:7772":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:8852:9333":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:50694:7791":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:45018:7626":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:11850:6163":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:45745:7650":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:1697:6387":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:14576:4622":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:15600:5197":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11799:23820":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:923:8331":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"11:879:8315":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"18:538:4388":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:4139:8428":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:45862:3928":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:7298:16431":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:13212:8220":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:14074:4814":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:12730:8205":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:3680:154":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:5147:6568":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:6496:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:12883:4668":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:16073:5316":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:2188:3094":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:9402:7921":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:4871:5616":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:50977:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:5733:4083":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:7209:7310":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:7997:5593":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:6887:5579":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:2952:213":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:16182:5360":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:9118:16353":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:47933:7699":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:4000:8338":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:2606:9274":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:0:329":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:9976:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:8185:7224":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:48029:7703":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:5357:6648":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"17:13026:23918":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:1670:8336":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:3660:16179":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"2:37649:16368":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:6523:6892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:6677:7838":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:1590:6317":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11490:8154":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:16255:5381":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:10865:4548":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:8047:34675":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"18:515:4383":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:6109:5644":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:14195:4847":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:49992:7765":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:26169:7327":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5470:6712":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:8295:5926":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:977:4104":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:4467:3795":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:26332:7338":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:1501:6265":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5511:6732":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:50518:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:44605:7614":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:5428:6682":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"0:257:2875":{"crate_id":0,"path":["byteorder","NativeEndian"],"kind":"type_alias"},"17:15873:5262":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:48708:7751":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"5:4621:283":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:5187:6571":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:14715:4941":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:51470:7820":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:37303:9420":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:2854:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:11595:8157":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:4904:6475":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:3149:175":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:44552:7609":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:3108:5599":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:37370:16363":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:14796:164":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:16636:4778":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:6157:8439":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"11:1898:6090":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:4803:9334":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:8304:7241":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:3159:273":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:11333:37394":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:680:4530":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:48057:7706":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:13125:8150":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:47735:7688":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:26084:9503":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:48170:7710":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:5065:9321":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13365:23790":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:498:6201":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:3348:6091":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:12668:4653":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:3876:270":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:47369:4092":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:6606:219":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:491:4379":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:14793:4969":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:8271:3848":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:7143:246":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:9157:35069":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:25948:9508":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:51072:7805":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:589:4391":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:3746:8139":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:9415:7922":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:5740:2532":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:1000:4022":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:1552:6293":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:10558:23787":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:6792:5726":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"11:1083:37359":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:8319:9188":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:8253:7228":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:2892:34532":{"crate_id":2,"path":["core","clone","uninit","InitializingSlice"],"kind":"struct"},"17:13005:23917":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:5395:6664":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:11260:7945":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"5:7793:3094":{"crate_id":5,"path":["alloc","collections","btree","set","Cursor"],"kind":"struct"},"5:7264:16429":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:5684:35584":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:8483:7850":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"11:1156:8321":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:48586:7748":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:16320:5402":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:4463:9330":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:7966:5904":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:37822:16369":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:3880:8140":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:9699:8461":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:11410:28255":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:6937:7841":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:8595:8301":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:10374:23781":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:2988:207":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:5319:6638":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:35993:260":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:5420:1318":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"12:0:3565":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:4715:35594":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:1080:8312":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:4958:7297":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:5222:5627":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"18:80:27977":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:12858:1945":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"5:7763:35672":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:5015:16177":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:26089:9501":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:3788:32122":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:15881:5263":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:50424:7781":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:12842:1928":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:43243:4242":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:15814:5247":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:4260:4022":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:9112:4241":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:34392:3720":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:2484:5553":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:8063:23723":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:25332:7326":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:45821:3926":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:12840:1791":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:26646:7366":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"1:699:8404":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:12995:4681":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:35982:7438":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:7728:3926":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:1059:8308":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:5583:16393":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"2:47128:3739":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:15924:5275":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:4691:8431":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:9983:8470":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:3485:9419":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12903:4673":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:6694:8254":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"11:2119:5844":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"11:706:8307":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13952:4791":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:15107:5024":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:640:9181":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"17:12125:4593":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:5520:6733":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:7976:259":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2489:3789":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:50599:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:3152:157":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:13470:4715":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"2:45009:3849":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:2746:5565":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:10826:8144":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"17:14098:4816":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:5389:6661":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:787:9185":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:4617:8430":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:26679:7369":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:3432:32612":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:8093:8297":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:46164:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:7400:7114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5648:6792":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:8769:3817":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:8711:3888":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:50032:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:51572:7825":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:2284:3787":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:2000:8415":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12805:8211":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:47711:7684":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:6344:16727":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"13:0:3559":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:5377:5632":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:1585:6315":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:9656:199":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:5316:5630":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"18:573:4380":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11463:8153":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:7549:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:13824:4765":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:44284:7590":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"11:796:8323":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:2596:9269":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:14526:4916":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:14864:4983":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:14013:4801":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:12160:3819":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:9587:8497":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:51602:7826":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:2548:5556":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:6820:23716":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:5666:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"7:78:22695":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:2794:5567":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:4900:5617":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:25910:9507":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:10822:30466":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:9600:7928":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:7369:5588":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:1713:4104":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:11019:37389":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:1948:736":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:2842:28217":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:11022:3714":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11569:8156":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:4507:4104":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:14875:4984":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:51382:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:6648:6963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:48562:135":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:8759:3816":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:12567:8197":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:5537:6739":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:8512:3094":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:8025:5906":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:7156:5781":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:3887:16166":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:5024:3724":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:50667:7790":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11994:8171":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"18:613:37399":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:11339:1791":{"crate_id":2,"path":["core","slice"],"kind":"module"},"5:6755:9511":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"11:1562:22782":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:48380:7724":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:2738:711":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:25934:2530":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:45511:182":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"0:178:2556":{"crate_id":0,"path":["byteorder","ByteOrder"],"kind":"trait"},"17:15616:5198":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"10:36:6104":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:8866:8480":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:9492:9390":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:50829:7796":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:11117:37391":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:12070:8177":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:5303:6631":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:11273:3737":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:11537:7921":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:5290:6626":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:14751:4947":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:8416:7314":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:2618:5559":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:4950:7108":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:8730:3814":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:47601:4100":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:5490:6723":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:12836:1991":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:0:597":{"crate_id":2,"path":["core"],"kind":"module"},"1:9988:28252":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"6:5257:6607":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:10885:4549":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:44089:7578":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"9:0:3562":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:12178:4598":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:4160:8323":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:10442:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:11014:3711":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:50545:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:16000:5297":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:14616:4928":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"0:252:2860":{"crate_id":0,"path":["byteorder","BE"],"kind":"type_alias"},"11:1021:8316":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:9372:8488":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:2113:829":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:15461:5147":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:25135:35309":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"16:6419:5537":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:16796:5523":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:8340:8469":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:6588:6937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:1819:35584":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:10460:23784":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"18:531:4385":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:6705:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"9:227:7675":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:6062:5583":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:9024:7675":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:50896:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:48713:163":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:12850:951":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:6237:5657":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:6415:233":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:7525:7179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:7459:8268":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12984:4680":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:3722:3299":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:44196:7578":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:1720:8323":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:48403:7732":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:8434:7847":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:8623:5976":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:40044:5864":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:46089:4022":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:16578:5475":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:11621:8159":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:44380:8389":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"17:16334:5409":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"9:381:22703":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:13188:8218":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:730:9182":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:35975:3723":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:6164:8443":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11733:8162":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:2964:5575":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:15120:5025":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"11:1599:8325":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:6096:8226":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:44492:146":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4955:6501":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:8102:5910":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:3135:35794":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:3426:32465":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:587:6256":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:2177:710":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:51610:7758":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:50208:7773":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:12192:4599":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:7189:23719":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:6026:5578":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:1668:6376":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:5607:215":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:14327:4880":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:11873:4566":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:50005:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:13084:8217":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:2857:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:48597:16500":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:11020:219":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"0:256:2872":{"crate_id":0,"path":["byteorder","NetworkEndian"],"kind":"type_alias"},"16:2898:5572":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:2433:3804":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:49843:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:26635:7365":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"16:6500:22823":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:6725:233":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:8739:250":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:7347:7091":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"18:113:27979":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:1265:35793":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:6510:6886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"13:125:37361":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:7916:8289":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:3925:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:44482:7599":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:8098:16349":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:6736:37377":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:11156:8149":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:2202:8338":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:41:9218":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:15053:5018":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:15474:5154":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:50140:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"3:353:239":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:321:8128":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"11:1882:4022":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:47591:4102":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:5510:3820":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:6469:6865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4889:6468":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:15018:5006":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:26668:7368":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"16:2988:5576":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:12216:7966":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:6850:5733":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:3429:32611":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:2364:201":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:10953:239":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"17:13113:4582":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:9725:7932":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:8148:5596":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:15933:5278":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:16235:5378":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:5852:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:7762:5880":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:15889:5264":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:15040:5017":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:2682:5562":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:1521:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:11744:28092":{"crate_id":1,"path":["std","sys","dbg","DebuggerPresence"],"kind":"enum"},"1:457:8400":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"11:2504:22777":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"16:3124:22854":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:7801:7279":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:12862:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:14418:4899":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:3642:128":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:12848:775":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"2:48369:16412":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:13138:4689":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"6:4800:6405":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:8135:8463":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:1008:6088":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:11616:174":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:14554:217":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:2025:8417":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:46876:5941":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"11:2389:4104":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:14355:4887":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"16:5280:5629":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:50869:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:3690:3795":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:50275:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:1069:9202":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:6623:5720":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:5565:6753":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:3470:3841":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:26401:33781":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:6574:284":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"18:623:37400":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"3:756:7291":{"crate_id":3,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"2:42085:16374":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"11:2358:8317":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:44596:7613":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12268:4608":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:4929:6491":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12323:8188":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:4636:35594":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:11218:7936":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:7027:5755":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:9592:8498":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:6627:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:5033:6539":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:46081:4105":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:10845:3818":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:14378:4891":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:7434:7120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:316:8127":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:1746:6093":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:1249:37195":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:47137:169":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:44125:7580":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:680:4403":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:11223:7847":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:50572:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:51424:7758":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:44291:7591":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:8532:16355":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:15704:5221":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"3:0:539":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:1729:6090":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:7398:37378":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:2412:7263":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:50086:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:50910:7799":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:3712:9217":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:7220:5795":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:0:3569":{"crate_id":17,"path":["object"],"kind":"module"},"16:2448:5545":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:6142:23712":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:12963:4677":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:44770:3817":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:11166:37392":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:14735:4942":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:13200:8219":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:6451:6853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:48185:7716":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:43327:7442":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:524:6221":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:11920:4582":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:5991:16429":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:8795:8480":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12894:4672":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:50100:7769":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:4037:8427":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:9707:174":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:44635:7616":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"18:726:4416":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11775:23819":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:8721:3850":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:8282:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:4347:9311":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:1633:6351":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:8591:3835":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:8325:9234":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:12613:8200":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"10:0:3563":{"crate_id":10,"path":["adler"],"kind":"module"},"1:8030:28144":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"2:45705:7894":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:48544:7745":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:5046:3726":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:51085:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:12716:8201":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:14642:4931":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:7377:7113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:11080:4620":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:50788:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:2752:3771":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"6:5159:6569":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:15592:5196":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11608:8158":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:26309:7334":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4824:6422":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:13320:4165":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:47665:4106":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:12845:777":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"17:10738:4545":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"9:49:8902":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"18:598:37398":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:44473:7598":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:51730:7832":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"18:563:4390":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:48771:8397":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"9:168:8913":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"18:581:3991":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:50802:7795":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:49830:7759":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:26450:7356":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:2580:9264":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:5491:216":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:6515:6887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:16364:5417":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:25962:3771":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:14781:4966":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:5067:9322":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:1598:6322":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:48853:7756":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:47987:7702":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:8134:5595":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:47915:7698":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:3702:8338":{"crate_id":5,"path":["alloc","collections","btree","set","CursorMut"],"kind":"struct"},"2:918:202":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:4285:9306":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:6462:6861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11058:8147":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"11:2575:7280":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:11194:8509":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:11443:4557":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:6290:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:9559:28078":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:7721:7277":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:44425:4089":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:14481:4910":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:46312:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:13600:4116":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:51031:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:6335:5673":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:1741:6092":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:9669:3795":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"16:6387:8228":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:5485:6721":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:15453:5144":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:5238:6596":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:10642:8415":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:26416:33782":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:7539:5843":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:50073:7768":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:50950:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"11:2548:6096":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:25153:9427":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:7786:37380":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:1055:8307":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:16833:5529":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:8254:8465":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:6460:23715":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:11205:4582":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:12402:8196":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:8084:8337":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:919:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:51638:7828":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"18:643:4380":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:8581:177":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:47724:7687":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:15203:5039":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:2702:5563":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:29666:286":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:4883:6466":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:7505:5838":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:14816:4978":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:37437:16362":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:12423:28095":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:49884:7761":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:50856:7797":{"crate_id":2,"path":["core","core_arch","simd","f16x16"],"kind":"struct"},"1:1964:8413":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:3282:8363":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:6586:5717":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"1:9477:9391":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:7383:5818":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:3985:3094":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:25622:4168":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:13590:8224":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1:8042:28146":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"2:4889:8367":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:6426:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:8543:5970":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:51315:7814":{"crate_id":2,"path":["core","core_arch","simd","u16x64"],"kind":"struct"},"6:5194:6573":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5077:6563":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:12859:1028":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:3046:22853":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:47765:3819":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:7209:5794":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:44534:7607":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:10705:4544":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13964:4794":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"11:1918:6093":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:12809:9189":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:10805:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:990:4105":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"11:440:37352":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:4293:9307":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:13404:4711":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:7455:7128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:2159:2497":{"crate_id":2,"path":["core","mem","align_of"],"kind":"function"},"5:7989:7288":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:4877:6465":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:13558:23791":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:50410:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:45671:33808":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:5125:6566":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:13842:16397":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:1404:5844":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:2023:8416":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:6759:7001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:5413:6676":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:3123:3708":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:1490:6260":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:14527:35119":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:6779:5725":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:2528:5555":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:47149:7675":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:8708:5983":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:4455:9329":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:9918:8374":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:5836:8437":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:16760:5517":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:46618:3713":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:5115:6565":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:47694:4108":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:1034:8323":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:6254:5662":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:4344:4105":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:13035:4684":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:870:166":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:51704:7831":{"crate_id":2,"path":["core","core_arch","x86","__m512h"],"kind":"struct"},"6:1522:6273":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:6864:23717":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:13162:4690":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:12242:4103":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:35968:8387":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:0:1819":{"crate_id":1,"path":["std"],"kind":"module"},"16:8230:23724":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:12135:4105":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:11939:28259":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1:763:8405":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:2246:8133":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:11234:7942":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:47674:4109":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:50991:7802":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:46499:8376":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:12086:8182":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:6036:233":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:7999:8358":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:9426:4104":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:7302:5810":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:6702:16735":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"2:43323:9216":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:14579:8382":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:26357:7340":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:15518:5185":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:12860:2033":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:16843:4795":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1:9694:8460":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:1050:8322":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:586:28215":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:7534:7182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:12108:4591":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:4948:7106":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"6:5374:6653":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:50721:7792":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"18:507:4380":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:544:5534":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:45892:4243":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:36964:16361":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:34377:3758":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:44520:7604":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:11906:8170":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12593:4649":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:13428:4712":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:51193:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:7994:7211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:5365:6649":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"18:698:4407":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:50748:7793":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:13486:7691":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:46127:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:11350:7922":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:11361:37395":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:1036:4104":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:10447:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:51686:7830":{"crate_id":2,"path":["core","core_arch","x86","__m256h"],"kind":"struct"},"2:43455:4166":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:4234:9304":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:50842:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:1704:6390":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:9528:7927":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:42030:16373":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:3495:5858":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:15976:5292":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:48019:3815":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:16063:5311":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:47112:3740":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"11:0:3564":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:16749:5512":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:6950:5745":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:48524:7740":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:48073:7578":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:5349:6647":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:51434:7818":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:9816:8416":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"17:2397:23847":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:1285:37196":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:44095:7579":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:10606:4540":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"16:8480:5963":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:25224:7326":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:5725:2531":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:15790:5243":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"18:635:4402":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:27266:249":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"11:833:8309":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:4484:9332":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"5:2858:7267":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:5271:16188":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:474:6190":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:8100:8360":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:11213:7934":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"11:2560:37344":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:8424:4478":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:15079:5020":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:8176:5912":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:51234:7811":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:44136:33803":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:466:6185":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:8294:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:26701:7371":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"6:1728:6399":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:14859:4087":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:47573:4099":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:13771:9260":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:9580:8496":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:12852:963":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:13881:4779":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:11708:34540":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"6:5279:6618":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:8259:7229":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:7013:5753":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:12841:1827":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:45809:4022":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:16705:5501":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"6:1626:6347":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:46033:239":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"5:240:8329":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:1213:8321":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:16018:5301":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:48508:7736":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:2299:9165":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:5619:6782":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:5232:6593":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"5:5729:4082":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:1086:8314":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:2433:22851":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:14670:4936":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:5502:6726":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:44151:7583":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:894:8225":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"16:2568:5557":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:44502:7601":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:50559:7786":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:50167:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:7336:7086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:49870:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:7956:5903":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:9465:7924":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:48730:240":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:45784:185":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:2752:3831":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:4508:3795":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:5449:6697":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:51488:7821":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:5052:6550":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:16196:5366":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:51099:7806":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:6656:8245":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:51274:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:44370:7298":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"2:4885:234":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:7355:5587":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:2858:5570":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:44586:7612":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:7733:8323":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"0:0:3169":{"crate_id":0,"path":["byteorder"],"kind":"module"},"11:406:37350":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:34371:3757":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:3617:3826":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:11847:8167":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:50235:7774":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:9661:8447":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"16:5415:5633":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:48813:192":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:5447:5634":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:7288:16430":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:50451:7782":{"crate_id":2,"path":["core","core_arch","simd","f16x8"],"kind":"struct"},"5:1620:6089":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:3312:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:12422:4115":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:10035:218":{"crate_id":2,"path":["core","pin","PinCoerceUnsized"],"kind":"trait"},"2:11016:3712":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:5647:5635":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:4894:8368":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:4738:28244":{"crate_id":2,"path":["core","cell","lazy","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"2:4724:8366":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:8536:16354":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:15574:5191":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:36049:3890":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:6661:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:6747:6999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:42664:16375":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4850:6442":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:8763:190":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:8441:7848":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:12165:4597":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:963:9203":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:11581:7932":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:50613:7788":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6806:5577":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:8055:8296":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"15:405:22816":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:4471:9331":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:50248:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:12234:4604":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:35915:3707":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:6841:5732":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:6157:5646":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:45587:7641":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"9:471:22701":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:13349:4708":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:14839:4979":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:2309:7254":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:50937:7800":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"11:2409:4105":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:15913:5271":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:12853:944":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"11:1905:6091":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:5800:8435":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:9613:28079":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:12978:2793":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:518:6218":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:486:6196":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:6737:6992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:9743:7933":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:14370:4889":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:3866:4167":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:6250:28244":{"crate_id":1,"path":["std","sync","lazy_lock","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"17:16346:5411":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:7572:7201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:50653:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:44204:7587":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:4764:5613":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:13224:8221":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"18:706:4409":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:8241:7226":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:12833:443":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:13441:4714":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:26591:7361":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:51620:7827":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"15:299:22806":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:5044:6545":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:8118:223":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:6171:5649":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:51442:7758":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"17:11428:23800":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:2864:3823":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:7904:5899":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:50734:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:6788:198":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:8125:4530":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:11264:8150":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:46914:3720":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:11231:165":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"5:3408:6093":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:3526:3844":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:2754:3772":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:5820:8436":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:2542:6095":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:5005:6523":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:3401:279":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:47815:7694":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:13635:4727":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:2918:5573":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:2213:8339":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"11:1138:8320":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:6894:7624":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:9362:8486":{"crate_id":1,"path":["std","pipe","PipeReader"],"kind":"struct"},"11:2429:4022":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:11598:7948":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:26042:2530":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:1044:8337":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:46931:150":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:6121:5582":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:7925:16468":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:7294:7062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:14044:4810":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:7952:7287":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:15329:5041":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:51166:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:10914:8488":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:6202:8323":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12098:4590":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:8264:5922":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:14436:4900":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:15822:5249":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:48792:33932":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"6:6868:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:6476:7305":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:14312:4876":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:3403:121":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:4910:6478":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13057:8214":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"14:31:8302":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:48830:7755":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:12851:957":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:3828:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:51722:2211":{"crate_id":2,"path":["core","core_arch","x86","bf16"],"kind":"struct"},"17:15583:5195":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:6835:8266":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:14086:4815":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:12303:23891":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"2:47741:7689":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:50478:7783":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:2184:3752":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:13336:16399":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:5707:23711":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:6191:3925":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:1495:6262":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:7354:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:10972:156":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:41975:16372":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"11:102:6077":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:4602:8365":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:44188:7586":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:5144:230":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:45026:7628":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:7563:7198":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:45852:3916":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:16422:5427":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:48199:7719":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"14:162:8302":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:5145:9318":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:9541:8490":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:7421:23720":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:12766:8208":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:6747:5722":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:8917:7897":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:533:6227":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:48304:7722":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:14695:4938":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:8068:28148":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"17:13392:4710":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:50154:7771":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:5173:6570":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:3306:5544":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"18:754:4421":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:14001:4800":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:6400:6833":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:47643:4089":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:15164:5032":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:16034:5304":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:14170:4843":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:16216:5372":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:2578:3760":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:519:4484":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:13252:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:5601:1791":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"1:463:8402":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:16355:5415":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:15664:5207":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:11008:123":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:50532:7785":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:44164:7584":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:25737:9425":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:0:1067":{"crate_id":6,"path":["libc"],"kind":"module"},"1:4343:9310":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:10835:4422":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"16:3012:22852":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"14:167:22787":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:8239:2530":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:7972:7210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:16530:4764":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:12292:8187":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:47833:7695":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:7590:7204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:16663:5490":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:7518:5841":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:4837:6432":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:8277:4620":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:3480:9417":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:2182:209":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:12334:8427":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:11323:8151":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:16408:5424":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:5230:9353":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"11:871:8314":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:6736:9510":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:7527:28143":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"2:48064:7587":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"14:7:8302":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:7835:23722":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:10663:8500":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:13534:4719":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12452:23892":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:12974:4679":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:8609:5598":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:11936:254":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:51207:7810":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:7946:5591":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:11782:8515":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:12027:8174":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:11944:4587":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:8220:5914":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:6680:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:1676:6377":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:1735:6091":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"11:2554:6097":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:15133:5026":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:25125:35308":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:565:6244":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:1508:6268":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:8317:23725":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:8582:8298":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:2465:5547":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:26474:9288":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:5660:6799":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:12353:4111":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:1639:8307":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:37504:16364":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"15:338:8899":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"11:338:6082":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11720:8161":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:51460:7758":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1:11305:8469":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"16:7256:5808":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:34339:3756":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:3962:132":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:26013:3771":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"18:651:4380":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:4903:9352":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:6533:6899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:7743:8356":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:16385:5420":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:15866:5261":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:7318:7079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:6697:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:3693:5604":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:14590:4925":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:48779:7752":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"9:491:6166":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:4265:5610":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:8488:7851":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:2392:35675":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:7347:5816":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:34778:3991":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:4842:5615":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6711:8255":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:13890:16405":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:36082:280":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"16:6267:5663":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:16677:5494":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:47365:7682":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:12111:4104":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:45765:206":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:26463:7357":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:11024:3715":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:44299:7592":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:11474:23801":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:4333:9309":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:48082:7586":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:45533:7632":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:35991:251":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"5:4702:3795":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"6:5638:6791":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:2588:5558":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:7204:7312":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:14550:4917":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:9389:7920":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:6903:7055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12247:4605":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:6888:7044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:8840:7894":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:4978:6509":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:44645:7617":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:44333:16468":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5333:6643":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:15768:5237":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:3985:4439":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"18:481:4378":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:3565:5859":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:6812:7018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"11:2332:8316":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:12394:4114":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:45900:7657":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"2:51452:7819":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:155:5532":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:11107:8148":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:16782:5519":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"16:7334:5814":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:6600:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:51694:7758":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"17:10260:23777":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:7440:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:8180:28272":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:9552:8492":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:51126:7807":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:15849:5253":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"11:444:37353":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:7704:4088":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:6612:6949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"11:696:4022":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:50046:7767":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:670:8126":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:14603:4926":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:6641:6962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:50923:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:12939:4097":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:5327:6642":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:34751:208":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:48720:232":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"11:1912:6092":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:10954:3461":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:4182:5608":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:13678:4731":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:325:3891":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:13776:4750":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:12435:4616":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"11:770:6088":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:3569:3840":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:11297:8484":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"18:521:27988":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:15006:5004":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:26343:33778":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:13705:4737":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:12929:4674":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:12138:4595":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:7987:5905":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:51712:7758":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"17:11068:37390":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:11268:3736":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:9367:8487":{"crate_id":1,"path":["std","pipe","PipeWriter"],"kind":"struct"},"17:13049:4687":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:12349:4611":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"1:8054:28147":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"16:7468:5833":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:8259:7844":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"5:2339:7257":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:6432:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:13306:4163":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:15718:5222":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:4637:16168":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:2179:210":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:7982:16197":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:51139:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:4937:6493":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:2653:2498":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:43676:16199":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:13976:4795":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"18:735:27986":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:49816:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"11:2308:5844":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:26294:7330":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:13236:8222":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:16208:5369":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10288:23778":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:4614:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:3408:263":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:8891:8484":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:3472:3842":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:36081:118":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"2:44442:8390":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:13333:4498":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:2722:5564":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"11:2449:8323":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:11557:8155":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:560:6242":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:14457:7607":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:46013:225":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"6:6408:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:10067:23772":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:16169:5354":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:16121:5353":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13861:4778":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:756:8330":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:10634:8922":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:7713:37379":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:6322:7275":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:2957:147":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:11010:133":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:6498:28247":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:50221:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"7:0:2023":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:14415:8378":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:46952:3721":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:14960:4997":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:16655:5489":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:1980:592":{"crate_id":2,"path":["core","intrinsics","copy_nonoverlapping"],"kind":"function"},"1:12839:356":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:11748:8163":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:1578:8324":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:12792:8210":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"10:44:6105":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:3139:4426":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:8801:8482":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:11395:28253":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:12869:4663":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:813:266":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:47352:7681":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"2:50113:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:49897:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:7371:9421":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:8247:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:8000:7213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:3854:4105":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:5077:3725":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:1650:8308":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:11012:3710":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:915:9289":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"18:96:27978":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:25828:9505":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:51018:7803":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:3227:127":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:8562:5973":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:8288:7236":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:7165:5782":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:47120:7674":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:12219:4601":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"11:498:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:12277:4694":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:16306:5400":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"0:340:2531":{"crate_id":0,"path":["byteorder","LittleEndian"],"kind":"enum"},"1:11761:7955":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"1:8872:7896":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"5:3387:35791":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:3515:16367":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:7041:5585":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:7492:5834":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:14127:4827":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:3143:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:16010:5300":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"11:374:37348":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"11:361:37345":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:50302:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:11968:4589":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:15539:5190":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:11233:169":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:8806:9285":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:14945:4993":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:1063:8309":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:3155:274":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:26056:9502":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:44312:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:8776:3818":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:14850:4981":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"9:319:6143":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:47751:3818":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:10771:4546":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"15:0:3567":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:1420:8317":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:3740:3805":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:46238:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:9062:9368":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:5096:6564":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:6553:6915":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:11499:4561":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:10155:23774":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:47684:4107":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:12205:8462":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:6366:5679":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:16543:5445":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"17:2456:8137":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:615:9165":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:7981:16196":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:2818:5568":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:6131:267":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:6438:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:11036:3839":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:50329:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:4952:7110":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:516:197":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:7104:35584":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:7473:7139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:49965:7764":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:44348:7594":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:43435:229":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:6590:28251":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:44794:7621":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:47522:8396":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:11030:3841":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:7876:2884":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:539:6230":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:5249:6603":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:46847:3720":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:46837:7660":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:44174:7585":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:8858:8483":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:906:8128":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:50289:7776":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:11563:7745":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:4819:3722":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:5213:6585":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:10639:4542":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6203:23713":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:16722:5503":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"2:48540:7744":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5065:6554":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:25735:2530":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"11:2475:8337":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:13248:8223":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:14976:4998":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:779:8406":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:2994:214":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:34404:33790":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:14655:4933":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:14142:4833":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:5309:6634":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:5225:6592":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:2424:151":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:26443:7353":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:14915:4988":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:8235:7225":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:3159:8424":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:5196:5626":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:7390:282":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:44543:7608":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:1353:8132":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:5496:6724":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:1181:5844":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:5479:6718":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:4299:35584":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:8451:7849":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:1644:6359":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:11923:2530":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:47654:4090":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:44980:7623":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:11695:4570":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:14115:4824":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:4771:7296":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:6285:3795":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:2906:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"11:840:9202":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:3510:16366":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:45883:3970":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:5027:6536":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:6678:8251":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"1:9633:7931":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:43503:7449":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:43415:227":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:6655:6964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:5170:5625":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:7016:8451":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"9:436:22702":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:8463:152":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:48355:7723":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:14048:123":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:10970:8146":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:6363:7304":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:15751:5232":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12580:8198":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:15990:5294":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:7615:28263":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:7870:7280":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:8276:7234":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:4299:9308":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:4034:8426":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:5239:9354":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:25206:9423":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:7777:4022":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:12390:8195":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:6901:5741":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:3797:3806":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:16045:5308":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:36079:3979":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:51247:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:16853:4800":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:10980:37388":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:2287:3760":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"2:10629:35070":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:45940:7658":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"17:16517:4750":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:13309:23789":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:5974:7016":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:14183:4844":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:3779:3461":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:11659:7949":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:43492:7448":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:3146:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:12151:4596":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:6622:8445":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:1515:6270":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:4981:5620":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:25960:35526":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:51544:7758":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"6:8017:7223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:3382:6090":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"11:2568:6099":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:26657:7367":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:3671:3887":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:35992:253":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:12060:8176":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:25999:9509":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:44511:7603":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:47622:4091":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:11253:152":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:4:1335":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:12835:504":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:48512:7737":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:7785:223":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:10338:23780":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:15738:5226":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:14902:4987":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:45546:7634":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:8712:3848":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"11:1723:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:554:6239":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:47582:4098":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:8895:7095":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:7940:7285":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"5:1019:9204":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:2504:5554":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:12165:7959":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:1923:8337":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:4938:9308":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:11281:28125":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:37236:9418":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:0:3570":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:12294:8426":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:7302:7067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:13813:16396":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:8305:9187":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:11309:8510":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:50059:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:50626:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:1558:4104":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:2077:8418":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"11:738:8308":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:6082:5639":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:1724:8337":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:48048:7705":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:45793:4104":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:44780:7620":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:3374:6092":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:15682:5215":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:16771:5518":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:1570:6303":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:49911:7762":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:4692:5612":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:11400:23799":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:3506:8337":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:11289:28127":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:14157:4839":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"11:669:4104":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:8331:7842":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:11272:3814":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:8656:134":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:34104:9290":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:49803:7757":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:26381:33780":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:50194:7758":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:50019:7766":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:7753:7278":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:8586:8474":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:7821:4022":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11762:4572":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:25600:9429":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:8477:131":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:12949:4676":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:13098:4566":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":34}