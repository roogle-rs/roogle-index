{"root":"0:0:2274","crate_version":"1.4.3","includes_private":false,"index":{"0:243:1821":{"id":"0:243:1821","crate_id":0,"name":"read_i32_into","span":{"filename":"src/lib.rs","begin":[1115,4],"end":[1120,5]},"visibility":"default","docs":"Reads signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12774:3264":{"id":"2:12774:3264","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12775:3116","2:12776:59629"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:128:2559":{"id":"0:128:2559","crate_id":0,"name":"write_u8","span":{"filename":"src/io.rs","begin":[1098,4],"end":[1100,5]},"visibility":"default","docs":"Writes an unsigned 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_u8(2).unwrap();\nwtr.write_u8(5).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u8"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3366:215":{"id":"2:3366:215","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13764:54816":{"id":"2:13764:54816","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:15889:2683","self::pattern":"2:13334:3942","`DoubleEndedIterator`":"2:8719:121","prim@char":"1:15883:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49809:3204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:113:1825":{"id":"0:113:1825","crate_id":0,"name":"read_i64_into","span":{"filename":"src/io.rs","begin":[820,4],"end":[827,5]},"visibility":"default","docs":"Reads a sequence of signed 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i64"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:289:1687":{"id":"0:289:1687","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[2007,4],"end":[2019,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:322:1703":{"id":"0:322:1703","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[2245,4],"end":[2247,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9535:3014-0:360:1615":{"id":"a:2:9535:3014-0:360:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9535:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:10565:110":{"id":"2:10565:110","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10566:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:330:1809":{"id":"0:330:1809","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2285,4],"end":[2287,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2861:97":{"id":"2:2861:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2863:2748"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:11207:218":{"id":"2:11207:218","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11209:183","2:11210:54783","2:11211:54784","2:11212:54785","2:11213:54786","2:11214:757","2:11215:758"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11198:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:130:1692":{"id":"0:130:1692","crate_id":0,"name":"write_u16","span":{"filename":"src/io.rs","begin":[1151,4],"end":[1155,5]},"visibility":"default","docs":"Writes an unsigned 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\\x03\\x00\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u16"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13738:4796":{"id":"2:13738:4796","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50045:2909","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:355":{"id":"0:355","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,44],"end":[1806,53]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:3374:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:142:1697":{"id":"0:142:1697","crate_id":0,"name":"write_u32","span":{"filename":"src/io.rs","begin":[1259,4],"end":[1263,5]},"visibility":"default","docs":"Writes an unsigned 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u32::<BigEndian>(267).unwrap();\nwtr.write_u32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\x00\\x00\\x01\\x0b\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55:1718":{"id":"0:55:1718","crate_id":0,"name":"read_i24","span":{"filename":"src/io.rs","begin":[191,4],"end":[195,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:314:1656":{"id":"0:314:1656","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[2193,4],"end":[2195,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13831:54262":{"id":"2:13831:54262","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3837:3914":{"id":"2:3837:3914","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3839:57628"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:331:1853":{"id":"0:331:1853","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2290,4],"end":[2296,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:329:1803":{"id":"0:329:1803","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2280,4],"end":[2282,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8719:121":{"id":"2:8719:121","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8720:3106","2:8721:3107","2:8722:3108","2:8723:3109","2:8727:3110","2:8730:3111"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8876:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13797:60060":{"id":"2:13797:60060","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5425:3542":{"id":"1:5425:3542","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5426:54100","1:5427:4535"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:246:1836":{"id":"0:246:1836","crate_id":0,"name":"read_f32_into","span":{"filename":"src/lib.rs","begin":[1203,4],"end":[1208,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1579,0],"end":[1579,50]},"visibility":{"restricted":{"parent":"0:26:1582","path":"::io"}},"docs":"All types that implement `Write` get methods defined in `WriteBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:4467:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_i8","write_i24","write_f64","write_f32","write_i48","write_u64","write_u8","write_u16","write_uint","write_i128","write_i64","write_u128","write_int","write_u32","write_i16","write_u24","write_int128","write_uint128","write_i32","write_u48"],"trait":{"name":"WriteBytesExt","id":"0:127:1584","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"generic","inner":"W"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:244:1825":{"id":"0:244:1825","crate_id":0,"name":"read_i64_into","span":{"filename":"src/lib.rs","begin":[1144,4],"end":[1149,5]},"visibility":"default","docs":"Reads signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1354","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:60706","5:6165:2858","5:6168:60707","5:6171:60708","5:6183:60709","5:6184:60710","5:6185:2930","5:6186:54258","5:6187:54259"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:271":{"id":"0:271","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1809,0],"end":[1813,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3250:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:272:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6184:60710":{"id":"5:6184:60710","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:444:2972","`String`":"5:8472:220"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2972","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:207:1677":{"id":"0:207:1677","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[324,4],"end":[324,37]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13273:3657":{"id":"2:13273:3657","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13274:127","2:13275:56878"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8684:2971":{"id":"2:8684:2971","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8686:3113","2:8688:3114","2:8689:3115"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:239:1797":{"id":"0:239:1797","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[1016,4],"end":[1016,50]},"visibility":"default","docs":"Reads unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:23051:4016":{"id":"2:23051:4016","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23052:4019","2:23053:58455","2:23054:58684","2:23055:1778","2:23056:1753","2:23057:42841","2:23058:58685","2:23059:58686","2:23060:58687","2:23061:58688","2:23062:58689","2:23063:58690","2:23064:58691","2:23065:58692","2:23066:58693","2:23067:58694","2:23068:58503","2:23069:58695","2:23070:58696","2:23071:58697","2:23072:58698","2:23073:58456","2:23074:58457","2:23075:58458","2:23076:58459"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23153:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:308:1909":{"id":"0:308:1909","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2144,4],"end":[2150,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67:1729":{"id":"0:67:1729","crate_id":0,"name":"read_i48","span":{"filename":"src/io.rs","begin":[295,4],"end":[299,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x9d, 0x71, 0xab, 0xe7, 0x97, 0x8f]);\nassert_eq!(-108363435763825, rdr.read_i48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13720:1817":{"id":"2:13720:1817","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15900:2692"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3213:1432":{"id":"2:3213:1432","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47935:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3183:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:350":{"id":"0:350","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,33],"end":[1806,37]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10803:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:351:718"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6186:54258":{"id":"5:6186:54258","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15889:2683"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:172:1708":{"id":"0:172:1708","crate_id":0,"name":"write_uint128","span":{"filename":"src/io.rs","begin":[1493,4],"end":[1501,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13779:60055":{"id":"2:13779:60055","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:328:1797":{"id":"0:328:1797","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2275,4],"end":[2277,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2867-0:360:1615":{"id":"b:2:2867-0:360:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2861:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2869:2748"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:268:1930":{"id":"0:268:1930","crate_id":0,"name":"from_slice_i128","span":{"filename":"src/lib.rs","begin":[1768,4],"end":[1773,5]},"visibility":"default","docs":"Converts the given slice of signed 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i128(&mut numbers);\nassert_eq!(numbers, [5i128.to_be(), 65000i128.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5575:3514":{"id":"1:5575:3514","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5576:5665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3366:215-0:360:1615":{"id":"a:2:3366:215-0:360:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3366:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:160:1703":{"id":"0:160:1703","crate_id":0,"name":"write_u128","span":{"filename":"src/io.rs","begin":[1402,4],"end":[1406,5]},"visibility":"default","docs":"Writes an unsigned 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u128"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3371:2539":{"id":"2:3371:2539","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23240:3549":{"id":"2:23240:3549","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23230:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:277:1956":{"id":"0:277:1956","crate_id":0,"name":"NetworkEndian","span":{"filename":"src/lib.rs","begin":[1874,0],"end":[1874,35]},"visibility":"public","docs":"Defines network byte order serialization.\n\nNetwork byte order is defined by [RFC 1700][1] to be big-endian, and is\nreferred to in several protocol specifications.  This type is an alias of\n[`BigEndian`].\n\n[1]: https://tools.ietf.org/html/rfc1700\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, NetworkEndian, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, NetworkEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:270:1935":{"id":"0:270:1935","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[1787,4],"end":[1787,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 double-precision (8 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:242:1815":{"id":"0:242:1815","crate_id":0,"name":"read_i16_into","span":{"filename":"src/lib.rs","begin":[1086,4],"end":[1091,5]},"visibility":"default","docs":"Reads signed 16 bit integers from `src` to `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,39],"end":[1806,42]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","max","clamp"],"trait":{"name":"Ord","id":"2:2955:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:354:421"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:338:1913":{"id":"0:338:1913","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2353,4],"end":[2359,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:203:1652":{"id":"0:203:1652","crate_id":0,"name":"read_u24","span":{"filename":"src/lib.rs","begin":[244,4],"end":[246,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13794:60059":{"id":"2:13794:60059","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15883:2678","str::match_indices":"1:15889:2683","self::pattern":"2:13334:3942","`DoubleEndedIterator`":"2:8719:121"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49959:4306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13811:14832":{"id":"2:13811:14832","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13334:3942","prim@char":"1:15883:2678"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8638:4158":{"id":"2:8638:4158","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8640:3162"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:201:1640":{"id":"0:201:1640","crate_id":0,"name":"ByteOrder","span":{"filename":"src/lib.rs","begin":[208,0],"end":[1788,1]},"visibility":"public","docs":"`ByteOrder` describes types that can serialize integers as bytes.\n\nNote that `Self` does not appear anywhere in this trait's definition!\nTherefore, in order to use it, you'll need to use syntax like\n`T::read_u16(&[0, 1])` where `T` implements `ByteOrder`.\n\nThis crate provides two types that implement `ByteOrder`: [`BigEndian`]\nand [`LittleEndian`].\nThis trait is sealed and cannot be implemented for callers to avoid\nbreaking backwards compatibility when adding new derived traits.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, BigEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:202:1644","0:203:1652","0:204:1656","0:205:1663","0:206:1670","0:207:1677","0:208:1653","0:209:1687","0:210:1692","0:211:1694","0:212:1697","0:213:1699","0:214:1701","0:215:1703","0:216:1695","0:217:1708","0:218:1713","0:219:1718","0:220:1724","0:221:1729","0:222:1734","0:223:1739","0:224:1719","0:225:1746","0:226:1752","0:227:1759","0:228:1761","0:229:1763","0:230:1766","0:231:1768","0:232:1770","0:233:1773","0:234:1764","0:235:1775","0:236:1777","0:237:1780","0:238:1789","0:239:1797","0:240:1803","0:241:1809","0:242:1815","0:243:1821","0:244:1825","0:245:1829","0:246:1836","0:247:1842","0:248:1846","0:249:1850","0:250:1853","0:251:1856","0:252:1859","0:253:1862","0:254:1876","0:255:1881","0:256:1883","0:257:1885","0:258:1887","0:259:1889","0:260:1891","0:261:1900","0:262:1905","0:263:1909","0:264:1913","0:265:1918","0:266:1922","0:267:1926","0:268:1930","0:269:1933","0:270:1935"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2886:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:10565:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:3250:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2924:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10803:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"2:2955:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2919:185","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2965:186","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"private::Sealed","id":"0:198:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:283","0:312"]}},"0:248:1846":{"id":"0:248:1846","crate_id":0,"name":"read_f64_into","span":{"filename":"src/lib.rs","begin":[1264,4],"end":[1269,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:340:1935":{"id":"0:340:1935","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2374,4],"end":[2383,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:264:1913":{"id":"0:264:1913","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[1673,4],"end":[1673,45]},"visibility":"default","docs":"Converts the given slice of unsigned 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u128(&mut numbers);\nassert_eq!(numbers, [5u128.to_be(), 65000u128.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:228:1761":{"id":"0:228:1761","crate_id":0,"name":"write_i16","span":{"filename":"src/lib.rs","begin":[766,4],"end":[768,5]},"visibility":"default","docs":"Writes a signed 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5519:3510":{"id":"1:5519:3510","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5520:7159","1:5521:54609","1:5522:5665","1:5523:54610","1:5524:3851","1:5525:3852","1:5526:54611","1:5527:1318","1:5528:54612","1:5529:54613","1:5530:54614","1:5531:54615","1:5532:54616","1:5533:54617","1:5534:54618","1:5535:54619"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10586:2801":{"id":"2:10586:2801","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10587:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:266:1922":{"id":"0:266:1922","crate_id":0,"name":"from_slice_i32","span":{"filename":"src/lib.rs","begin":[1718,4],"end":[1723,5]},"visibility":"default","docs":"Converts the given slice of signed 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i32(&mut numbers);\nassert_eq!(numbers, [5i32.to_be(), 65000i32.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13740:32194":{"id":"2:13740:32194","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50083:4313","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:82:1653":{"id":"0:82:1653","crate_id":0,"name":"read_uint","span":{"filename":"src/io.rs","begin":[427,4],"end":[431,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0x74, 0xfa]);\nassert_eq!(8418554, rdr.read_uint::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:151:1768":{"id":"0:151:1768","crate_id":0,"name":"write_i48","span":{"filename":"src/io.rs","begin":[1340,4],"end":[1344,5]},"visibility":"default","docs":"Writes a signed 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i48::<BigEndian>(-108363435763825).unwrap();\nwtr.write_i48::<BigEndian>(77).unwrap();\nassert_eq!(wtr, b\"\\x9d\\x71\\xab\\xe7\\x97\\x8f\\x00\\x00\\x00\\x00\\x00\\x4d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:97:1759":{"id":"0:97:1759","crate_id":0,"name":"read_f64","span":{"filename":"src/io.rs","begin":[530,4],"end":[534,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian double-precision floating point number from a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n]);\nassert_eq!(f64::consts::PI, rdr.read_f64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"f64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6467:3510":{"id":"1:6467:3510","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6468:53846","1:6469:7505","1:6470:7506","1:6471:7508","1:6472:7507","1:6473:7509","1:6474:7510","1:6475:7512","1:6476:5707","1:6477:7515","1:6478:7516","1:6479:7517","1:6480:7518","1:6481:7519","1:6482:7520","1:6483:7513","1:6484:7514"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:369":{"id":"0:369","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,33],"end":[1836,37]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10803:143","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:370:718"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:23389:16317":{"id":"2:23389:16317","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23390:6659","2:23391:58431","2:23392:58432"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23382:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3528:3996":{"id":"2:3528:3996","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3530:363"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:844:227":{"id":"5:844:227","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:3170","5:846:3171","5:847:3172"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:298:1789":{"id":"0:298:1789","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2070,4],"end":[2072,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:302:1853":{"id":"0:302:1853","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2090,4],"end":[2096,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:318:1687":{"id":"0:318:1687","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[2219,4],"end":[2227,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:265:1918":{"id":"0:265:1918","crate_id":0,"name":"from_slice_i16","span":{"filename":"src/lib.rs","begin":[1693,4],"end":[1698,5]},"visibility":"default","docs":"Converts the given slice of signed 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 6500];\nBigEndian::from_slice_i16(&mut numbers);\nassert_eq!(numbers, [5i16.to_be(), 6500i16.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13814:54825":{"id":"2:13814:54825","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15883:2678","self::pattern":"2:13334:3942"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:341:1616":{"id":"0:341:1616","crate_id":0,"name":"BigEndian","span":{"filename":"src/lib.rs","begin":[1807,0],"end":[1807,21]},"visibility":"public","docs":"Defines big-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 4];\nBigEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, BigEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:3378:224-0:341:1616","a:2:9536:3013-0:341:1616","a:2:3366:215-0:341:1616","a:2:3407:2968-0:341:1616","a:2:9535:3014-0:341:1616","b:2:3203-0:341:1616","b:2:2867-0:341:1616","b:2:3209-0:341:1616","b:2:4099-0:341:1616","b:2:3199-0:341:1616","b:2:2870-0:341:1616","b:2:3214-0:341:1616","b:5:848-0:341:1616","0:342","0:344","0:345","0:347","0:348","0:350","0:353","0:355","0:356","0:358","0:271","0:283"]}},"2:3170:74":{"id":"2:3170:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3172:3104"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:348":{"id":"0:348","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,29],"end":[1806,31]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2924:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:259:1889":{"id":"0:259:1889","crate_id":0,"name":"write_f32_into","span":{"filename":"src/lib.rs","begin":[1563,4],"end":[1568,5]},"visibility":"default","docs":"Writes IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3375:221":{"id":"2:3375:221","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:333:1859":{"id":"0:333:1859","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2308,4],"end":[2314,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6498:228":{"id":"5:6498:228","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1411"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3477:3935":{"id":"2:3477:3935","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3479:564"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13730:60051":{"id":"2:13730:60051","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3678:4036","str::slice_unchecked":"1:15889:2683","`str`":"1:15889:2683"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3376:107":{"id":"2:3376:107","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2886:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:255:1881":{"id":"0:255:1881","crate_id":0,"name":"write_i16_into","span":{"filename":"src/lib.rs","begin":[1450,4],"end":[1455,5]},"visibility":"default","docs":"Writes signed 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i16"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:305:1862":{"id":"0:305:1862","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2117,4],"end":[2123,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9159:3425":{"id":"2:9159:3425","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8876:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:267:1926":{"id":"0:267:1926","crate_id":0,"name":"from_slice_i64","span":{"filename":"src/lib.rs","begin":[1743,4],"end":[1748,5]},"visibility":"default","docs":"Converts the given slice of signed 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i64(&mut numbers);\nassert_eq!(numbers, [5i64.to_be(), 65000i64.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14458:142":{"id":"2:14458:142","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14459:283","2:14460:523","2:14461:286","2:14462:1088"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4467:2548":{"id":"1:4467:2548","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4468:1987","1:4469:53615","1:4471:53616","1:4472:4719","1:4473:2560","1:4474:53617","1:4475:53618","1:4484:3140"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:52:1652":{"id":"0:52:1652","crate_id":0,"name":"read_u24","span":{"filename":"src/io.rs","begin":[165,4],"end":[169,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:230:1766":{"id":"0:230:1766","crate_id":0,"name":"write_i32","span":{"filename":"src/lib.rs","begin":[810,4],"end":[812,5]},"visibility":"default","docs":"Writes a signed 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13359:3945":{"id":"2:13359:3945","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13361:3106","2:13362:58639","2:13363:58640"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13353:3941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5497:3507":{"id":"1:5497:3507","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5498:56825","1:5499:56827","1:5500:56826","1:5501:56828"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:252:1859":{"id":"0:252:1859","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[1370,4],"end":[1370,51]},"visibility":"default","docs":"Writes unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:10584:2800":{"id":"2:10584:2800","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10585:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[78,20],"end":[78,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::ReadBytesExt","name":"ReadBytesExt","id":"0:41:1583","glob":false}},"2:2869:2748":{"id":"2:2869:2748","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13808:60066":{"id":"2:13808:60066","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13334:3942","prim@char":"1:15883:2678"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3461:3929":{"id":"2:3461:3929","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3462:183","2:3463:919"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:64:1663":{"id":"0:64:1663","crate_id":0,"name":"read_u48","span":{"filename":"src/io.rs","begin":[269,4],"end":[273,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xb6, 0x71, 0x6b, 0xdc, 0x2b, 0x31]);\nassert_eq!(200598257150769, rdr.read_u48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:233:1773":{"id":"0:233:1773","crate_id":0,"name":"write_i128","span":{"filename":"src/lib.rs","begin":[876,4],"end":[878,5]},"visibility":"default","docs":"Writes a signed 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read n-byte `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:376:608":{"id":"0:376:608","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1836,44],"end":[1836,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2864:98":{"id":"2:2864:98","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2866:53830"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2861:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:111:1821":{"id":"0:111:1821","crate_id":0,"name":"read_i32_into","span":{"filename":"src/io.rs","begin":[782,4],"end":[789,5]},"visibility":"default","docs":"Reads a sequence of signed 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i32"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:226:1752":{"id":"0:226:1752","crate_id":0,"name":"read_f32","span":{"filename":"src/lib.rs","begin":[721,4],"end":[723,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104:1803":{"id":"0:104:1803","crate_id":0,"name":"read_u64_into","span":{"filename":"src/io.rs","begin":[635,4],"end":[642,5]},"visibility":"default","docs":"Reads a sequence of unsigned 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:208:1653":{"id":"0:208:1653","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[344,4],"end":[344,51]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:221:1729":{"id":"0:221:1729","crate_id":0,"name":"read_i48","span":{"filename":"src/lib.rs","begin":[608,4],"end":[610,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3814:3267":{"id":"2:3814:3267","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3745:3268","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10578:2798":{"id":"2:10578:2798","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10579:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3613:2969":{"id":"2:3613:2969","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3614:583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:117:1836":{"id":"0:117:1836","crate_id":0,"name":"read_f32_into","span":{"filename":"src/io.rs","begin":[902,4],"end":[909,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:209:1687":{"id":"0:209:1687","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[364,4],"end":[364,55]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:145:1766":{"id":"0:145:1766","crate_id":0,"name":"write_i32","span":{"filename":"src/io.rs","begin":[1286,4],"end":[1290,5]},"visibility":"default","docs":"Writes a signed 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i32::<BigEndian>(-34253).unwrap();\nwtr.write_i32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\xff\\xff\\x7a\\x33\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:272:59":{"id":"0:272:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1810,4],"end":[1812,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:100:1789":{"id":"0:100:1789","crate_id":0,"name":"read_u16_into","span":{"filename":"src/io.rs","begin":[562,4],"end":[569,5]},"visibility":"default","docs":"Reads a sequence of unsigned 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13834:3575":{"id":"2:13834:3575","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15883:2678"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50099:3576","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:245:1829":{"id":"0:245:1829","crate_id":0,"name":"read_i128_into","span":{"filename":"src/lib.rs","begin":[1173,4],"end":[1178,5]},"visibility":"default","docs":"Reads signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13731:54805":{"id":"2:13731:54805","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15889:2683"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6576:3531":{"id":"1:6576:3531","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6577:8241"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6647:3534":{"id":"1:6647:3534","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6648:54710"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:42:2397":{"id":"0:42:2397","crate_id":0,"name":"read_u8","span":{"filename":"src/io.rs","begin":[55,4],"end":[59,5]},"visibility":"default","docs":"Reads an unsigned 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![2, 5]);\nassert_eq!(2, rdr.read_u8().unwrap());\nassert_eq!(5, rdr.read_u8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3274:128":{"id":"2:3274:128","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3275:4389","2:3277:56376","2:3278:56377","2:3279:56378"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10565:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10572:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3872:3911":{"id":"2:3872:3911","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10803:143":{"id":"2:10803:143","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10804:718","2:10806:3240"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:325:1708":{"id":"0:325:1708","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2260,4],"end":[2267,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8634:4159":{"id":"2:8634:4159","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8636:3161"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:848-0:341:1616":{"id":"b:5:848-0:341:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2886:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:3170","5:851:3171","5:852:3172"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:347":{"id":"0:347","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,29],"end":[1806,31]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:3375:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:91:1746":{"id":"0:91:1746","crate_id":0,"name":"read_int128","span":{"filename":"src/io.rs","begin":[468,4],"end":[472,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i128"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13767:60053":{"id":"2:13767:60053","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:15889:2683","str::rsplit_terminator":"1:15889:2683","self::pattern":"2:13334:3942","`DoubleEndedIterator`":"2:8719:121","prim@char":"1:15883:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49841:4301","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:213:1699":{"id":"0:213:1699","crate_id":0,"name":"write_u48","span":{"filename":"src/lib.rs","begin":[442,4],"end":[444,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:852:3172":{"id":"5:852:3172","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5431:3540":{"id":"1:5431:3540","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5432:5265","1:5433:53925"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3498:3592":{"id":"2:3498:3592","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3500:183","2:3501:359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:339:1933":{"id":"0:339:1933","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2362,4],"end":[2371,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1839,0],"end":[1843,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3250:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:275:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:121:1846":{"id":"0:121:1846","crate_id":0,"name":"read_f64_into","span":{"filename":"src/io.rs","begin":[987,4],"end":[994,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3407:2968":{"id":"2:3407:2968","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:332:1856":{"id":"0:332:1856","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2299,4],"end":[2305,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13801:60062":{"id":"2:13801:60062","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:290:1692":{"id":"0:290:1692","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[2022,4],"end":[2024,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13747:54824":{"id":"2:13747:54824","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13334:3942","prim@char":"1:15883:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3616:131":{"id":"2:3616:131","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3618:382"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3619:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8675:152":{"id":"2:8675:152","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8676:3116","2:8677:3117","2:8678:773"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23140:4143":{"id":"2:23140:4143","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23141:58455","2:23142:1239","2:23143:1240","2:23144:58456","2:23145:58457","2:23146:58458","2:23147:58459","2:23148:58460","2:23149:58461","2:23150:58462"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23153:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13727:54786":{"id":"2:13727:54786","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13761:32076":{"id":"2:13761:32076","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15883:2678","self::pattern":"2:13334:3942"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:13126:3210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14074:151":{"id":"2:14074:151","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14075:183","2:14076:151","2:14077:772"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:362:414":{"id":"0:362:414","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1836,9],"end":[1836,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6645:3522":{"id":"1:6645:3522","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6646:54293"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3199-0:360:1615":{"id":"b:2:3199-0:360:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3176:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3173:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3202:3105"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13725:54785":{"id":"2:13725:54785","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:154:1701":{"id":"0:154:1701","crate_id":0,"name":"write_u64","span":{"filename":"src/io.rs","begin":[1367,4],"end":[1371,5]},"visibility":"default","docs":"Writes an unsigned 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u64::<BigEndian>(918733457491587).unwrap();\nwtr.write_u64::<BigEndian>(143).unwrap();\nassert_eq!(wtr, b\"\\x00\\x03\\x43\\x95\\x4d\\x60\\x86\\x83\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3537:4001":{"id":"2:3537:4001","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3539:1249"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13717:53925":{"id":"2:13717:53925","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12798:4419"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3434:3624":{"id":"2:3434:3624","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3436:183","2:3437:270"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:217:1708":{"id":"0:217:1708","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[522,4],"end":[522,61]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:346:664":{"id":"0:346:664","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1806,22],"end":[1806,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10525:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10514:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13754:3111":{"id":"2:13754:3111","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47810:178","self::pattern":"2:13334:3942","prim@char":"1:15883:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:263:1909":{"id":"0:263:1909","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[1654,4],"end":[1654,43]},"visibility":"default","docs":"Converts the given slice of unsigned 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u64(&mut numbers);\nassert_eq!(numbers, [5u64.to_be(), 65000u64.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6165:2858":{"id":"5:6165:2858","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4752:3552":{"id":"1:4752:3552","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4753:3198","1:4754:54741"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:24074:4020":{"id":"2:24074:4020","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:24075:4019"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:24070:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:285:1656":{"id":"0:285:1656","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[1977,4],"end":[1979,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:232:1770":{"id":"0:232:1770","crate_id":0,"name":"write_i64","span":{"filename":"src/lib.rs","begin":[854,4],"end":[856,5]},"visibility":"default","docs":"Writes a signed 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:206:1670":{"id":"0:206:1670","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[305,4],"end":[305,35]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3449:3923":{"id":"2:3449:3923","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3451:183","2:3452:563"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13832:60070":{"id":"2:13832:60070","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15883:2678"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50090:4314","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9535:3014":{"id":"2:9535:3014","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:202:1644":{"id":"0:202:1644","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[225,4],"end":[225,35]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3532:3998":{"id":"2:3532:3998","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3534:1246"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3520:3992":{"id":"2:3520:3992","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3522:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:94:1752":{"id":"0:94:1752","crate_id":0,"name":"read_f32","span":{"filename":"src/io.rs","begin":[499,4],"end":[503,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian single-precision floating point number from a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n]);\nassert_eq!(f32::consts::PI, rdr.read_f32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"f32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3183:232":{"id":"2:3183:232","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3185:128","2:3186:1431"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:157:1770":{"id":"0:157:1770","crate_id":0,"name":"write_i64","span":{"filename":"src/io.rs","begin":[1394,4],"end":[1398,5]},"visibility":"default","docs":"Writes a signed 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i64::<BigEndian>(i64::min_value()).unwrap();\nwtr.write_i64::<BigEndian>(i64::max_value()).unwrap();\nassert_eq!(wtr, b\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:378:1004":{"id":"0:378:1004","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1836,55],"end":[1836,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:37930:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:261:1900":{"id":"0:261:1900","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[1616,4],"end":[1616,43]},"visibility":"default","docs":"Converts the given slice of unsigned 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u16(&mut numbers);\nassert_eq!(numbers, [5u16.to_be(), 65000u16.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3407:2968-0:341:1616":{"id":"a:2:3407:2968-0:341:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3407:2968","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:166:1695":{"id":"0:166:1695","crate_id":0,"name":"write_uint","span":{"filename":"src/io.rs","begin":[1442,4],"end":[1450,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite unsigned 40 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_uint::<BigEndian>(312550384361, 5).unwrap();\nwtr.write_uint::<BigEndian>(43, 5).unwrap();\nassert_eq!(wtr, b\"\\x48\\xc5\\x74\\x62\\xe9\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:123:1850":{"id":"0:123:1850","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/io.rs","begin":[1039,4],"end":[1044,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Safety\n\nThis method is unsafe because there are no guarantees made about the\nfloating point values. In particular, this method does not check for\nsignaling NaNs, which may result in undefined behavior.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f64_into` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6219:3531":{"id":"1:6219:3531","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6220:3851","1:6221:3852","1:6222:8240","1:6223:54329","1:6225:54333","1:6227:54330","1:6228:54331","1:6230:54332"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13734:3971":{"id":"2:13734:3971","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15883:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49767:4297","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13711:60047":{"id":"2:13711:60047","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7602:3698":{"id":"1:7602:3698","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7603:54255"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:41:1583":{"id":"0:41:1583","crate_id":0,"name":"ReadBytesExt","span":{"filename":"src/io.rs","begin":[30,0],"end":[1045,1]},"visibility":"public","docs":"Extends [`Read`] with methods for reading numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`]:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:42:2397","0:44:2404","0:46:1644","0:49:1713","0:52:1652","0:55:1718","0:58:1656","0:61:1724","0:64:1663","0:67:1729","0:70:1670","0:73:1734","0:76:1677","0:79:1739","0:82:1653","0:85:1719","0:88:1687","0:91:1746","0:94:1752","0:97:1759","0:100:1789","0:102:1797","0:104:1803","0:106:1809","0:108:2504","0:109:1815","0:111:1821","0:113:1825","0:115:1829","0:117:1836","0:119:1842","0:121:1846","0:123:1850"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:4410:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:125"]}},"0:345":{"id":"0:345","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,22],"end":[1806,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10565:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:346:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3469:3626":{"id":"2:3469:3626","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3471:1370"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:848-0:360:1615":{"id":"b:5:848-0:360:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2886:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:844:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:850:3170","5:851:3171","5:852:3172"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13709:798":{"id":"2:13709:798","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15883:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13741:54822":{"id":"2:13741:54822","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15883:2678","self::pattern":"2:13334:3942"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[78,34],"end":[78,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::WriteBytesExt","name":"WriteBytesExt","id":"0:127:1584","glob":false}},"0:343:414":{"id":"0:343:414","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1806,9],"end":[1806,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14059:139":{"id":"2:14059:139","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14060:183","2:14061:1020"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13782:60056":{"id":"2:13782:60056","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,55],"end":[1836,65]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","le","gt","ge"],"trait":{"name":"PartialOrd","id":"2:2965:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:378:1004"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:210:1692":{"id":"0:210:1692","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[383,4],"end":[383,41]},"visibility":"default","docs":"Writes an unsigned 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_u16(&mut buf, 1_000);\nassert_eq!(1_000, LittleEndian::read_u16(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3455:3926":{"id":"2:3455:3926","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3457:183","2:3458:1111"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13719:310":{"id":"2:13719:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15889:2683","`u8`":"1:15900:2692"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3508:3986":{"id":"2:3508:3986","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3510:183","2:3511:1245"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:58:1656":{"id":"0:58:1656","crate_id":0,"name":"read_u32","span":{"filename":"src/io.rs","begin":[217,4],"end":[221,5]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2870-0:360:1615":{"id":"b:2:2870-0:360:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2864:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2872:53830"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:2:2870-0:341:1616":{"id":"b:2:2870-0:341:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2864:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2872:53830"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6183:60709":{"id":"5:6183:60709","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:319:1692":{"id":"0:319:1692","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[2230,4],"end":[2232,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3167:75":{"id":"2:3167:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3169:311"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:44:2404":{"id":"0:44:2404","crate_id":0,"name":"read_i8","span":{"filename":"src/io.rs","begin":[85,4],"end":[89,5]},"visibility":"default","docs":"Reads a signed 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![0x02, 0xfb]);\nassert_eq!(2, rdr.read_i8().unwrap());\nassert_eq!(-5, rdr.read_i8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:851:3171":{"id":"5:851:3171","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:225:1746":{"id":"0:225:1746","crate_id":0,"name":"read_int128","span":{"filename":"src/lib.rs","begin":[698,4],"end":[700,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:294:1695":{"id":"0:294:1695","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[2042,4],"end":[2053,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13829:54260":{"id":"2:13829:54260","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:354:421":{"id":"0:354:421","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1806,39],"end":[1806,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:37930:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13803:60063":{"id":"2:13803:60063","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13721:54783":{"id":"2:13721:54783","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47810:178"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13791:60058":{"id":"2:13791:60058","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13334:3942","`DoubleEndedIterator`":"2:8719:121","str::rmatch_indices":"1:15889:2683","prim@char":"1:15883:2678"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49941:4305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4099-0:341:1616":{"id":"b:2:4099-0:341:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4097:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4101:1444"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:106:1809":{"id":"0:106:1809","crate_id":0,"name":"read_u128_into","span":{"filename":"src/io.rs","begin":[673,4],"end":[683,5]},"visibility":"default","docs":"Reads a sequence of unsigned 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6241:3528":{"id":"1:6241:3528","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6242:56912","1:6243:7583","1:6244:56913","1:6245:56914","1:6246:56915","1:6247:56916"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13735:1969":{"id":"2:13735:1969","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49777:2906","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6841:3570":{"id":"1:6841:3570","crate_id":1,"name":"TcpStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6842:54503","1:6843:54504"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3203-0:360:1615":{"id":"b:2:3203-0:360:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3176:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3205:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:365:664":{"id":"0:365:664","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1836,22],"end":[1836,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10525:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10514:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2965:186":{"id":"2:2965:186","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2967:1004","2:2968:832","2:2969:797","2:2970:716","2:2971:700"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2919:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:299:1797":{"id":"0:299:1797","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2075,4],"end":[2077,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:136:1694":{"id":"0:136:1694","crate_id":0,"name":"write_u24","span":{"filename":"src/io.rs","begin":[1205,4],"end":[1209,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u24::<BigEndian>(267).unwrap();\nwtr.write_u24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\x00\\x01\\x0b\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3209-0:360:1615":{"id":"b:2:3209-0:360:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3183:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3179:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3212:128","2:3213:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13788:60057":{"id":"2:13788:60057","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8719:121","prim@char":"1:15883:2678","str::matches":"1:15889:2683","self::pattern":"2:13334:3942"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50013:4309","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23437:4045":{"id":"2:23437:4045","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:24074:4020","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23428:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:240:1803":{"id":"0:240:1803","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[1039,4],"end":[1039,50]},"visibility":"default","docs":"Reads unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:181:1780":{"id":"0:181:1780","crate_id":0,"name":"write_f64","span":{"filename":"src/io.rs","begin":[1570,4],"end":[1574,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian double-precision floating point number to a `Write`:\n\n```rust\nuse std::f64;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f64::<BigEndian>(f64::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x09\\x21\\xfb\\x54\\x44\\x2d\\x18\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"f64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:218:1713":{"id":"0:218:1713","crate_id":0,"name":"read_i16","span":{"filename":"src/lib.rs","begin":[542,4],"end":[544,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102:1797":{"id":"0:102:1797","crate_id":0,"name":"read_u32_into","span":{"filename":"src/io.rs","begin":[597,4],"end":[604,5]},"visibility":"default","docs":"Reads a sequence of unsigned 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9163:4097":{"id":"2:9163:4097","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8199:4098","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10574:2796":{"id":"2:10574:2796","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10575:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:312":{"id":"0:312","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2186,0],"end":[2384,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_f64_into_unchecked","read_int","read_u24","read_i16","write_f32","write_f64","write_i48","read_i128_into","read_f64","write_i128_into","write_i16_into","from_slice_i128","read_i48","from_slice_i16","read_f32_into_unchecked","write_int128","read_f32_into","write_i32","write_i24","write_u48","read_i32_into","write_i64_into","read_i16_into","write_i8_into","write_f64_into","read_i128","from_slice_i32","read_u48","read_i32","read_i24","read_f64_into","write_i128","write_i64","write_int","write_i16","write_u24","read_i64_into","read_f32","write_i32_into","read_int128","write_f32_into","read_i64","from_slice_i64"],"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:313:1644","0:314:1656","0:315:1670","0:316:1677","0:317:1653","0:318:1687","0:319:1692","0:320:1697","0:321:1701","0:322:1703","0:323:1695","0:325:1708","0:327:1789","0:328:1797","0:329:1803","0:330:1809","0:331:1853","0:332:1856","0:333:1859","0:334:1862","0:335:1900","0:336:1905","0:337:1909","0:338:1913","0:339:1933","0:340:1935"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13804:60064":{"id":"2:13804:60064","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:363":{"id":"0:363","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,16],"end":[1836,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:215:1703":{"id":"0:215:1703","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[482,4],"end":[482,43]},"visibility":"default","docs":"Writes an unsigned 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1049,0],"end":[1049,48]},"visibility":{"restricted":{"parent":"0:26:1582","path":"::io"}},"docs":"All types that implement `Read` get methods defined in `ReadBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:4410:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["read_u16_into","read_f64_into_unchecked","read_int","read_u24","read_i16","read_i128_into","read_f64","read_u128","read_i48","read_u32","read_uint","read_f32_into_unchecked","read_u16","read_f32_into","read_u8","read_i32_into","read_uint128","read_i16_into","read_u128_into","read_i128","read_u64_into","read_u32_into","read_i8_into","read_u48","read_i32","read_i24","read_f64_into","read_i8","read_i64_into","read_f32","read_int128","read_i64","read_u64"],"trait":{"name":"ReadBytesExt","id":"0:41:1583","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"generic","inner":"R"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:175:1775":{"id":"0:175:1775","crate_id":0,"name":"write_int128","span":{"filename":"src/io.rs","begin":[1508,4],"end":[1516,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:310:1933":{"id":"0:310:1933","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2162,4],"end":[2171,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13708":{"id":"2:13708","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12787:1354","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13709:798","2:13710:3112","2:13711:60047","2:13712:60048","2:13714:60049","2:13717:53925","2:13718:60050","2:13719:310","2:13720:1817","2:13721:54783","2:13723:54784","2:13725:54785","2:13727:54786","2:13729:3612","2:13730:60051","2:13731:54805","2:13732:54806","2:13733:4332","2:13734:3971","2:13735:1969","2:13736:32209","2:13737:32199","2:13738:4796","2:13739:60052","2:13740:32194","2:13741:54822","2:13744:54823","2:13747:54824","2:13750:3151","2:13754:3111","2:13758:54813","2:13761:32076","2:13764:54816","2:13767:60053","2:13770:60054","2:13773:54818","2:13776:54820","2:13779:60055","2:13782:60056","2:13785:2761","2:13788:60057","2:13791:60058","2:13794:60059","2:13797:60060","2:13799:60061","2:13801:60062","2:13803:60063","2:13804:60064","2:13805:60065","2:13808:60066","2:13811:14832","2:13814:54825","2:13817:60067","2:13820:60068","2:13823:60069","2:13826:4189","2:13828:4451","2:13829:54260","2:13830:54261","2:13831:54262","2:13832:60070","2:13834:3575","2:13835:60071"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9536:3013-0:341:1616":{"id":"a:2:9536:3013-0:341:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9536:3013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:4898:4094":{"id":"2:4898:4094","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4899:3116","2:4900:59347","2:4901:3119"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4485:2900":{"id":"1:4485:2900","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4486:56741","1:4487:39852","1:4488:56743","1:4489:56742"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13830:54261":{"id":"2:13830:54261","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79:1739":{"id":"0:79:1739","crate_id":0,"name":"read_i128","span":{"filename":"src/io.rs","begin":[402,4],"end":[406,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i128::min_value(), rdr.read_i128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i128"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3407:2968-0:360:1615":{"id":"a:2:3407:2968-0:360:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3407:2968","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3202:3105":{"id":"2:3202:3105","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3176:136"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:342":{"id":"0:342","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,9],"end":[1806,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2886:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:343:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:178:1777":{"id":"0:178:1777","crate_id":0,"name":"write_f32","span":{"filename":"src/io.rs","begin":[1541,4],"end":[1545,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian single-precision floating point number to a `Write`:\n\n```rust\nuse std::f32;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f32::<BigEndian>(f32::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x49\\x0f\\xdb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"f32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13353:3941":{"id":"2:13353:3941","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13355:3964","2:13356:928","2:13357:59601","2:13358:59602"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:335:1900":{"id":"0:335:1900","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2326,4],"end":[2332,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:119:1842":{"id":"0:119:1842","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/io.rs","begin":[948,4],"end":[953,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\n\nReads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f32_into` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:284:1644":{"id":"0:284:1644","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[1972,4],"end":[1974,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:247:1842":{"id":"0:247:1842","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/lib.rs","begin":[1237,4],"end":[1239,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f32_into` instead"},"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:133:1761":{"id":"0:133:1761","crate_id":0,"name":"write_i16","span":{"filename":"src/io.rs","begin":[1178,4],"end":[1182,5]},"visibility":"default","docs":"Writes a signed 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i16::<BigEndian>(193).unwrap();\nwtr.write_i16::<BigEndian>(-132).unwrap();\nassert_eq!(wtr, b\"\\x00\\xc1\\xff\\x7c\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i16"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:327:1789":{"id":"0:327:1789","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2270,4],"end":[2272,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10813:147":{"id":"2:10813:147","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10814:656","2:10815:1987","2:10816:2559","2:10817:1692","2:10818:1697","2:10819:1701","2:10820:1703","2:10821:56426","2:10822:2566","2:10823:1761","2:10824:1766","2:10825:1770","2:10826:1773","2:10827:56427","2:10828:56428","2:10829:1550"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13344:3943":{"id":"2:13344:3943","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13346:3941","2:13347:59228","2:13348:59229","2:13349:59230","2:13350:59232","2:13351:59231","2:13352:59233"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:163:1773":{"id":"0:163:1773","crate_id":0,"name":"write_i128","span":{"filename":"src/io.rs","begin":[1410,4],"end":[1414,5]},"visibility":"default","docs":"Writes a signed 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i128"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:309:1913":{"id":"0:309:1913","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2153,4],"end":[2159,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:287:1677":{"id":"0:287:1677","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[1987,4],"end":[1989,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:222:1734":{"id":"0:222:1734","crate_id":0,"name":"read_i64","span":{"filename":"src/lib.rs","begin":[630,4],"end":[632,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:320:1697":{"id":"0:320:1697","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[2235,4],"end":[2237,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:358":{"id":"0:358","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,55],"end":[1806,65]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","le","gt","ge"],"trait":{"name":"PartialOrd","id":"2:2965:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:359:1004"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9536:3013":{"id":"2:9536:3013","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:205:1663":{"id":"0:205:1663","crate_id":0,"name":"read_u48","span":{"filename":"src/lib.rs","begin":[284,4],"end":[286,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70:1670":{"id":"0:70:1670","crate_id":0,"name":"read_u64","span":{"filename":"src/io.rs","begin":[321,4],"end":[325,5]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83]);\nassert_eq!(918733457491587, rdr.read_u64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9535:3014-0:341:1616":{"id":"a:2:9535:3014-0:341:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9535:3014","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:306:1900":{"id":"0:306:1900","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2126,4],"end":[2132,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13723:54784":{"id":"2:13723:54784","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47810:178"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5567:3512":{"id":"1:5567:3512","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5568:54518"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:73:1734":{"id":"0:73:1734","crate_id":0,"name":"read_i64","span":{"filename":"src/io.rs","begin":[347,4],"end":[351,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i64::min_value(), rdr.read_i64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:260:1891":{"id":"0:260:1891","crate_id":0,"name":"write_f64_into","span":{"filename":"src/lib.rs","begin":[1592,4],"end":[1597,5]},"visibility":"default","docs":"Writes IEEE754 double-precision (8 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13739:60052":{"id":"2:13739:60052","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50055:4310","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49:1713":{"id":"0:49:1713","crate_id":0,"name":"read_i16","span":{"filename":"src/io.rs","begin":[139,4],"end":[143,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0xc1, 0xff, 0x7c]);\nassert_eq!(193, rdr.read_i16::<BigEndian>().unwrap());\nassert_eq!(-132, rdr.read_i16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i16"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3656:3939":{"id":"2:3656:3939","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3658:242","2:3659:208","2:3660:59636"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:127:1584":{"id":"0:127:1584","crate_id":0,"name":"WriteBytesExt","span":{"filename":"src/io.rs","begin":[1073,0],"end":[1575,1]},"visibility":"public","docs":"Extends [`Write`] with methods for writing numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a [`Write`]:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, vec![2, 5, 3, 0]);\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:128:2559","0:129:2566","0:130:1692","0:133:1761","0:136:1694","0:139:1763","0:142:1697","0:145:1766","0:148:1699","0:151:1768","0:154:1701","0:157:1770","0:160:1703","0:163:1773","0:166:1695","0:169:1764","0:172:1708","0:175:1775","0:178:1777","0:181:1780"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:4467:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:184"]}},"0:351:718":{"id":"0:351:718","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1806,33],"end":[1806,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10813:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:334:1862":{"id":"0:334:1862","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2317,4],"end":[2323,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3378:224":{"id":"2:3378:224","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3214-0:360:1615":{"id":"b:2:3214-0:360:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3173:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3183:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3217:128","2:3218:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:360:1615":{"id":"0:360:1615","crate_id":0,"name":"LittleEndian","span":{"filename":"src/lib.rs","begin":[1837,0],"end":[1837,24]},"visibility":"public","docs":"Defines little-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:3378:224-0:360:1615","a:2:9536:3013-0:360:1615","a:2:3366:215-0:360:1615","a:2:3407:2968-0:360:1615","a:2:9535:3014-0:360:1615","b:2:3203-0:360:1615","b:2:2867-0:360:1615","b:2:3209-0:360:1615","b:2:4099-0:360:1615","b:2:3199-0:360:1615","b:2:2870-0:360:1615","b:2:3214-0:360:1615","b:5:848-0:360:1615","0:361","0:363","0:364","0:366","0:367","0:369","0:372","0:374","0:375","0:377","0:274","0:312"]}},"0:262:1905":{"id":"0:262:1905","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[1635,4],"end":[1635,43]},"visibility":"default","docs":"Converts the given slice of unsigned 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u32(&mut numbers);\nassert_eq!(numbers, [5u32.to_be(), 65000u32.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:5553:3511":{"id":"1:5553:3511","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5554:53930","1:5555:53931","1:5556:53932","1:5557:53933"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3176:136":{"id":"2:3176:136","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3178:685"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:304:1859":{"id":"0:304:1859","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2108,4],"end":[2114,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3250:116":{"id":"2:3250:116","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3251:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:253:1862":{"id":"0:253:1862","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[1393,4],"end":[1393,53]},"visibility":"default","docs":"Writes unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:10580:2799":{"id":"2:10580:2799","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10581:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:212:1697":{"id":"0:212:1697","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[423,4],"end":[423,41]},"visibility":"default","docs":"Writes an unsigned 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3217:128":{"id":"2:3217:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39110:2789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:115:1829":{"id":"0:115:1829","crate_id":0,"name":"read_i128_into","span":{"filename":"src/io.rs","begin":[858,4],"end":[868,5]},"visibility":"default","docs":"Reads a sequence of signed 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i128"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:76:1677":{"id":"0:76:1677","crate_id":0,"name":"read_u128","span":{"filename":"src/io.rs","begin":[376,4],"end":[380,5]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83,\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83\n]);\nassert_eq!(16947640962301618749969007319746179, rdr.read_u128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u128"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3209-0:341:1616":{"id":"b:2:3209-0:341:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3183:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3179:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3212:128","2:3213:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:291:1697":{"id":"0:291:1697","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[2027,4],"end":[2029,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23770:16336":{"id":"2:23770:16336","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23771:58697","2:23772:58696","2:23773:58698"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23765:4022","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3831:138":{"id":"2:3831:138","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3833:691"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3826:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2867-0:341:1616":{"id":"b:2:2867-0:341:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2861:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2869:2748"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:337:1909":{"id":"0:337:1909","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2344,4],"end":[2350,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4097:68":{"id":"2:4097:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4098:1444"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:9143:3547":{"id":"1:9143:3547","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9144:53949","1:9145:53950","1:9146:53951","1:9147:53952","1:9148:53953","1:9149:39442","1:9150:53948"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6745:3521":{"id":"1:6745:3521","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6746:54731"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6164:60706":{"id":"5:6164:60706","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2972","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2972","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:3180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:231:1768":{"id":"0:231:1768","crate_id":0,"name":"write_i48","span":{"filename":"src/lib.rs","begin":[832,4],"end":[834,5]},"visibility":"default","docs":"Writes a signed 48 bit integer `n` to `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2919:185":{"id":"2:2919:185","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2921:608","2:2922:913"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:23177:4021":{"id":"2:23177:4021","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23178:4019","2:23179:1261","2:23180:1286"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4410:2385":{"id":"1:4410:2385","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4411:2033","1:4412:53457","1:4414:53458","1:4415:53459","1:4416:2897","1:4417:2398","1:4418:53460","1:4420:53461","1:4421:3140","1:4422:1969","1:4423:3124","1:4425:2959"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6339:3577":{"id":"1:6339:3577","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6340:54093","1:6341:54094"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:250:1853":{"id":"0:250:1853","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[1324,4],"end":[1324,51]},"visibility":"default","docs":"Writes unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:2924:125":{"id":"2:2924:125","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2919:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13820:60068":{"id":"2:13820:60068","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15883:2678","self::pattern":"2:13334:3942"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23104:4139":{"id":"2:23104:4139","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23105:4019","2:23106:58455","2:23107:1239","2:23108:1240","2:23109:42841","2:23110:58499","2:23111:58500","2:23112:58501","2:23113:58502","2:23114:58503","2:23115:58456","2:23116:58457","2:23117:58458","2:23118:58459","2:23119:58460","2:23120:58461","2:23121:58462"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23153:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:303:1856":{"id":"0:303:1856","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2099,4],"end":[2105,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:278:1959":{"id":"0:278:1959","crate_id":0,"name":"NativeEndian","span":{"filename":"src/lib.rs","begin":[1885,0],"end":[1885,37]},"visibility":"public","docs":"Defines system native-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\nOn this platform, this is an alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":["#[cfg(target_endian = \"little\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:283":{"id":"0:283","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1970,0],"end":[2184,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_f64_into_unchecked","read_int","read_u24","read_i16","write_f32","write_f64","write_i48","read_i128_into","read_f64","write_i128_into","write_i16_into","from_slice_i128","read_i48","from_slice_i16","read_f32_into_unchecked","write_int128","read_f32_into","write_i32","write_i24","write_u48","read_i32_into","write_i64_into","read_i16_into","write_i8_into","write_f64_into","read_i128","from_slice_i32","read_u48","read_i32","read_i24","read_f64_into","write_i128","write_i64","write_int","write_i16","write_u24","read_i64_into","read_f32","write_i32_into","read_int128","write_f32_into","read_i64","from_slice_i64"],"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:284:1644","0:285:1656","0:286:1670","0:287:1677","0:288:1653","0:289:1687","0:290:1692","0:291:1697","0:292:1701","0:293:1703","0:294:1695","0:296:1708","0:298:1789","0:299:1797","0:300:1803","0:301:1809","0:302:1853","0:303:1856","0:304:1859","0:305:1862","0:306:1900","0:307:1905","0:308:1909","0:309:1913","0:310:1933","0:311:1935"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:311:1935":{"id":"0:311:1935","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2174,4],"end":[2183,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:373:421":{"id":"0:373:421","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1836,39],"end":[1836,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:37930:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3826:229":{"id":"2:3826:229","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3827:183","2:3828:3914","2:3829:690","2:3830:375"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3831:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3826:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,44],"end":[1836,53]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2919:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:376:608"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:236:1777":{"id":"0:236:1777","crate_id":0,"name":"write_f32","span":{"filename":"src/lib.rs","begin":[945,4],"end":[947,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"f32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:269:1933":{"id":"0:269:1933","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[1780,4],"end":[1780,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 single-precision (4 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:108:2504":{"id":"0:108:2504","crate_id":0,"name":"read_i8_into","span":{"filename":"src/io.rs","begin":[716,4],"end":[719,5]},"visibility":"default","docs":"Reads a sequence of signed 8 bit integers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to read into a `&mut [i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `i8` individually.)\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 251, 3]);\nlet mut dst = [0; 3];\nrdr.read_i8_into(&mut dst).unwrap();\nassert_eq!([2, -5, 3], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8199:4098":{"id":"2:8199:4098","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8200:58321","2:8201:58322","2:8202:58319","2:8203:58315","2:8204:58323","2:8205:58320","2:8206:58318"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2886:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2965:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:275:59":{"id":"0:275:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1840,4],"end":[1842,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:288:1653":{"id":"0:288:1653","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[1992,4],"end":[2004,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:344":{"id":"0:344","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,16],"end":[1806,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,9],"end":[1836,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2886:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:362:414"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8744:2970":{"id":"2:8744:2970","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8745:798","2:8746:3112"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8876:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9156:3424":{"id":"2:9156:3424","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8876:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3589:117":{"id":"2:3589:117","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3590:226","2:3591:548"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3179:233":{"id":"2:3179:233","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3181:128","2:3182:1432"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3674:3738":{"id":"2:3674:3738","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3676:183","2:3677:757"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3173:150":{"id":"2:3173:150","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3175:3105"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3214-0:341:1616":{"id":"b:2:3214-0:341:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3173:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3183:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3217:128","2:3218:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10582:191":{"id":"2:10582:191","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10583:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10848:2836":{"id":"2:10848:2836","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10849:147","2:10850:33501","2:10851:54161"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:370:718":{"id":"0:370:718","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1836,33],"end":[1836,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10813:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2955:179":{"id":"2:2955:179","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2956:421","2:2957:2018","2:2958:3096","2:2959:3103"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2924:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2965:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:214:1701":{"id":"0:214:1701","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[463,4],"end":[463,41]},"visibility":"default","docs":"Writes an unsigned 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:249:1850":{"id":"0:249:1850","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/lib.rs","begin":[1299,4],"end":[1301,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f64_into` instead"},"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13776:54820":{"id":"2:13776:54820","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15883:2678","self::pattern":"2:13334:3942","str::splitn":"1:15889:2683"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49913:3206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3205:685":{"id":"2:3205:685","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3378:224-0:360:1615":{"id":"a:2:3378:224-0:360:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3378:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:0:2274":{"id":"0:0:2274","crate_id":0,"name":"byteorder","span":{"filename":"src/lib.rs","begin":[1,0],"end":[4052,1]},"visibility":"public","docs":"This crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].\n\nThe organization of the crate is pretty simple. A trait, [`ByteOrder`], specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]\nand [`LittleEndian`] implement these methods. Finally, [`ReadBytesExt`] and\n[`WriteBytesExt`] provide convenience methods available to all types that\nimplement [`Read`] and [`Write`].\n\nAn alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve\ncode clarity.\n\nAn additional alias, [`NativeEndian`], is provided for the endianness of the\nlocal platform. This is convenient when serializing data for use and\nconversions are not desired.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`] type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a [`Write`] type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n\n# Optional Features\n\nThis crate optionally provides support for 128 bit values (`i128` and `u128`)\nwhen built with the `i128` feature enabled.\n\nThis crate can also be used without the standard library.\n\n# Alternatives\n\nNote that as of Rust 1.32, the standard numeric types provide built-in methods\nlike `to_le_bytes` and `from_le_bytes`, which support some of the same use\ncases.\n\n[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness\n[`ByteOrder`]: trait.ByteOrder.html\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`ReadBytesExt`]: trait.ReadBytesExt.html\n[`WriteBytesExt`]: trait.WriteBytesExt.html\n[`NetworkEndian`]: type.NetworkEndian.html\n[`NativeEndian`]: type.NativeEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":["#![deny(missing_docs)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:20","0:23","0:201:1640","0:341:1616","0:273:1944","0:360:1615","0:276:1948","0:277:1956","0:278:1959"],"is_stripped":false}},"2:13785:2761":{"id":"2:13785:2761","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"1:15889:2683","self::pattern":"2:13334:3942","prim@char":"1:15883:2678","`DoubleEndedIterator`":"2:8719:121"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49995:4308","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4492:2903":{"id":"1:4492:2903","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4493:58156","1:4494:58157","1:4495:58159","1:4497:2902","1:4498:58158","1:4500:54813","1:4501:4796"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4410:2385","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:296:1708":{"id":"0:296:1708","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2056,4],"end":[2067,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3199-0:341:1616":{"id":"b:2:3199-0:341:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3176:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3173:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3202:3105"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:227:1759":{"id":"0:227:1759","crate_id":0,"name":"read_f64","span":{"filename":"src/lib.rs","begin":[744,4],"end":[746,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13826:4189":{"id":"2:13826:4189","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13273:3657","`FromStr`":"2:13273:3657"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47935:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13273:3657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13273:3657","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:366":{"id":"0:366","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,29],"end":[1836,31]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:3375:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:293:1703":{"id":"0:293:1703","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[2037,4],"end":[2039,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:850:3170":{"id":"5:850:3170","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:85:1719":{"id":"0:85:1719","crate_id":0,"name":"read_int","span":{"filename":"src/io.rs","begin":[452,4],"end":[456,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xc1, 0xff, 0x7c]);\nassert_eq!(-4063364, rdr.read_int::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3465:3625":{"id":"2:3465:3625","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3467:271"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:321:1701":{"id":"0:321:1701","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[2240,4],"end":[2242,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:148:1699":{"id":"0:148:1699","crate_id":0,"name":"write_u48","span":{"filename":"src/io.rs","begin":[1313,4],"end":[1317,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u48::<BigEndian>(52360336390828).unwrap();\nwtr.write_u48::<BigEndian>(541).unwrap();\nassert_eq!(wtr, b\"\\x2f\\x9f\\x17\\x40\\x3a\\xac\\x00\\x00\\x00\\x00\\x02\\x1d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3514:3989":{"id":"2:3514:3989","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3516:183","2:3517:1248"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3486:3981":{"id":"2:3486:3981","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3487:183","2:3488:958"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:223:1739":{"id":"0:223:1739","crate_id":0,"name":"read_i128","span":{"filename":"src/lib.rs","begin":[652,4],"end":[654,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:237:1780":{"id":"0:237:1780","crate_id":0,"name":"write_f64","span":{"filename":"src/lib.rs","begin":[968,4],"end":[970,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"f64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3439:3594":{"id":"2:3439:3594","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3441:183","2:3442:1369"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8671:137":{"id":"2:8671:137","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8673:688"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3678:4036":{"id":"2:3678:4036","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3680:758"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3674:3738","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:356":{"id":"0:356","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,44],"end":[1806,53]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2919:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:357:608"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13712:60048":{"id":"2:13712:60048","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13364:3946":{"id":"2:13364:3946","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13823:60069":{"id":"2:13823:60069","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13334:3942","prim@char":"1:15883:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13770:60054":{"id":"2:13770:60054","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:15889:2683","str::split_terminator":"1:15889:2683","self::pattern":"2:13334:3942","prim@char":"1:15883:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49859:4302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13714:60049":{"id":"2:13714:60049","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15889:2683"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3105:2790":{"id":"2:3105:2790","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3104:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:169:1764":{"id":"0:169:1764","crate_id":0,"name":"write_int","span":{"filename":"src/io.rs","begin":[1478,4],"end":[1486,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite signed 56 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_int::<BigEndian>(-3548172039376767, 7).unwrap();\nwtr.write_int::<BigEndian>(43, 7).unwrap();\nassert_eq!(wtr, b\"\\xf3\\x64\\xf4\\xd1\\xfd\\xb0\\x81\\x00\\x00\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:235:1775":{"id":"0:235:1775","crate_id":0,"name":"write_int128","span":{"filename":"src/lib.rs","begin":[922,4],"end":[924,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6573:3545":{"id":"1:6573:3545","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6574:7623","1:6575:54530"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:1614","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13805:60065":{"id":"2:13805:60065","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15883:2678","self::pattern":"2:13334:3942"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13364:3946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10515:2548":{"id":"2:10515:2548","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10516:1550","2:10517:54469","2:10519:53618"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:317:1653":{"id":"0:317:1653","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[2208,4],"end":[2216,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3473:3933":{"id":"2:3473:3933","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3475:899"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10572:120":{"id":"2:10572:120","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10573:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4101:1444":{"id":"2:4101:1444","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46338:4026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3493:3591":{"id":"2:3493:3591","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3495:183","2:3496:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:286:1670":{"id":"0:286:1670","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[1982,4],"end":[1984,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6649:3535":{"id":"1:6649:3535","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6650:56867"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:273:1944":{"id":"0:273:1944","crate_id":0,"name":"BE","span":{"filename":"src/lib.rs","begin":[1818,0],"end":[1818,24]},"visibility":"public","docs":"A type alias for [`BigEndian`].\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"2:13710:3112":{"id":"2:13710:3112","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:46:1644":{"id":"0:46:1644","crate_id":0,"name":"read_u16","span":{"filename":"src/io.rs","begin":[112,4],"end":[116,5]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u16"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:307:1905":{"id":"0:307:1905","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2135,4],"end":[2141,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3218:1431":{"id":"2:3218:1431","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47935:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:3183:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:257:1885":{"id":"0:257:1885","crate_id":0,"name":"write_i64_into","span":{"filename":"src/lib.rs","begin":[1506,4],"end":[1511,5]},"visibility":"default","docs":"Writes signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i64"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3503:3593":{"id":"2:3503:3593","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:183","2:3506:362"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13729:3612":{"id":"2:13729:3612","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3674:3738","str::slice_mut_unchecked":"1:15889:2683","`str`":"1:15889:2683"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:258:1887":{"id":"0:258:1887","crate_id":0,"name":"write_i128_into","span":{"filename":"src/lib.rs","begin":[1534,4],"end":[1539,5]},"visibility":"default","docs":"Writes signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i128"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13733:4332":{"id":"2:13733:4332","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15883:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49761:4296","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:251:1856":{"id":"0:251:1856","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[1347,4],"end":[1347,51]},"visibility":"default","docs":"Writes unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:204:1656":{"id":"0:204:1656","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[265,4],"end":[265,35]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:109:1815":{"id":"0:109:1815","crate_id":0,"name":"read_i16_into","span":{"filename":"src/io.rs","begin":[747,4],"end":[754,5]},"visibility":"default","docs":"Reads a sequence of signed 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i16"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1031:3573":{"id":"1:1031:3573","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1032:3170","1:1033:4451","1:1034:54258","1:1035:54259","1:1036:54260","1:1037:54261","1:1038:54262"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:374":{"id":"0:374","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,44],"end":[1836,53]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:3374:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:238:1789":{"id":"0:238:1789","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[993,4],"end":[993,50]},"visibility":"default","docs":"Reads unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3481:3937":{"id":"2:3481:3937","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3483:1112"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4148:4025":{"id":"2:4148:4025","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4149:56378"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:292:1701":{"id":"0:292:1701","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[2032,4],"end":[2034,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:315:1670":{"id":"0:315:1670","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[2198,4],"end":[2200,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:336:1905":{"id":"0:336:1905","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2335,4],"end":[2341,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8876:158":{"id":"2:8876:158","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8877:3116","2:8878:928","2:8879:3118","2:8882:3119","2:8883:500","2:8885:3120","2:8888:3121","2:8889:3122","2:8890:3123","2:8891:3124","2:8893:1989","2:8895:3125","2:8896:3126","2:8898:847","2:8901:3127","2:8908:3128","2:8910:3129","2:8913:3130","2:8914:3131","2:8915:3132","2:8917:3133","2:8919:3134","2:8922:1322","2:8923:2959","2:8924:3135","2:8928:3136","2:8931:3137","2:8932:3138","2:8933:3139","2:8935:3140","2:8936:2257","2:8938:3141","2:8941:3142","2:8943:3143","2:8953:3144","2:8968:3145","2:8970:3146","2:8974:3147","2:8983:3148","2:8986:3149","2:8988:3150","2:8991:282","2:8998:300","2:9005:3151","2:9012:3152","2:9021:3153","2:9031:1021","2:9038:3154","2:9045:2018","2:9046:3096","2:9047:3100","2:9059:3099","2:9066:3098","2:9078:3097","2:9085:3155","2:9086:3156","2:9091:3157","2:9094:3158","2:9097:3159","2:9098:3160","2:9100:3161","2:9102:3162","2:9104:421","2:9107:3163","2:9110:1004","2:9113:3164","2:9116:608","2:9119:3165","2:9122:913","2:9124:832","2:9126:797","2:9128:716","2:9130:700","2:9132:3166","2:9133:3167","2:9141:3168"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3203-0:341:1616":{"id":"b:2:3203-0:341:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3176:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3205:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:313:1644":{"id":"0:313:1644","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[2188,4],"end":[2190,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:359:1004":{"id":"0:359:1004","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1806,55],"end":[1806,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:37930:180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23765:4022":{"id":"2:23765:4022","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23766:1284","2:23767:1283","2:23768:1281","2:23769:1280"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23177:4021","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:364":{"id":"0:364","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,22],"end":[1836,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10565:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:365:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3909:3912":{"id":"2:3909:3912","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:254:1876":{"id":"0:254:1876","crate_id":0,"name":"write_i8_into","span":{"filename":"src/lib.rs","begin":[1422,4],"end":[1427,5]},"visibility":"default","docs":"Writes signed 8 bit integers from `src` into `dst`.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to write from a `&[i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `u8` individually.)\n\n# Panics\n\nPanics when `buf.len() != src.len()`.\n\n# Examples\n\nWrite and read `i8` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian, ReadBytesExt};\n\nlet mut bytes = [0; 4];\nlet numbers_given = [1, 2, 0xf, 0xe];\nLittleEndian::write_i8_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nbytes.as_ref().read_i8_into(&mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13773:54818":{"id":"2:13773:54818","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15883:2678","str::rsplitn":"1:15889:2683","self::pattern":"2:13334:3942"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49895:3208","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14542:3179":{"id":"2:14542:3179","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14543:54544","2:14544:54545","2:14545:54546","2:14546:54547","2:14547:54548","2:14548:54549","2:14549:3140"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:229:1763":{"id":"0:229:1763","crate_id":0,"name":"write_i24","span":{"filename":"src/lib.rs","begin":[788,4],"end":[790,5]},"visibility":"default","docs":"Writes a signed 24 bit integer `n` to `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3366:215-0:341:1616":{"id":"a:2:3366:215-0:341:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3366:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:219:1718":{"id":"0:219:1718","crate_id":0,"name":"read_i24","span":{"filename":"src/lib.rs","begin":[564,4],"end":[566,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:256:1883":{"id":"0:256:1883","crate_id":0,"name":"write_i32_into","span":{"filename":"src/lib.rs","begin":[1478,4],"end":[1483,5]},"visibility":"default","docs":"Writes signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i32"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:357:608":{"id":"0:357:608","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1806,44],"end":[1806,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5910:3175":{"id":"5:5910:3175","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:183","5:5913:33299"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5513:3509":{"id":"1:5513:3509","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5514:5665","1:5515:7956"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:220:1724":{"id":"0:220:1724","crate_id":0,"name":"read_i32","span":{"filename":"src/lib.rs","begin":[586,4],"end":[588,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2872:53830":{"id":"2:2872:53830","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:211:1694":{"id":"0:211:1694","crate_id":0,"name":"write_u24","span":{"filename":"src/lib.rs","begin":[402,4],"end":[404,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2886:105":{"id":"2:2886:105","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2887:414","2:2888:416"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:367":{"id":"0:367","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,29],"end":[1836,31]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2924:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3622:133":{"id":"2:3622:133","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3624:183","2:3625:384"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,39],"end":[1836,42]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","max","clamp"],"trait":{"name":"Ord","id":"2:2955:179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:373:421"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13737:32199":{"id":"2:13737:32199","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15889:2683"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50074:4312","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3374:222":{"id":"2:3374:222","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13718:60050":{"id":"2:13718:60050","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:224:1719":{"id":"0:224:1719","crate_id":0,"name":"read_int","span":{"filename":"src/lib.rs","begin":[675,4],"end":[677,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:88:1687":{"id":"0:88:1687","crate_id":0,"name":"read_uint128","span":{"filename":"src/io.rs","begin":[460,4],"end":[464,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u128"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:300:1803":{"id":"0:300:1803","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2080,4],"end":[2082,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:323:1695":{"id":"0:323:1695","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[2250,4],"end":[2257,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3378:224-0:341:1616":{"id":"a:2:3378:224-0:341:1616","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3378:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1616","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:129:2566":{"id":"0:129:2566","crate_id":0,"name":"write_i8","span":{"filename":"src/io.rs","begin":[1126,4],"end":[1128,5]},"visibility":"default","docs":"Writes a signed 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_i8(2).unwrap();\nwtr.write_i8(-5).unwrap();\nassert_eq!(wtr, b\"\\x02\\xfb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i8"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10576:2797":{"id":"2:10576:2797","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10577:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6168:60707":{"id":"5:6168:60707","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5563:3506":{"id":"1:5563:3506","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5564:54609"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:216:1695":{"id":"0:216:1695","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[502,4],"end":[502,57]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:234:1764":{"id":"0:234:1764","crate_id":0,"name":"write_int","span":{"filename":"src/lib.rs","begin":[899,4],"end":[901,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61:1724":{"id":"0:61:1724","crate_id":0,"name":"read_i32","span":{"filename":"src/io.rs","begin":[243,4],"end":[247,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13744:54823":{"id":"2:13744:54823","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13334:3942","prim@char":"1:15883:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13817:60067":{"id":"2:13817:60067","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15883:2678","self::pattern":"2:13334:3942"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:3945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6185:2930":{"id":"5:6185:2930","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9536:3013-0:360:1615":{"id":"a:2:9536:3013-0:360:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9536:3013","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13799:60061":{"id":"2:13799:60061","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:198:1614":{"id":"0:198:1614","crate_id":0,"name":"Sealed","span":{"filename":"src/lib.rs","begin":[168,4],"end":[168,23]},"visibility":"public","docs":"Sealed stops crates other than byteorder from implementing any traits\nthat use it.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3602:2910":{"id":"2:3602:2910","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3603:550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3589:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3524:3994":{"id":"2:3524:3994","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3526:360"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6171:60708":{"id":"5:6171:60708","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4099-0:360:1615":{"id":"b:2:4099-0:360:1615","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4097:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:4101:1444"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3619:132":{"id":"2:3619:132","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3621:383"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3622:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:276:1948":{"id":"0:276:1948","crate_id":0,"name":"LE","span":{"filename":"src/lib.rs","begin":[1848,0],"end":[1848,27]},"visibility":"public","docs":"A type alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1615","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:5505:3508":{"id":"1:5505:3508","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5506:5665","1:5507:54209","1:5508:54210"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13736:32209":{"id":"2:13736:32209","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15889:2683"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50065:4311","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:139:1763":{"id":"0:139:1763","crate_id":0,"name":"write_i24","span":{"filename":"src/io.rs","begin":[1232,4],"end":[1236,5]},"visibility":"default","docs":"Writes a signed 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i24::<BigEndian>(-34253).unwrap();\nwtr.write_i24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\xff\\x7a\\x33\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:201:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:241:1809":{"id":"0:241:1809","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[1062,4],"end":[1062,52]},"visibility":"default","docs":"Reads unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6187:54259":{"id":"5:6187:54259","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15889:2683"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5906:3174":{"id":"5:5906:3174","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:183","5:5909:438"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:316:1677":{"id":"0:316:1677","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[2203,4],"end":[2205,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13835:60071":{"id":"2:13835:60071","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15883:2678"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50108:4315","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13758:54813":{"id":"2:13758:54813","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:15889:2683","`DoubleEndedIterator`":"2:8719:121","str::rsplit":"1:15889:2683","self::pattern":"2:13334:3942","prim@char":"1:15883:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49791:2908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:301:1809":{"id":"0:301:1809","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2085,4],"end":[2087,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3444:3919":{"id":"2:3444:3919","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3446:183","2:3447:898"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3212:128":{"id":"2:3212:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3183:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"2:13828:4451":{"id":"2:13828:4451","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13750:3151":{"id":"2:13750:3151","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47810:178","self::pattern":"2:13334:3942","prim@char":"1:15883:2678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:3943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3745:3268":{"id":"2:3745:3268","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3747:59279","2:3748:59280","2:3749:54822"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2539","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13732:54806":{"id":"2:13732:54806","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15889:2683"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"6:1712:6940":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:13557:6205":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:3907:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:46213:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:4476:54501":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:3106:7653":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:11314:3533":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:5000:4240":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:3843:3916":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:6671:7622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:9361:5590":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:48322:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:2314:5231":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:8610:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:23051:4016":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"16:7079:4938":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:51470:4056":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:13584:6212":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:11177:3898":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:10794:3714":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:13452:6175":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:10496:11069":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:15071:3615":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:2839:5103":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:10211:8135":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:1387:3199":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"18:811:5294":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:4142:7115":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:4694:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:580:6790":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:3179:233":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:14542:3179":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:15633:5455":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:3619:132":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:14912:7960":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:2361:8224":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:23765:4022":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:10582:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:4180:2926":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:3838:3199":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:10558:8143":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:23428:1614":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"14:47:8190":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:12417:5881":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:10435:5208":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:10993:2909":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:7248:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:8732:3877":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"17:10643:5606":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:46299:3266":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:5639:4903":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:50694:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:3051:5165":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:5708:11075":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:12585:5907":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"18:766:5507":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:57954:7868":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:4509:3198":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:3486:3981":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:11154:3897":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:11201:3832":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:1544:6831":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:10853:2837":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:5902:4912":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:12067:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"18:661:5306":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:6340:4515":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:12053:3863":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:22836:3095":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:3314:5094":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:47066:4113":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4135:7113":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:5575:3514":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:39110:2789":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:50686:7800":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:3177:5110":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:6057:7522":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:11712:3207":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:3455:3926":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13908:6318":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:4351:2933":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:14630:8234":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:11102:47011":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:4277:7134":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:14379:3546":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:2864:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:12048:5807":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:9259:1615":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:3826:229":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:11698:3209":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:4143:3816":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:5505:3508":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:11479:3210":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:11449:3671":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:13440:6174":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"12:2253:3730":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:10093:5276":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:9427:56948":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:8378:2932":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:6775:4486":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:23234:3548":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:5636:3901":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"1:15903:2695":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:11547:5704":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"18:611:5303":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:51803:4078":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"12:815:3724":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:4270:3849":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:48112:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:14460:2899":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:10217:5661":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:5746:3909":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:11868:3694":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:6504:4929":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:6342:4924":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:7141:4944":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:10515:2548":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"12:1183:4747":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:6433:4926":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:7323:4869":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"6:601:6801":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"9:963:4680":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:13306:6139":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:3155:5109":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6075:4848":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"12:895:4738":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:12077:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"18:801:5293":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:3678:4036":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:1537:6828":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:24070:1614":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:3520:3992":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:14874:3694":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:4379:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:13761:56942":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"12:787:3723":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"7:0:1497":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:11022:3555":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"6:1669:6914":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:23976:58826":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:12496:5892":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12130:5819":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:11264:3830":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:6241:3528":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:9004:47004":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:46365:4136":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"16:6277:4922":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"9:749:4617":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:51710:7805":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11907:5775":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:52381:4079":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"0:201:1640":{"crate_id":0,"path":["byteorder","ByteOrder"],"kind":"trait"},"17:13735:6270":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:8000:5427":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"16:4871:6372":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:47927:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:37930:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:9836:61193":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:1452:3723":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:4464:7226":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:6060:4887":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:9396:5591":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:12230:3197":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:9558:5443":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:3439:3594":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:13334:3942":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:383:4531":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"15:248:4769":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:10851:5639":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:4146:3817":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:53796:7858":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:48828:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:2326:604":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:2396:4548":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:4516:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:23437:4045":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:46730:4441":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:12565:3787":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:6243:7607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:48448:4380":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:9033:47005":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:53677:7849":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:11354:5178":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:13196:6113":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:11603:5714":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:9326:5253":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:25021:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:5080:2810":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:4281:3582":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:12770:5944":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:3909:3912":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:10438:3759":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:1256:61174":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:2481:3782":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"12:764:3199":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:49777:2906":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:2510:3783":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:25054:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:1558:6836":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:49761:4296":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:52693:4066":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:49520:4295":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:47909:3011":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:5478:7425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:46988:4107":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:11960:3117":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10407:5225":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:1567:6841":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:6135:7537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:4903:6373":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:9087:47007":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:7093:8228":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:1740:3724":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5247:7313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:7139:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:13938:6323":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:56653:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4410:7201":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:32642:59482":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"17:11181:5657":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"0:278:1959":{"crate_id":0,"path":["byteorder","NativeEndian"],"kind":"typedef"},"16:7768:4855":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:10422:8136":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:11256:3841":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:8199:4098":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:3104:1614":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:9143:3547":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:4198:6353":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:2843:4551":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:9706:8122":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"15:230:4768":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"18:896:5301":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6468:4927":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:10899:8151":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6286:4766":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:3825:3198":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13138:6098":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:49941:4305":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:46417:4223":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:14862:3693":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:7369:4850":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:5855:4911":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:2754:5096":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:13565:6207":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:52303:4091":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:10476:5258":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:46896:4116":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:24889:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:3981:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:1764:6961":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:15905:2697":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:9064:47006":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:11196:3831":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:12026:5798":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:11305:5934":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:15897:2689":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:4843:4144":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4474:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:6012:4846":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:10925:8156":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:11689:5731":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:11105:3654":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:13155:6100":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:46099:3426":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:15053:3608":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:11031:47010":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:15894:2686":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:49132:147":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:10962:8159":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:15901:2693":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:1441:3583":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:13421:6167":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:2914:2033":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:8288:3641":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:2937:5128":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:46677:4438":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:9267:56366":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:4346:7169":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:50542:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:777:8195":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:50767:4153":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:6381:4861":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:4485:2900":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:53717:7853":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:13774:6281":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:5303:4889":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:1576:6847":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:24955:3265":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:23439:4019":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:527:6756":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:46997:4108":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:49749:4156":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:1276:4546":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:23177:4021":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"16:6331:4765":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:13573:6208":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:2792:4836":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:8472:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5567:7453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:9466:5593":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:637:5497":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11784:5759":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:4752:3552":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"5:7891:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:13075:4304":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:984:4584":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:13744:3690":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"18:0:2657":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:51603:4069":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:3801:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:11725:5736":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:10394:5226":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:13413:56946":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:12237:5834":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:5426:7411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:1710:3721":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:50055:4310":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:10580:2799":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:5405:7398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:52122:7806":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:39150:4148":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:4689:6366":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:4660:6365":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:6717:4933":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:46905:2904":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:10147:5599":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:10949:8158":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:50099:3576":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:5036:4241":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:22849:58828":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:3371:2539":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:7247:4881":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:53743:7855":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:10428:54326":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:626:6814":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13233:6122":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:6100:3848":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:10545:8140":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:4160:7126":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6153:7548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:2886:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"12:2045:3583":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:571:6784":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:2767:584":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12143:5611":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:24402:4192":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:46936:4102":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:13472:6182":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:9240:5176":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:8217:3180":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:8453:3857":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:11270:3850":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:46189:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:13873:6305":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:69:4510":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:15899:2691":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"12:379:4753":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:10525:135":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:12957:5997":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:5425:3542":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:5443:4897":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:14417:7957":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:24541:4363":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:51532:4077":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:0:2655":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:7309:4852":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:15902:2694":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:5978:3847":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:2126:3582":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:5497:3507":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:9883:61194":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:3375:221":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:533:6759":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:6595:4862":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"12:2280:3732":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:10318:5240":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:3524:3994":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:11457:5682":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:545:6764":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:5396:4894":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:12746:5934":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:3589:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:11501:3198":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:13410:3949":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:7938:1989":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:8545:3867":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:49144:3669":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:15315:7965":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:46700:4439":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"5:8308:3117":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11922:5779":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:14931:3620":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:7169:4864":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:14458:142":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:13126:3210":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:10036:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:8634:4159":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:12262:5836":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:3461:3929":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:49841:4301":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:51903:4070":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:6477:7515":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:1578:3730":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:28332:4163":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:53686:7850":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:11409:5667":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:49646:3182":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:2772:5129":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:3837:3914":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"9:722:4616":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"12:1147:3732":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:46860:8213":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:5567:3512":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:1606:6866":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"18:621:5496":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:7659:4948":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:23293:4019":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:9131:47008":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:12620:5919":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:3814:3267":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:8249:4587":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:521:6753":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:859:3754":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:7754:4950":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:50065:4311":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:837:3941":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:15854:11074":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:15906:2698":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:4048:7068":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:3070:3802":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:2733:4820":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"9:686:4613":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"16:3686:6349":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:6943:7643":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:6907:4934":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:4127:7108":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:6645:3522":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"18:885:5300":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:1146:11073":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:48895:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:56244:4040":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:5962:5407":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"16:6190:4921":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11754:5747":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:3221:5112":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:6649:3535":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:49767:4297":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:4242:7132":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11563:5709":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:47313:2933":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:9948:8127":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:12157:5823":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6873:3010":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:2422:8227":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:6339:3577":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:7741:4949":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:5998:7488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"12:162:4750":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:1721:6946":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:51358:7801":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:5210:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:10963:2904":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:13147:6099":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:6896:7633":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:24463:39154":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:13595:6213":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:11518:3195":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:4140:3815":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:10240:5201":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:7062:8228":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:2484:47094":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:15888:2682":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:3814:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:3371:2916":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12093:5814":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:4351:6356":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:52663:4063":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:15904:2696":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:53413:4064":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:15388:4777":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13612:6220":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:24529:4364":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:51855:4085":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:7960:5415":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4230:7131":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:14394:7949":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:48570:2797":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11013:8163":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:5149:7257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:13975:6330":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:13245:3843":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:8638:4158":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:11071:3559":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"2:3372:3091":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:4321:7157":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:50419:4386":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:13887:6312":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"14:244:6606":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:0:2656":{"crate_id":17,"path":["object"],"kind":"module"},"2:2919:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10253:5204":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:11670:3208":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:10303:5448":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:14109:59472":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:3077:5166":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:8241:3582":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:5541:7438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:5301:7340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:12197:3196":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:50045:2909":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:12596:8235":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"16:5289:4847":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:1913:490":{"crate_id":2,"path":["core","intrinsics","copy_nonoverlapping"],"kind":"function"},"2:3274:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:8129:4100":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:53621:4087":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:6851:2889":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:8295:3642":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:1701:3720":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:3613:2969":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"9:996:4681":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:4386:7191":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:49354:4449":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:15232:3829":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:24515:4413":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:50538:4322":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:47017:4109":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:4898:4094":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:3508:3986":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:5460:4898":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:14185:8208":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:7721:4860":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:7599:3696":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"17:3743:5171":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:2909:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:2046:2889":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"12:1162:4746":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:15849:8615":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:4098:7094":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:9657:3943":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11250:3908":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:11238:3554":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:7025:4840":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:12330:5424":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"6:3896:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:3498:3592":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:50287:3955":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:46927:4120":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:5326:4890":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:50365:3958":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:13273:3657":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:6268:7613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:5941:4914":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:10489:5602":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:672:40146":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:10598:8146":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:10550:8234":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10015:8128":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:56627:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:53781:7857":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:12014:3646":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:10514:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"17:10831:5240":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:15192:3828":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:51633:4057":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13129:6094":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:5362:4892":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:10530:5643":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:11591:3204":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13755:6276":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:52223:7809":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:5869:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:13529:6198":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:32594:2964":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"5:8314:3117":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:739:8113":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11701:5734":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:8281:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"12:1784:5394":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"7:85:44681":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"18:820:5295":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:7551:5396":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13037:6058":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"12:1703:4761":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:13917:6320":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:13344:3943":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:15908:2700":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:51692:4046":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:46358:4135":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:52200:7808":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:3449:3923":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:24988:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:4599:6363":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:13602:6215":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:5906:3174":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:49107:2840":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:11579:5710":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:6841:3570":{"crate_id":1,"path":["std","os","net","tcp","TcpStreamExt"],"kind":"trait"},"5:8436:4533":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:50074:4312":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:4148:4025":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:6080:7523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:3105:61154":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:11341:3002":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:542:4824":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"16:2813:5122":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:11822:5767":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:4372:3199":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:1634:6885":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:9535:3014":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:3908:6352":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:50090:4314":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:10136:8125":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:12282:5842":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:9676:61198":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:14074:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:5366:7384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:10789:3713":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"12:1121:3731":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:52427:4083":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:3770:6351":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:7731:4515":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:12302:5843":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:9156:3424":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:46338:4026":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:4110:7100":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:2420:8226":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:48406:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:10266:5238":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:6027:7500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:14422:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:10364:5230":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6557:4930":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:10914:2932":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:8860:3864":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:1261:144":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:5374:4893":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:24242:4347":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:3960:4539":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:11130:5653":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12634:5920":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10304:5228":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:8876:158":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11335:5179":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:8449:4534":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"12:869:3582":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6099:4917":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:49162:7796":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:49123:2839":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:13817:6297":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"9:0:2649":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:7602:3698":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:3444:3919":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:13029:6056":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:3478:5115":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:3340:5095":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:5388:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:13015:4300":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:3173:150":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:2512:5227":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:7379:4870":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:4665:5399":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"1:4428:2898":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:10803:143":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6034:7504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12431:5883":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:9587:61199":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"12:979:3729":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:6719:4119":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13073:6088":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:7470:3689":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:11556:3211":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"16:3366:5120":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:48070:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13481:6183":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:39146:4555":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:10937:8157":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4061:7073":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:7264:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:3877:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10874:5640":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:22902:59061":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:10578:2798":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:15887:2681":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:24313:7665":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:11494:5697":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:5685:4906":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"0:360:1615":{"crate_id":0,"path":["byteorder","LittleEndian"],"kind":"enum"},"1:5519:3510":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:10278:5446":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"14:216:45357":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:696:3749":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:4340:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:10975:8160":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:23389:16317":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:11628:5719":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"14:250:6608":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:15339:7966":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:612:6806":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:1431:3582":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:13840:6298":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:49580:3190":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:24425:7676":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:11433:5681":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:7358:5396":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:11088:3560":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:46756:4219":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:50222:3953":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:2905:5105":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:7834:3775":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"5:7048:4462":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:539:6761":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:5439:7415":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:47810:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:49809:3204":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"18:729:61206":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:10187:8133":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:3407:4464":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:9163:4097":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:6129:7536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:5274:7333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:6967:7648":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:13364:3946":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:6141:4919":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:1105:8216":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:6642:4106":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:2141:3585":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:11629:3205":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:4454:7220":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:50510:4323":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:1477:3727":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:3381:5426":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:46372:2811":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:6130:4918":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:3042:2842":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:1108:8218":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:13859:3691":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:12455:5886":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:11882:3695":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:3493:3591":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:565:6781":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"9:234:4640":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"16:7090:4939":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:13783:3692":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:14437:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:681:5661":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:7792:4884":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:48238:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:13549:6204":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"5:1296:4547":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:47851:3198":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:10665:3520":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:13215:6114":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:10252:4282":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:7449:4857":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:1113:11072":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:8279:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:14064:2927":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:13361:6152":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:1704:6939":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:3366:215":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:12117:5816":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:15883:2678":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"12:940:3726":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"18:645:5305":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"12:183:4754":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"12:432:4751":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:634:6819":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:10576:2797":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:12070:5808":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:4067:7076":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:3803:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:1680:6922":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:14647:54250":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:5431:3540":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:3428:3586":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:3402:3585":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:56666:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:15170:3562":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5240:7309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:13539:6201":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:1601:3732":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:11514:5698":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:607:8118":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:2543:5255":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:7739:56947":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"16:4716:6367":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:6931:5151":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:50534:4321":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:4495:6361":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:2215:1057":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11212:5217":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:4157:5188":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"0:277:1956":{"crate_id":0,"path":["byteorder","NetworkEndian"],"kind":"typedef"},"1:5708:3904":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:49895:3208":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:790:5292":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:10198:8134":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:2376:4594":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:7207:5409":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:997:3580":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:3755:3716":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:14429:3789":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"9:1020:4682":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:15893:2685":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:783:5445":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:47086:4118":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:13481:3658":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:11945:5786":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:13052:4303":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"9:692:4615":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:15882:2677":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:11937:5784":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:11998:3645":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:49599:3192":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:53706:7852":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"11:46:6664":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:46596:7764":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:50193:3947":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:4532:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:4036:2935":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:11684:3206":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:7868:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:10902:2936":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:8226:3117":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:3058:3796":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:9873:8125":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:15253:3836":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:3831:138":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:51424:4076":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:5682:1323":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"2:10572:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"18:136:53296":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:5323:2814":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"18:754:61204":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"4:0:2647":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:51979:4062":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:49691:3201":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:13507:6193":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:5861:5396":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:49571:3191":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:47994:3117":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:11956:5789":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:3434:3624":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"5:1072:3198":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:4491:3117":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:51448:4068":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:6723:3536":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:857:5298":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:4439:6359":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:24790:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:88:39746":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:5982:7476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:10913:8155":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:14665:3695":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:3103:5119":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:4178:2925":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:50108:4315":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:8024:4004":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:5759:3910":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:547:5087":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:3469:3626":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12196:5827":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:12222:5831":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"12:2398:6659":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:2959:5106":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:6481:7519":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:4005:7050":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:4581:4571":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"2:46723:4440":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"14:194:45351":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:11207:218":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:10039:8130":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:3465:3625":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:51572:7803":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"9:809:3669":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:8954:5185":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"1:14779:5452":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:5278:3836":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:13708:6258":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:47859:3199":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:12087:3620":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:51833:4082":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:11048:3558":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"17:9636:8121":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:47978:3198":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:4258:2924":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:3114:59905":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:10988:8161":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:2190:2961":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:6407:4925":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:48843:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"5:3104:3170":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:3297:5167":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:10455:5257":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:3384:2817":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:4097:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:10565:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"12:472:61182":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:1626:6880":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:10986:2908":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:7484:3690":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"5:3441:4465":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:12557:5901":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:4332:7163":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:49859:4302":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:9394:5441":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:13091:4307":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:15895:2687":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:5887:5092":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:510:8117":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:50351:3957":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:5216:7300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:4088:7087":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:14634:3543":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:9826:5240":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:5649:4904":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:6954:7647":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:6604:4931":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:2883:5123":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:7684:4859":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:46850:5418":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:7939:3775":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"1:10695:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:9275:1616":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:8863:3707":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:47333:7783":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:47076:4114":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:57975:7869":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:6647:3534":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:6979:7650":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"14:56:5682":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"16:6679:5144":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:11432:3670":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:4867:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:6931:7641":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:3402:4837":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:10788:8150":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:13377:6156":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:10586:8145":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:24334:4196":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:1760:4544":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:53659:4052":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:7312:3582":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"18:704:5497":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:6184:7574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:50518:4324":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:49735:4381":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:5154:4243":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:1592:3731":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:12567:5450":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:13859:6303":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:10719:2194":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:4493:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:4271:6354":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:13345:6149":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:1673:3199":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:3905:5396":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:1662:6910":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:9160:5216":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:10104:5277":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:11985:3644":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:51757:4090":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:6656:5142":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:12228:8226":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:47045:4111":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:8389:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"0:273:1944":{"crate_id":0,"path":["byteorder","BE"],"kind":"typedef"},"17:10291:5229":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:48280:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:4829:3655":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"2:46331:3918":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:12082:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"19:0:1000":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:11615:5717":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:4373:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:39186:3093":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:53083:4092":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:7415:4868":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:4538:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:6050:4915":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:11985:5794":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:24366:7670":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:46770:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:7200:4866":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:6205:7588":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:2965:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:10809:143":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"5:853:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:52047:4050":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:3933:7005":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:24350:7667":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:46880:3182":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:46277:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:7155:4945":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:7131:4943":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:8217:4538":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"5:8466:7657":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"12:1881:146":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:12003:5795":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:11381:5663":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:47935:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:52071:4051":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:1748:6956":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:4485:7233":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:47918:3081":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:7637:4947":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:10571:5187":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:11912:7946":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"17:13257:6128":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:9206:47009":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:46974:7775":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:4765:5401":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:3855:3917":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"12:880:3583":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:50514:4325":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11017:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:10228:8243":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"5:2284:4467":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:46956:4104":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:10586:2801":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:9512:3824":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"17:12758:5937":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:2130:3583":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:2183:583":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:4840:6371":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:6665:7620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:23382:1614":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:1740:6952":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:4855:4145":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:46918:4117":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:3883:6968":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:5974:7471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:10930:2899":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:24856:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"12:750:3198":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:24479:39163":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:1621:6878":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:53732:7854":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:53583:4067":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:13323:6144":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:6089:4916":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:12716:5929":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:11890:5769":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:48003:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:6214:7591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:51502:4089":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:1719:3722":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:2619:4552":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:9756:61201":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:14404:3519":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:12125:3622":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:5412:4895":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"9:1075:4683":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:6643:5141":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"0:276:1948":{"crate_id":0,"path":["byteorder","LE"],"kind":"typedef"},"2:50779:4151":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:8549:3583":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:48154:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:4416:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:7238:4867":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:24508:7688":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"10:0:2650":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:3183:232":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:13359:3945":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:46694:3576":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:2911:3788":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:3407:2968":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:13747:6273":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:4008:8120":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13247:6127":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:8566:4511":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"12:353:6654":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:5563:3506":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:7121:4942":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:6949:5152":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"12:1203:4748":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:586:6793":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:3250:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:5178:7281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12015:5797":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:1547:3733":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:14150:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:52617:4059":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:8646:8229":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:5498:4899":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"9:469:8597":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:25120:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:5331:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:12774:3264":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:10720:8207":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:11411:3199":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:2135:3584":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:5698:4907":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4012:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:9561:5219":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:11002:8162":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:13094:6093":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:53811:7859":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:2393:2876":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:4198:7128":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:12731:5933":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:13404:6160":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:1526:6823":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:10660:47194":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:49115:7791":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:9930:61202":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:12687:5926":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:14795:5453":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:46647:4443":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:3199:5111":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:2504:2877":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:12183:5826":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:53697:7851":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:4446:7215":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:9291:5588":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:48591:2799":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:10468:3438":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:48861:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"12:2040:3582":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:11518:3675":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:6576:3531":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"14:231:4460":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:11198:1614":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:50208:3950":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:2861:5104":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"12:2412:6661":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:10574:2796":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:11640:5720":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:3528:3996":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:53873:7861":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:5149:4242":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:3960:7028":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:10584:2800":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:2123:3117":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:9796:61196":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:8684:2971":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:46233:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:3284:2915":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:47107:4115":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:1909:5396":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:10127:5240":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:50239:3954":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:14470:54753":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:10711:2917":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:3554:3583":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"5:5609:4474":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:47295:3436":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:11797:5763":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"18:829:5296":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:51378:7802":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:8483:4457":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:1447:3722":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:32448:4408":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:13660:6257":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:0:1345":{"crate_id":1,"path":["std"],"kind":"module"},"12:2392:6658":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:4296:7146":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:6097:7525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:47006:4121":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:11409:3669":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:52457:4086":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:13515:6196":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:1152:5396":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4028:7059":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:6925:7640":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:47054:4112":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:11890:7945":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"17:10445:5550":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:5273:1616":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:24171:4346":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:8271:3117":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:11288:3544":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:4179:7127":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:13394:8225":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:299:8116":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:49358:3185":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:13428:6168":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:10247:4281":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:12318:5848":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:10801:5174":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:10058:5280":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:49620:3184":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:4256:2923":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:15023:3606":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:10517:3596":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:3532:3998":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:4075:7081":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:3473:3933":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"18:744:61205":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:6902:59484":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"6:513:6748":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:5427:4896":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13763:6277":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:24823:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:1055:4585":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:6908:7635":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:1460:3725":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:12469:5888":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13369:6154":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12660:5922":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:53758:7856":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:9716:61200":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:9646:61195":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"18:668:5307":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:1418:3721":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:5910:3175":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"14:189:8190":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:6016:7495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:774:5497":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:5176:6376":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:12209:5829":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:46716:4314":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:11314:5254":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"18:866:5299":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:11836:3691":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:5271:4249":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:50376:3959":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:7184:5153":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:11387:3198":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"12:1103:3730":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:1466:3726":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:5488:2889":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:11742:5744":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:46633:4217":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"9:27:4664":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:5860:3838":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"12:2059:3585":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:14142:3438":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:8373:3737":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:973:3775":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:46946:4103":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:51402:4088":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:444:2972":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:11507:3674":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:50506:4320":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:52539:4071":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:11671:5730":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:11905:54243":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"6:5419:7409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:48584:2798":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:12250:5835":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:7539:3692":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:50729:4334":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:10848:2836":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4425:7205":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:4411:6358":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:8849:5213":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:4785:2889":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:49959:4306":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:5566:4901":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:11068:5184":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:4467:6360":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:10503:5259":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:10655:3789":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"13:233:6653":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:5226:2811":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:11944:3198":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"18:694:5308":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:24922:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:3110:59904":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:5288:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:11292:7504":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:46617:4215":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:51949:4058":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:6007:7494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:49672:3200":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:7456:3688":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:12700:5927":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:48834:134":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"6:4356:7175":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:53475:4084":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:11436:2908":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:48577:2796":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:22864:58828":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:12360:5869":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:14061:2925":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:6026:4844":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:853:3753":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:46803:4377":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:7826:4135":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4148:7117":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:11491:3672":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:5348:4891":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:13794:6284":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"12:856:3721":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:6745:3521":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:15324:54327":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:5280:2813":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:11245:3905":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:1502:3730":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:6914:7636":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:52727:4048":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:5721:4908":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:2265:2874":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"12:933:3725":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"12:1666:4759":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:10340:5232":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:3966:7029":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:11474:5687":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:3462:3587":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13281:6130":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:47026:4123":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:3129:5118":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:1311:5281":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:10048:8131":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:32990:2966":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:14:1987":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:3987:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:1518:3732":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:51673:7804":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:5547:7439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:7782:4856":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13271:6129":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:8257:59810":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:15038:3607":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:3622:133":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:6467:3510":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:9537:3012":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:7314:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:50676:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:13293:6133":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:23240:3549":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:14255:59473":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:23104:4139":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"12:2052:3584":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:2924:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:10980:2906":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:3656:3939":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:13785:6282":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"17:13522:6197":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:15884:2679":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:4434:7211":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:8406:4532":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:10799:2919":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:5145:2812":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:56614:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2917:2897":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:7281:4853":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:7100:4940":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:8187:3775":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"16:3494:5513":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:15889:2683":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:8435:58402":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"12:928:3722":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:3537:4001":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:13180:6110":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:9563:5444":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:15881:2676":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:3514:3989":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:50522:4328":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"0:341:1616":{"crate_id":0,"path":["byteorder","BigEndian"],"kind":"enum"},"1:11894:54672":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"17:13331:6147":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"11:54:4736":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:52877:4072":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:14059:139":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:8232:4586":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:22904:59063":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:10919:1323":{"crate_id":2,"path":["core","slice"],"kind":"module"},"17:12170:5824":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:50013:4309":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:6562:3582":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:4362:7178":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"7:38:44674":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:4116:7103":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:23964:3269":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:4017:3583":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:8744:2970":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:32694:59480":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:46657:4444":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:4402:7197":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:3105:2790":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:4308:5396":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:11034:3556":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"6:4218:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:10921:2934":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:7422:3686":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:5398:7397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:1456:3724":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:4709:5401":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:1684:3117":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:25522:4204":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:5293:7335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:48947:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:1727:6949":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:6980:4935":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:6924:3001":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:6643:7619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:23230:1614":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"8:0:2648":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:3745:3268":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:1533:3731":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:6856:7632":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4526:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13495:6190":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"3:321:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:8096:3775":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:15886:2680":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"12:1682:4760":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:3503:3593":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:10775:8148":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:5784:4910":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:13016:6049":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"12:2066:3586":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"0:0:2274":{"crate_id":0,"path":["byteorder"],"kind":"module"},"6:4055:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:5204:7296":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:13167:6105":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:5605:4902":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:7208:4946":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:9526:3825":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:46605:4214":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:8675:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:6310:4923":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"9:776:4662":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:15896:2688":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:10678:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"12:843:3720":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:49589:3194":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:1405:3720":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:12072:3869":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12512:5894":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:5516:5085":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:15890:2684":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:1088:3784":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:32628:2871":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:1694:6933":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:8929:47003":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:14894:3621":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:13607:3700":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:4383:2889":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:8195:3669":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"6:157:39812":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:5531:4435":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"14:11:8190":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:2152:3587":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:12030:3647":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:13953:6324":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:10610:8147":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"9:900:6715":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:12348:5867":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"14:0:2653":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:3060:3797":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:12558:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:11842:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:5216:4248":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"18:712:3095":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:11966:3643":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:2328:4549":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:10082:5275":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:3602:2910":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:8451:3745":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:10554:4555":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:14968:3702":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:10115:5278":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"16:4628:6364":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:1600:6864":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:15865:54325":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:7702:4858":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:47322:7781":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:3376:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:6114:7530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:8446:3855":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:46775:4375":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:56640:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4315:7154":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:5186:7283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:12646:5921":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:3394:3092":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:9536:3013":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:2288:2873":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:844:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:52025:4047":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:1236:8119":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:47842:3116":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"9:157:4632":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:47304:7780":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:2654:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:8420:4376":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:12543:5899":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:3243:5113":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:3872:3911":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:5257:1615":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:50314:3956":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:46669:4315":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:11653:5721":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12383:5878":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:50575:4396":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:2651:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:11190:3830":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:3170:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:46126:3940":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:47288:7779":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:8287:4455":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:3029:5108":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:5755:784":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:21:676":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:1531:6825":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:5948:5102":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:3007:5107":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"9:603:8607":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:10942:2901":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:14886:54755":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:10568:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:24442:39162":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:15377:4777":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:56679:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:607:6804":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:10443:3773":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:11769:5753":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:11968:5791":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13961:6327":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:50737:4335":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:53225:4060":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"11:0:2651":{"crate_id":11,"path":["adler"],"kind":"module"},"17:13352:6151":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"12:2419:3590":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:46737:4442":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"12:971:3728":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:53537:4049":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:4803:6370":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:13721:6264":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:6858:5148":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:5229:7301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"18:720:5499":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:6902:7634":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:47117:4006":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:2005:3583":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:32634:2965":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:3176:136":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:9439:56941":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"18:169:53298":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:2147:3586":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:4467:2548":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:4509:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:4573:6362":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:10511:11071":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:50171:3944":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:47986:3199":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:8939:3006":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:9579:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:10223:5206":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:5738:3907":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:6688:7631":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:32794:59477":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"6:5488:7427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:5154:3829":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:24417:7675":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:9920:8126":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:48931:2795":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"16:6549:4865":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10814:5175":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:6173:4920":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:5447:7417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:6490:4928":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:5959:4839":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:4440:7212":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:10417:3750":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:5730:3906":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:46173:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4038:7065":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"12:1238:4749":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:5729:4137":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:10464:5256":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"12:2269:3731":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:5745:4909":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:7471:4845":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:15065:3614":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:10416:1614":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:5582:7464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:50386:3960":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:14399:7951":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:3481:3937":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:1031:3573":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:49154:7795":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:3044:3792":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11810:5764":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:5390:7396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:5923:4913":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:3461:5116":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:12406:5879":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:50563:3627":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"17:12921:5966":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:7477:3117":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13463:6179":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:4020:7056":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:9183:5183":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:0:803":{"crate_id":6,"path":["libc"],"kind":"module"},"2:4163:4031":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"13:0:2646":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:1729:3723":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:6533:5135":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:49791:2908":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:11085:5220":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:2119:3198":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:9431:5592":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:4308:7153":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:23140:4143":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:8902:47002":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:1483:3728":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:9159:3425":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:50399:4385":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:10813:147":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:8671:137":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:9434:5442":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:11952:3640":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:5238:45427":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:5998:4818":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:7935:5409":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:47867:3117":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:9786:8124":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:10999:3554":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:1374:3198":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:6159:4851":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:6120:7532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:11591:5713":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:10041:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:3674:3738":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:47876:3010":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:37954:3095":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:24390:4191":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:22883:59058":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:24074:4020":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:3436:3584":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"15:269:4773":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:4775:6369":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:6630:5140":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:49681:3203":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:48873:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:13928:5451":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"16:3743:6350":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:14067:2923":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"12:559:144":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:12482:5889":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:10534:12076":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:5553:3511":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:5311:7347":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:7110:4941":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:46590:3576":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:10703:3809":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:3477:3935":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:4036:5396":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:23153:1614":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:48028:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:7782:5427":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:2397:8225":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"5:2266:5398":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:6250:7610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:6573:3545":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:49995:4308":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:12674:5925":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:10390:5236":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:6229:7598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:4256:7133":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11256:5658":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:3948:2194":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:10648:3519":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11142:5654":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6691:4932":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:10622:5604":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:9653:5445":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:12892:5946":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:14801:5454":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:3378:224":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"12:466:61186":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:1588:6856":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:7355:4849":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:4392:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:9988:47056":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:51554:4081":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:1397:3117":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:593:6796":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:8497:3858":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:3265:5114":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:3459:2918":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:4081:7084":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:49701:3202":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:7161:4122":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:4975:6375":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:6498:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4287:7141":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:11530:5702":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:4743:6368":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:5513:3509":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:11854:3693":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12607:5918":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:56601:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:4381:6357":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:10643:3787":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:9517:2906":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:3395:3198":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:48364:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"9:1056:4675":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:849:5297":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:7753:4516":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:5378:7389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:6518:4863":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"18:678:143":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:1489:3729":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:50750:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:46255:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:11168:5655":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:2359:8223":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:9539:5214":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"12:2072:3587":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:3405:2911":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:5151:3828":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:10973:2905":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:1733:3842":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:52001:4065":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:8715:3436":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:9746:8123":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:6759:4474":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:50530:4327":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"18:152:53297":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:10638:3572":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:4492:2903":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"6:5455:7419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:22881:59060":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:2279:4140":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"12:2032:3198":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"9:41:4665":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:10527:3734":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:15898:2690":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:9958:61197":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:4316:6355":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:4219:2928":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:50526:4326":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:47097:2905":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:52169:7807":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"12:399:4752":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:48196:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:15900:2692":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:5217:5097":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:3616:131":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"18:651:5302":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:3167:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:3993:7041":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:0:493":{"crate_id":2,"path":["core"],"kind":"module"},"15:0:2654":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:12573:5905":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:1912:41120":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"12:2404:61181":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:50083:4313":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:1663:3198":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:1610:3733":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:47035:4110":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:46787:4376":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:3972:7031":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:7051:4936":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:6035:4886":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12442:5884":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13899:6314":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:6219:3531":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:2955:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:4942:6374":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:49609:3193":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:3521:6348":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"5:8494:4458":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:11359:3659":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:25087:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:3374:222":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:14361:4095":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:10028:8129":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:13562:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:10516:5603":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:15907:2699":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:53335:4080":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"12:777:3117":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:12527:5898":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:23770:16336":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:2861:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:294:8115":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:4208:7129":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:3576:5517":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:46965:4105":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:5668:4905":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:4:985":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:7436:3687":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:618:6809":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:8974:8229":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"12:114:61185":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:11234:5215":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:1751:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:7295:4854":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:13353:3941":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:14453:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:11134:7924":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"1:6479:7517":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"18:782:5497":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:3085:1582":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:5260:7322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:6937:7642":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:14960:7961":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:8719:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:10166:5601":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:5300:2815":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:7734:3774":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"2:49659:3183":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:7063:4937":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:25153:4350":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:14371:4336":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:5948:5405":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:4217:2927":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:11713:5735":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"9:927:44778":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:8777:3744":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:12798:4419":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"12:0:2652":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:5433:7412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:51655:4061":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:1991:146":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:1551:6833":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"12:2036:3117":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:49913:3206":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:6482:5137":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:3920:6995":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:4410:2385":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:2981:5117":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:12106:3621":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"12:952:3727":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11282:47012":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:161:39813":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:48810:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:53834:7860":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"12:1256:3733":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:10068:5238":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:5530:4900":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:8361:3590":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"13:121:45323":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"}},"external_crates":{"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":21}