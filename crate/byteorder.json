{"root":"0:0:3172","crate_version":"1.5.0","includes_private":false,"index":{"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1579,0],"end":[1579,50]},"visibility":"default","docs":"All types that implement `Write` get methods defined in `WriteBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3787:3464","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_i32","write_i8","write_i24","write_u48","write_f64","write_f32","write_i48","write_u64","write_uint","write_u16","write_u8","write_i128","write_i64","write_u128","write_int","write_i16","write_u24","write_u32","write_int128","write_uint128"],"trait":{"name":"WriteBytesExt","id":"0:106:2503","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"generic":"W"},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:107:3475":{"id":"0:107:3475","crate_id":0,"name":"write_u8","span":{"filename":"src/io.rs","begin":[1098,4],"end":[1100,5]},"visibility":"default","docs":"Writes an unsigned 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_u8(2).unwrap();\nwtr.write_u8(5).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:157:2696":{"id":"0:157:2696","crate_id":0,"name":"write_f32","span":{"filename":"src/io.rs","begin":[1541,4],"end":[1545,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian single-precision floating point number to a `Write`:\n\n```rust\nuse std::f32;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f32::<BigEndian>(f32::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x49\\x0f\\xdb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:25:2563":{"id":"0:25:2563","crate_id":0,"name":"read_u16","span":{"filename":"src/io.rs","begin":[112,4],"end":[116,5]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:3408:263-0:322:2535":{"id":"a:2:3408:263-0:322:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:21:3314":{"id":"0:21:3314","crate_id":0,"name":"read_u8","span":{"filename":"src/io.rs","begin":[55,4],"end":[59,5]},"visibility":"default","docs":"Reads an unsigned 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![2, 5]);\nassert_eq!(2, rdr.read_u8().unwrap());\nassert_eq!(5, rdr.read_u8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2860-0:340:2534":{"id":"b:2:2860-0:340:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2862:3669"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:335":{"id":"0:335","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:36002:260","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:331:921":{"id":"0:331:921","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1812,33],"end":[1812,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"__H"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:11243:169","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:192:2622":{"id":"0:192:2622","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[486,4],"end":[486,43]},"visibility":"default","docs":"Writes an unsigned 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:83:2722":{"id":"0:83:2722","crate_id":0,"name":"read_u64_into","span":{"filename":"src/io.rs","begin":[635,4],"end":[642,5]},"visibility":"default","docs":"Reads a sequence of unsigned 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:243:2832":{"id":"0:243:2832","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[1679,4],"end":[1679,45]},"visibility":"default","docs":"Converts the given slice of unsigned 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u128(&mut numbers);\nassert_eq!(numbers, [5u128.to_be(), 65000u128.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:264:2596":{"id":"0:264:2596","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[1955,4],"end":[1957,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:298:2606":{"id":"0:298:2606","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[2156,4],"end":[2161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:313:2775":{"id":"0:313:2775","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2229,4],"end":[2231,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:3188:150":{"id":"2:3188:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}}},"2:3189:1925":{"id":"2:3189:1925","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:46078:239","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:214:2699":{"id":"0:214:2699","crate_id":0,"name":"write_f64","span":{"filename":"src/lib.rs","begin":[972,4],"end":[974,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"f64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:282:2775":{"id":"0:282:2775","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2051,4],"end":[2053,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:247:2849":{"id":"0:247:2849","crate_id":0,"name":"from_slice_i128","span":{"filename":"src/lib.rs","begin":[1774,4],"end":[1779,5]},"visibility":"default","docs":"Converts the given slice of signed 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i128(&mut numbers);\nassert_eq!(numbers, [5i128.to_be(), 65000i128.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:271:2620":{"id":"0:271:2620","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[1988,4],"end":[1990,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:3181:878":{"id":"2:3181:878","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:348":{"id":"0:348","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,33],"end":[1842,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:11235:165","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:349:921"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:254:60":{"id":"0:254:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1846,4],"end":[1848,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,16],"end":[1812,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3403:121","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:255:2867":{"id":"0:255:2867","crate_id":0,"name":"LE","span":{"filename":"src/lib.rs","begin":[1854,0],"end":[1854,27]},"visibility":"public","docs":"A type alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:223:2755":{"id":"0:223:2755","crate_id":0,"name":"read_f32_into","span":{"filename":"src/lib.rs","begin":[1207,4],"end":[1213,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:238:2808":{"id":"0:238:2808","crate_id":0,"name":"write_f32_into","span":{"filename":"src/lib.rs","begin":[1569,4],"end":[1574,5]},"visibility":"default","docs":"Writes IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"f32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:183:2589":{"id":"0:183:2589","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[309,4],"end":[309,35]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:206:2682":{"id":"0:206:2682","crate_id":0,"name":"write_i24","span":{"filename":"src/lib.rs","begin":[792,4],"end":[794,5]},"visibility":"default","docs":"Writes a signed 24 bit integer `n` to `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:4057:1938":{"id":"2:4057:1938","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:43501:7450","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:246:2845":{"id":"0:246:2845","crate_id":0,"name":"from_slice_i64","span":{"filename":"src/lib.rs","begin":[1749,4],"end":[1754,5]},"visibility":"default","docs":"Converts the given slice of signed 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i64(&mut numbers);\nassert_eq!(numbers, [5i64.to_be(), 65000i64.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:36002:260","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:322:2535":{"id":"0:322:2535","crate_id":0,"name":"BigEndian","span":{"filename":"src/lib.rs","begin":[1813,0],"end":[1813,21]},"visibility":"public","docs":"Defines big-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 4];\nBigEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, BigEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"has_stripped_variants":false,"variants":[],"impls":["a:2:36000:251-0:322:2535","a:2:3408:263-0:322:2535","a:2:3443:3981-0:322:2535","a:2:36058:3894-0:322:2535","a:2:45870:3933-0:322:2535","a:2:45871:3932-0:322:2535","b:2:2860-0:322:2535","b:2:2863-0:322:2535","b:2:2918-0:322:2535","b:2:3175-0:322:2535","b:2:3179-0:322:2535","b:2:3185-0:322:2535","b:2:3190-0:322:2535","b:2:4055-0:322:2535","b:5:816-0:322:2535","0:323","0:325","0:326","0:328","0:330","0:333","0:335","0:336","0:338","0:250","0:260"]}}},"0:205:2680":{"id":"0:205:2680","crate_id":0,"name":"write_i16","span":{"filename":"src/lib.rs","begin":[770,4],"end":[772,5]},"visibility":"default","docs":"Writes a signed 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i16"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:310:2722":{"id":"0:310:2722","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2214,4],"end":[2216,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:142:2692":{"id":"0:142:2692","crate_id":0,"name":"write_i128","span":{"filename":"src/io.rs","begin":[1410,4],"end":[1414,5]},"visibility":"default","docs":"Writes a signed 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i128"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:220:2740":{"id":"0:220:2740","crate_id":0,"name":"read_i32_into","span":{"filename":"src/lib.rs","begin":[1119,4],"end":[1124,5]},"visibility":"default","docs":"Reads signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:251:60":{"id":"0:251:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1816,4],"end":[1818,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:5:816-0:340:2534":{"id":"b:5:816-0:340:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["5:818:4081","5:819:4082","5:820:4083"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:225:2761":{"id":"0:225:2761","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/lib.rs","begin":[1242,4],"end":[1244,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f32_into` instead"},"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:109:2611":{"id":"0:109:2611","crate_id":0,"name":"write_u16","span":{"filename":"src/io.rs","begin":[1151,4],"end":[1155,5]},"visibility":"default","docs":"Writes an unsigned 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\\x03\\x00\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u16"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:34:2637":{"id":"0:34:2637","crate_id":0,"name":"read_i24","span":{"filename":"src/io.rs","begin":[191,4],"end":[195,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:184:2596":{"id":"0:184:2596","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[328,4],"end":[328,37]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:275:2627":{"id":"0:275:2627","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2012,4],"end":[2023,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:45870:3933-0:322:2535":{"id":"a:2:45870:3933-0:322:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:45870:3933","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:283:2778":{"id":"0:283:2778","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2056,4],"end":[2058,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:330":{"id":"0:330","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,33],"end":[1812,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:11235:165","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:331:921"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:185:2572":{"id":"0:185:2572","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[348,4],"end":[348,51]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"2:2920:28023":{"id":"2:2920:28023","crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"is_mutable":true,"type":{"generic":"T"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:215:2708":{"id":"0:215:2708","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[997,4],"end":[997,50]},"visibility":"default","docs":"Reads unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:124:2685":{"id":"0:124:2685","crate_id":0,"name":"write_i32","span":{"filename":"src/io.rs","begin":[1286,4],"end":[1290,5]},"visibility":"default","docs":"Writes a signed 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i32::<BigEndian>(-34253).unwrap();\nwtr.write_i32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\xff\\xff\\x7a\\x33\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:314:2778":{"id":"0:314:2778","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2234,4],"end":[2236,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:200:2658":{"id":"0:200:2658","crate_id":0,"name":"read_i128","span":{"filename":"src/lib.rs","begin":[656,4],"end":[658,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:317:2824":{"id":"0:317:2824","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2253,4],"end":[2259,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:341":{"id":"0:341","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,9],"end":[1842,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:342:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:352:516":{"id":"0:352:516","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1842,39],"end":[1842,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:34760:208","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:277:2708":{"id":"0:277:2708","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2026,4],"end":[2028,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:209:2689":{"id":"0:209:2689","crate_id":0,"name":"write_i64","span":{"filename":"src/lib.rs","begin":[858,4],"end":[860,5]},"visibility":"default","docs":"Writes a signed 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:284:2781":{"id":"0:284:2781","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2061,4],"end":[2063,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:309:2716":{"id":"0:309:2716","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2209,4],"end":[2211,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:2862:3669":{"id":"2:2862:3669","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:88:2734":{"id":"0:88:2734","crate_id":0,"name":"read_i16_into","span":{"filename":"src/io.rs","begin":[747,4],"end":[754,5]},"visibility":"default","docs":"Reads a sequence of signed 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:4055-0:322:2535":{"id":"b:2:4055-0:322:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:281:2772":{"id":"0:281:2772","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2046,4],"end":[2048,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:242:2828":{"id":"0:242:2828","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[1660,4],"end":[1660,43]},"visibility":"default","docs":"Converts the given slice of unsigned 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u64(&mut numbers);\nassert_eq!(numbers, [5u64.to_be(), 65000u64.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:61:2572":{"id":"0:61:2572","crate_id":0,"name":"read_uint","span":{"filename":"src/io.rs","begin":[427,4],"end":[431,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0x74, 0xfa]);\nassert_eq!(8418554, rdr.read_uint::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:233:2795":{"id":"0:233:2795","crate_id":0,"name":"write_i8_into","span":{"filename":"src/lib.rs","begin":[1428,4],"end":[1433,5]},"visibility":"default","docs":"Writes signed 8 bit integers from `src` into `dst`.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to write from a `&[i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `u8` individually.)\n\n# Panics\n\nPanics when `buf.len() != src.len()`.\n\n# Examples\n\nWrite and read `i8` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian, ReadBytesExt};\n\nlet mut bytes = [0; 4];\nlet numbers_given = [1, 2, 0xf, 0xe];\nLittleEndian::write_i8_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nbytes.as_ref().read_i8_into(&mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:36058:3894-0:340:2534":{"id":"a:2:36058:3894-0:340:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:36058:3894","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:219:2734":{"id":"0:219:2734","crate_id":0,"name":"read_i16_into","span":{"filename":"src/lib.rs","begin":[1090,4],"end":[1095,5]},"visibility":"default","docs":"Reads signed 16 bit integers from `src` to `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:337:739":{"id":"0:337:739","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:45871:3932-0:322:2535":{"id":"a:2:45871:3932-0:322:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:45871:3932","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:286:2824":{"id":"0:286:2824","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2075,4],"end":[2081,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:186:2606":{"id":"0:186:2606","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[368,4],"end":[368,55]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:202:2665":{"id":"0:202:2665","crate_id":0,"name":"read_int128","span":{"filename":"src/lib.rs","begin":[702,4],"end":[704,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:296:2572":{"id":"0:296:2572","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[2148,4],"end":[2153,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:345:847":{"id":"0:345:847","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1842,22],"end":[1842,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:355:739":{"id":"0:355:739","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:293:2575":{"id":"0:293:2575","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[2133,4],"end":[2135,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:221:2744":{"id":"0:221:2744","crate_id":0,"name":"read_i64_into","span":{"filename":"src/lib.rs","begin":[1148,4],"end":[1153,5]},"visibility":"default","docs":"Reads signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:81:2716":{"id":"0:81:2716","crate_id":0,"name":"read_u32_into","span":{"filename":"src/io.rs","begin":[597,4],"end":[604,5]},"visibility":"default","docs":"Reads a sequence of unsigned 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:94:2748":{"id":"0:94:2748","crate_id":0,"name":"read_i128_into","span":{"filename":"src/io.rs","begin":[858,4],"end":[868,5]},"visibility":"default","docs":"Reads a sequence of signed 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:222:2748":{"id":"0:222:2748","crate_id":0,"name":"read_i128_into","span":{"filename":"src/lib.rs","begin":[1177,4],"end":[1182,5]},"visibility":"default","docs":"Reads signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:228:2769":{"id":"0:228:2769","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/lib.rs","begin":[1305,4],"end":[1307,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f64_into` instead"},"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:342:508":{"id":"0:342:508","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1842,9],"end":[1842,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:180:2571":{"id":"0:180:2571","crate_id":0,"name":"read_u24","span":{"filename":"src/lib.rs","begin":[248,4],"end":[250,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:278:2716":{"id":"0:278:2716","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2031,4],"end":[2033,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3190-0:322:2535":{"id":"b:2:3190-0:322:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3193:150","2:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:340:2534":{"id":"0:340:2534","crate_id":0,"name":"LittleEndian","span":{"filename":"src/lib.rs","begin":[1843,0],"end":[1843,24]},"visibility":"public","docs":"Defines little-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"has_stripped_variants":false,"variants":[],"impls":["a:2:36000:251-0:340:2534","a:2:3408:263-0:340:2534","a:2:3443:3981-0:340:2534","a:2:36058:3894-0:340:2534","a:2:45870:3933-0:340:2534","a:2:45871:3932-0:340:2534","b:2:2860-0:340:2534","b:2:2863-0:340:2534","b:2:2918-0:340:2534","b:2:3175-0:340:2534","b:2:3179-0:340:2534","b:2:3185-0:340:2534","b:2:3190-0:340:2534","b:2:4055-0:340:2534","b:5:816-0:340:2534","0:341","0:343","0:344","0:346","0:348","0:351","0:353","0:354","0:356","0:253","0:291"]}}},"0:280:2728":{"id":"0:280:2728","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2041,4],"end":[2043,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:207:2685":{"id":"0:207:2685","crate_id":0,"name":"write_i32","span":{"filename":"src/lib.rs","begin":[814,4],"end":[816,5]},"visibility":"default","docs":"Writes a signed 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:261:2563":{"id":"0:261:2563","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[1940,4],"end":[1942,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:210:2692":{"id":"0:210:2692","crate_id":0,"name":"write_i128","span":{"filename":"src/lib.rs","begin":[880,4],"end":[882,5]},"visibility":"default","docs":"Writes a signed 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read n-byte `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i128"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1938,0],"end":[2124,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_i32","write_u48","write_i24","read_i32_into","write_i64_into","read_i16_into","write_i8_into","write_f64_into","read_i128","from_slice_i32","read_u48","read_i32","read_i24","read_f64_into","write_i128","write_i64","write_int","write_i16","write_u24","read_i64_into","read_f32","write_i32_into","read_int128","write_f32_into","read_i64","from_slice_i64","read_f64_into_unchecked","read_int","read_u24","read_i16","write_f32","write_f64","write_i48","read_i128_into","read_f64","write_i128_into","write_i16_into","from_slice_i128","read_i48","from_slice_i16","read_f32_into_unchecked","write_int128","read_f32_into"],"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:261:2563","0:262:2575","0:263:2589","0:264:2596","0:265:2572","0:267:2606","0:269:2611","0:270:2616","0:271:2620","0:272:2622","0:273:2614","0:275:2627","0:277:2708","0:278:2716","0:279:2722","0:280:2728","0:281:2772","0:282:2775","0:283:2778","0:284:2781","0:285:2819","0:286:2824","0:287:2828","0:288:2832","0:289:2852","0:290:2854"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:130:2687":{"id":"0:130:2687","crate_id":0,"name":"write_i48","span":{"filename":"src/io.rs","begin":[1340,4],"end":[1344,5]},"visibility":"default","docs":"Writes a signed 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i48::<BigEndian>(-108363435763825).unwrap();\nwtr.write_i48::<BigEndian>(77).unwrap();\nassert_eq!(wtr, b\"\\x9d\\x71\\xab\\xe7\\x97\\x8f\\x00\\x00\\x00\\x00\\x00\\x4d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:199:2653":{"id":"0:199:2653","crate_id":0,"name":"read_i64","span":{"filename":"src/lib.rs","begin":[634,4],"end":[636,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:45871:3932-0:340:2534":{"id":"a:2:45871:3932-0:340:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:45871:3932","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:339:1374":{"id":"0:339:1374","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1812,55],"end":[1812,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:34760:208","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:262:2575":{"id":"0:262:2575","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[1945,4],"end":[1947,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:23:3321":{"id":"0:23:3321","crate_id":0,"name":"read_i8","span":{"filename":"src/io.rs","begin":[85,4],"end":[89,5]},"visibility":"default","docs":"Reads a signed 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![0x02, 0xfb]);\nassert_eq!(2, rdr.read_i8().unwrap());\nassert_eq!(-5, rdr.read_i8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3175-0:322:2535":{"id":"b:2:3175-0:322:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3178:4014"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:272:2622":{"id":"0:272:2622","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[1993,4],"end":[1995,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:3193:150":{"id":"2:3193:150","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"name":"Infallible","id":"2:35924:3711","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"0:133:2620":{"id":"0:133:2620","crate_id":0,"name":"write_u64","span":{"filename":"src/io.rs","begin":[1367,4],"end":[1371,5]},"visibility":"default","docs":"Writes an unsigned 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u64::<BigEndian>(918733457491587).unwrap();\nwtr.write_u64::<BigEndian>(143).unwrap();\nassert_eq!(wtr, b\"\\x00\\x03\\x43\\x95\\x4d\\x60\\x86\\x83\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:43:2582":{"id":"0:43:2582","crate_id":0,"name":"read_u48","span":{"filename":"src/io.rs","begin":[269,4],"end":[273,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xb6, 0x71, 0x6b, 0xdc, 0x2b, 0x31]);\nassert_eq!(200598257150769, rdr.read_u48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:213:2696":{"id":"0:213:2696","crate_id":0,"name":"write_f32","span":{"filename":"src/lib.rs","begin":[949,4],"end":[951,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"f32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:354":{"id":"0:354","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2952:213","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:355:739"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:100:2765":{"id":"0:100:2765","crate_id":0,"name":"read_f64_into","span":{"filename":"src/io.rs","begin":[987,4],"end":[994,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:237:2806":{"id":"0:237:2806","crate_id":0,"name":"write_i128_into","span":{"filename":"src/lib.rs","begin":[1540,4],"end":[1545,5]},"visibility":"default","docs":"Writes signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:55:2596":{"id":"0:55:2596","crate_id":0,"name":"read_u128","span":{"filename":"src/io.rs","begin":[376,4],"end":[380,5]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83,\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83\n]);\nassert_eq!(16947640962301618749969007319746179, rdr.read_u128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3185-0:322:2535":{"id":"b:2:3185-0:322:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3188:150","2:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:3194:1923":{"id":"2:3194:1923","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:46078:239","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:115:2613":{"id":"0:115:2613","crate_id":0,"name":"write_u24","span":{"filename":"src/io.rs","begin":[1205,4],"end":[1209,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u24::<BigEndian>(267).unwrap();\nwtr.write_u24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\x00\\x01\\x0b\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:203:2671":{"id":"0:203:2671","crate_id":0,"name":"read_f32","span":{"filename":"src/lib.rs","begin":[725,4],"end":[727,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"f32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:189:2616":{"id":"0:189:2616","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[427,4],"end":[427,41]},"visibility":"default","docs":"Writes an unsigned 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"a:2:45870:3933-0:340:2534":{"id":"a:2:45870:3933-0:340:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:45870:3933","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:179:2563":{"id":"0:179:2563","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[229,4],"end":[229,35]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:315:2781":{"id":"0:315:2781","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2239,4],"end":[2241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:193:2614":{"id":"0:193:2614","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[506,4],"end":[506,57]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:308:2708":{"id":"0:308:2708","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2204,4],"end":[2206,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:70:2665":{"id":"0:70:2665","crate_id":0,"name":"read_int128","span":{"filename":"src/io.rs","begin":[468,4],"end":[472,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1049,0],"end":[1049,48]},"visibility":"default","docs":"All types that implement `Read` get methods defined in `ReadBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3730:3302","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["read_f32_into","read_i32_into","read_uint128","read_i16_into","read_u128_into","read_i128","read_u64_into","read_u32_into","read_u48","read_i32","read_i24","read_f64_into","read_i64_into","read_u8","read_f32","read_int128","read_u64","read_i64","read_i8_into","read_u16_into","read_f64_into_unchecked","read_int","read_u24","read_i16","read_i128_into","read_i8","read_f64","read_u128","read_i48","read_u32","read_uint","read_f32_into_unchecked","read_u16"],"trait":{"name":"ReadBytesExt","id":"0:20:2502","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"generic":"R"},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"5:819:4082":{"id":"5:819:4082","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:288:2832":{"id":"0:288:2832","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2093,4],"end":[2099,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:127:2618":{"id":"0:127:2618","crate_id":0,"name":"write_u48","span":{"filename":"src/io.rs","begin":[1313,4],"end":[1317,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u48::<BigEndian>(52360336390828).unwrap();\nwtr.write_u48::<BigEndian>(541).unwrap();\nassert_eq!(wtr, b\"\\x2f\\x9f\\x17\\x40\\x3a\\xac\\x00\\x00\\x00\\x00\\x02\\x1d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:121:2616":{"id":"0:121:2616","crate_id":0,"name":"write_u32","span":{"filename":"src/io.rs","begin":[1259,4],"end":[1263,5]},"visibility":"default","docs":"Writes an unsigned 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u32::<BigEndian>(267).unwrap();\nwtr.write_u32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\x00\\x00\\x01\\x0b\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:328":{"id":"0:328","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,29],"end":[1812,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2957:147","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:334:516":{"id":"0:334:516","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1812,39],"end":[1812,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:34760:208","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:265:2572":{"id":"0:265:2572","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[1960,4],"end":[1966,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:87:3421":{"id":"0:87:3421","crate_id":0,"name":"read_i8_into","span":{"filename":"src/io.rs","begin":[716,4],"end":[719,5]},"visibility":"default","docs":"Reads a sequence of signed 8 bit integers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to read into a `&mut [i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `i8` individually.)\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 251, 3]);\nlet mut dst = [0; 3];\nrdr.read_i8_into(&mut dst).unwrap();\nassert_eq!([2, -5, 3], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:234:2800":{"id":"0:234:2800","crate_id":0,"name":"write_i16_into","span":{"filename":"src/lib.rs","begin":[1456,4],"end":[1461,5]},"visibility":"default","docs":"Writes signed 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:73:2671":{"id":"0:73:2671","crate_id":0,"name":"read_f32","span":{"filename":"src/io.rs","begin":[499,4],"end":[503,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian single-precision floating point number from a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n]);\nassert_eq!(f32::consts::PI, rdr.read_f32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"f32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:181:2575":{"id":"0:181:2575","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[269,4],"end":[269,35]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:231:2778":{"id":"0:231:2778","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[1376,4],"end":[1376,51]},"visibility":"default","docs":"Writes unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:336":{"id":"0:336","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2952:213","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:337:739"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:311:2728":{"id":"0:311:2728","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2219,4],"end":[2221,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:197:2643":{"id":"0:197:2643","crate_id":0,"name":"read_i32","span":{"filename":"src/lib.rs","begin":[590,4],"end":[592,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:290:2854":{"id":"0:290:2854","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2114,4],"end":[2123,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:333":{"id":"0:333","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,39],"end":[1812,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2988:207","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:334:516"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:301:2616":{"id":"0:301:2616","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[2169,4],"end":[2171,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2126,0],"end":[2302,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_i32","write_u48","write_i24","read_i32_into","write_i64_into","read_i16_into","write_i8_into","write_f64_into","read_i128","from_slice_i32","read_u48","read_i32","read_i24","read_f64_into","write_i128","write_i64","write_int","write_i16","write_u24","read_i64_into","read_f32","write_i32_into","read_int128","write_f32_into","read_i64","from_slice_i64","read_f64_into_unchecked","read_int","read_u24","read_i16","write_f32","write_f64","write_i48","read_i128_into","read_f64","write_i128_into","write_i16_into","from_slice_i128","read_i48","from_slice_i16","read_f32_into_unchecked","write_int128","read_f32_into"],"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:292:2563","0:293:2575","0:294:2589","0:295:2596","0:296:2572","0:298:2606","0:300:2611","0:301:2616","0:302:2620","0:303:2622","0:304:2614","0:306:2627","0:308:2708","0:309:2716","0:310:2722","0:311:2728","0:312:2772","0:313:2775","0:314:2778","0:315:2781","0:316:2819","0:317:2824","0:318:2828","0:319:2832","0:320:2852","0:321:2854"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:218:2728":{"id":"0:218:2728","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[1066,4],"end":[1066,52]},"visibility":"default","docs":"Reads unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:321:2854":{"id":"0:321:2854","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2292,4],"end":[2301,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:244:2837":{"id":"0:244:2837","crate_id":0,"name":"from_slice_i16","span":{"filename":"src/lib.rs","begin":[1699,4],"end":[1704,5]},"visibility":"default","docs":"Converts the given slice of signed 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 6500];\nBigEndian::from_slice_i16(&mut numbers);\nassert_eq!(numbers, [5i16.to_be(), 6500i16.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:3408:263-0:340:2534":{"id":"a:2:3408:263-0:340:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3408:263","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:248:2852":{"id":"0:248:2852","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[1786,4],"end":[1786,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 single-precision (4 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"b:2:2863-0:340:2534":{"id":"b:2:2863-0:340:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2865:28022"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:256:2875":{"id":"0:256:2875","crate_id":0,"name":"NetworkEndian","span":{"filename":"src/lib.rs","begin":[1880,0],"end":[1880,35]},"visibility":"public","docs":"Defines network byte order serialization.\n\nNetwork byte order is defined by [RFC 1700][1] to be big-endian, and is\nreferred to in several protocol specifications.  This type is an alias of\n[`BigEndian`].\n\n[1]: https://tools.ietf.org/html/rfc1700\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, NetworkEndian, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, NetworkEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:324:508":{"id":"0:324:508","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1812,9],"end":[1812,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:323":{"id":"0:323","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,9],"end":[1812,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:324:508"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:2:2918-0:340:2534":{"id":"b:2:2918-0:340:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2916:3979","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2920:28023"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67:2606":{"id":"0:67:2606","crate_id":0,"name":"read_uint128","span":{"filename":"src/io.rs","begin":[460,4],"end":[464,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:148:2683":{"id":"0:148:2683","crate_id":0,"name":"write_int","span":{"filename":"src/io.rs","begin":[1478,4],"end":[1486,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite signed 56 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_int::<BigEndian>(-3548172039376767, 7).unwrap();\nwtr.write_int::<BigEndian>(43, 7).unwrap();\nassert_eq!(wtr, b\"\\xf3\\x64\\xf4\\xd1\\xfd\\xb0\\x81\\x00\\x00\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:194:2627":{"id":"0:194:2627","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[526,4],"end":[526,61]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:145:2614":{"id":"0:145:2614","crate_id":0,"name":"write_uint","span":{"filename":"src/io.rs","begin":[1442,4],"end":[1450,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite unsigned 40 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_uint::<BigEndian>(312550384361, 5).unwrap();\nwtr.write_uint::<BigEndian>(43, 5).unwrap();\nassert_eq!(wtr, b\"\\x48\\xc5\\x74\\x62\\xe9\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:160:2699":{"id":"0:160:2699","crate_id":0,"name":"write_f64","span":{"filename":"src/io.rs","begin":[1570,4],"end":[1574,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian double-precision floating point number to a `Write`:\n\n```rust\nuse std::f64;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f64::<BigEndian>(f64::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x09\\x21\\xfb\\x54\\x44\\x2d\\x18\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:212:2694":{"id":"0:212:2694","crate_id":0,"name":"write_int128","span":{"filename":"src/lib.rs","begin":[926,4],"end":[928,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i128"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:357:1374":{"id":"0:357:1374","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1842,55],"end":[1842,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:45774:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:34760:208","args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:190:2618":{"id":"0:190:2618","crate_id":0,"name":"write_u48","span":{"filename":"src/lib.rs","begin":[446,4],"end":[448,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:236:2804":{"id":"0:236:2804","crate_id":0,"name":"write_i64_into","span":{"filename":"src/lib.rs","begin":[1512,4],"end":[1517,5]},"visibility":"default","docs":"Writes signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3190-0:340:2534":{"id":"b:2:3190-0:340:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3193:150","2:3194:1923"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:240:2819":{"id":"0:240:2819","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[1622,4],"end":[1622,43]},"visibility":"default","docs":"Converts the given slice of unsigned 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u16(&mut numbers);\nassert_eq!(numbers, [5u16.to_be(), 65000u16.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"a:2:3443:3981-0:322:2535":{"id":"a:2:3443:3981-0:322:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3443:3981","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:306:2627":{"id":"0:306:2627","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2194,4],"end":[2201,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:3443:3981-0:340:2534":{"id":"a:2:3443:3981-0:340:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"2:3443:3981","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:90:2740":{"id":"0:90:2740","crate_id":0,"name":"read_i32_into","span":{"filename":"src/io.rs","begin":[782,4],"end":[789,5]},"visibility":"default","docs":"Reads a sequence of signed 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:312:2772":{"id":"0:312:2772","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2224,4],"end":[2226,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:175:2533":{"id":"0:175:2533","crate_id":0,"name":"Sealed","span":{"filename":"src/lib.rs","begin":[172,4],"end":[172,23]},"visibility":"public","docs":"Sealed stops crates other than byteorder from implementing any traits\nthat use it.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1815,0],"end":[1819,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3227:127","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:251:60"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:96:2755":{"id":"0:96:2755","crate_id":0,"name":"read_f32_into","span":{"filename":"src/io.rs","begin":[902,4],"end":[909,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:204:2678":{"id":"0:204:2678","crate_id":0,"name":"read_f64","span":{"filename":"src/lib.rs","begin":[748,4],"end":[750,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"f64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2863-0:322:2535":{"id":"b:2:2863-0:322:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2857:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2865:28022"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:263:2589":{"id":"0:263:2589","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[1950,4],"end":[1952,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"5:818:4081":{"id":"5:818:4081","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"0:346":{"id":"0:346","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,29],"end":[1842,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2957:147","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:318:2828":{"id":"0:318:2828","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2262,4],"end":[2268,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:349:921":{"id":"0:349:921","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1842,33],"end":[1842,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"__H"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:11243:169","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:198:2648":{"id":"0:198:2648","crate_id":0,"name":"read_i48","span":{"filename":"src/lib.rs","begin":[612,4],"end":[614,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:289:2852":{"id":"0:289:2852","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2102,4],"end":[2111,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:4055-0:340:2534":{"id":"b:2:4055-0:340:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4053:71","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:4057:1938"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:201:2638":{"id":"0:201:2638","crate_id":0,"name":"read_int","span":{"filename":"src/lib.rs","begin":[679,4],"end":[681,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:351":{"id":"0:351","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,39],"end":[1842,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","max","min"],"trait":{"name":"Ord","id":"2:2988:207","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:352:516"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:49:2589":{"id":"0:49:2589","crate_id":0,"name":"read_u64","span":{"filename":"src/io.rs","begin":[321,4],"end":[325,5]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83]);\nassert_eq!(918733457491587, rdr.read_u64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3179-0:340:2534":{"id":"b:2:3179-0:340:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:36000:251-0:340:2534":{"id":"a:2:36000:251-0:340:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:241:2824":{"id":"0:241:2824","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[1641,4],"end":[1641,43]},"visibility":"default","docs":"Converts the given slice of unsigned 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u32(&mut numbers);\nassert_eq!(numbers, [5u32.to_be(), 65000u32.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:252:2863":{"id":"0:252:2863","crate_id":0,"name":"BE","span":{"filename":"src/lib.rs","begin":[1824,0],"end":[1824,24]},"visibility":"public","docs":"A type alias for [`BigEndian`].\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:79:2708":{"id":"0:79:2708","crate_id":0,"name":"read_u16_into","span":{"filename":"src/io.rs","begin":[562,4],"end":[569,5]},"visibility":"default","docs":"Reads a sequence of unsigned 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:36058:3894-0:322:2535":{"id":"a:2:36058:3894-0:322:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:36058:3894","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:356":{"id":"0:356","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,55],"end":[1842,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","le","gt","ge"],"trait":{"name":"PartialOrd","id":"2:2994:214","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:357:1374"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:344":{"id":"0:344","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,22],"end":[1842,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:345:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:320:2852":{"id":"0:320:2852","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2280,4],"end":[2289,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:136:2689":{"id":"0:136:2689","crate_id":0,"name":"write_i64","span":{"filename":"src/io.rs","begin":[1394,4],"end":[1398,5]},"visibility":"default","docs":"Writes a signed 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i64::<BigEndian>(i64::min_value()).unwrap();\nwtr.write_i64::<BigEndian>(i64::max_value()).unwrap();\nassert_eq!(wtr, b\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3175-0:340:2534":{"id":"b:2:3175-0:340:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3149:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3178:4014"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:12-0:106:2503":{"id":"0:12-0:106:2503","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,34],"end":[82,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"use":{"source":"crate::io::WriteBytesExt","name":"WriteBytesExt","id":"0:106:2503","is_glob":false}}},"0:239:2810":{"id":"0:239:2810","crate_id":0,"name":"write_f64_into","span":{"filename":"src/lib.rs","begin":[1598,4],"end":[1603,5]},"visibility":"default","docs":"Writes IEEE754 double-precision (8 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"f64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:52:2653":{"id":"0:52:2653","crate_id":0,"name":"read_i64","span":{"filename":"src/io.rs","begin":[347,4],"end":[351,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i64::min_value(), rdr.read_i64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:139:2622":{"id":"0:139:2622","crate_id":0,"name":"write_u128","span":{"filename":"src/io.rs","begin":[1402,4],"end":[1406,5]},"visibility":"default","docs":"Writes an unsigned 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u128"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,16],"end":[1842,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:3403:121","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:85:2728":{"id":"0:85:2728","crate_id":0,"name":"read_u128_into","span":{"filename":"src/io.rs","begin":[673,4],"end":[683,5]},"visibility":"default","docs":"Reads a sequence of unsigned 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:154:2694":{"id":"0:154:2694","crate_id":0,"name":"write_int128","span":{"filename":"src/io.rs","begin":[1508,4],"end":[1516,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i128"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:3178:4014":{"id":"2:3178:4014","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3152:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:267:2606":{"id":"0:267:2606","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[1969,4],"end":[1975,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:285:2819":{"id":"0:285:2819","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2066,4],"end":[2072,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:226:2765":{"id":"0:226:2765","crate_id":0,"name":"read_f64_into","span":{"filename":"src/lib.rs","begin":[1269,4],"end":[1275,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"2:2865:28022":{"id":"2:2865:28022","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:217:2722":{"id":"0:217:2722","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[1043,4],"end":[1043,50]},"visibility":"default","docs":"Reads unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:257:2878":{"id":"0:257:2878","crate_id":0,"name":"NativeEndian","span":{"filename":"src/lib.rs","begin":[1891,0],"end":[1891,37]},"visibility":"public","docs":"Defines system native-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\nOn this platform, this is an alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":["#[cfg(target_endian = \"little\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:64:2638":{"id":"0:64:2638","crate_id":0,"name":"read_int","span":{"filename":"src/io.rs","begin":[452,4],"end":[456,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xc1, 0xff, 0x7c]);\nassert_eq!(-4063364, rdr.read_int::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:292:2563":{"id":"0:292:2563","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[2128,4],"end":[2130,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:316:2819":{"id":"0:316:2819","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2244,4],"end":[2250,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:3179-0:322:2535":{"id":"b:2:3179-0:322:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3152:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3181:878"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:300:2611":{"id":"0:300:2611","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[2164,4],"end":[2166,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"5:820:4083":{"id":"5:820:4083","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:112:2680":{"id":"0:112:2680","crate_id":0,"name":"write_i16","span":{"filename":"src/io.rs","begin":[1178,4],"end":[1182,5]},"visibility":"default","docs":"Writes a signed 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i16::<BigEndian>(193).unwrap();\nwtr.write_i16::<BigEndian>(-132).unwrap();\nassert_eq!(wtr, b\"\\x00\\xc1\\xff\\x7c\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i16"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:302:2620":{"id":"0:302:2620","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[2174,4],"end":[2176,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:76:2678":{"id":"0:76:2678","crate_id":0,"name":"read_f64","span":{"filename":"src/io.rs","begin":[530,4],"end":[534,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian double-precision floating point number from a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n]);\nassert_eq!(f64::consts::PI, rdr.read_f64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"f64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:20:2502":{"id":"0:20:2502","crate_id":0,"name":"ReadBytesExt","span":{"filename":"src/io.rs","begin":[30,0],"end":[1045,1]},"visibility":"public","docs":"Extends [`Read`] with methods for reading numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`]:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:21:3314","0:23:3321","0:25:2563","0:28:2632","0:31:2571","0:34:2637","0:37:2575","0:40:2643","0:43:2582","0:46:2648","0:49:2589","0:52:2653","0:55:2596","0:58:2658","0:61:2572","0:64:2638","0:67:2606","0:70:2665","0:73:2671","0:76:2678","0:79:2708","0:81:2716","0:83:2722","0:85:2728","0:87:3421","0:88:2734","0:90:2740","0:92:2744","0:94:2748","0:96:2755","0:98:2761","0:100:2765","0:102:2769"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3730:3302","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:104"]}}},"0:303:2622":{"id":"0:303:2622","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[2179,4],"end":[2181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:319:2832":{"id":"0:319:2832","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2271,4],"end":[2277,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"a:2:36000:251-0:322:2535":{"id":"a:2:36000:251-0:322:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:36000:251","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"0:182:2582":{"id":"0:182:2582","crate_id":0,"name":"read_u48","span":{"filename":"src/lib.rs","begin":[288,4],"end":[290,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:187:2611":{"id":"0:187:2611","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[387,4],"end":[387,41]},"visibility":"default","docs":"Writes an unsigned 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_u16(&mut buf, 1_000);\nassert_eq!(1_000, LittleEndian::read_u16(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"b:5:816-0:322:2535":{"id":"b:5:816-0:322:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:812:266","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["5:818:4081","5:819:4082","5:820:4083"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:196:2637":{"id":"0:196:2637","crate_id":0,"name":"read_i24","span":{"filename":"src/lib.rs","begin":[568,4],"end":[570,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:211:2683":{"id":"0:211:2683","crate_id":0,"name":"write_int","span":{"filename":"src/lib.rs","begin":[903,4],"end":[905,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:216:2716":{"id":"0:216:2716","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[1020,4],"end":[1020,50]},"visibility":"default","docs":"Reads unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:273:2614":{"id":"0:273:2614","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[1998,4],"end":[2009,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:58:2658":{"id":"0:58:2658","crate_id":0,"name":"read_i128","span":{"filename":"src/io.rs","begin":[402,4],"end":[406,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i128::min_value(), rdr.read_i128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:37:2575":{"id":"0:37:2575","crate_id":0,"name":"read_u32","span":{"filename":"src/io.rs","begin":[217,4],"end":[221,5]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:191:2620":{"id":"0:191:2620","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[467,4],"end":[467,41]},"visibility":"default","docs":"Writes an unsigned 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:195:2632":{"id":"0:195:2632","crate_id":0,"name":"read_i16","span":{"filename":"src/lib.rs","begin":[546,4],"end":[548,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i16"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:229:2772":{"id":"0:229:2772","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[1330,4],"end":[1330,51]},"visibility":"default","docs":"Writes unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:108:3482":{"id":"0:108:3482","crate_id":0,"name":"write_i8","span":{"filename":"src/io.rs","begin":[1126,4],"end":[1128,5]},"visibility":"default","docs":"Writes a signed 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_i8(2).unwrap();\nwtr.write_i8(-5).unwrap();\nassert_eq!(wtr, b\"\\x02\\xfb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i8"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:287:2828":{"id":"0:287:2828","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2084,4],"end":[2090,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:294:2589":{"id":"0:294:2589","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[2138,4],"end":[2140,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:304:2614":{"id":"0:304:2614","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[2184,4],"end":[2191,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:178:2559":{"id":"0:178:2559","crate_id":0,"name":"ByteOrder","span":{"filename":"src/lib.rs","begin":[212,0],"end":[1794,1]},"visibility":"public","docs":"`ByteOrder` describes types that can serialize integers as bytes.\n\nNote that `Self` does not appear anywhere in this trait's definition!\nTherefore, in order to use it, you'll need to use syntax like\n`T::read_u16(&[0, 1])` where `T` implements `ByteOrder`.\n\nThis crate provides two types that implement `ByteOrder`: [`BigEndian`]\nand [`LittleEndian`].\nThis trait is sealed and cannot be implemented for callers to avoid\nbreaking backwards compatibility when adding new derived traits.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, BigEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:179:2563","0:180:2571","0:181:2575","0:182:2582","0:183:2589","0:184:2596","0:185:2572","0:186:2606","0:187:2611","0:188:2613","0:189:2616","0:190:2618","0:191:2620","0:192:2622","0:193:2614","0:194:2627","0:195:2632","0:196:2637","0:197:2643","0:198:2648","0:199:2653","0:200:2658","0:201:2638","0:202:2665","0:203:2671","0:204:2678","0:205:2680","0:206:2682","0:207:2685","0:208:2687","0:209:2689","0:210:2692","0:211:2683","0:212:2694","0:213:2696","0:214:2699","0:215:2708","0:216:2716","0:217:2722","0:218:2728","0:219:2734","0:220:2740","0:221:2744","0:222:2748","0:223:2755","0:225:2761","0:226:2765","0:228:2769","0:229:2772","0:230:2775","0:231:2778","0:232:2781","0:233:2795","0:234:2800","0:235:2802","0:236:2804","0:237:2806","0:238:2808","0:239:2810","0:240:2819","0:241:2824","0:242:2828","0:243:2832","0:244:2837","0:245:2841","0:246:2845","0:247:2849","0:248:2852","0:249:2854"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3403:121","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:3227:127","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2957:147","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:11235:165","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"2:2988:207","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2952:213","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2994:214","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"private::Sealed","id":"0:175:2533","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:260","0:291"]}}},"0:249:2854":{"id":"0:249:2854","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[1793,4],"end":[1793,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 double-precision (8 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1845,0],"end":[1849,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:3227:127","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:254:60"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"b:2:3185-0:340:2534":{"id":"b:2:3185-0:340:2534","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3159:273","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3155:274","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:2534","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:3188:150","2:3189:1925"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:230:2775":{"id":"0:230:2775","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[1353,4],"end":[1353,51]},"visibility":"default","docs":"Writes unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:102:2769":{"id":"0:102:2769","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/io.rs","begin":[1039,4],"end":[1044,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Safety\n\nThis method is unsafe because there are no guarantees made about the\nfloating point values. In particular, this method does not check for\nsignaling NaNs, which may result in undefined behavior.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f64_into` instead"},"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:235:2802":{"id":"0:235:2802","crate_id":0,"name":"write_i32_into","span":{"filename":"src/lib.rs","begin":[1484,4],"end":[1489,5]},"visibility":"default","docs":"Writes signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:269:2611":{"id":"0:269:2611","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[1978,4],"end":[1980,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:0:3172":{"id":"0:0:3172","crate_id":0,"name":"byteorder","span":{"filename":"src/lib.rs","begin":[1,0],"end":[3975,1]},"visibility":"public","docs":"This crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].\n\nThe organization of the crate is pretty simple. A trait, [`ByteOrder`], specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]\nand [`LittleEndian`] implement these methods. Finally, [`ReadBytesExt`] and\n[`WriteBytesExt`] provide convenience methods available to all types that\nimplement [`Read`] and [`Write`].\n\nAn alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve\ncode clarity.\n\nAn additional alias, [`NativeEndian`], is provided for the endianness of the\nlocal platform. This is convenient when serializing data for use and\nconversions are not desired.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`] type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a [`Write`] type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n\n# Optional Features\n\nThis crate optionally provides support for 128 bit values (`i128` and `u128`)\nwhen built with the `i128` feature enabled.\n\nThis crate can also be used without the standard library.\n\n# Alternatives\n\nNote that as of Rust 1.32, the standard numeric types provide built-in methods\nlike `to_le_bytes` and `from_le_bytes`, which support some of the same use\ncases.\n\n[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness\n[`ByteOrder`]: trait.ByteOrder.html\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`ReadBytesExt`]: trait.ReadBytesExt.html\n[`WriteBytesExt`]: trait.WriteBytesExt.html\n[`NetworkEndian`]: type.NetworkEndian.html\n[`NativeEndian`]: type.NativeEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":["#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:11-0:20:2502","0:12-0:106:2503","0:178:2559","0:322:2535","0:252:2863","0:340:2534","0:255:2867","0:256:2875","0:257:2878"],"is_stripped":false}}},"0:40:2643":{"id":"0:40:2643","crate_id":0,"name":"read_i32","span":{"filename":"src/io.rs","begin":[243,4],"end":[247,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:245:2841":{"id":"0:245:2841","crate_id":0,"name":"from_slice_i32","span":{"filename":"src/lib.rs","begin":[1724,4],"end":[1729,5]},"visibility":"default","docs":"Converts the given slice of signed 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i32(&mut numbers);\nassert_eq!(numbers, [5i32.to_be(), 65000i32.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:295:2596":{"id":"0:295:2596","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[2143,4],"end":[2145,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:270:2616":{"id":"0:270:2616","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[1983,4],"end":[1985,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:326":{"id":"0:326","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,22],"end":[1812,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:11015:123","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:327:847"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:106:2503":{"id":"0:106:2503","crate_id":0,"name":"WriteBytesExt","span":{"filename":"src/io.rs","begin":[1073,0],"end":[1575,1]},"visibility":"public","docs":"Extends [`Write`] with methods for writing numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a [`Write`]:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, vec![2, 5, 3, 0]);\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:107:3475","0:108:3482","0:109:2611","0:112:2680","0:115:2613","0:118:2682","0:121:2616","0:124:2685","0:127:2618","0:130:2687","0:133:2620","0:136:2689","0:139:2622","0:142:2692","0:145:2614","0:148:2683","0:151:2627","0:154:2694","0:157:2696","0:160:2699"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3787:3464","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:163"]}}},"0:188:2613":{"id":"0:188:2613","crate_id":0,"name":"write_u24","span":{"filename":"src/lib.rs","begin":[406,4],"end":[408,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:232:2781":{"id":"0:232:2781","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[1399,4],"end":[1399,53]},"visibility":"default","docs":"Writes unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"0:151:2627":{"id":"0:151:2627","crate_id":0,"name":"write_uint128","span":{"filename":"src/io.rs","begin":[1493,4],"end":[1501,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:327:847":{"id":"0:327:847","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1812,22],"end":[1812,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10982:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:10963:239","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:92:2744":{"id":"0:92:2744","crate_id":0,"name":"read_i64_into","span":{"filename":"src/io.rs","begin":[820,4],"end":[827,5]},"visibility":"default","docs":"Reads a sequence of signed 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:279:2722":{"id":"0:279:2722","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2036,4],"end":[2038,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:31:2571":{"id":"0:31:2571","crate_id":0,"name":"read_u24","span":{"filename":"src/io.rs","begin":[165,4],"end":[169,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:11-0:20:2502":{"id":"0:11-0:20:2502","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,20],"end":[82,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"use":{"source":"crate::io::ReadBytesExt","name":"ReadBytesExt","id":"0:20:2502","is_glob":false}}},"0:118:2682":{"id":"0:118:2682","crate_id":0,"name":"write_i24","span":{"filename":"src/io.rs","begin":[1232,4],"end":[1236,5]},"visibility":"default","docs":"Writes a signed 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i24::<BigEndian>(-34253).unwrap();\nwtr.write_i24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\xff\\x7a\\x33\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:46:2648":{"id":"0:46:2648","crate_id":0,"name":"read_i48","span":{"filename":"src/io.rs","begin":[295,4],"end":[299,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x9d, 0x71, 0xab, 0xe7, 0x97, 0x8f]);\nassert_eq!(-108363435763825, rdr.read_i48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"b:2:2918-0:322:2535":{"id":"b:2:2918-0:322:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2906:114","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"2:2916:3979","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2920:28023"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2860-0:322:2535":{"id":"b:2:2860-0:322:2535","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:36001:253","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2854:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["2:2862:3669"],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:98:2761":{"id":"0:98:2761","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/io.rs","begin":[948,4],"end":[953,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\n\nReads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f32_into` instead"},"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:338":{"id":"0:338","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,55],"end":[1812,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","le","gt","ge"],"trait":{"name":"PartialOrd","id":"2:2994:214","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:2535","args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":["0:339:1374"],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"0:208:2687":{"id":"0:208:2687","crate_id":0,"name":"write_i48","span":{"filename":"src/lib.rs","begin":[836,4],"end":[838,5]},"visibility":"default","docs":"Writes a signed 48 bit integer `n` to `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"0:28:2632":{"id":"0:28:2632","crate_id":0,"name":"read_i16","span":{"filename":"src/io.rs","begin":[139,4],"end":[143,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0xc1, 0xff, 0x7c]);\nassert_eq!(193, rdr.read_i16::<BigEndian>().unwrap());\nassert_eq!(-132, rdr.read_i16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3201:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:2559","args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:6545:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:12212:4597":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:1728:6092":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:47812:3823":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:4656:16172":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:16331:5383":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:16197:5355":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:2424:8424":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:8500:5966":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:25339:9427":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:44409:9249":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"16:6460:23739":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"11:2560:37392":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:12654:8200":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:5808:8437":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:11306:8512":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:582:6254":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:5677:6803":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:1534:6280":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"5:3701:8340":{"crate_id":5,"path":["alloc","collections","btree","set","CursorMut"],"kind":"struct"},"5:5455:7277":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:7584:7203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"18:726:4418":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"14:216:6063":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:12842:1400":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:25098:35342":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:45818:4026":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:14588:8384":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:12250:4104":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:6535:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:8902:7097":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"9:346:22741":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:639:9183":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"2:51759:7760":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:50309:7777":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:13328:150":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:46663:3717":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:11606:174":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:477:6192":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:4355:9312":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:15529:5146":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:47173:3743":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:14077:4802":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:47658:4102":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:13102:23942":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:6729:8265":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:11945:254":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:45714:7897":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:50781:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:3108:5601":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:4053:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:7314:7069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:698:4409":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:15:2936":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:25090:3995":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"11:696:4026":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:3575:3840":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:1264:35835":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:44357:7596":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:11078:4622":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:5501:6725":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:1694:6388":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"14:40:4767":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:4590:8366":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:10952:28285":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:4976:6506":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:11571:7936":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2:51051:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:2076:8420":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:14771:4940":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:15721:5208":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:9991:151":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"5:3373:6094":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:7204:7314":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:13634:23815":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:25221:9429":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:16059:5295":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:50471:7783":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:7467:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:3803:224":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:45810:4106":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:50795:7795":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:37446:16365":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:5229:8143":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:3203:150":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:10255:23799":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:2964:5577":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:7537:7181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"13:125:37409":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:3660:16182":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:14705:4931":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:12845:1827":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:11413:28284":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:7302:5812":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:3167:8426":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:5111:5625":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:13531:7698":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:11392:28281":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:989:4106":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:46394:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:12308:4606":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"17:15659:5197":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:483:6195":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:50174:7772":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:5990:16432":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:11695:8161":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:14388:4878":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:1707:6392":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:2752:3775":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:1020:6091":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:4625:8432":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:7466:35689":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:48104:7708":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:12687:8202":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:14150:4816":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"11:2429:4026":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:3893:16168":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:1555:6295":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:16396:5404":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:5604:6767":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:5376:6651":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"16:5740:2535":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"11:1103:8321":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:1434:8318":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:47629:4099":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:14827:4949":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:26008:9512":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:13214:4691":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:3937:8142":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:1035:4105":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"3:359:239":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:43685:16202":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:4635:35636":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:1079:8314":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:3815:3813":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:47741:4109":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:12143:4106":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:46126:4106":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"0:256:2875":{"crate_id":0,"path":["byteorder","NetworkEndian"],"kind":"type_alias"},"2:44644:7618":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:5344:6645":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:45754:7652":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:5558:6747":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"16:7997:5595":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:10919:3822":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"11:2389:4105":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:5262:9356":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:10141:23796":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:34401:3724":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:5687:5638":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:4298:35626":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:1203:8319":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:14052:4797":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:11210:7938":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:46058:225":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"2:3671:3891":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:11240:7850":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:2850:28245":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:50862:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:3677:153":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:4948:6495":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:9508:9393":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"15:299:22830":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:16110:5306":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:6171:5651":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12351:4696":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:5307:6631":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:13276:8221":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:16292:5374":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:6109:5646":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:11026:3716":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5353:6648":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:3565:5861":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:7721:7279":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:2916:3979":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"1:8802:8482":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:25329:2533":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:13900:4767":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:501:6203":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:16149:5318":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:9715:8463":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"6:7330:7081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:1054:8309":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:50660:7790":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:47721:4110":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:50295:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:6736:37425":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:15977:5272":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:698:8406":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:6911:5744":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:12280:4602":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:13876:4766":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:50876:7798":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"18:659:8124":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:50363:7779":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:6967:5582":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:12855:957":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:27275:249":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:14765:7327":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:36090:118":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"6:5569:6753":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:1068:9204":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:9575:28107":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:11682:8160":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:47701:4094":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:13781:4739":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:6382:6810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5576:6755":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:48818:8399":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:596:8132":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:49985:7765":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:2287:3764":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"16:7956:5905":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:469:6187":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:26710:7373":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"16:6142:23736":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:12804:8207":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:6900:7046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:7348:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:44501:146":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:2608:9276":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:4620:283":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:2911:3838":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:16909:5531":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:5600:1791":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"11:2226:6096":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:12808:8926":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"11:770:6090":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:45555:7636":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:25642:35353":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:1601:6324":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:12410:8192":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:6792:5728":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"6:6673:6969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:37513:16367":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"18:538:4390":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:6935:35626":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:9379:8490":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:11093:37437":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:8847:7897":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:1586:168":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:12298:8428":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:36000:251":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:12423:4613":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"2:26459:7358":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:26390:33814":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:3881:159":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:2215:1445":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:47638:4103":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:51535:7823":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:3122:2533":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"18:491:4381":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:42094:16377":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:48217:7712":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:44342:16471":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11921:8169":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:14535:4905":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:26410:33815":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:44331:7595":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:16009:5280":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:50903:7799":{"crate_id":2,"path":["core","core_arch","simd","f16x16"],"kind":"struct"},"2:50538:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"18:531:4387":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:16883:5527":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:45018:3850":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:8055:8298":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:8340:7248":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:9710:8462":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:4921:6480":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:50417:7781":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:26051:2533":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:5126:6567":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:4242:9305":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:12853:8211":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:16484:5426":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:6841:5734":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"11:309:6081":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:2626:7266":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:1966:16311":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:1716:4026":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:35970:5899":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"9:227:7677":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:12828:8209":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:2391:35717":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:1567:6303":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:15470:5094":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:1965:8416":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:7015:4026":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"16:2484:5555":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6438:23738":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:15965:5266":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:4848:6434":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11849:23843":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:1628:8324":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:44300:7593":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:5531:6735":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:11191:37439":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:44803:7623":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:1671:6378":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:11028:3717":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:51609:7760":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1:4351:9311":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:51254:7812":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:48575:7743":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:13060:4682":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:3485:9422":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:544:5536":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:46507:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:46003:7661":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"17:12182:4593":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:1284:37244":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:12933:4663":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:3450:3789":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:12813:9191":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:1963:8415":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:14940:4985":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:2746:5567":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:26563:2533":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:3980:9288":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"6:5268:6609":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:4160:8325":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:14805:164":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"11:1882:4026":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:8093:8299":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:46246:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:10929:8490":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:26288:7331":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:4954:5621":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:12195:7966":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:4983:6509":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:5030:9357":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:10050:9377":{"crate_id":2,"path":["core","random","RandomSource"],"kind":"trait"},"16:6571:5716":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:7256:5810":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:45870:3933":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:4966:6503":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:1669:8338":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:26633:7366":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"5:7763:35714":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:43332:9218":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:9765:8375":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"16:7977:5594":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:3413:3732":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:5316:5632":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:46892:3724":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:4888:6467":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:50930:7800":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:50390:7780":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:14720:119":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:15267:5037":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:50970:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:1660:223":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:11250:152":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"0:340:2534":{"crate_id":0,"path":["byteorder","LittleEndian"],"kind":"enum"},"5:1818:35626":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:48609:135":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:14446:4891":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:13201:8152":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:2596:9270":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"14:167:22811":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:26666:7369":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:11349:1791":{"crate_id":2,"path":["core","slice"],"kind":"module"},"16:2794:5569":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:5553:1039":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:4900:5619":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:5301:6628":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:14218:4835":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:8590:3893":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:11932:2533":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:12293:4603":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:6412:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:25108:35342":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:3668:3850":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:6915:7057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"16:8525:5969":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:15852:5242":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:16382:5402":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:9481:7928":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:8983:7910":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:47194:7677":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:51675:7760":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"17:13095:4685":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:5659:6794":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"2:48760:163":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:16753:5496":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"5:1638:8309":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:7989:7290":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:12323:4111":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:46959:3724":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:14679:4928":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:3827:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:8025:5908":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"18:80:28005":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:45736:7651":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:10452:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:14259:4846":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:12087:8175":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:16811:5511":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:5492:465":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:48877:7757":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:45680:33842":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:16018:5281":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:3748:3809":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:7189:23743":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:25631:4172":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:8532:16358":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:47712:4107":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"18:589:4393":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:1922:8339":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"16:2528:5557":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:12957:4670":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:4182:5610":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:13754:4733":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:11315:8440":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:3515:16370":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:16121:5310":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"11:1878:4105":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:8808:8484":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:50147:7771":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:13480:4713":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:13050:4681":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:5671:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"9:381:22727":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"18:635:4404":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:13288:8222":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:2598:9271":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:44654:7619":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:44482:7600":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:557:6241":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:15183:5026":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:15676:5199":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:8271:3849":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:50565:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:3683:155":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:10939:4550":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:44205:7580":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:8322:9190":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:14857:4968":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:47758:7686":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:6062:5585":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:6692:7840":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:5439:6684":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:12441:7972":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:47397:7683":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"17:12464:8197":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13441:23814":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:7912:7284":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:5582:16396":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"16:8623:5978":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:8247:7845":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:563:6244":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:46078:239":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:8318:7243":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:8199:7226":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:16284:5371":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:5170:6571":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"0:252:2863":{"crate_id":0,"path":["byteorder","BE"],"kind":"type_alias"},"16:8102:5912":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7575:7932":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:11517:4559":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4811:6407":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:15021:4995":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:12175:8518":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4900:6470":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:2286:3792":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:8517:3097":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:26644:7367":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:16694:4770":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:50984:7802":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"6:5630:6784":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:48402:7725":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:10003:28280":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"5:755:8332":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:2754:3776":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"5:7441:35685":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"5:7298:16434":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:14089:4803":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:8454:7851":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:15594:5187":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:9557:8492":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:51078:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:2427:2935":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:51429:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:48317:7723":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:14465:4896":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:16476:5423":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:50282:7776":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:11034:3719":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:11015:123":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:34380:3761":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:10558:23809":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5198:6573":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:9136:7922":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:36761:5856":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:5077:3729":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:16258:5362":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:3712:9219":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:3534:3845":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:6527:6889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12700:4654":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:12861:1963":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:1043:8339":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:9523:9395":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"10:0:3566":{"crate_id":10,"path":["adler"],"kind":"module"},"6:5236:6594":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:47731:4108":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:44213:7589":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:1740:6094":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:324:3895":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:45542:7634":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"5:3933:35626":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:6873:5740":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:14652:4624":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:7334:5816":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:43464:4170":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:8295:5928":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:50160:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"11:440:37400":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:48567:7741":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:8789:3823":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:6717:6988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"18:573:4382":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"11:796:8325":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:14424:8380":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:15802:5225":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:2833:3836":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:1712:4105":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:12366:8189":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:9450:8491":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"11:2135:8318":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:7762:5882":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:9705:248":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:735:28014":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:2682:5564":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:15066:5002":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"18:113:28007":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:1049:8324":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:5088:6565":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13689:23783":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"9:168:8915":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:36059:3984":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"11:1898:6092":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:2818:5570":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"11:2548:6098":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:4724:8368":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:7264:16432":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:12816:8208":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13160:8219":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:8728:3851":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:5687:133":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:1403:5846":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:3238:150":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:22:863":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:3386:35833":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:40053:5866":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:14964:4988":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:8284:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12266:4601":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:8854:7898":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:43494:8390":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:5496:6723":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:5026:6532":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:8328:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:34413:33824":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:12742:4655":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:4301:9308":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"19:0:1370":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6623:5722":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:11338:8152":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:14339:4853":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:48076:7705":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:3803:8141":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:16440:5419":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:12865:1508":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:10964:3464":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:5224:6587":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:15957:5265":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:11283:3741":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:4927:5620":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"18:754:4423":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:8432:8472":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:3730:3302":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:26483:9289":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:16311:5380":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:1180:5846":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"16:7027:5757":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:5205:6575":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:5415:5635":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"15:317:22831":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:14926:4983":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:5683:6806":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:7966:5906":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:15143:5021":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:321:8130":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:4479:9332":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:8595:8303":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:44197:7588":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:12181:7965":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:46909:7673":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:8570:158":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:46209:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:48066:3819":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:48555:7738":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:51389:7817":{"crate_id":2,"path":["core","core_arch","simd","i32x32"],"kind":"struct"},"1:8966:3927":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:14477:4898":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:51375:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:11142:37438":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:47620:4100":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:8183:28300":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:8859:9334":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"11:1578:8326":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"16:7713:37427":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:51525:7760":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:50673:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:13314:4167":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:10639:35104":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:3282:8365":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:16872:5525":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:6766:7002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"6:5260:6605":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:16052:5294":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:13328:4169":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:47569:8398":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:12134:8178":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:4066:8339":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:4544:8431":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:9109:162":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:10794:3738":{"crate_id":2,"path":["core","fmt","builders","FromFn"],"kind":"struct"},"1:6065:7841":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:49917:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:6694:8256":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"11:2119:5846":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:50606:7788":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:8257:8467":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:6051:233":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"9:491:6168":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:7804:37429":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:9069:9369":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:15780:5223":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"18:651:4382":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:12859:1951":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:1525:6275":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:8509:3837":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:12849:777":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"1:778:8408":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:12397:8190":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:13004:4676":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:4042:8428":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"11:0:3567":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:8766:3820":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:14579:4913":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:12124:4479":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:3407:6095":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:536:6229":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:8057:28175":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"2:915:9290":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:13821:16399":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:11279:4584":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:12856:963":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:44595:7614":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:1493:6262":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:51321:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:10977:151":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:51186:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"11:102:6079":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"7:0:2024":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:51499:7821":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:44451:8392":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:11269:3818":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:5377:5634":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:14512:4902":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:13608:4117":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:11410:34569":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"2:26065:9505":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"11:783:6091":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:10713:4544":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:11741:7957":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"2:26318:7336":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:11215:7940":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"2:50835:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:8134:5597":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:3311:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:3680:154":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:3510:16369":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:14040:4796":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:1518:6272":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:2548:5558":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:26374:7343":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:5284:6617":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:15668:5198":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:15405:5043":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:1619:6091":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:4279:9306":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"3:755:7292":{"crate_id":3,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"2:2952:213":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:4637:16171":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"16:6887:5581":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:51553:7824":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:0:329":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:6335:5675":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:25943:2533":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:14692:4930":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:11018:123":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"11:852:8314":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:5071:9320":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:6450:6854":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:5038:6538":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:7539:5845":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:49958:7764":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"14:222:6065":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:46544:8378":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:5728:4086":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"14:0:3569":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:10959:4551":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:12792:8521":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:5158:6570":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:1212:8323":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:34348:3760":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:25604:2533":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:5540:6736":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:13937:4780":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:43288:16380":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:14536:35153":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:7156:5783":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:6678:8253":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"2:48437:7730":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:47934:4113":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:14138:4813":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:2854:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"18:689:4408":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:5184:6572":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:8796:3819":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:4958:7299":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:3149:175":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:6624:6951":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:6791:7011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:25162:9430":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:12333:4609":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:4956:6497":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"16:0:3571":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:8543:5972":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:36549:5859":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:3159:273":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:1085:8316":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:13341:23812":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:8711:3892":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:8879:7899":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"2:50066:7768":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:48016:7703":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:44389:8391":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"6:4824:6416":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:45520:182":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:6692:6974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:5331:3923":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:49863:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:3876:270":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:35984:3727":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"1:12458:28297":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"16:6606:219":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:680:4532":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:12854:951":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:12220:7968":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:49998:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:48571:7742":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:8352:7250":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:10484:23806":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12114:8177":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:46921:5943":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:239:8331":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:51267:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:2308:7256":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:12377:23915":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"16:4981:5622":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:0:3572":{"crate_id":17,"path":["object"],"kind":"module"},"16:6779:5727":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"0:0:3172":{"crate_id":0,"path":["byteorder"],"kind":"module"},"0:178:2559":{"crate_id":0,"path":["byteorder","ByteOrder"],"kind":"trait"},"2:48579:7744":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:3012:22876":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:10820:116":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:50430:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:4933:6489":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:6681:6971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:48763:176":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:8708:5985":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:45774:206":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:5143:230":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:6419:5539":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:47916:4115":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:12986:2796":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:5003:6519":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:5330:6640":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"14:204:16416":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:6265:28272":{"crate_id":1,"path":["std","sync","lazy_lock","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"17:11564:8156":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:5725:2534":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:4699:8433":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:11231:7946":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:51308:7814":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:51561:7760":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1:6206:3929":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:3532:3844":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:4463:9330":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:6254:5664":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:8014:7215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:14731:4935":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:5636:6787":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:6237:5659":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:48591:7747":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:50525:7785":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:11044:8148":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:10779:4546":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:13504:4714":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:15925:5255":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:9433:7926":{"crate_id":1,"path":["std","random","DefaultRandomSource"],"kind":"struct"},"2:2988:207":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:8466:152":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:13554:7699":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:12722:4584":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:11257:7949":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"2:50822:7796":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:15827:5234":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:45830:3930":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:48086:7706":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:15890:5249":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:5314:6633":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:2246:8135":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:3128:35838":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"11:1599:8327":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:10448:23805":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:6749:6994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:44582:7613":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:43424:227":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:7198:7315":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"16:6096:8228":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:5406:6666":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:2177:210":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:2489:3793":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:16654:5477":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:16132:5311":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:26341:7340":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:45012:7627":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:5453:8435":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12893:8214":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:1588:4026":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:50201:7773":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:6709:6984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:51693:7760":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"16:2413:22848":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:7347:5818":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:47157:3744":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:44605:7615":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:3866:4171":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:11553:7747":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"5:7733:8325":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:12840:1991":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:8242:2533":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:50646:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:4692:5614":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:3123:3712":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:2898:5574":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:11893:4581":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:8045:28174":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"1:10549:7647":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"5:7999:8360":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:10534:23808":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"5:6889:8325":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:25132:35348":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:16712:4780":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:2431:3808":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:2755:3835":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"15:405:22840":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:36058:3894":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:5914:8440":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:6513:28275":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:16102:5305":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:4341:9310":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:1194:8318":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:9562:119":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:13590:4663":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:7976:259":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3152:157":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"11:706:8309":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:8536:16357":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:14056:123":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:48450:7734":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"18:608:8123":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:2988:5578":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:6850:5735":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:5033:9335":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:11435:37443":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:812:266":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:8591:8476":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:12402:4115":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:49931:7763":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:10657:8417":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:5982:7018":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:6950:5747":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"16:8148:5598":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:7801:7281":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:1520:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:50943:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:2658:5563":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:574:6249":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:10746:4545":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:8480:5965":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:47648:4101":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:7446:7122":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:10909:4424":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"2:3480:9420":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:38177:5865":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:5368:6650":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:7158:246":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:962:9205":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"11:2409:4106":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:9369:8488":{"crate_id":1,"path":["std","pipe","PipeReader"],"kind":"struct"},"7:31:22712":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:13779:9262":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:25121:35347":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:16593:4752":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:6058:7840":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:3340:4105":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:1033:8325":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"16:8176:5914":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"14:31:8304":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:49850:7759":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:14431:4889":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"1:3698:3799":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:36001:253":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:12947:4098":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:15949:5264":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:613:37447":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:3999:8340":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:16369:5397":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:4956:7108":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:13133:8216":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:7279:5811":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:15116:5019":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:51159:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:6755:9514":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:46882:7662":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:14494:4901":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:2397:23871":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:10632:23811":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:5447:6689":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:5247:9355":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:11022:3714":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:50039:7767":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:12105:7677":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"17:11289:37441":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:13850:16400":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"7:78:22719":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:15255:4681":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:11807:8164":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:6500:22847":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:1419:8319":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:7089:8456":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:4833:9336":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:12667:4651":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:5215:6582":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:36973:16364":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:51667:7829":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"15:0:3570":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:6736:9513":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:590:6258":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:51227:7811":{"crate_id":2,"path":["core","core_arch","simd","f16x32"],"kind":"struct"},"2:34386:3762":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:44561:7611":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:6656:8247":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:49890:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:51715:7831":{"crate_id":2,"path":["core","core_arch","x86","__m128h"],"kind":"struct"},"2:2738:711":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:2091:3799":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:48633:7750":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:2433:22875":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:10812:4547":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:8162:5588":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"10:36:6106":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:51777:7834":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:49971:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:5015:16180":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:50241:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:44369:3822":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:11132:8149":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:1649:8310":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:4808:5616":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:11407:37442":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:50741:7793":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:9119:4105":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:5447:5636":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:2618:5561":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:3478:3842":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:6814:7017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:44614:7616":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"11:1672:37405":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:26688:7371":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"5:1557:4105":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:13425:4710":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:4940:6493":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:26655:7368":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:15794:5224":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:12239:4599":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:48860:192":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:7220:5797":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:0:597":{"crate_id":2,"path":["core"],"kind":"module"},"17:14718:4933":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:16798:5505":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"13:0:3562":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:47204:7681":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:51649:7828":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:37379:16366":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:4441:31919":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:11031:3844":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"11:1062:22805":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:14915:4981":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:12943:4665":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"11:1021:8318":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:6806:5579":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:15196:5027":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:12915:23940":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:2298:9167":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:3134:35836":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:6565:6917":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:29675:286":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:6803:198":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:6157:5648":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:44573:7612":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:44989:7625":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"16:8720:150":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:8427:4480":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:25609:9432":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:45793:185":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:1498:6264":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:9672:199":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:11054:37436":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:9831:8418":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"11:1905:6093":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:5732:4087":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:11717:34574":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"1:729:9184":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:12211:4117":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:6172:8441":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:50322:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:7041:5587":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:15279:5041":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:16300:5375":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:9596:8498":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:51065:7805":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:7621:28291":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:48826:7754":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:821:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:50457:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:4915:6477":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:14978:4989":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:7728:3930":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:6667:6966":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:9118:16356":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:1091:8317":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:11028:3842":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:12199:4595":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:16076:5299":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:12452:8196":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:521:6220":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"11:444:37401":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:12209:8464":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:2177:710":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:5414:6671":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:6864:23741":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:48563:7740":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:44460:3820":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:16498:5429":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:11502:23824":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:12042:4591":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6026:5580":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:12862:1945":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:8609:5600":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:12359:8430":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:8898:8486":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:15814:5228":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"11:2542:6097":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:527:6223":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:2857:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:47182:169":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:25746:9428":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:13570:7702":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:50700:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:2918:5575":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:13174:4568":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:922:8333":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:5016:6525":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:8582:8300":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:51281:7813":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:48767:232":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"11:879:8317":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:11278:3740":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:6121:5584":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:6344:16736":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"5:2338:7259":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:25119:35345":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:12866:8212":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:3925:115":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"11:2575:7282":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:1511:6270":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:918:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:5860:116":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:12838:1245":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:4248:9304":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:43404:228":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:14759:4939":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:8264:5924":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:6040:5583":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:4968:3727":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:12416:4113":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:5513:6728":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:50133:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:2159:2500":{"crate_id":2,"path":["core","mem","align_of"],"kind":"function"},"11:338:6084":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:901:8129":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"2:12288:4118":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:8261:7229":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:13312:8224":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:4911:9353":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:2341:133":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:37658:16371":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:6605:28279":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:2364:201":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:13656:4681":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:51240:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:6835:8268":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:7398:37426":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:25215:9426":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:9649:7935":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:48644:16503":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:2702:5565":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:11761:8517":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:7652:28293":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:8100:8362":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:12851:797":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:6586:5719":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"2:50916:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:10052:9378":{"crate_id":2,"path":["core","random","Random"],"kind":"trait"},"2:45568:9287":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:26472:7359":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:7835:23746":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:51601:7826":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:3642:128":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:2105:9246":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:47980:7701":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:7551:23745":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"16:7209:5796":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:5130:8434":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:7306:7064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:42039:16376":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:13264:8220":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:14951:4986":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"11:1918:6095":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:6824:7020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:6251:8446":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"16:3306:5546":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:12151:6096":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:4811:9335":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:45985:7660":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"2:44259:7591":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:41929:16374":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13973:4785":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:7031:8453":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:3347:6093":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:12415:7971":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:12119:4105":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:3625:3829":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:26677:7370":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"2:10963:239":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"16:2838:5571":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:4909:6475":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:2580:3764":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"11:2358:8319":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:26622:7365":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"1:4363:9314":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:13917:4770":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:14454:4893":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:7602:7206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:9603:8499":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:10900:8146":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"17:12252:4600":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:13494:7693":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:14557:4912":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:10510:23807":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:13071:4683":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:6322:7277":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:3584:8140":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:15898:5251":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:12987:4719":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:5400:6663":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:13468:4712":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:13828:8376":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:14743:284":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:13898:16408":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:12361:4112":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:13344:16402":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:8255:7228":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:16245:5356":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:5294:3799":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:7896:7283":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:1629:6349":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:8746:250":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:36002:260":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:8040:37432":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:14271:4849":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:16272:5368":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:316:8129":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:50214:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"3:0:539":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:15005:4993":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:11241:165":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"16:6981:5599":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:50079:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:7946:5593":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:1543:6286":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:51583:7825":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:15537:5149":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:13546:4717":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:11829:6165":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"5:5683:35626":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"9:49:8904":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:45802:4105":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:456:8402":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:50120:7770":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"10:44:6107":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:12866:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"16:2465:5549":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:12840:8210":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:7461:7128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:9422:7925":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:50106:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:6913:8452":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:12444:4114":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:15758:5217":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:1715:6396":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:37245:9421":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:48351:7724":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"4:0:3563":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:13845:16401":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:3693:5606":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:3046:22877":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:10211:23797":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"16:4265:5612":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:15989:5273":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:8290:7236":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:5511:3824":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:11967:8171":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:4842:5617":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:5338:6644":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:3507:16368":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"16:6711:8257":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:13839:4411":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:6267:5665":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:46013:223":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"2:11235:165":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:11943:28287":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:11243:169":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12488:4616":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:16000:5277":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:12226:7969":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:6203:23737":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:50714:7792":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:10457:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:4045:8429":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:16836:5519":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:11769:4572":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:4960:7112":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"5:3138:35837":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:12436:8194":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:14563:217":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:25213:2533":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:44473:7598":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:14102:4804":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:1234:8133":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:35991:7440":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:11020:133":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:7339:7087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:6494:6876":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:47412:7684":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:3439:5604":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:7904:5901":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:10678:8502":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"2:45035:7630":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:8813:9286":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"18:765:28015":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:13517:4716":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:14203:4829":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"6:5424:6678":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:8486:7852":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"5:3710:8341":{"crate_id":5,"path":["alloc","collections","btree","set","CursorMutKey"],"kind":"struct"},"1:786:9187":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:43364:223":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:9544:7931":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:10334:23801":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:918:202":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:48120:7580":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:7413:8269":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:12837:443":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:35924:3711":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:6476:7307":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4894:6468":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"11:2475:8339":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:6290:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:8957:3928":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"2:51024:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:43349:226":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:5460:6699":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:11537:8155":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:44434:4093":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"11:1562:22806":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:12857:944":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:4668:3799":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:34760:208":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"11:1912:6094":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:50727:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:14441:8383":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:5422:8435":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9054:7913":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:7013:5755":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"11:123:6080":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:4771:7298":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:5642:6790":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:16765:5498":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:11294:8486":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"1:8262:7846":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:5107:6566":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:1504:6267":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"14:7:8304":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:26178:7329":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:5615:215":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:7987:5907":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:549:6236":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:1018:9206":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:3352:35832":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:1572:4106":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:2568:5559":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:46642:3715":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:4602:8367":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:8138:8465":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:674:9173":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:50025:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"0:257:2878":{"crate_id":0,"path":["byteorder","NativeEndian"],"kind":"type_alias"},"2:8581:177":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:9568:8494":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"16:7072:23742":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:7505:5840":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:7870:7282":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:46997:3725":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:7713:4026":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:7355:5589":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:5253:5630":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:2858:5572":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:7383:5820":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"11:2308:5846":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:51733:7832":{"crate_id":2,"path":["core","core_arch","x86","__m256h"],"kind":"struct"},"1:12864:2034":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:1007:6090":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:12321:4607":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:44529:7606":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:43444:229":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:16139:5313":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:614:9167":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:45892:3974":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:5649:6793":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:15615:5192":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"11:833:8311":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:9464:7927":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:1947:736":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:5403:8144":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:5647:5637":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:4293:9307":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:12225:4598":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:7829:4026":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:4239:5611":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:1731:6401":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:50403:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:48232:7718":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:7952:7289":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:6481:6867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:6820:23740":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:8267:7230":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:11034:3840":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:12144:8179":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:13957:4781":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:6759:7001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:5360:6649":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"6:5076:6556":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:2187:3097":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:25144:35351":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:11230:8151":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:9493:9394":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11669:8159":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:5075:9323":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:2654:2501":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:15558:5157":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:4894:8370":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13081:23941":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"18:706:4411":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:45003:7626":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"0:255:2867":{"crate_id":0,"path":["byteorder","LE"],"kind":"type_alias"},"6:6741:6993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:11330:28119":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:7542:28171":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"2:47798:3822":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:0:1819":{"crate_id":1,"path":["std"],"kind":"module"},"6:5055:6547":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:13111:4686":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:9125:7921":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:4764:5615":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:7386:9424":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:45871:3932":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:8328:9236":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:5431:1318":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:1588:6317":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:44789:7622":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:11980:8172":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:7575:7200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:16847:5520":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:14120:4812":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:25971:3775":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"5:3984:3097":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:7516:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:8586:8475":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"18:507:4382":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:8308:9189":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:13610:4721":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:3910:34780":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:8047:34709":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:7492:5836":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:50619:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:4989:6511":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:9396:7923":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:2284:3791":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:14418:4887":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"16:2770:5568":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:14064:4800":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:10644:8924":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"18:515:4385":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:11348:23826":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"11:1138:8322":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:6430:233":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:4835:6424":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:11836:4574":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:9374:8489":{"crate_id":1,"path":["std","pipe","PipeWriter"],"kind":"struct"},"2:3887:16169":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:4492:9333":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:51619:7827":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:14466:7609":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"11:807:8339":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:12858:1969":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:48755:7753":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"1:9723:174":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:44630:4402":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:1734:6093":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:7004:7308":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:5146:6569":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:2024:8419":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:12852:775":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"5:4436:3799":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:46937:33902":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"17:11240:37440":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12526:23916":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:12641:8199":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:41984:16375":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:16619:5447":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:462:8404":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:50349:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:11181:8150":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:44293:7592":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:9157:35103":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:44220:16197":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:15225:5030":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:5459:34558":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"6:5394:6661":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11643:8158":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:51627:7760":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"5:3381:6092":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:34787:3995":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:5828:8438":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:5594:6762":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:9998:8472":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:7209:7312":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:37831:16372":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:12074:8174":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:8302:7238":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:762:8407":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:5009:6522":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:51481:7820":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:5346:5633":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:50093:7769":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:46283:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:41:9220":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:48839:33966":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"16:8633:23750":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:3624:16379":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:4738:28272":{"crate_id":2,"path":["core","cell","lazy","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"2:50484:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:25160:2533":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:5320:6636":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:8924:7900":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"16:3585:5605":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"17:13811:4743":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:6747:5724":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:568:6246":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:6778:7004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"2:3655:3855":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:4147:8430":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:8480:131":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:45027:7628":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:48427:7726":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:25919:9510":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:11030:219":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:43336:7444":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:4268:8325":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:5170:5627":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:7753:7280":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:44779:3821":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:15155:5022":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:51011:7803":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"5:4466:3799":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:10676:8503":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:9385:211":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:7104:35626":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:7935:5902":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:1679:6379":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:2411:7265":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:3437:32643":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:12168:3823":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:26022:3775":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:14246:4845":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:51132:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:47862:7696":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:25957:9511":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:4508:3799":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:11581:34573":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:12843:356":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:51213:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:8737:3818":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:7518:5843":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:37312:9423":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12101:8176":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:6522:6888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:6637:8447":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:4885:234":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:14666:4927":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:14191:4826":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:8343:8471":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:11947:4568":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"11:1047:8319":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:5249:6598":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:5794:8436":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:3577:3841":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"5:7964:8359":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:5238:9354":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:50511:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:7359:7093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12160:8184":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:13729:4732":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:5587:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"11:1083:37407":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:12169:7961":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:12765:4656":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:12904:4658":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:10603:23810":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"2:10035:218":{"crate_id":2,"path":["core","pin","PinCoerceUnsized"],"kind":"trait"},"2:5046:3730":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13673:4724":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"16:8220:5916":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:8317:23749":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:43386:225":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:34113:9291":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:8763:190":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:8596:3839":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:1573:6305":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:50849:7797":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:49877:7761":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:46037:227":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"16:2504:5556":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"18:581:3995":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:4471:9331":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:14991:4990":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:51173:7809":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:10362:23802":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:14524:4904":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:6702:16744":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"2:51348:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:7793:3097":{"crate_id":5,"path":["alloc","collections","btree","set","Cursor"],"kind":"struct"},"5:1159:35626":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"3:770:7293":{"crate_id":3,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"18:96:28006":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:46656:3716":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"18:718:4415":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:2621:9278":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"1:8128:4532":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:5548:6741":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:3480:3843":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:48468:7736":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:4871:5618":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:15942:5263":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:8033:28172":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"17:16739:5492":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"17:13385:23813":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:781:8410":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:14009:4792":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:12914:4097":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:5073:9322":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:6300:5672":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:11407:28283":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:51200:7810":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:44308:7594":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:15650:5193":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:5153:9319":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:9442:4105":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:2112:829":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:15094:5008":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:8118:223":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:2582:9266":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:6589:284":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:7982:16200":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:13125:4689":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:25969:35568":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:6952:7843":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:38004:16373":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"18:481:4380":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:12824:28152":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:7975:30546":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:3401:279":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:49904:7762":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:46649:3714":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:16322:5381":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:5024:3728":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:7720:31920":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:10845:4548":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:563:4392":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"9:0:3565":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:14892:4980":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:8501:8474":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:16731:5491":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:3495:5860":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:14403:4882":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:43252:4246":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:5499:216":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"11:738:8310":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"11:406:37398":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:3805:3810":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:8865:8485":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:13238:4692":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"11:1886:8325":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:1688:6385":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12068:8173":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:7777:4026":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:11574:34571":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"6:6771:7003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:50376:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:7288:16433":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:26352:33812":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:11655:4568":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:7485:7141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:6179:8445":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:15692:5200":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:8206:5586":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:309:35626":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:8296:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:3403:121":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"0:322:2535":{"crate_id":0,"path":["byteorder","BigEndian"],"kind":"enum"},"17:13711:4729":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:15772:5222":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:47788:7691":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:6653:6964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:6457:3799":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:50336:7778":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:7468:5835":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:9608:8500":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:26093:9506":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:7369:5590":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:51685:7830":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:12844:1791":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:7876:2887":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:11191:8511":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"11:1003:5846":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:5044:6541":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:11733:8152":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:1700:6389":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:46431:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:47212:7682":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:7561:7191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:9700:247":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"11:1156:8323":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:6474:6863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:11302:8471":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"11:2146:8319":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:7880:5689":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:16895:5530":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:51105:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"16:8063:23747":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:7986:7212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:50579:7787":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:2295:3790":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:2638:5562":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:50808:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:11904:8166":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:2722:5566":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:2201:8340":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:5222:5629":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"11:2449:8325":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:26611:7364":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:51751:7833":{"crate_id":2,"path":["core","core_arch","x86","__m512h"],"kind":"struct"},"2:51038:7804":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"5:7925:16471":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:51517:7822":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:8098:16352":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:15866:5245":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:4819:3726":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:10229:23798":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:26600:7363":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:45945:7659":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"2:46172:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:14162:4817":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:11631:8157":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:48900:7758":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:6414:7840":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:25341:7328":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"18:0:3573":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:8031:7225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:6638:8237":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2:51463:7819":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:15036:4999":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:4701:3799":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"6:0:1067":{"crate_id":6,"path":["libc"],"kind":"module"},"17:15844:5239":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:6995:5748":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:519:4486":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:15873:5246":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:3139:4428":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:51092:7806":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:9677:8449":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:51657:7760":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"6:6701:6980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:976:4105":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:51402:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:9918:8376":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:6732:6990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"16:3887:4433":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:7821:4026":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11994:4584":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:8562:5975":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:1593:6319":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:50889:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:3505:8339":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:47690:4093":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:50957:7801":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:13015:4677":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:7165:5784":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:11822:8165":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:10680:4542":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"11:669:4105":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:542:6232":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:16461:5422":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"11:2554:6099":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:7459:8270":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:5490:6720":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:10665:2535":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:1719:8325":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:25881:9509":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:51416:7818":{"crate_id":2,"path":["core","core_arch","simd","u32x32"],"kind":"struct"},"5:2857:7269":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:9109:7918":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:5481:6714":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:48888:6104":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:906:8130":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"2:10982:156":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:8280:4622":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:11347:7925":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:12476:8198":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:5136:6568":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:15240:5034":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:7389:7115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:3962:132":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:5083:5624":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:44379:7300":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"6:6632:6952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:25744:2533":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:48583:7745":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"18:623:37448":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:15740:5209":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10412:23804":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:2456:8139":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:50444:7782":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:5844:8439":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:7743:8358":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:10020:131":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:50768:7794":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:4958:7110":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"2:48416:16415":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:12427:28123":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:51591:7760":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1:585:28243":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:11024:3715":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:999:4026":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:6740:233":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:6600:6939":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13324:8225":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:3840:4105":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:12338:8429":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:7916:8291":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:4946:9309":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:2588:5560":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:26233:7330":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:16606:4766":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"1:3796:32153":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:12978:4675":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:8444:7850":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:9741:7936":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:15882:5247":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:15082:5006":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:5070:6554":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:3985:4441":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"5:1610:6090":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:11032:3718":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:48259:7722":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:35977:8389":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:5196:5628":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:7366:7097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:8308:7239":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:1353:8134":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"11:2332:8318":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:8071:28176":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"2:47416:4096":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:13189:4584":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:6444:6853":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:12853:969":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:14791:4943":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:47880:7697":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:14639:4922":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"18:670:8128":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:7034:9389":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:16858:5521":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:10650:2534":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:1745:6095":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"11:2375:8330":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"9:471:22725":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:48129:7588":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:44098:7580":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:11581:4564":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"2:36091:280":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"18:680:4405":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:48111:7589":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:47771:7689":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:51471:7760":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"16:6406:5685":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:13838:4751":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"15:338:8901":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:26425:33816":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:12968:4674":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:6420:6837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:2212:8341":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"16:6901:5743":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:3201:239":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"17:15550:5156":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:5385:6655":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:48196:16414":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:6660:6965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:12839:504":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:5280:5631":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:46357:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:44427:3825":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:12790:8203":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6186:5653":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:14174:4818":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:9629:28108":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:6612:6944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:44145:33837":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:12172:4592":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:1891:8339":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:13147:8218":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:13852:4752":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:7421:23744":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:16422:5413":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:6909:7626":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:44520:7605":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:894:8227":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:15169:5023":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:155:5534":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:25233:7328":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:14811:4944":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:12509:4618":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:16066:5296":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:7546:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:8491:7853":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:5274:6611":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:48559:7739":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:46976:150":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:11286:28155":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:7981:16199":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:12430:4116":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:4260:4026":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:9112:4245":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:11873:23844":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:43501:7450":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:3440:32644":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:4614:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:3787:3464":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:6724:6989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"17:16919:4797":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:50633:7789":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:10390:23803":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:3408:263":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:4714:35636":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"11:361:37393":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"17:13990:4787":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:12863:1028":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:3832:5607":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:26452:7355":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:1647:6361":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:7786:37428":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:16825:5514":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:7881:9198":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:2957:147":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"12:0:3568":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:15052:5000":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:12018:4589":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:45861:3920":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:8273:7231":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:51146:7808":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:51335:7815":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:44552:7610":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:49944:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:9802:3931":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5469:6705":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:5058:5623":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:8008:7213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:14602:4918":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:1980:592":{"crate_id":2,"path":["core","intrinsics","copy_nonoverlapping"],"kind":"function"},"2:46134:4026":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:44104:7581":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:6202:8325":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:16086:5302":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:15209:5028":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:6463:6855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:44183:7587":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:489:6198":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:47165:7676":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:43512:7451":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:47782:7690":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:5507:6726":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:5063:6552":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:50687:7791":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:50498:7784":{"crate_id":2,"path":["core","core_arch","simd","f16x8"],"kind":"struct"},"17:11397:8153":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:598:37446":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:51489:7760":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"6:6880:7032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:3227:127":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:51723:7760":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:44173:7586":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:36088:3983":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:8873:8482":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"11:498:166":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:8230:23748":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"9:436:22726":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:50012:7766":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:48587:7746":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:4506:4105":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:8719:3849":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:5243:6595":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:495:6200":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:3143:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:48246:7721":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:1999:8417":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:13666:8226":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"2:48850:8401":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:12275:28295":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:3155:274":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:26721:7374":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"2:51294:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1:4307:9309":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:6874:7031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:2184:3756":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"6:6639:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"11:840:9204":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:7452:7124":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:50997:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:6438:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:14868:4091":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:25837:9508":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"17:11708:4525":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:8084:8339":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:11794:8163":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:51507:7760":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2:46951:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:11548:23825":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:4861:6444":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:6366:5681":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:14626:4919":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:9409:7924":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:6131:267":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"14:189:22818":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:26699:7372":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:26366:7342":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:3434:32497":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:11746:4570":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:4402:5613":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:51362:7816":{"crate_id":2,"path":["core","core_arch","simd","u16x64"],"kind":"struct"},"16:8011:5596":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:5985:9375":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:25134:35350":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:15434:5063":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:44491:7601":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:6508:6887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:11588:7952":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:7429:7117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"9:319:6145":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:5623:6781":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"11:2504:22801":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"17:16044:5291":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:4343:4106":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"11:828:8324":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:9616:7932":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:16781:5503":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:2994:214":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:2425:8136":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:16410:5411":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:5274:16191":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:46148:208":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:48785:220":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:9685:3799":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"16:6387:8230":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:11534:7924":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:11619:4567":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"5:7390:282":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:2892:34566":{"crate_id":2,"path":["core","clone","uninit","InitializingSlice"],"kind":"struct"},"2:47962:7700":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:4150:5609":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:13570:4719":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:48777:240":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:2878:5573":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:11649:7953":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:14233:4841":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:12846:1928":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:6939:5746":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:2906:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:47830:4111":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:5290:6620":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:6285:3799":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:2872:3827":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:13409:4500":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:4118:5608":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"13:272:6078":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:11521:7923":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:3124:22878":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:10894:8145":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"2:46470:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:11425:8154":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:2422:151":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:1636:6353":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:1058:8310":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:5522:6734":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"11:2568:6101":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"18:643:4382":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:2022:8418":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:11545:28156":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:8783:3822":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"11:683:4106":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:10281:23800":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:8666:5899":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:8437:7849":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:45901:4247":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:7704:4092":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:11278:28153":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:2448:5547":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:46118:4105":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:50592:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"11:374:37396":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:1723:8339":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:16094:5303":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:45702:7650":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:9031:7677":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:10837:30497":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:6363:7306":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:4889:8369":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11934:8170":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:11220:7849":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:48095:7707":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:51119:7807":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:8249:7227":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"8:0:3564":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:8416:7316":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:3146:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:42673:16378":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:5755:5639":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:515:197":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:12850:780":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:2948:5576":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:26303:7332":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:1248:37243":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:50754:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2:50228:7774":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"9:413:22728":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:14028:4793":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:50552:7786":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:12434:7972":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13025:4678":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:12627:28299":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:3130:7262":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:44996:3738":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:44160:7585":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:44511:7603":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:11722:4584":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:14746:4938":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:4:1335":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:7785:223":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"11:871:8316":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:9458:4026":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:51741:7760":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1:12860:1957":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:50052:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"6:1661:6372":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"11:1723:168":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:13300:8223":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"18:521:28016":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:26098:9504":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:7055:5759":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:16350:5396":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:3127:4081":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"18:548:165":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:14869:4971":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:2180:209":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:50255:7775":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11591:23826":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"14:162:8304":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:11474:23823":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:16032:5288":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:12342:4610":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:869:166":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:11573:4563":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"2:48034:7704":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:44543:7609":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:15705:5205":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:3443:3981":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:51769:2212":{"crate_id":2,"path":["core","core_arch","x86","bf16"],"kind":"struct"},"5:7940:7287":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:1062:8311":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:4995:6514":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:44321:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:8331:7844":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:6082:5641":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:16431:5417":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:35966:8388":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:44134:7582":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:15129:5020":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:47669:4095":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:1448:8323":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:51543:7760":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"16:5707:23735":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:485:8131":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:12879:8213":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:8776:3821":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:5142:5626":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:8656:134":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:7412:7116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:16929:4802":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:45596:7643":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:9759:7937":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:50187:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"5:3853:4106":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:7103:8460":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:46320:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:50268:7760":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"17:13039:4679":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":34}