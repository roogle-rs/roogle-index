{"root":"0:0:2230","crate_version":"1.4.3","includes_private":false,"index":{"0:246:1789":{"id":"0:246:1789","crate_id":0,"name":"read_f32_into","span":{"filename":"src/lib.rs","begin":[1203,4],"end":[1208,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:305:1815":{"id":"0:305:1815","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2117,4],"end":[2123,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3313:3953":{"id":"2:3313:3953","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3315:170","2:3316:875"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1579,0],"end":[1579,50]},"visibility":{"restricted":{"parent":"0:26:1535","path":"::io"}},"docs":"All types that implement `Write` get methods defined in `WriteBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"io::Write","id":"1:4605:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_int128","write_uint128","write_i32","write_i24","write_u48","write_f64","write_f32","write_i48","write_u64","write_i8","write_uint","write_u16","write_i128","write_i64","write_u128","write_int","write_i16","write_u8","write_u24","write_u32"],"trait":{"kind":"resolved_path","inner":{"name":"WriteBytesExt","id":"0:127:1537","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"generic","inner":"W"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8371:2919":{"id":"2:8371:2919","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8373:3063","2:8375:3064","2:8376:3065"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:367":{"id":"0:367","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,29],"end":[1836,31]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2892:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3177:126":{"id":"2:3177:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:215","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"1:5714:3490":{"id":"1:5714:3490","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5715:5618"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1839,0],"end":[1843,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3213:114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:275:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3377:3887":{"id":"2:3377:3887","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3379:170","2:3380:1209"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:265:1871":{"id":"0:265:1871","crate_id":0,"name":"from_slice_i16","span":{"filename":"src/lib.rs","begin":[1693,4],"end":[1698,5]},"visibility":"default","docs":"Converts the given slice of signed 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 6500];\nBigEndian::from_slice_i16(&mut numbers);\nassert_eq!(numbers, [5i16.to_be(), 6500i16.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3521:4101":{"id":"2:3521:4101","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3523:225","2:3524:195","2:3525:58556"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6778:3471":{"id":"1:6778:3471","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6779:53488"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:229:1716":{"id":"0:229:1716","crate_id":0,"name":"write_i24","span":{"filename":"src/lib.rs","begin":[788,4],"end":[790,5]},"visibility":"default","docs":"Writes a signed 24 bit integer `n` to `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3318:3955":{"id":"2:3318:3955","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3320:170","2:3321:544"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3247:208":{"id":"2:3247:208","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3362:3582":{"id":"2:3362:3582","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3364:170","2:3365:338"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:370:700":{"id":"0:370:700","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1836,33],"end":[1836,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::hash::Hasher","id":"2:10491:145","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3342:3965":{"id":"2:3342:3965","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:876"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:364":{"id":"0:364","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,22],"end":[1836,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10243:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:365:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3484:130":{"id":"2:3484:130","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3486:364"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3487:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:292:1654":{"id":"0:292:1654","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[2032,4],"end":[2034,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:204:1609":{"id":"0:204:1609","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[265,4],"end":[265,35]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:245:1782":{"id":"0:245:1782","crate_id":0,"name":"read_i128_into","span":{"filename":"src/lib.rs","begin":[1173,4],"end":[1178,5]},"visibility":"default","docs":"Reads signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13457:59703":{"id":"2:13457:59703","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12985:3912","prim@char":"1:15753:2629"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3179-0:341:1569":{"id":"b:2:3179-0:341:1569","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:215","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:126","2:3183:1389"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13713:149":{"id":"2:13713:149","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13714:170","2:13715:149","2:13716:750"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:203:1605":{"id":"0:203:1605","crate_id":0,"name":"read_u24","span":{"filename":"src/lib.rs","begin":[244,4],"end":[246,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:82:1606":{"id":"0:82:1606","crate_id":0,"name":"read_uint","span":{"filename":"src/io.rs","begin":[427,4],"end":[431,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0x74, 0xfa]);\nassert_eq!(8418554, rdr.read_uint::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13369:3706":{"id":"2:13369:3706","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15759:2634","crate::ops::Index":"2:3539:3570","str::slice_mut_unchecked":"1:15759:2634"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:360:1568":{"id":"0:360:1568","crate_id":0,"name":"LittleEndian","span":{"filename":"src/lib.rs","begin":[1837,0],"end":[1837,24]},"visibility":"public","docs":"Defines little-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:9217:2964-0:360:1568","a:2:3247:208-0:360:1568","a:2:3235:199-0:360:1568","a:2:3276:2916-0:360:1568","a:2:9218:2963-0:360:1568","b:2:3964-0:360:1568","b:2:3168-0:360:1568","b:2:3174-0:360:1568","b:2:2841-0:360:1568","b:2:2838-0:360:1568","b:2:3179-0:360:1568","b:2:3164-0:360:1568","b:5:787-0:360:1568","0:361","0:363","0:364","0:366","0:367","0:369","0:372","0:374","0:375","0:377","0:274","0:312"]}},"0:235:1728":{"id":"0:235:1728","crate_id":0,"name":"write_int128","span":{"filename":"src/lib.rs","begin":[922,4],"end":[924,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:269:1886":{"id":"0:269:1886","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[1780,4],"end":[1780,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 single-precision (4 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:12432:3215":{"id":"2:12432:3215","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12433:3066","2:12434:58978"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4745:3908":{"id":"2:4745:3908","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4746:3066","2:4747:58926","2:4748:3069"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3454:115":{"id":"2:3454:115","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3455:209","2:3456:529"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:213:1652":{"id":"0:213:1652","crate_id":0,"name":"write_u48","span":{"filename":"src/lib.rs","begin":[442,4],"end":[444,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5706:3488":{"id":"1:5706:3488","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5707:53694"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:1567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:52:1605":{"id":"0:52:1605","crate_id":0,"name":"read_u24","span":{"filename":"src/io.rs","begin":[165,4],"end":[169,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23641:3972":{"id":"2:23641:3972","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23642:3975"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23637:1567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3245:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10491:145":{"id":"2:10491:145","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10492:637","2:10493:1940","2:10494:2511","2:10495:1645","2:10496:1650","2:10497:1654","2:10498:1656","2:10499:54060","2:10500:2518","2:10501:1714","2:10502:1719","2:10503:1723","2:10504:1726","2:10505:54061","2:10506:54062","2:10507:1503"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:359:981":{"id":"0:359:981","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1806,55],"end":[1806,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:37472:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3138:148":{"id":"2:3138:148","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3140:3055"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3243:206":{"id":"2:3243:206","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:139:1716":{"id":"0:139:1716","crate_id":0,"name":"write_i24","span":{"filename":"src/io.rs","begin":[1232,4],"end":[1236,5]},"visibility":"default","docs":"Writes a signed 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i24::<BigEndian>(-34253).unwrap();\nwtr.write_i24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\xff\\x7a\\x33\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2857:104":{"id":"2:2857:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2858:395","2:2859:397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:58:1609":{"id":"0:58:1609","crate_id":0,"name":"read_u32","span":{"filename":"src/io.rs","begin":[217,4],"end":[221,5]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13390:3101":{"id":"2:13390:3101","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:12985:3912","`None`":"2:47340:165","prim@char":"1:15753:2629"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13463:59705":{"id":"2:13463:59705","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12985:3912","prim@char":"1:15753:2629"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2843:53463":{"id":"2:2843:53463","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:128:2511":{"id":"0:128:2511","crate_id":0,"name":"write_u8","span":{"filename":"src/io.rs","begin":[1098,4],"end":[1100,5]},"visibility":"default","docs":"Writes an unsigned 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_u8(2).unwrap();\nwtr.write_u8(5).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u8"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3276:2916":{"id":"2:3276:2916","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3964-0:360:1568":{"id":"b:2:3964-0:360:1568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3962:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3966:1403"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:210:1645":{"id":"0:210:1645","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[383,4],"end":[383,41]},"visibility":"default","docs":"Writes an unsigned 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_u16(&mut buf, 1_000);\nassert_eq!(1_000, LittleEndian::read_u16(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13360:1770":{"id":"2:13360:1770","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15770:2643"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6081:60343":{"id":"5:6081:60343","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2933:173":{"id":"2:2933:173","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2935:981","2:2936:809","2:2937:775","2:2938:698","2:2939:681"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2887:172","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13361:56530":{"id":"2:13361:56530","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47340:165"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13350:3062":{"id":"2:13350:3062","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4623:2850":{"id":"1:4623:2850","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4624:54580","1:4625:39826","1:4626:54581","1:4627:54582"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10526:2787":{"id":"2:10526:2787","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10527:145","2:10528:33386","2:10529:54549"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:44:2356":{"id":"0:44:2356","crate_id":0,"name":"read_i8","span":{"filename":"src/io.rs","begin":[85,4],"end":[89,5]},"visibility":"default","docs":"Reads a signed 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![0x02, 0xfb]);\nassert_eq!(2, rdr.read_i8().unwrap());\nassert_eq!(-5, rdr.read_i8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i8"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10250:118":{"id":"2:10250:118","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10251:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9217:2964":{"id":"2:9217:2964","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3964-0:341:1569":{"id":"b:2:3964-0:341:1569","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3962:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3966:1403"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:348":{"id":"0:348","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,29],"end":[1806,31]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2892:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13434:59695":{"id":"2:13434:59695","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:8406:119","self::pattern":"2:12985:3912","prim@char":"1:15753:2629","str::match_indices":"1:15759:2634"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49472:4247","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13475:59707":{"id":"2:13475:59707","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15753:2629"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49621:4256","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:331:1806":{"id":"0:331:1806","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2290,4],"end":[2296,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2841-0:341:1569":{"id":"b:2:2841-0:341:1569","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2835:3129","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2843:53463"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10481:141":{"id":"2:10481:141","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10482:700","2:10484:3191"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:333:1812":{"id":"0:333:1812","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2308,4],"end":[2314,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:291:1650":{"id":"0:291:1650","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[2027,4],"end":[2029,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13371:56551":{"id":"2:13371:56551","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15759:2634"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3170:666":{"id":"2:3170:666","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:322:1656":{"id":"0:322:1656","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[2245,4],"end":[2247,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10260:178":{"id":"2:10260:178","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10261:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3174-0:341:1569":{"id":"b:2:3174-0:341:1569","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:215","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3144:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3177:126","2:3178:1390"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8431:2918":{"id":"2:8431:2918","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8432:776","2:8433:3062"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8560:156","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:70:1623":{"id":"0:70:1623","crate_id":0,"name":"read_u64","span":{"filename":"src/io.rs","begin":[321,4],"end":[325,5]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83]);\nassert_eq!(918733457491587, rdr.read_u64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:239:1750":{"id":"0:239:1750","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[1016,4],"end":[1016,50]},"visibility":"default","docs":"Reads unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:1079:3503":{"id":"1:1079:3503","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:3119","1:1081:4401","1:1082:53514","1:1083:53515","1:1084:53516","1:1085:53517","1:1086:53518"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10264:2752":{"id":"2:10264:2752","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10265:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22947:16220":{"id":"2:22947:16220","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22948:6613","2:22949:58991","2:22950:58992"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22940:1567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13398:54715":{"id":"2:13398:54715","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"1:15753:2629","str::rsplit":"1:15759:2634","self::pattern":"2:12985:3912","`DoubleEndedIterator`":"2:8406:119","str::split_whitespace":"1:15759:2634"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49304:2858","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:206:1623":{"id":"0:206:1623","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[305,4],"end":[305,35]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3240:2491":{"id":"2:3240:2491","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3179-0:360:1568":{"id":"b:2:3179-0:360:1568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:215","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3182:126","2:3183:1389"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13004:3911":{"id":"2:13004:3911","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13006:3934","2:13007:905","2:13008:58905","2:13009:58906"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:237:1733":{"id":"0:237:1733","crate_id":0,"name":"write_f64","span":{"filename":"src/lib.rs","begin":[968,4],"end":[970,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"f64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3389:3893":{"id":"2:3389:3893","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3391:339"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10193:2500":{"id":"2:10193:2500","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10194:1503","2:10195:58793","2:10197:53258"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:284:1597":{"id":"0:284:1597","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[1972,4],"end":[1974,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:343:395":{"id":"0:343:395","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1806,9],"end":[1806,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:354:401":{"id":"0:354:401","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1806,39],"end":[1806,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:37472:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:302:1806":{"id":"0:302:1806","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2090,4],"end":[2096,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3330:3961":{"id":"2:3330:3961","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3331:170","2:3332:896"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3383:3890":{"id":"2:3383:3890","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3385:170","2:3386:1212"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3679:3218":{"id":"2:3679:3218","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3610:3219","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:310:1886":{"id":"0:310:1886","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2162,4],"end":[2171,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:97:1712":{"id":"0:97:1712","crate_id":0,"name":"read_f64","span":{"filename":"src/io.rs","begin":[530,4],"end":[534,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian double-precision floating point number from a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n]);\nassert_eq!(f64::consts::PI, rdr.read_f64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"f64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6084:60344":{"id":"5:6084:60344","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:290:1645":{"id":"0:290:1645","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[2022,4],"end":[2024,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5644:3482":{"id":"1:5644:3482","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5645:5618","1:5646:57796","1:5647:57797"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13376:32125":{"id":"2:13376:32125","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15759:2634"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49578:4252","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:344":{"id":"0:344","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,16],"end":[1806,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3245:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9217:2964-0:360:1568":{"id":"a:2:9217:2964-0:360:1568","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9217:2964","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:10885:202":{"id":"2:10885:202","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10887:170","2:10888:56530","2:10889:56531","2:10890:56532","2:10891:56533","2:10892:736","2:10893:737"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10876:1567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13410:59690":{"id":"2:13410:59690","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:15759:2634","self::pattern":"2:12985:3912","prim@char":"1:15753:2629","str::split_terminator":"1:15759:2634"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49372:4243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3168-0:341:1569":{"id":"b:2:3168-0:341:1569","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:134","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3170:666"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:121:1799":{"id":"0:121:1799","crate_id":0,"name":"read_f64_into","span":{"filename":"src/io.rs","begin":[987,4],"end":[994,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3235:199":{"id":"2:3235:199","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3487:131":{"id":"2:3487:131","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3489:170","2:3490:365"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:366":{"id":"0:366","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,29],"end":[1836,31]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3244:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:9237:3524":{"id":"1:9237:3524","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9238:54380","1:9239:54381","1:9240:54382","1:9241:54383","1:9242:4284","1:9243:39348","1:9244:54379"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:1567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:108:2456":{"id":"0:108:2456","crate_id":0,"name":"read_i8_into","span":{"filename":"src/io.rs","begin":[716,4],"end":[719,5]},"visibility":"default","docs":"Reads a sequence of signed 8 bit integers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to read into a `&mut [i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `i8` individually.)\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 251, 3]);\nlet mut dst = [0; 3];\nrdr.read_i8_into(&mut dst).unwrap();\nassert_eq!([2, -5, 3], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:277:1909":{"id":"0:277:1909","crate_id":0,"name":"NetworkEndian","span":{"filename":"src/lib.rs","begin":[1874,0],"end":[1874,35]},"visibility":"public","docs":"Defines network byte order serialization.\n\nNetwork byte order is defined by [RFC 1700][1] to be big-endian, and is\nreferred to in several protocol specifications.  This type is an alias of\n[`BigEndian`].\n\n[1]: https://tools.ietf.org/html/rfc1700\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, NetworkEndian, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, NetworkEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"1:4630:2853":{"id":"1:4630:2853","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4631:54711","1:4632:54712","1:4633:54714","1:4635:2852","1:4636:54713","1:4638:54715","1:4639:4745"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4548:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13448:59702":{"id":"2:13448:59702","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15753:2629","self::pattern":"2:12985:3912"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13357:57679":{"id":"2:13357:57679","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12456:4368"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:309:1866":{"id":"0:309:1866","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2153,4],"end":[2159,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2569:126":{"id":"1:2569:126","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2570:53403","1:2572:2612","1:2573:54666","1:2574:54667"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10243:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10250:118","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4548:2337":{"id":"1:4548:2337","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4549:1987","1:4550:53102","1:4552:53103","1:4553:53104","1:4554:2847","1:4555:2350","1:4556:53105","1:4558:53106","1:4559:3090","1:4560:1922","1:4561:3074","1:4563:2909"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3467:2860":{"id":"2:3467:2860","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3468:531"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3454:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13351:59683":{"id":"2:13351:59683","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:286:1623":{"id":"0:286:1623","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[1982,4],"end":[1984,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3346:3967":{"id":"2:3346:3967","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3348:545"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:207:1630":{"id":"0:207:1630","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[324,4],"end":[324,37]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3276:2916-0:360:1568":{"id":"a:2:3276:2916-0:360:1568","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3276:2916","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:321:1654":{"id":"0:321:1654","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[2240,4],"end":[2242,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:317:1606":{"id":"0:317:1606","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[2208,4],"end":[2216,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6704:3528":{"id":"1:6704:3528","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6705:54373","1:6706:57781"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:1567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:215:1656":{"id":"0:215:1656","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[482,4],"end":[482,43]},"visibility":"default","docs":"Writes an unsigned 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13474:3505":{"id":"2:13474:3505","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15753:2629"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49612:3506","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:228:1714":{"id":"0:228:1714","crate_id":0,"name":"write_i16","span":{"filename":"src/lib.rs","begin":[766,4],"end":[768,5]},"visibility":"default","docs":"Writes a signed 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:308:1862":{"id":"0:308:1862","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2144,4],"end":[2150,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:316:1630":{"id":"0:316:1630","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[2203,4],"end":[2205,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13401:31982":{"id":"2:13401:31982","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12985:3912","prim@char":"1:15753:2629"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12777:3161","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:320:1650":{"id":"0:320:1650","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[2235,4],"end":[2237,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:378:981":{"id":"0:378:981","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1836,55],"end":[1836,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:37472:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61:1677":{"id":"0:61:1677","crate_id":0,"name":"read_i32","span":{"filename":"src/io.rs","begin":[243,4],"end":[247,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:283":{"id":"0:283","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1970,0],"end":[2184,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_int128","read_f32_into","write_i32","write_u48","write_i24","read_i32_into","write_i64_into","read_i16_into","write_i8_into","write_f64_into","read_i128","from_slice_i32","read_u48","read_i32","read_i24","read_f64_into","write_i128","write_i64","write_int","write_i16","write_u24","read_i64_into","read_f32","write_i32_into","read_int128","write_f32_into","read_i64","from_slice_i64","read_f64_into_unchecked","read_int","read_u24","read_i16","write_f32","write_f64","write_i48","read_i128_into","read_f64","write_i128_into","write_i16_into","from_slice_i128","read_i48","from_slice_i16","read_f32_into_unchecked"],"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:284:1597","0:285:1609","0:286:1623","0:287:1630","0:288:1606","0:289:1640","0:290:1645","0:291:1650","0:292:1654","0:293:1656","0:294:1648","0:296:1661","0:298:1742","0:299:1750","0:300:1756","0:301:1762","0:302:1806","0:303:1809","0:304:1812","0:305:1815","0:306:1853","0:307:1858","0:308:1862","0:309:1866","0:310:1886","0:311:1888"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:361":{"id":"0:361","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,9],"end":[1836,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2857:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:362:395"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3167:3055":{"id":"2:3167:3055","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3141:134"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3539:3570":{"id":"2:3539:3570","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3541:170","2:3542:736"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:129:2518":{"id":"0:129:2518","crate_id":0,"name":"write_i8","span":{"filename":"src/io.rs","begin":[1126,4],"end":[1128,5]},"visibility":"default","docs":"Writes a signed 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_i8(2).unwrap();\nwtr.write_i8(-5).unwrap();\nassert_eq!(wtr, b\"\\x02\\xfb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i8"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1687":{"id":"0:73:1687","crate_id":0,"name":"read_i64","span":{"filename":"src/io.rs","begin":[347,4],"end":[351,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i64::min_value(), rdr.read_i64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:336:1858":{"id":"0:336:1858","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2335,4],"end":[2341,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:273:1897":{"id":"0:273:1897","crate_id":0,"name":"BE","span":{"filename":"src/lib.rs","begin":[1818,0],"end":[1818,24]},"visibility":"public","docs":"A type alias for [`BigEndian`].\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"0:325:1661":{"id":"0:325:1661","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2260,4],"end":[2267,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8321:3867":{"id":"2:8321:3867","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8323:3110"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:340:1888":{"id":"0:340:1888","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2374,4],"end":[2383,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13413:56563":{"id":"2:13413:56563","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:15759:2634","prim@char":"1:15753:2629","self::pattern":"2:12985:3912"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49408:3159","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13374:3941":{"id":"2:13374:3941","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15753:2629"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49280:4238","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6354:3463":{"id":"1:6354:3463","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6355:3813","1:6356:3814","1:6357:8182","1:6358:54398","1:6360:54402","1:6362:54399","1:6363:54400","1:6365:54401"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:1567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2832:97":{"id":"2:2832:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2834:2699"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13384:56245":{"id":"2:13384:56245","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15753:2629","self::pattern":"2:12985:3912"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10256:2749":{"id":"2:10256:2749","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10257:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:208:1606":{"id":"0:208:1606","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[344,4],"end":[344,51]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:271":{"id":"0:271","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1809,0],"end":[1813,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3213:114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:272:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:301:1762":{"id":"0:301:1762","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2085,4],"end":[2087,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:299:1750":{"id":"0:299:1750","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2075,4],"end":[2077,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13468:4401":{"id":"2:13468:4401","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:251:1809":{"id":"0:251:1809","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[1347,4],"end":[1347,51]},"visibility":"default","docs":"Writes unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6077:60342":{"id":"5:6077:60342","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2920","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:3131","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2920","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:3131","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:346:645":{"id":"0:346:645","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1806,22],"end":[1806,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:230:1719":{"id":"0:230:1719","crate_id":0,"name":"write_i32","span":{"filename":"src/lib.rs","begin":[810,4],"end":[812,5]},"visibility":"default","docs":"Writes a signed 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:234:1717":{"id":"0:234:1717","crate_id":0,"name":"write_int","span":{"filename":"src/lib.rs","begin":[899,4],"end":[901,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:151:1721":{"id":"0:151:1721","crate_id":0,"name":"write_i48","span":{"filename":"src/io.rs","begin":[1340,4],"end":[1344,5]},"visibility":"default","docs":"Writes a signed 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i48::<BigEndian>(-108363435763825).unwrap();\nwtr.write_i48::<BigEndian>(77).unwrap();\nassert_eq!(wtr, b\"\\x9d\\x71\\xab\\xe7\\x97\\x8f\\x00\\x00\\x00\\x00\\x00\\x4d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:350":{"id":"0:350","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,33],"end":[1806,37]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10481:141","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:351:700"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:178:1730":{"id":"0:178:1730","crate_id":0,"name":"write_f32","span":{"filename":"src/io.rs","begin":[1541,4],"end":[1545,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian single-precision floating point number to a `Write`:\n\n```rust\nuse std::f32;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f32::<BigEndian>(f32::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x49\\x0f\\xdb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"f32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:113:1778":{"id":"0:113:1778","crate_id":0,"name":"read_i64_into","span":{"filename":"src/io.rs","begin":[820,4],"end":[827,5]},"visibility":"default","docs":"Reads a sequence of signed 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i64"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:259:1842":{"id":"0:259:1842","crate_id":0,"name":"write_f32_into","span":{"filename":"src/lib.rs","begin":[1563,4],"end":[1568,5]},"visibility":"default","docs":"Writes IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3962:68":{"id":"2:3962:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3963:1403"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:13443:59699":{"id":"2:13443:59699","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:222:1687":{"id":"0:222:1687","crate_id":0,"name":"read_i64","span":{"filename":"src/lib.rs","begin":[630,4],"end":[632,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:125":{"id":"0:125","crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1049,0],"end":[1049,48]},"visibility":{"restricted":{"parent":"0:26:1535","path":"::io"}},"docs":"All types that implement `Read` get methods defined in `ReadBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"io::Read","id":"1:4548:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["read_u16","read_f32_into","read_i8","read_i32_into","read_uint128","read_i16_into","read_u128_into","read_i128","read_u64_into","read_u32_into","read_u48","read_i32","read_i24","read_f64_into","read_i64_into","read_f32","read_int128","read_u64","read_i64","read_u16_into","read_f64_into_unchecked","read_int","read_u24","read_i16","read_i128_into","read_f64","read_u8","read_u128","read_i8_into","read_i48","read_u32","read_uint","read_f32_into_unchecked"],"trait":{"kind":"resolved_path","inner":{"name":"ReadBytesExt","id":"0:41:1536","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"generic","inner":"R"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:240:1756":{"id":"0:240:1756","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[1039,4],"end":[1039,50]},"visibility":"default","docs":"Reads unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:5570:3499":{"id":"1:5570:3499","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5571:5210","1:5572:57679"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:1567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:211:1647":{"id":"0:211:1647","crate_id":0,"name":"write_u24","span":{"filename":"src/lib.rs","begin":[402,4],"end":[404,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3737:4054":{"id":"2:3737:4054","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3774:4055":{"id":"2:3774:4055","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10262:2751":{"id":"2:10262:2751","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10263:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:250:1806":{"id":"0:250:1806","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[1324,4],"end":[1324,51]},"visibility":"default","docs":"Writes unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3372:3584":{"id":"2:3372:3584","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:170","2:3375:343"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:296:1661":{"id":"0:296:1661","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2056,4],"end":[2067,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:357:590":{"id":"0:357:590","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1806,44],"end":[1806,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2892:123":{"id":"2:2892:123","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2887:172","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:278:1912":{"id":"0:278:1912","crate_id":0,"name":"NativeEndian","span":{"filename":"src/lib.rs","begin":[1885,0],"end":[1885,37]},"visibility":"public","docs":"Defines system native-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\nOn this platform, this is an alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":["#[cfg(target_endian = \"little\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"0:253:1815":{"id":"0:253:1815","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[1393,4],"end":[1393,53]},"visibility":"default","docs":"Writes unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:2835:3129":{"id":"2:2835:3129","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2837:53463"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2832:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6376:3466":{"id":"1:6376:3466","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6377:53552","1:6378:7537","1:6379:53553","1:6380:53554","1:6381:53555","1:6382:53556"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:1567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10258:2750":{"id":"2:10258:2750","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10259:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:85:1672":{"id":"0:85:1672","crate_id":0,"name":"read_int","span":{"filename":"src/io.rs","begin":[452,4],"end":[456,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xc1, 0xff, 0x7c]);\nassert_eq!(-4063364, rdr.read_int::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:261:1853":{"id":"0:261:1853","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[1616,4],"end":[1616,43]},"visibility":"default","docs":"Converts the given slice of unsigned 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u16(&mut numbers);\nassert_eq!(numbers, [5u16.to_be(), 65000u16.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13407:59689":{"id":"2:13407:59689","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12985:3912","prim@char":"1:15753:2629","`DoubleEndedIterator`":"2:8406:119","str::rsplit_terminator":"1:15759:2634","str::split":"1:15759:2634"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49354:4242","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:332:1809":{"id":"0:332:1809","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2299,4],"end":[2305,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3164-0:341:1569":{"id":"b:2:3164-0:341:1569","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:134","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3167:3055"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:14097:140":{"id":"2:14097:140","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14098:265","2:14099:504","2:14100:268","2:14101:1063"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8325:3869":{"id":"2:8325:3869","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8327:3111"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14169:3130":{"id":"2:14169:3130","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14170:57726","2:14171:57727","2:14172:57728","2:14173:57729","2:14174:57730","2:14175:57731","2:14176:3090"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:369":{"id":"0:369","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,33],"end":[1836,37]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10481:141","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:370:700"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:294:1648":{"id":"0:294:1648","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[2042,4],"end":[2053,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5692:3486":{"id":"1:5692:3486","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5693:57708","1:5694:57709","1:5695:57710","1:5696:57711"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10254:2748":{"id":"2:10254:2748","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10255:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:264:1866":{"id":"0:264:1866","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[1673,4],"end":[1673,45]},"visibility":"default","docs":"Converts the given slice of unsigned 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u128(&mut numbers);\nassert_eq!(numbers, [5u128.to_be(), 65000u128.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3178:1390":{"id":"2:3178:1390","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47467:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:215","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:236:1730":{"id":"0:236:1730","crate_id":0,"name":"write_f32","span":{"filename":"src/lib.rs","begin":[945,4],"end":[947,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"f32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2841-0:360:1568":{"id":"b:2:2841-0:360:1568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2835:3129","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2843:53463"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:267:1879":{"id":"0:267:1879","crate_id":0,"name":"from_slice_i64","span":{"filename":"src/lib.rs","begin":[1743,4],"end":[1748,5]},"visibility":"default","docs":"Converts the given slice of signed 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i64(&mut numbers);\nassert_eq!(numbers, [5i64.to_be(), 65000i64.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5828:3124":{"id":"5:5828:3124","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5830:170","5:5831:418"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3070:2741":{"id":"2:3070:2741","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3069:1567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13471:53518":{"id":"2:13471:53518","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,39],"end":[1806,42]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","min","max"],"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2923:166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:354:401"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3401:3899":{"id":"2:3401:3899","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:1210"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13373:4273":{"id":"2:13373:4273","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15753:2629"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49274:4237","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:337:1862":{"id":"0:337:1862","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2344,4],"end":[2350,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13454:56568":{"id":"2:13454:56568","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12985:3912","prim@char":"1:15753:2629"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2838-0:360:1568":{"id":"b:2:2838-0:360:1568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2832:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2840:2699"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6076":{"id":"5:6076","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5896:1316","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6077:60342","5:6078:2809","5:6081:60343","5:6084:60344","5:6096:60345","5:6097:60346","5:6098:2880","5:6099:53514","5:6100:53515"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3141:134":{"id":"2:3141:134","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3143:666"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:41:1536":{"id":"0:41:1536","crate_id":0,"name":"ReadBytesExt","span":{"filename":"src/io.rs","begin":[30,0],"end":[1045,1]},"visibility":"public","docs":"Extends [`Read`] with methods for reading numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`]:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:42:2349","0:44:2356","0:46:1597","0:49:1666","0:52:1605","0:55:1671","0:58:1609","0:61:1677","0:64:1616","0:67:1682","0:70:1623","0:73:1687","0:76:1630","0:79:1692","0:82:1606","0:85:1672","0:88:1640","0:91:1699","0:94:1705","0:97:1712","0:100:1742","0:102:1750","0:104:1756","0:106:1762","0:108:2456","0:109:1768","0:111:1774","0:113:1778","0:115:1782","0:117:1789","0:119:1795","0:121:1799","0:123:1803"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"io::Read","id":"1:4548:2337","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:125"]}},"0:104:1756":{"id":"0:104:1756","crate_id":0,"name":"read_u64_into","span":{"filename":"src/io.rs","begin":[635,4],"end":[642,5]},"visibility":"default","docs":"Reads a sequence of unsigned 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10252:2747":{"id":"2:10252:2747","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10253:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:160:1656":{"id":"0:160:1656","crate_id":0,"name":"write_u128","span":{"filename":"src/io.rs","begin":[1402,4],"end":[1406,5]},"visibility":"default","docs":"Writes an unsigned 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u128"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:123:1803":{"id":"0:123:1803","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/io.rs","begin":[1039,4],"end":[1044,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Safety\n\nThis method is unsafe because there are no guarantees made about the\nfloating point values. In particular, this method does not check for\nsignaling NaNs, which may result in undefined behavior.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f64_into` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:163:1726":{"id":"0:163:1726","crate_id":0,"name":"write_i128","span":{"filename":"src/io.rs","begin":[1410,4],"end":[1414,5]},"visibility":"default","docs":"Writes a signed 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i128"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:791:3121":{"id":"5:791:3121","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13372:56552":{"id":"2:13372:56552","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15759:2634"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:303:1809":{"id":"0:303:1809","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2099,4],"end":[2105,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:243:1774":{"id":"0:243:1774","crate_id":0,"name":"read_i32_into","span":{"filename":"src/lib.rs","begin":[1115,4],"end":[1120,5]},"visibility":"default","docs":"Reads signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8358:135":{"id":"2:8358:135","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8360:669"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:319:1645":{"id":"0:319:1645","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[2230,4],"end":[2232,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13451:14735":{"id":"2:13451:14735","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12985:3912","prim@char":"1:15753:2629"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:335:1853":{"id":"0:335:1853","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2326,4],"end":[2332,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6099:53514":{"id":"5:6099:53514","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15759:2634"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:289:1640":{"id":"0:289:1640","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[2007,4],"end":[2019,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3247:208-0:341:1569":{"id":"a:2:3247:208-0:341:1569","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3247:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3543:3971":{"id":"2:3543:3971","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3545:737"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3539:3570","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13348":{"id":"2:13348","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12445:1316","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13349:776","2:13350:3062","2:13351:59683","2:13352:59684","2:13354:59685","2:13357:57679","2:13358:59686","2:13359:291","2:13360:1770","2:13361:56530","2:13363:56531","2:13365:56532","2:13367:56533","2:13369:3706","2:13370:59687","2:13371:56551","2:13372:56552","2:13373:4273","2:13374:3941","2:13375:1922","2:13376:32125","2:13377:32115","2:13378:4745","2:13379:59688","2:13380:32110","2:13381:56567","2:13384:56245","2:13387:56247","2:13390:3101","2:13394:3061","2:13398:54715","2:13401:31982","2:13404:56561","2:13407:59689","2:13410:59690","2:13413:56563","2:13416:56565","2:13419:59691","2:13422:59692","2:13425:2712","2:13428:59693","2:13431:59694","2:13434:59695","2:13437:59696","2:13439:59697","2:13441:59698","2:13443:59699","2:13444:59700","2:13445:59701","2:13448:59702","2:13451:14735","2:13454:56568","2:13457:59703","2:13460:59704","2:13463:59705","2:13466:4147","2:13468:4401","2:13469:53516","2:13470:53517","2:13471:53518","2:13472:59706","2:13474:3505","2:13475:59707"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:209:1640":{"id":"0:209:1640","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[364,4],"end":[364,55]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13381:56567":{"id":"2:13381:56567","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:12985:3912","prim@char":"1:15753:2629"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102:1750":{"id":"0:102:1750","crate_id":0,"name":"read_u32_into","span":{"filename":"src/io.rs","begin":[597,4],"end":[604,5]},"visibility":"default","docs":"Reads a sequence of unsigned 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13425:2712":{"id":"2:13425:2712","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"1:15759:2634","self::pattern":"2:12985:3912","`DoubleEndedIterator`":"2:8406:119","prim@char":"1:15753:2629"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49508:4249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3481:129":{"id":"2:3481:129","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3483:363"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3484:130","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:362:395":{"id":"0:362:395","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1836,9],"end":[1836,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3132:75":{"id":"2:3132:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3134:292"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"a:2:3235:199-0:360:1568":{"id":"a:2:3235:199-0:360:1568","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3235:199","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:5652:3484":{"id":"1:5652:3484","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5653:5618","1:5654:7902"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:219:1671":{"id":"0:219:1671","crate_id":0,"name":"read_i24","span":{"filename":"src/lib.rs","begin":[564,4],"end":[566,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3350:3969":{"id":"2:3350:3969","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3352:1087"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3696:136":{"id":"2:3696:136","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3698:672"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3691:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:212:1650":{"id":"0:212:1650","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[423,4],"end":[423,41]},"visibility":"default","docs":"Writes an unsigned 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13378:4745":{"id":"2:13378:4745","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49558:2859","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3148:215":{"id":"2:3148:215","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3150:126","2:3151:1389"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3367:3583":{"id":"2:3367:3583","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:170","2:3370:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3247:208-0:360:1568":{"id":"a:2:3247:208-0:360:1568","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3247:208","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6096:60345":{"id":"5:6096:60345","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13377:32115":{"id":"2:13377:32115","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15759:2634"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49587:4253","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,44],"end":[1836,53]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2887:172","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:376:590"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6098:2880":{"id":"5:6098:2880","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6078:2809":{"id":"5:6078:2809","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8352:204"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:262:1858":{"id":"0:262:1858","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[1635,4],"end":[1635,43]},"visibility":"default","docs":"Converts the given slice of unsigned 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u32(&mut numbers);\nassert_eq!(numbers, [5u32.to_be(), 65000u32.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:22992:3976":{"id":"2:22992:3976","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23641:3972","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22983:1567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:46:1597":{"id":"0:46:1597","crate_id":0,"name":"read_u16","span":{"filename":"src/io.rs","begin":[112,4],"end":[116,5]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u16"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:119:1795":{"id":"0:119:1795","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/io.rs","begin":[948,4],"end":[953,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\n\nReads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f32_into` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13460:59704":{"id":"2:13460:59704","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15753:2629","self::pattern":"2:12985:3912"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5832:3125":{"id":"5:5832:3125","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5834:170","5:5835:33180"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:266:1875":{"id":"0:266:1875","crate_id":0,"name":"from_slice_i32","span":{"filename":"src/lib.rs","begin":[1718,4],"end":[1723,5]},"visibility":"default","docs":"Converts the given slice of signed 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i32(&mut numbers);\nassert_eq!(numbers, [5i32.to_be(), 65000i32.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12924:3613":{"id":"2:12924:3613","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12925:125","2:12926:53591"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9218:2963":{"id":"2:9218:2963","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:232:1723":{"id":"0:232:1723","crate_id":0,"name":"write_i64","span":{"filename":"src/lib.rs","begin":[854,4],"end":[856,5]},"visibility":"default","docs":"Writes a signed 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13387:56247":{"id":"2:13387:56247","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:12985:3912","prim@char":"1:15753:2629"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:117:1789":{"id":"0:117:1789","crate_id":0,"name":"read_f32_into","span":{"filename":"src/io.rs","begin":[902,4],"end":[909,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:275:59":{"id":"0:275:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1840,4],"end":[1842,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3338:3672":{"id":"2:3338:3672","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3340:1332"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:166:1648":{"id":"0:166:1648","crate_id":0,"name":"write_uint","span":{"filename":"src/io.rs","begin":[1442,4],"end":[1450,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite unsigned 40 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_uint::<BigEndian>(312550384361, 5).unwrap();\nwtr.write_uint::<BigEndian>(43, 5).unwrap();\nassert_eq!(wtr, b\"\\x48\\xc5\\x74\\x62\\xe9\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67:1682":{"id":"0:67:1682","crate_id":0,"name":"read_i48","span":{"filename":"src/io.rs","begin":[295,4],"end":[299,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x9d, 0x71, 0xab, 0xe7, 0x97, 0x8f]);\nassert_eq!(-108363435763825, rdr.read_i48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:789:3119":{"id":"5:789:3119","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:64:1616":{"id":"0:64:1616","crate_id":0,"name":"read_u48","span":{"filename":"src/io.rs","begin":[269,4],"end":[273,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xb6, 0x71, 0x6b, 0xdc, 0x2b, 0x31]);\nassert_eq!(200598257150769, rdr.read_u48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3324:3958":{"id":"2:3324:3958","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3326:170","2:3327:1086"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:306:1853":{"id":"0:306:1853","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2126,4],"end":[2132,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:225:1699":{"id":"0:225:1699","crate_id":0,"name":"read_int128","span":{"filename":"src/lib.rs","begin":[698,4],"end":[700,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3174-0:360:1568":{"id":"b:2:3174-0:360:1568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:215","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3144:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3177:126","2:3178:1390"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13404:56561":{"id":"2:13404:56561","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12985:3912","prim@char":"1:15753:2629","`DoubleEndedIterator`":"2:8406:119","str::split":"1:15759:2634"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49322:3155","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13472:59706":{"id":"2:13472:59706","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15753:2629"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49603:4255","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:226:1705":{"id":"0:226:1705","crate_id":0,"name":"read_f32","span":{"filename":"src/lib.rs","begin":[721,4],"end":[723,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3245:106":{"id":"2:3245:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2857:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:263:1862":{"id":"0:263:1862","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[1654,4],"end":[1654,43]},"visibility":"default","docs":"Converts the given slice of unsigned 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u64(&mut numbers);\nassert_eq!(numbers, [5u64.to_be(), 65000u64.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6100:53515":{"id":"5:6100:53515","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15759:2634"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:287:1630":{"id":"0:287:1630","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[1987,4],"end":[1989,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13394:3061":{"id":"2:13394:3061","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47340:165","self::pattern":"2:12985:3912","prim@char":"1:15753:2629"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:341:1569":{"id":"0:341:1569","crate_id":0,"name":"BigEndian","span":{"filename":"src/lib.rs","begin":[1807,0],"end":[1807,21]},"visibility":"public","docs":"Defines big-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 4];\nBigEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, BigEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:9217:2964-0:341:1569","a:2:3247:208-0:341:1569","a:2:3235:199-0:341:1569","a:2:3276:2916-0:341:1569","a:2:9218:2963-0:341:1569","b:2:3964-0:341:1569","b:2:3168-0:341:1569","b:2:3174-0:341:1569","b:2:2841-0:341:1569","b:2:2838-0:341:1569","b:2:3179-0:341:1569","b:2:3164-0:341:1569","b:5:787-0:341:1569","0:342","0:344","0:345","0:347","0:348","0:350","0:353","0:355","0:356","0:358","0:271","0:283"]}},"2:13444:59700":{"id":"2:13444:59700","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:220:1677":{"id":"0:220:1677","crate_id":0,"name":"read_i32","span":{"filename":"src/lib.rs","begin":[586,4],"end":[588,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:327:1742":{"id":"0:327:1742","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2270,4],"end":[2272,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:307:1858":{"id":"0:307:1858","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2135,4],"end":[2141,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:157:1723":{"id":"0:157:1723","crate_id":0,"name":"write_i64","span":{"filename":"src/io.rs","begin":[1394,4],"end":[1398,5]},"visibility":"default","docs":"Writes a signed 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i64::<BigEndian>(i64::min_value()).unwrap();\nwtr.write_i64::<BigEndian>(i64::max_value()).unwrap();\nassert_eq!(wtr, b\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3691:212":{"id":"2:3691:212","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3692:170","2:3693:4045","2:3694:671","2:3695:356"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3696:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3691:212","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:244:1778":{"id":"0:244:1778","crate_id":0,"name":"read_i64_into","span":{"filename":"src/lib.rs","begin":[1144,4],"end":[1149,5]},"visibility":"default","docs":"Reads signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:313:1597":{"id":"0:313:1597","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[2188,4],"end":[2190,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13375:1922":{"id":"2:13375:1922","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49290:2856","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:248:1799":{"id":"0:248:1799","crate_id":0,"name":"read_f64_into","span":{"filename":"src/lib.rs","begin":[1264,4],"end":[1269,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55:1671":{"id":"0:55:1671","crate_id":0,"name":"read_i24","span":{"filename":"src/io.rs","begin":[191,4],"end":[195,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:347":{"id":"0:347","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,29],"end":[1806,31]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralEq","id":"2:3244:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:221:1682":{"id":"0:221:1682","crate_id":0,"name":"read_i48","span":{"filename":"src/lib.rs","begin":[608,4],"end":[610,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:148:1652":{"id":"0:148:1652","crate_id":0,"name":"write_u48","span":{"filename":"src/io.rs","begin":[1313,4],"end":[1317,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u48::<BigEndian>(52360336390828).unwrap();\nwtr.write_u48::<BigEndian>(541).unwrap();\nassert_eq!(wtr, b\"\\x2f\\x9f\\x17\\x40\\x3a\\xac\\x00\\x00\\x00\\x00\\x02\\x1d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13466:4147":{"id":"2:13466:4147","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12924:3613","`FromStr`":"2:12924:3613"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47467:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12924:3613","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12924:3613","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:288:1606":{"id":"0:288:1606","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[1992,4],"end":[2004,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:314:1609":{"id":"0:314:1609","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[2193,4],"end":[2195,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13419:59691":{"id":"2:13419:59691","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:247:1795":{"id":"0:247:1795","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/lib.rs","begin":[1237,4],"end":[1239,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f32_into` instead"},"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13367:56533":{"id":"2:13367:56533","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:0:2230":{"id":"0:0:2230","crate_id":0,"name":"byteorder","span":{"filename":"src/lib.rs","begin":[1,0],"end":[4052,1]},"visibility":"public","docs":"This crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].\n\nThe organization of the crate is pretty simple. A trait, [`ByteOrder`], specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]\nand [`LittleEndian`] implement these methods. Finally, [`ReadBytesExt`] and\n[`WriteBytesExt`] provide convenience methods available to all types that\nimplement [`Read`] and [`Write`].\n\nAn alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve\ncode clarity.\n\nAn additional alias, [`NativeEndian`], is provided for the endianness of the\nlocal platform. This is convenient when serializing data for use and\nconversions are not desired.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`] type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a [`Write`] type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n\n# Optional Features\n\nThis crate optionally provides support for 128 bit values (`i128` and `u128`)\nwhen built with the `i128` feature enabled.\n\nThis crate can also be used without the standard library.\n\n# Alternatives\n\nNote that as of Rust 1.32, the standard numeric types provide built-in methods\nlike `to_le_bytes` and `from_le_bytes`, which support some of the same use\ncases.\n\n[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness\n[`ByteOrder`]: trait.ByteOrder.html\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`ReadBytesExt`]: trait.ReadBytesExt.html\n[`WriteBytesExt`]: trait.WriteBytesExt.html\n[`NetworkEndian`]: type.NetworkEndian.html\n[`NativeEndian`]: type.NativeEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":["#![deny(missing_docs)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:41:1536","0:127:1537","0:201:1593","0:341:1569","0:273:1897","0:360:1568","0:276:1901","0:277:1909","0:278:1912"]}},"0:109:1768":{"id":"0:109:1768","crate_id":0,"name":"read_i16_into","span":{"filename":"src/io.rs","begin":[747,4],"end":[754,5]},"visibility":"default","docs":"Reads a sequence of signed 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i16"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:338:1866":{"id":"0:338:1866","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2353,4],"end":[2359,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3397:3897":{"id":"2:3397:3897","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3399:344"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:111:1774":{"id":"0:111:1774","crate_id":0,"name":"read_i32_into","span":{"filename":"src/io.rs","begin":[782,4],"end":[789,5]},"visibility":"default","docs":"Reads a sequence of signed 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i32"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9217:2964-0:341:1569":{"id":"a:2:9217:2964-0:341:1569","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9217:2964","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3135:74":{"id":"2:3135:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3137:3054"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6776:3469":{"id":"1:6776:3469","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6777:54946"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13431:59694":{"id":"2:13431:59694","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:8406:119","self::pattern":"2:12985:3912","str::rmatch_indices":"1:15759:2634","prim@char":"1:15753:2629"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49454:4246","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:94:1705":{"id":"0:94:1705","crate_id":0,"name":"read_f32","span":{"filename":"src/io.rs","begin":[499,4],"end":[503,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian single-precision floating point number from a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n]);\nassert_eq!(f32::consts::PI, rdr.read_f32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"f32"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:351:700":{"id":"0:351:700","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1806,33],"end":[1806,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"$crate::hash::Hasher","id":"2:10491:145","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:257:1838":{"id":"0:257:1838","crate_id":0,"name":"write_i64_into","span":{"filename":"src/lib.rs","begin":[1506,4],"end":[1511,5]},"visibility":"default","docs":"Writes signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i64"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:373:401":{"id":"0:373:401","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1836,39],"end":[1836,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"2:37472:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3393:3895":{"id":"2:3393:3895","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3395:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:298:1742":{"id":"0:298:1742","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2070,4],"end":[2072,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5636:3483":{"id":"1:5636:3483","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5637:54847","1:5638:54849","1:5639:54848","1:5640:54850"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:356":{"id":"0:356","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,44],"end":[1806,53]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2887:172","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:357:590"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:293:1656":{"id":"0:293:1656","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[2037,4],"end":[2039,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3144:216":{"id":"2:3144:216","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3146:126","2:3147:1390"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:175:1728":{"id":"0:175:1728","crate_id":0,"name":"write_int128","span":{"filename":"src/io.rs","begin":[1508,4],"end":[1516,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13445:59701":{"id":"2:13445:59701","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15753:2629","self::pattern":"2:12985:3912"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13015:3916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13416:56565":{"id":"2:13416:56565","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15753:2629","self::pattern":"2:12985:3912","str::splitn":"1:15759:2634"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49426:3157","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13428:59693":{"id":"2:13428:59693","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12985:3912","`DoubleEndedIterator`":"2:8406:119","prim@char":"1:15753:2629","str::matches":"1:15759:2634"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49526:4250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79:1692":{"id":"0:79:1692","crate_id":0,"name":"read_i128","span":{"filename":"src/io.rs","begin":[402,4],"end":[406,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i128::min_value(), rdr.read_i128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i128"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:254:1829":{"id":"0:254:1829","crate_id":0,"name":"write_i8_into","span":{"filename":"src/lib.rs","begin":[1422,4],"end":[1427,5]},"visibility":"default","docs":"Writes signed 8 bit integers from `src` into `dst`.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to write from a `&[i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `u8` individually.)\n\n# Panics\n\nPanics when `buf.len() != src.len()`.\n\n# Examples\n\nWrite and read `i8` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian, ReadBytesExt};\n\nlet mut bytes = [0; 4];\nlet numbers_given = [1, 2, 0xf, 0xe];\nLittleEndian::write_i8_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nbytes.as_ref().read_i8_into(&mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13422:59692":{"id":"2:13422:59692","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12995:3913","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:115:1782":{"id":"0:115:1782","crate_id":0,"name":"read_i128_into","span":{"filename":"src/io.rs","begin":[858,4],"end":[868,5]},"visibility":"default","docs":"Reads a sequence of signed 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i128"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2840:2699":{"id":"2:2840:2699","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:328:1750":{"id":"0:328:1750","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2275,4],"end":[2277,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6097:60346":{"id":"5:6097:60346","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:2920","`String`":"5:8352:204"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2920","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8090:3131","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8352:204","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:233:1726":{"id":"0:233:1726","crate_id":0,"name":"write_i128","span":{"filename":"src/lib.rs","begin":[876,4],"end":[878,5]},"visibility":"default","docs":"Writes a signed 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read n-byte `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:154:1654":{"id":"0:154:1654","crate_id":0,"name":"write_u64","span":{"filename":"src/io.rs","begin":[1367,4],"end":[1371,5]},"visibility":"default","docs":"Writes an unsigned 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u64::<BigEndian>(918733457491587).unwrap();\nwtr.write_u64::<BigEndian>(143).unwrap();\nassert_eq!(wtr, b\"\\x00\\x03\\x43\\x95\\x4d\\x60\\x86\\x83\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13439:59697":{"id":"2:13439:59697","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:181:1733":{"id":"0:181:1733","crate_id":0,"name":"write_f64","span":{"filename":"src/io.rs","begin":[1570,4],"end":[1574,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian double-precision floating point number to a `Write`:\n\n```rust\nuse std::f64;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f64::<BigEndian>(f64::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x09\\x21\\xfb\\x54\\x44\\x2d\\x18\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"f64"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:238:1742":{"id":"0:238:1742","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[993,4],"end":[993,50]},"visibility":"default","docs":"Reads unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:9218:2963-0:341:1569":{"id":"a:2:9218:2963-0:341:1569","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9218:2963","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:42:2349":{"id":"0:42:2349","crate_id":0,"name":"read_u8","span":{"filename":"src/io.rs","begin":[55,4],"end":[59,5]},"visibility":"default","docs":"Reads an unsigned 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![2, 5]);\nassert_eq!(2, rdr.read_u8().unwrap());\nassert_eq!(5, rdr.read_u8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3164-0:360:1568":{"id":"b:2:3164-0:360:1568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:134","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3138:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3167:3055"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3308:3585":{"id":"2:3308:3585","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3310:170","2:3311:1331"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3610:3219":{"id":"2:3610:3219","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3612:57931","2:3613:57932","2:3614:56567"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:127:1537":{"id":"0:127:1537","crate_id":0,"name":"WriteBytesExt","span":{"filename":"src/io.rs","begin":[1073,0],"end":[1575,1]},"visibility":"public","docs":"Extends [`Write`] with methods for writing numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a [`Write`]:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, vec![2, 5, 3, 0]);\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:128:2511","0:129:2518","0:130:1645","0:133:1714","0:136:1647","0:139:1716","0:142:1650","0:145:1719","0:148:1652","0:151:1721","0:154:1654","0:157:1723","0:160:1656","0:163:1726","0:166:1648","0:169:1717","0:172:1661","0:175:1728","0:178:1730","0:181:1733"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"io::Write","id":"1:4605:2500","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:184"]}},"5:783:210":{"id":"5:783:210","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:3119","5:785:3120","5:786:3121"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:315:1623":{"id":"0:315:1623","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[2198,4],"end":[2200,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6404:211":{"id":"5:6404:211","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6405:3122"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:217:1661":{"id":"0:217:1661","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[522,4],"end":[522,61]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:300:1756":{"id":"0:300:1756","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2080,4],"end":[2082,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:231:1721":{"id":"0:231:1721","crate_id":0,"name":"write_i48","span":{"filename":"src/lib.rs","begin":[832,4],"end":[834,5]},"visibility":"default","docs":"Writes a signed 48 bit integer `n` to `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7886:4029":{"id":"2:7886:4029","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7887:59001","2:7888:59002","2:7889:58999","2:7890:58997","2:7891:59003","2:7892:59000","2:7893:58998"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2857:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2933:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:377":{"id":"0:377","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,55],"end":[1836,65]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","le","lt","ge"],"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2933:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:378:981"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:136:1647":{"id":"0:136:1647","crate_id":0,"name":"write_u24","span":{"filename":"src/io.rs","begin":[1205,4],"end":[1209,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u24::<BigEndian>(267).unwrap();\nwtr.write_u24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\x00\\x01\\x0b\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:376:590":{"id":"0:376:590","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1836,44],"end":[1836,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:224:1672":{"id":"0:224:1672","crate_id":0,"name":"read_int","span":{"filename":"src/lib.rs","begin":[675,4],"end":[677,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8845:4028":{"id":"2:8845:4028","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7886:4029","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13349:776":{"id":"2:13349:776","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15753:2629"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:100:1742":{"id":"0:100:1742","crate_id":0,"name":"read_u16_into","span":{"filename":"src/io.rs","begin":[562,4],"end":[569,5]},"visibility":"default","docs":"Reads a sequence of unsigned 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12995:3913":{"id":"2:12995:3913","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12997:3911","2:12998:58690","2:12999:58691","2:13000:58692","2:13001:58694","2:13002:58693","2:13003:58695"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3276:2916-0:341:1569":{"id":"a:2:3276:2916-0:341:1569","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3276:2916","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:256:1836":{"id":"0:256:1836","crate_id":0,"name":"write_i32_into","span":{"filename":"src/lib.rs","begin":[1478,4],"end":[1483,5]},"visibility":"default","docs":"Writes signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i32"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3303:3670":{"id":"2:3303:3670","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3305:170","2:3306:253"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:172:1661":{"id":"0:172:1661","crate_id":0,"name":"write_uint128","span":{"filename":"src/io.rs","begin":[1493,4],"end":[1501,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u128"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13379:59688":{"id":"2:13379:59688","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49568:4251","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:252:1812":{"id":"0:252:1812","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[1370,4],"end":[1370,51]},"visibility":"default","docs":"Writes unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:49:1666":{"id":"0:49:1666","crate_id":0,"name":"read_i16","span":{"filename":"src/io.rs","begin":[139,4],"end":[143,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0xc1, 0xff, 0x7c]);\nassert_eq!(193, rdr.read_i16::<BigEndian>().unwrap());\nassert_eq!(-132, rdr.read_i16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i16"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13358:59686":{"id":"2:13358:59686","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:88:1640":{"id":"0:88:1640","crate_id":0,"name":"read_uint128","span":{"filename":"src/io.rs","begin":[460,4],"end":[464,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u128"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:249:1803":{"id":"0:249:1803","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/lib.rs","begin":[1299,4],"end":[1301,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f64_into` instead"},"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:270:1888":{"id":"0:270:1888","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[1787,4],"end":[1787,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 double-precision (8 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3334:3671":{"id":"2:3334:3671","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3336:254"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:329:1756":{"id":"0:329:1756","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2280,4],"end":[2282,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5658:3485":{"id":"1:5658:3485","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5659:7113","1:5660:54012","1:5661:5618","1:5662:54013","1:5663:3813","1:5664:3814","1:5665:54014","1:5666:1280","1:5667:54015","1:5668:54016","1:5669:54017","1:5670:54018","1:5671:54019","1:5672:54020","1:5673:54021","1:5674:54022"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2838-0:341:1569":{"id":"b:2:2838-0:341:1569","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2832:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2840:2699"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6870:3468":{"id":"1:6870:3468","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6871:53604"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3406:3902":{"id":"2:3406:3902","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:1213"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10243:109":{"id":"2:10243:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10244:645"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:363":{"id":"0:363","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,16],"end":[1836,20]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3245:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5564:3501":{"id":"1:5564:3501","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5565:57790","1:5566:4493"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:1567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3355:3882":{"id":"2:3355:3882","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3356:170","2:3357:936"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13363:56531":{"id":"2:13363:56531","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47340:165"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47340:165","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9218:2963-0:360:1568":{"id":"a:2:9218:2963-0:360:1568","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9218:2963","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3182:126":{"id":"2:3182:126","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38653:2740","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"2:13380:32110":{"id":"2:13380:32110","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49596:4254","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:145:1719":{"id":"0:145:1719","crate_id":0,"name":"write_i32","span":{"filename":"src/io.rs","begin":[1286,4],"end":[1290,5]},"visibility":"default","docs":"Writes a signed 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i32::<BigEndian>(-34253).unwrap();\nwtr.write_i32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\xff\\xff\\x7a\\x33\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:311:1888":{"id":"0:311:1888","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2174,4],"end":[2183,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8841:3384":{"id":"2:8841:3384","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8560:156","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13354:59685":{"id":"2:13354:59685","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15759:2634"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3244:205":{"id":"2:3244:205","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:268:1883":{"id":"0:268:1883","crate_id":0,"name":"from_slice_i128","span":{"filename":"src/lib.rs","begin":[1768,4],"end":[1773,5]},"visibility":"default","docs":"Converts the given slice of signed 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i128(&mut numbers);\nassert_eq!(numbers, [5i128.to_be(), 65000i128.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13359:291":{"id":"2:13359:291","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15770:2643","str::as_mut_ptr":"1:15759:2634"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3478:2917":{"id":"2:3478:2917","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3479:564"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:227:1712":{"id":"0:227:1712","crate_id":0,"name":"read_f64","span":{"filename":"src/lib.rs","begin":[744,4],"end":[746,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13469:53516":{"id":"2:13469:53516","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:216:1648":{"id":"0:216:1648","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[502,4],"end":[502,57]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:358":{"id":"0:358","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,55],"end":[1806,65]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["gt","le","lt","ge"],"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2933:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:359:981"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:365:645":{"id":"0:365:645","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1836,22],"end":[1836,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10203:133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10192:194","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:285:1609":{"id":"0:285:1609","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[1977,4],"end":[1979,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22798:3526":{"id":"2:22798:3526","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22788:1567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:330:1762":{"id":"0:330:1762","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2285,4],"end":[2287,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13470:53517":{"id":"2:13470:53517","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:318:1640":{"id":"0:318:1640","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[2219,4],"end":[2227,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:223:1692":{"id":"0:223:1692","crate_id":0,"name":"read_i128","span":{"filename":"src/lib.rs","begin":[652,4],"end":[654,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:202:1597":{"id":"0:202:1597","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[225,4],"end":[225,35]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:342":{"id":"0:342","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,9],"end":[1806,14]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2857:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:343:395"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:790:3120":{"id":"5:790:3120","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:345":{"id":"0:345","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,22],"end":[1806,27]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10243:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:346:645"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:339:1886":{"id":"0:339:1886","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2362,4],"end":[2371,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["numbers",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13698:137":{"id":"2:13698:137","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13699:170","2:13700:997"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:787-0:360:1568":{"id":"b:5:787-0:360:1568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2857:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:210","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:3119","5:790:3120","5:791:3121"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6602:3485":{"id":"1:6602:3485","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6603:53626","1:6604:7459","1:6605:7460","1:6606:7462","1:6607:7461","1:6608:7463","1:6609:7464","1:6610:7466","1:6611:5660","1:6612:7469","1:6613:7470","1:6614:7471","1:6615:7472","1:6616:7473","1:6617:7474","1:6618:7467","1:6619:7468"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:76:1630":{"id":"0:76:1630","crate_id":0,"name":"read_u128","span":{"filename":"src/io.rs","begin":[376,4],"end":[380,5]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83,\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83\n]);\nassert_eq!(16947640962301618749969007319746179, rdr.read_u128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u128"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:787-0:341:1569":{"id":"b:5:787-0:341:1569","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2857:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"kind":"resolved_path","inner":{"name":"ToOwned","id":"5:783:210","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:789:3119","5:790:3120","5:791:3121"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:260:1844":{"id":"0:260:1844","crate_id":0,"name":"write_f64_into","span":{"filename":"src/lib.rs","begin":[1592,4],"end":[1597,5]},"visibility":"default","docs":"Writes IEEE754 double-precision (8 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"f64"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6707:3463":{"id":"1:6707:3463","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6708:8183"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10459:1567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:355":{"id":"0:355","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1806,44],"end":[1806,53]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3243:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13015:3916":{"id":"2:13015:3916","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13010:3915","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:169:1717":{"id":"0:169:1717","crate_id":0,"name":"write_int","span":{"filename":"src/io.rs","begin":[1478,4],"end":[1486,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite signed 56 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_int::<BigEndian>(-3548172039376767, 7).unwrap();\nwtr.write_int::<BigEndian>(43, 7).unwrap();\nassert_eq!(wtr, b\"\\xf3\\x64\\xf4\\xd1\\xfd\\xb0\\x81\\x00\\x00\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:142:1650":{"id":"0:142:1650","crate_id":0,"name":"write_u32","span":{"filename":"src/io.rs","begin":[1259,4],"end":[1263,5]},"visibility":"default","docs":"Writes an unsigned 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u32::<BigEndian>(267).unwrap();\nwtr.write_u32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\x00\\x00\\x01\\x0b\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u32"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3213:114":{"id":"2:3213:114","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3214:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:334:1815":{"id":"0:334:1815","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2317,4],"end":[2323,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:276:1901":{"id":"0:276:1901","crate_id":0,"name":"LE","span":{"filename":"src/lib.rs","begin":[1848,0],"end":[1848,27]},"visibility":"public","docs":"A type alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"0:323:1648":{"id":"0:323:1648","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[2250,4],"end":[2257,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:133:1714":{"id":"0:133:1714","crate_id":0,"name":"write_i16","span":{"filename":"src/io.rs","begin":[1178,4],"end":[1182,5]},"visibility":"default","docs":"Writes a signed 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i16::<BigEndian>(193).unwrap();\nwtr.write_i16::<BigEndian>(-132).unwrap();\nassert_eq!(wtr, b\"\\x00\\xc1\\xff\\x7c\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"i16"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3168-0:360:1568":{"id":"b:2:3168-0:360:1568","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3141:134","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3170:666"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3183:1389":{"id":"2:3183:1389","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47467:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3148:215","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6780:3472":{"id":"1:6780:3472","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6781:54330"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5702:3487":{"id":"1:5702:3487","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5703:54012"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2887:172":{"id":"2:2887:172","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2889:590","2:2890:890"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3240:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:7695:3635":{"id":"1:7695:3635","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7696:54481"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3235:199-0:341:1569":{"id":"a:2:3235:199-0:341:1569","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3235:199","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:130:1645":{"id":"0:130:1645","crate_id":0,"name":"write_u16","span":{"filename":"src/io.rs","begin":[1151,4],"end":[1155,5]},"visibility":"default","docs":"Writes an unsigned 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\\x03\\x00\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"u16"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4908:3507":{"id":"1:4908:3507","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4909:3149","1:4910:53983"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4605:2500":{"id":"1:4605:2500","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4606:1940","1:4607:53255","1:4609:53256","1:4610:4668","1:4611:2512","1:4612:53257","1:4613:53258","1:4622:3090"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:242:1768":{"id":"0:242:1768","crate_id":0,"name":"read_i16_into","span":{"filename":"src/lib.rs","begin":[1086,4],"end":[1091,5]},"visibility":"default","docs":"Reads signed 16 bit integers from `src` to `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:255:1834":{"id":"0:255:1834","crate_id":0,"name":"write_i16_into","span":{"filename":"src/lib.rs","begin":[1450,4],"end":[1455,5]},"visibility":"default","docs":"Writes signed 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i16"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:272:59":{"id":"0:272:59","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1810,4],"end":[1812,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"BigEndian","id":"0:341:1569","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:374":{"id":"0:374","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,44],"end":[1836,53]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"StructuralPartialEq","id":"2:3243:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13365:56532":{"id":"2:13365:56532","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10885:202","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:201:1593":{"id":"0:201:1593","crate_id":0,"name":"ByteOrder","span":{"filename":"src/lib.rs","begin":[208,0],"end":[1788,1]},"visibility":"public","docs":"`ByteOrder` describes types that can serialize integers as bytes.\n\nNote that `Self` does not appear anywhere in this trait's definition!\nTherefore, in order to use it, you'll need to use syntax like\n`T::read_u16(&[0, 1])` where `T` implements `ByteOrder`.\n\nThis crate provides two types that implement `ByteOrder`: [`BigEndian`]\nand [`LittleEndian`].\nThis trait is sealed and cannot be implemented for callers to avoid\nbreaking backwards compatibility when adding new derived traits.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, BigEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:202:1597","0:203:1605","0:204:1609","0:205:1616","0:206:1623","0:207:1630","0:208:1606","0:209:1640","0:210:1645","0:211:1647","0:212:1650","0:213:1652","0:214:1654","0:215:1656","0:216:1648","0:217:1661","0:218:1666","0:219:1671","0:220:1677","0:221:1682","0:222:1687","0:223:1692","0:224:1672","0:225:1699","0:226:1705","0:227:1712","0:228:1714","0:229:1716","0:230:1719","0:231:1721","0:232:1723","0:233:1726","0:234:1717","0:235:1728","0:236:1730","0:237:1733","0:238:1742","0:239:1750","0:240:1756","0:241:1762","0:242:1768","0:243:1774","0:244:1778","0:245:1782","0:246:1789","0:247:1795","0:248:1799","0:249:1803","0:250:1806","0:251:1809","0:252:1812","0:253:1815","0:254:1829","0:255:1834","0:256:1836","0:257:1838","0:258:1840","0:259:1842","0:260:1844","0:261:1853","0:262:1858","0:263:1862","0:264:1866","0:265:1871","0:266:1875","0:267:1879","0:268:1883","0:269:1886","0:270:1888"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2857:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3245:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10243:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Default","id":"2:3213:114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2892:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Hash","id":"2:10481:141","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2923:166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2887:172","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2933:173","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"private::Sealed","id":"0:198:1567","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:283","0:312"]}},"2:8406:119":{"id":"2:8406:119","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8407:3056","2:8408:3057","2:8409:3058","2:8410:3059","2:8414:3060","2:8417:3061"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8560:156","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13010:3915":{"id":"2:13010:3915","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13012:3056","2:13013:58337","2:13014:58338"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13004:3911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:205:1616":{"id":"0:205:1616","crate_id":0,"name":"read_u48","span":{"filename":"src/lib.rs","begin":[284,4],"end":[286,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13370:59687":{"id":"2:13370:59687","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3543:3971","str::slice_unchecked":"1:15759:2634","`str`":"1:15759:2634"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13441:59698":{"id":"2:13441:59698","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:218:1666":{"id":"0:218:1666","crate_id":0,"name":"read_i16","span":{"filename":"src/lib.rs","begin":[542,4],"end":[544,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"primitive","inner":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:258:1840":{"id":"0:258:1840","crate_id":0,"name":"write_i128_into","span":{"filename":"src/lib.rs","begin":[1534,4],"end":[1539,5]},"visibility":"default","docs":"Writes signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"i128"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8838:3383":{"id":"2:8838:3383","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8560:156","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:214:1654":{"id":"0:214:1654","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[463,4],"end":[463,41]},"visibility":"default","docs":"Writes an unsigned 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["n",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1836,39],"end":[1836,42]},"visibility":"crate","docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(unused_qualifications)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clamp","min","max"],"trait":{"kind":"resolved_path","inner":{"name":"Ord","id":"2:2923:166","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:373:401"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:91:1699":{"id":"0:91:1699","crate_id":0,"name":"read_int128","span":{"filename":"src/io.rs","begin":[468,4],"end":[472,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["nbytes",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"i128"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2923:166":{"id":"2:2923:166","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2924:401","2:2925:1971","2:2926:3046","2:2927:3053"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2892:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2933:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:304:1812":{"id":"0:304:1812","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2108,4],"end":[2114,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u64"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6474:3541":{"id":"1:6474:3541","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6475:53702","1:6476:53703"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13352:59684":{"id":"2:13352:59684","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3966:1403":{"id":"2:3966:1403","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:45876:3535","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8362:150":{"id":"2:8362:150","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8363:3066","2:8364:3067","2:8365:751"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3702:4045":{"id":"2:3702:4045","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3704:55608"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:312":{"id":"0:312","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2186,0],"end":[2384,1]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_int128","read_f32_into","write_i32","write_u48","write_i24","read_i32_into","write_i64_into","read_i16_into","write_i8_into","write_f64_into","read_i128","from_slice_i32","read_u48","read_i32","read_i24","read_f64_into","write_i128","write_i64","write_int","write_i16","write_u24","read_i64_into","read_f32","write_i32_into","read_int128","write_f32_into","read_i64","from_slice_i64","read_f64_into_unchecked","read_int","read_u24","read_i16","write_f32","write_f64","write_i48","read_i128_into","read_f64","write_i128_into","write_i16_into","from_slice_i128","read_i48","from_slice_i16","read_f32_into_unchecked"],"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"LittleEndian","id":"0:360:1568","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:313:1597","0:314:1609","0:315:1623","0:316:1630","0:317:1606","0:318:1640","0:319:1645","0:320:1650","0:321:1654","0:322:1656","0:323:1648","0:325:1661","0:327:1742","0:328:1750","0:329:1756","0:330:1762","0:331:1806","0:332:1809","0:333:1812","0:334:1815","0:335:1853","0:336:1858","0:337:1862","0:338:1866","0:339:1886","0:340:1888"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8560:156":{"id":"2:8560:156","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8561:3066","2:8562:905","2:8563:3068","2:8566:3069","2:8567:481","2:8569:3070","2:8572:3071","2:8573:3072","2:8574:3073","2:8575:3074","2:8577:1942","2:8579:3075","2:8580:3076","2:8582:824","2:8585:3077","2:8592:3078","2:8594:3079","2:8597:3080","2:8598:3081","2:8599:3082","2:8601:3083","2:8603:3084","2:8606:1284","2:8607:2909","2:8608:3085","2:8612:3086","2:8615:3087","2:8616:3088","2:8617:3089","2:8619:3090","2:8620:2211","2:8622:3091","2:8625:3092","2:8627:3093","2:8637:3094","2:8652:3095","2:8654:3096","2:8658:3097","2:8667:3098","2:8670:3099","2:8672:3100","2:8675:264","2:8682:281","2:8689:3101","2:8696:3102","2:8705:3103","2:8715:998","2:8722:3104","2:8729:1971","2:8730:3046","2:8731:3050","2:8743:3049","2:8750:3048","2:8762:3047","2:8769:3105","2:8770:3106","2:8775:3107","2:8778:3108","2:8781:3109","2:8782:3110","2:8784:3111","2:8786:401","2:8789:3112","2:8792:981","2:8795:3113","2:8798:590","2:8801:3114","2:8804:890","2:8806:809","2:8808:775","2:8810:698","2:8812:681","2:8814:3115","2:8815:3116","2:8823:3117"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:241:1762":{"id":"0:241:1762","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[1062,4],"end":[1062,52]},"visibility":"default","docs":"Reads unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["src",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:106:1762":{"id":"0:106:1762","crate_id":0,"name":"read_u128_into","span":{"filename":"src/io.rs","begin":[673,4],"end":[683,5]},"visibility":"default","docs":"Reads a sequence of unsigned 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["dst",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u128"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:3962:194","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ByteOrder","id":"0:201:1593","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13437:59696":{"id":"2:13437:59696","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"6:5528:7393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:11947:5732":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:6887:7586":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:3708:4047":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:4386:6309":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:13506:6136":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:4995:6327":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:8122:4418":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:53241:7794":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:7467:4794":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:1744:6910":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:1547:6787":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:9521:57678":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:15767:2640":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:7816:4059":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:5542:11006":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:4293:7107":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11915:5722":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:12247:5784":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:14566:8178":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:6464:4805":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:4:963":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:4477:6312":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:46426:4076":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:1497:3550":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:1215:4469":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:12051:5751":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:24114:4317":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:14055:2873":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:24011:39029":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:10814:5203":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:14570:3502":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:47645:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:5436:7373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:5692:3486":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"9:27:4613":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:8122:58313":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"14:189:8130":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:46843:2883":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:5969:7442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:11678:5674":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12287:5789":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:8297:4330":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:12086:3666":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"18:136:52942":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:4417:6310":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:5488:4841":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12385:5822":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:10264:2752":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:3743:5200":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:53270:7797":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:13532:6146":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:47536:167":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:49262:4026":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:1658:6864":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:46647:4075":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:45746:184":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:13318:6086":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"18:820:5245":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:48367:132":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:1156:8161":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:6665:4499":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:2159:3149":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:13685:6210":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:11307:3156":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:6768:5094":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:3064:5115":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4120:7067":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:48376:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"16:6152:4792":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:1596:6818":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:6072:4811":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:51388:4016":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:6250:4454":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:4227:7086":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:4623:2850":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:3702:4045":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:23916:7612":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:4955:6326":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:1505:3552":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:8234:3568":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:3972:6992":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:53097:3980":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:5273:5047":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:6864:7580":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:4355:2878":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:3367:3583":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:8187:3067":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:50281:3534":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:32023:4356":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:13477:6128":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:46536:4081":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:8325:3869":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"12:1100:3557":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:11696:5683":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:1311:5231":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:10271:8185":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:6899:7588":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"9:776:4611":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:13163:6051":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:32204:2915":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"16:3604:5470":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:11184:3793":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"12:1651:4708":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:3406:3902":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:49304:2858":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:45721:183":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:10491:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:11399:3603":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:13540:6149":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:11962:3687":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:3253:3755":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:51515:3993":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5407:7365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:4439:7174":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:49169:3133":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:6238:4795":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:13770:3629":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:46627:2855":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:52005:4017":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:13819:6237":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:50024:4265":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:13789:176":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:12537:5847":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:3033:3119":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:48648:7736":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:8114:3547":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:9217:2964":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:4438:3149":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"12:747:3149":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"12:181:4703":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:10596:2854":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"5:8160:4407":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:10435:8076":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:45904:4044":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:9726:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:14794:3631":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:12777:3161":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:13331:6092":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:11100:5176":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:8363:4409":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:7928:4043":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:9528:5391":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:9039:2956":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:6893:7587":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:5877:3863":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:6101:4788":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:2512:5182":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:11362:3157":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10975:8099":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"12:1667:4709":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:3401:3899":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:1153:8159":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:6176:4862":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:8328:4492":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:14376:7903":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:52214:3994":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:46188:4393":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:3966:6990":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13865:6251":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:4083:7048":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12756:5886":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:46486:4063":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:14000:6283":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:15148:3791":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:3324:3149":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"5:3877:2148":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12208:5779":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:8960:3826":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5312:7317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:6614:7573":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:10061:8071":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"9:1020:4631":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:0:474":{"crate_id":2,"path":["core"],"kind":"module"},"6:5221:7263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"12:2025:3578":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:22792:3525":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:14989:3709":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:3362:3582":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"9:686:4562":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:10254:2748":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:6577:4873":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:8362:150":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:13062:6011":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:7549:4801":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:14338:3530":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:3120:2847":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:6757:2839":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:14807:3667":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:15752:2628":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:48406:126":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:9332:5128":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:6221:7564":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:10885:202":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:7195:4885":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:13429:6113":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:10974:2851":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:5295:45073":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"12:1688:4710":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:4641:6316":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:11269:3155":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:3962:194":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:12559:127":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:50918:4019":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:12985:3912":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:7832:54490":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"1:8825:3839":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"2:23735:4292":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:5885:3865":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:10460:3714":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:5766:4852":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:10543:5596":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:9186:5136":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:7346:174":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:24499:4299":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:11006:2855":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:48677:3603":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:9933:8066":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:14846:3666":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"18:849:5247":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:22940:1567":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:49890:3929":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:537:6715":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:3235:199":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:45911:2762":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:10504:3397":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:8138:3659":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:3280:1535":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:46547:4068":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:2181:3579":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:1534:3556":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:49865:3927":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:2772:4474":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:5960:5042":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:6602:3485":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:12741:5882":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:5632:4846":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"12:2331:3568":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:5063:4190":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:5420:7369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"16:7392:4798":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:3118:5069":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:1690:6887":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"16:5927:4856":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:4401:7156":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:11458:5634":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:2794:4778":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:15776:2649":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:3478:2917":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:1917:471":{"crate_id":2,"path":["core","intrinsics","copy_nonoverlapping"],"kind":"function"},"2:48887:4399":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:15778:2651":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:6068:7479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:3696:136":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:11196:3146":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:13215:39311":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"2:48343:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:3069:1567":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:52892:4011":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:13119:6046":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:11376:3160":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:5386:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:46129:3506":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:10487:141":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"2:22551:58550":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:12431:5832":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:46396:5367":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:12073:5760":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:4033:7022":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:6620:5085":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:13370:6102":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:3567:2861":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:1622:6834":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:9245:5127":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"10:0:2602":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"9:996:4630":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:46157:4134":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:51437:4001":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:3965:5346":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:10481:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:52638:4023":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"12:925:3549":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:46518:4066":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:4823:6322":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:50249:4276":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:13986:6280":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:569:6738":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:53307:7800":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"18:0:2609":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:1450:3545":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:7477:4815":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:7628:1942":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:9886:8065":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:11019:2858":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:610:6760":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7236:4889":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:6569:5087":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:12610:5860":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:3091:5116":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:8105:4417":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"18:720:5452":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:22798:3526":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:9612:3784":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"6:1729:3804":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:994:4416":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:7568:3626":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:11794:5706":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:11164:7875":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:15773:2646":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:6870:7581":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:5293:3791":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:53261:7796":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"9:749:4566":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:3237:2793":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"12:937:3553":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:15760:2635":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"12:784:3550":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12632:5871":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:12142:5769":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:14363:3495":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"18:610:5253":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:3338:3672":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:5702:3487":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:23877:7610":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:13884:6256":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:14061:190":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:10547:11002":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:5717:4849":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"14:194:44997":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:48394:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"16:7073:4880":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:7692:3633":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:11233:3861":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"15:269:4722":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:2325:4471":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:8032:3738":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"1:1486:3548":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:5998:7454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:10403:5147":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"12:1144:3559":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:6935:7595":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:46219:4388":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:5127:2764":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:4183:7082":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:1527:6779":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:11348:3593":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:3218:5061":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:47519:3150":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:11653:5672":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:2754:5046":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:1639:3546":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:6812:7577":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:2196:1034":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:46173:4136":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:10946:2882":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:5882:5357":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"18:801:5243":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:1045:3544":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:5644:3482":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:15751:2627":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:3881:6931":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"9:41:4614":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"6:3918:6959":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:5231:6329":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10844:5148":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:3444:2865":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:0:2608":{"crate_id":17,"path":["object"],"kind":"module"},"17:13574:6157":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:52088:4002":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:37472:167":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"5:5310:189":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:823:5394":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:22992:3976":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:12432:3215":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:6014:4859":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:32163:2914":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:10246:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"5:4510:4516":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"16:7870:4799":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:6126:4860":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:3039:59436":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:51974:4014":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:10953:2884":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:22994:3975":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:10128:5228":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:22947:16220":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:3905:6949":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:3287:5064":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:4300:7108":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:3355:3882":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:8808:3395":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:8841:3384":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:11628:5667":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:5210:7255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:6744:5092":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:5775:3857":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"17:11555:5655":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:2773:5079":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:11015:8102":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:46448:4077":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:15258:4726":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:1708:6894":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:3372:3584":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:14169:3130":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:3365:5045":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:53281:7798":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:46331:4330":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:7378:4797":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:13296:6082":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:46863:7728":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:10317:5126":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10801:8090":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:3957:6985":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:1665:6868":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:14714:5402":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:52781:3991":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:8739:8173":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:7534:3624":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4377:7148":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:8280:3738":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"6:599:6755":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:7216:4887":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:13282:6081":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:11348:3159":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"14:216:45003":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:3484:130":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:12795:5897":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:8873:3658":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:12494:5841":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:11982:3688":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:13842:6250":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:6964:2960":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:4494:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:3034:59435":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:6681:4531":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:5472:4840":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:10052:8070":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:47813:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:50186:190":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:10838:2869":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:49408:3159":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:12507:5842":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:9088:46653":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:10827:5204":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:10962:8098":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:51663:7751":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:2246:2824":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:8388:3686":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:14970:3702":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:9280:1569":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:47373:3066":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:11189:3794":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:46616:4078":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:6136:4832":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:4279:3776":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"12:0:2604":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:5522:7392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6605:4807":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:7420:4814":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:50048:120":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:5815:4854":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:14826:7905":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:6616:7473":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:2399:8166":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:11258:3812":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:1838:5346":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"18:774:5450":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:3350:3969":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:3488:5066":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:6554:4872":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:2733:5030":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:11086:3516":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"16:7823:4804":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:12480:5839":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"12:556:142":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:3370:4426":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:10553:3561":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:7279:5103":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:12456:5836":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:11186:5608":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:7146:4881":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:7886:4029":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:51053:4008":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:15503:5404":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:10876:1567":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:5869:3862":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:13192:6058":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13180:6053":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:2192:3581":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:11492:3149":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:11519:5650":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:5346:4791":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"9:1075:4632":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:46565:4069":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"14:11:8130":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:10673:46840":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:3135:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:32262:58895":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"0:273:1897":{"crate_id":0,"path":["byteorder","BE"],"kind":"typedef"},"2:9721:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:4511:7202":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:13824:8148":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:11907:7892":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:10346:5397":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:9660:5392":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"12:892:4687":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:9649:8061":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:49684:3914":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:7520:3623":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:6087:4790":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"18:885:5250":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:3892:6939":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:9133:46654":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:12229:8169":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:14:1940":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:11665:5673":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:49195:3151":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"12:840:3545":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:9361:54010":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12010:5747":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:10260:178":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:51287:4021":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:432:2920":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:23899:4154":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:4255:3811":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:49596:4254":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:12995:3913":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:1457:3559":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:4023:7019":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:9533:57677":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"17:9719:8062":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:15247:4726":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:1472:3558":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:6208:4863":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:6252:4865":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:10353:5187":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4419:7165":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:5563:7418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:49274:4237":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:13620:6166":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:11303:3470":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:6851:4082":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:4448:6311":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:10750:2867":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:6424:4869":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:4112:7062":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:24601:4301":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:3978:6995":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:5522:4843":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:11231:5174":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:22788:1567":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:13377:8168":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:4992:2763":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:11889:53681":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"0:127:1537":{"crate_id":0,"path":["byteorder","WriteBytesExt"],"kind":"trait"},"1:1623:3557":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:47561:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:49736:3923":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:11499:5640":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"19:117:5445":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"12:2009:3067":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:5118:4191":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:1617:6832":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:1236:8059":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:4704:6318":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:8181:3067":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:2923:166":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:2269:2823":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:12685:5875":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:50240:4275":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:5255:7287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:7695:3635":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:52280:3979":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:14781:3630":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:11498:3608":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:9592:127":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:5330:1569":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:10988:8100":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:3834:5346":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:51158:3988":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:12275:5788":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:10481:3722":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:24737:4304":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:6704:3528":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:4459:7181":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"12:2323:6615":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:2314:5186":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:6947:4402":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:11828:3628":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:49280:4238":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:10611:8086":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:49290:2856":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:24363:4296":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:4210:3547":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5241:7276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"14:244:6560":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:47390:3150":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"18:712:3045":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:4489:2883":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:5459:7379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:3132:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"12:2045:3581":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"12:968:3555":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:4996:4184":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"13:232:6607":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11406:5616":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5185:7250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:1195:59544":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:45897:4043":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"6:4164:7081":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:11588:5662":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:1717:6900":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:4060:7035":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:47340:165":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:3506:5065":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:3112:127":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:10788:8088":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"16:4790:6321":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:15757:2632":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:4690:4050":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:2060:2839":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:3117:1987":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:783:210":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:15232:53675":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:4347:7132":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:50032:4267":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:24049:39030":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:10656:5559":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:48687:7740":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:9627:3785":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:5941:178":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:4632:2839":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:11244:3803":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:1655:3560":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:3454:115":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:24079:7633":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:14983:3708":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:9839:5148":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:9065:46652":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:49578:4252":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:22589:58601":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"12:2013:3547":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"9:469:8535":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:46527:4067":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:6236:3810":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:3330:3961":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:1486:3560":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:49247:4335":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"9:692:4564":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:5290:3790":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:5855:4855":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:10192:194":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:49587:4253":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:5753:4851":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:51484:3989":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:2857:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:6614:7471":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:4623:223":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:13386:6105":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:3962:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"18:660:5256":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:13272:6080":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:2257:4472":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:10279:5120":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:49123:3143":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:5707:4848":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"5:7808:5359":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:3141:134":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:7303:4891":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"12:2039:3580":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:605:6758":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:9943:60540":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:9440:5545":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:9264:1568":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:13210:8147":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"17:294:8055":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:12028:5748":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:9809:60541":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:15777:2650":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:8144:3067":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:2366:586":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:11118:46657":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:3862:6921":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:10260:5614":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"16:7971:126":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:49322:3155":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"0:341:1569":{"crate_id":0,"path":["byteorder","BigEndian"],"kind":"enum"},"17:12946:5919":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:50196:7745":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:2175:3578":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:4127:7069":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:7412:118":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:1501:3551":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:7342:4826":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:3334:3671":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:3964:126":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:10256:2749":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"12:354:6608":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:47855:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"18:811:5244":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:6881:7585":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:11032:3509":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:15754:2630":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:48480:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13590:6160":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:9930:4223":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:12924:3613":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:3247:208":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:55987:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11358:5131":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:14049:2875":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"5:1934:3548":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:11141:53680":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:14097:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:7158:4882":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:6110:4831":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:3018:5057":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:10758:2148":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:11226:3509":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:45790:186":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:5228:7267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:24033:39021":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:9600:60535":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:7804:4802":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:7160:8172":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:51181:3992":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:4852:6323":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:47729:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:15770:2643":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:2187:3580":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:7437:5346":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:10106:5226":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:10448:5146":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:5658:3485":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"13:0:2598":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:5975:4857":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:624:6768":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13054:6009":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:2543:5142":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:50989:3987":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:6491:4870":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:11013:2856":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:24533:3216":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"18:667:5257":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:10570:12007":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:10258:2750":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:6396:4065":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:24635:3636":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:53144:3998":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:48464:2746":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:50016:4264":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:5159:7235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:50263:157":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6166:4861":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:578:6744":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:15765:2638":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:3035:7598":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:10938:8096":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"12:949:3554":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5384:4835":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:5563:4119":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:4350:6308":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:7582:3627":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:12442:5834":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:53375:7804":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:24431:4298":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:21:657":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"9:234:4589":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:10529:5556":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:12126:3668":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:10262:2751":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:32362:58894":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"18:829:5246":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:13713:149":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:5564:3501":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:8560:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:11932:5728":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:13554:6151":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:12456:4368":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"9:157:4581":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:32210:58896":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"5:3743:159":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:4040:7025":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:1522:6777":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:12712:5879":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:45629:3385":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:5347:7338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:50893:7747":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:11738:5688":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:8375:4410":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"12:2315:60519":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:3679:3218":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:7366:3067":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:6858:7579":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"18:744:60545":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:46825:3395":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:12725:5880":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:14353:7895":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:4325:7121":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:0:1307":{"crate_id":1,"path":["std"],"kind":"module"},"2:55961:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3889:4536":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:11254:5172":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:6032:4783":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:47897:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:8546:3819":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:49133:3144":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:8099:3067":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:1760:6915":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:11970:5739":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:14130:3397":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:632:6773":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:12195:5777":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:56039:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:22568:58596":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:13698:137":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"3:0:416":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"18:152:52943":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:49612:3506":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:55974:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3324:3958":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"14:0:2605":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:4506:6313":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"0:41:1536":{"crate_id":0,"path":["byteorder","ReadBytesExt"],"kind":"trait"},"1:10962:2849":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:3800:6304":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:1161:11003":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:4301:3150":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:7843:4894":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:48361:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"19:0:978":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:10532:11000":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:3276:2916":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:13453:6121":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:4013:7013":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:48103:2748":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:13004:3911":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:8282:4490":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:12726:4245":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:5570:3499":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:6085:7484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"12:1200:4697":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:8346:7602":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"6:5978:7448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"16:5314:1568":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:47771:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:50083:4344":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:24465:3741":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:23970:4150":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:10304:5123":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4371:7145":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:1648:3549":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:5147:2766":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:8310:4535":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"17:9769:60532":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"15:230:4717":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:5001:4185":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:5073:2762":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:10266:5183":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:2462:8170":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:11962:5737":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:13377:6104":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:3737:4054":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:46852:7726":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:10531:2788":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:7264:4808":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:4922:6325":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:51239:7750":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:4535:6314":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:13942:6273":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:13221:6066":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6591:4874":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:5421:4837":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:7514:4813":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:5595:4845":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:2213:4428":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:5469:7381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:3245:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"12:160:4699":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"18:729:60542":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:15768:2641":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:46818:7724":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:519:6707":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"16:4671:6317":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13978:6277":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:13396:54496":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"12:2303:6612":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:4594:5349":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"17:13898:6258":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"3:300:194":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:11092:3643":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:1419:3149":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:49603:4255":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:49354:4242":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:7022:2951":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:3481:129":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:11900:54968":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"1:14389:128":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"12:2032:3579":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:2031:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:5589:762":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:12783:5890":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:7406:4796":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:3365:3578":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:10685:3497":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:2401:8167":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:2991:5067":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:5531:4499":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:12081:3647":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:10458:5503":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"18:782:5450":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:10591:4478":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:10468:5145":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:51563:3978":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:11056:3510":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"17:11847:5720":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"9:963:4629":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:4353:2877":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:14939:3700":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:7761:4893":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:11378:5130":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10140:5148":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"12:377:4702":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:12071:3831":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:13733:6211":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:15735:53678":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:3320:5117":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:46279:4392":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:9971:60534":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:6778:3471":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:3772:6303":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:56000:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:6404:211":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:51220:3977":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:24703:4303":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:1136:3536":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:11885:7891":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:13231:3805":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:5415:3798":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:3522:5466":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:11059:3511":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"18:704:5450":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:49223:3153":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:49913:8156":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"16:7185:4884":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:6028:7476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:11304:46658":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:6852:7578":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:13732:3627":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:4387:7151":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:15724:11005":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:1194:11004":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:12095:5761":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:10095:5225":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:2866:5054":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:9005:46650":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:13468:3622":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10179:5554":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:3213:114":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:4364:7143":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:12076:3646":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:46242:4389":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:46834:7725":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"12:1855:144":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:616:6763":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:2843:5053":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:11065:3149":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"0:201:1593":{"crate_id":0,"path":["byteorder","ByteOrder"],"kind":"trait"},"2:48428:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:3253:2768":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:8093:5376":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:1522:3554":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6357:4867":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:6718:5090":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:5783:5346":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:15774:2647":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:53222:3983":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"11:46:6618":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:4394:2874":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:52431:4003":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:8929:46649":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:5652:3484":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:10926:8095":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:3255:3756":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:24669:4302":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:11750:5689":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:13497:6135":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"9:809:3603":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:46348:4331":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:13598:6161":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11572:5657":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:10331:5148":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:47441:2961":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:6645:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:0:2607":{"crate_id":16,"path":["gimli"],"kind":"module"},"18:857:5248":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:10597:1285":{"crate_id":2,"path":["core","slice"],"kind":"module"},"16:3549:6301":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"11:54:4685":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:12066:3654":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:13595:3638":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:10734:117":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:47450:3031":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:10502:5555":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:4314:2875":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:5282:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:38716:3043":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6682:4806":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12467:5837":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:10599:8085":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:13061:3919":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:9488:5390":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:51076:4012":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:1637:3558":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:12659:5873":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10912:8091":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:3148:215":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:5433:4838":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:56013:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4431:7169":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:10584:5206":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"12:761:3150":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"12:877:3548":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:4304:6307":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:49753:3924":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:45869:4049":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:9210:46655":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:51586:3981":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:15775:2648":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"12:866:3547":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:10224:8075":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:2912:5055":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:9925:4222":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:9476:5546":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"11:0:2603":{"crate_id":11,"path":["adler"],"kind":"module"},"5:8430:3548":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:10833:3663":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:3393:3895":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:12742:4248":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:13240:6067":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:13446:6120":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12552:5851":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:2170:3548":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:46236:3506":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:2832:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:27918:3872":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:4073:7041":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13564:6154":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:10587:8178":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:14955:3701":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11726:5687":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:46313:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:8065:2882":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:4523:7207":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:15753:2629":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:13172:6052":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:12106:3667":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:5847:3860":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:1669:3551":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:2548:4475":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:6870:3468":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:2835:3129":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:3243:206":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:3240:2491":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:4340:3067":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:4230:6306":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:13912:6265":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:11159:5607":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:3263:3042":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:11390:3158":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:10321:5395":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:4521:2839":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:46476:4062":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:49114:3145":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:1533:6782":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:47939:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:2748:565":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:50044:4263":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:923:4415":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:6923:7593":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:4517:7204":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:607:8058":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:3318:3955":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:1602:6820":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:13843:3628":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:7237:175":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:5987:7449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:9755:5394":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:48110:2747":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:12699:5878":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:157:39786":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:8838:3383":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:6176:7542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:23985:7620":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:2968:5056":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:15719:8553":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:10742:3768":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:23641:3972":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4193:7083":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:13015:3916":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:9528:2856":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:11089:3517":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:51022:4020":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11822:5716":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:13520:6143":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:11862:3631":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:3336:4425":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:9162:5173":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:10193:2500":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:24101:4318":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:4237:5346":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:53296:7799":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:10028:8068":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:3621:2868":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"0:276:1901":{"crate_id":0,"path":["byteorder","LE"],"kind":"typedef"},"6:511:6702":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:1511:3553":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:11948:3684":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:10211:8074":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:374:4528":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5197:7254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:2887:172":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:49472:4247":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:13748:58870":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:50941:4007":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:11082:5137":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:46211:4256":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:1476:3547":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:10253:5184":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:9218:2963":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:22536:58550":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:10996:2854":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:50293:3533":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:12771:5887":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"9:0:2601":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:6518:4871":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:9849:60539":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:49372:4243":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:48640:2791":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:6376:3466":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5428:7371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:5360:4834":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:8152:183":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:51127:4000":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:49900:3930":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:6636:7574":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:7884:4800":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:14423:53682":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:8406:119":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"5:4694:5351":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:2163:3067":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:13924:6267":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:3346:3967":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:9896:60533":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:49526:4250":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:4215:7085":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:14720:5403":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:4241:7087":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:47687:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:48117:2749":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:51767:7754":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:5379:7351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:46457:4080":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:22523:3045":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:6776:3469":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:7119:4784":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:46435:2854":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:11252:3792":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"16:5029:6328":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10081:5120":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:11835:5717":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:6848:3473":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:10250:118":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"7:85:44627":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:6005:7458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:11779:5700":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:4890:6324":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:14406:117":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"16:6636:4809":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:13154:6047":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:1432:3150":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"9:1056:4624":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:11062:3515":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:11114:2858":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:1011:3149":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:2305:4543":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:3195:5060":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:15769:2642":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:1528:3555":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:46575:4070":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:11089:3150":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:50966:3999":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:3990:7004":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:10887:5593":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:49801:3925":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:46298:4138":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:7295:4810":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:47467:194":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:563:6735":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:3264:5063":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:5400:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:7927:3738":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:11178:3792":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"18:896:5251":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:47511:3149":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:6592:58925":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"6:6100:7490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:3241:5062":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:7554:3625":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:47459:177":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:5274:7289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:11121:7869":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"17:12221:5780":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11539:5651":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:10160:5552":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:48124:2750":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:2889:5073":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:11277:5611":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:5269:7288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:8703:161":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:3295:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:3145:5068":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:23542:3220":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:6214:7561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:49143:3135":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"9:900:6669":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:13402:6109":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:10041:8069":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:9961:8067":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:11330:2952":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:1700:6893":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:57275:7813":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:10252:2747":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:7786:4803":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:2892:123":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"5:8264:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:9799:8064":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:24397:4297":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"9:603:8545":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:12917:5899":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:6644:4875":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:5828:3124":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:14358:7897":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:14413:2849":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:13760:6223":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:8358:135":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:1680:183":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:5945:7425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11993:5744":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:51848:4022":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:48891:3136":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:11604:5663":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:49722:3920":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:49213:3152":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:46556:4083":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:14583:3632":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:10702:3496":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"0:0:2230":{"crate_id":0,"path":["byteorder"],"kind":"module"},"6:5371:7350":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:5561:4844":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:13488:6132":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:10489:5149":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:9074:8173":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:3691:212":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:1592:3149":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:5505:4842":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:9729:60536":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"12:853:3546":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:9759:8063":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13799:6234":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"14:250:6562":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:11714:5684":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:12568:5852":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:9665:5393":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"17:13547:6150":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:12568:5399":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:754:60543":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"0:277:1909":{"crate_id":0,"path":["byteorder","NetworkEndian"],"kind":"typedef"},"1:4614:53693":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:11434:5620":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:5832:3125":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:4005:7010":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:1908:41090":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"0:278:1912":{"crate_id":0,"path":["byteorder","NativeEndian"],"kind":"typedef"},"6:1723:6903":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:2856:169":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"12:2005:3149":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:15766:2639":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:3945:6982":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:4614:6315":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:161:39787":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:46258:4255":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:6780:4877":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:46637:4074":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"12:1762:5344":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:15763:2636":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:4501:7197":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:14876:7906":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:53322:7801":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:4762:6320":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"18:837:3911":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:6354:3463":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:53345:7802":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12118:5767":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:7875:5376":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"2:53360:7803":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:3303:3670":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:2487:2827":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:10571:8083":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:12343:5801":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:48665:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:88:39720":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:7827:3737":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:10828:3662":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:9551:5171":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:10203:133":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:51611:3982":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"14:56:5635":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:1021:3738":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:9034:46651":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6021:5052":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:13963:6276":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:11940:3149":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:51334:4009":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:14698:5401":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:0:2599":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:45956:4173":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:11859:3147":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:47382:3149":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:11439:3605":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:49879:3928":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"14:47:8130":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:51711:7752":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:1442:3067":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:50872:7746":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:5370:4385":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"18:766:5460":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:4157:5207":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:49426:3157":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:8539:3817":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:5170:2765":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:5736:4850":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:8247:3569":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:6239:7567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4046:7027":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:51743:7753":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"15:248:4718":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:15772:2645":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:22570:58598":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:52971:3995":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:49096:3142":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:8431:2918":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:12521:5845":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:25107:4162":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:10558:8080":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:3392:5070":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:11640:5670":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"18:790:5242":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11147:5606":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:7191:8172":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13041:6002":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10516:5150":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:10623:8087":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:49508:4249":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:7856:4895":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:591:6750":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:45705:185":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:15771:2644":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:50040:4262":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"0:360:1568":{"crate_id":0,"path":["byteorder","LittleEndian"],"kind":"enum"},"2:13010:3915":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:8314:4491":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:50070:3673":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:3917:3665":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:5790:4853":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:13205:6063":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13627:6168":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:6807:4878":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:14010:4277":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:11026:8103":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10420:5180":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"12:1180:4696":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:3265:3761":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:7042:5102":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"9:722:4565":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:11030:126":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:1676:6876":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:8189:3738":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"16:2816:5072":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:5714:3490":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:7024:5101":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:11956:3067":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:7205:4886":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:57296:7814":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"5:3483:3548":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:51365:4013":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11337:5132":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:11892:3148":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:15169:3798":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:4392:2873":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:1613:3067":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:3946:3548":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"7:0:1454":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:1563:6795":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:699:3713":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:4702:4051":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:525:6710":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:1463:3546":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:8849:5170":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:4008:8060":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:4133:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"18:636:5450":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:2195:5348":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:13748:54491":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:681:5614":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:6124:7502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:10149:8065":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:7894:4829":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:510:8057":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:51200:7749":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:47398:3067":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"7:38:44620":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:7453:4793":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:49558:2859":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:46596:4072":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:11277:3529":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:3997:7008":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:10377:5185":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:6691:4876":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:13746:6217":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:547:5037":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:4306:7111":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8590:3820":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:2484:46740":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"12:1253:3560":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:3377:3887":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:6910:7592":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:5706:3488":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:13465:6127":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:12168:5564":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:10117:5227":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:2164:564":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:10477:5144":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:15110:3790":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:3868:6922":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:11234:3162":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:13356:6100":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:23806:4293":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:4358:7140":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:22983:1567":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:13348:6097":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:2166:3547":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:6474:3541":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:6999:4879":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:53250:7795":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:13394:6107":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:4883:4183":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"5:5604:1285":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"2:53034:4015":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:6731:5091":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"12:112:60523":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:12327:5796":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:2769:3532":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"18:169:52944":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:543:6718":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:3714:6302":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:3342:3965":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:6106:7491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:3754:3149":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:8954:5138":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:6185:7545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:620:5449":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:3487:131":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:299:8056":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:10950:8097":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:13810:6235":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:14884:3640":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:2260:3905":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:15764:2637":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"18:694:5258":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:49454:4246":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:10695:3495":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:49707:3917":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:11616:5666":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:9404:5544":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:7571:4789":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:5548:7407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:13916:5400":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:1540:6785":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:12182:5776":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:12307:5795":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:8963:3649":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:1646:3559":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:8321:3867":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:11001:8101":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:11157:3161":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11809:5712":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:3939:6305":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"12:429:4700":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:23932:7615":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:6707:3463":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:22591:58599":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:10398:8146":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"5:3331:3579":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:3308:3585":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:7833:5365":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:4927:2761":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:786:5394":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:10407:5181":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:10471:53677":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"17:10071:5230":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11045:46656":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:8374:191":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:15758:2633":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:4548:2337":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"8:0:2600":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:6269:4866":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:45767:187":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:4282:3777":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:10243:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:3070:2741":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:50204:179":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4410:7159":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:3391:3581":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:4066:7038":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"13:120:44969":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:1441:3557":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:50036:4268":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:4281:7100":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:7250:5346":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:4425:7166":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:2586:8171":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"6:4317:7117":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:644:5255":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:11328:5887":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:11995:3689":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"18:650:5252":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:11482:3606":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:7104:5359":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:6091:7486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:45836:3217":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:22851:3975":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:49182:3134":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:15756:2631":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:1572:6801":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:46144:4133":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:7764:222":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:50020:4266":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:4316:2876":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:1584:6810":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:584:6747":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:10526:2787":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:1630:6839":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:2945:5078":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:7738:4892":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4095:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11199:5610":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:49828:3926":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:47981:4334":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:8638:3829":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:903:3718":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:46406:8153":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:5359:7343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:23637:1567":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:6612:7469":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:5167:7237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"12:2018:3548":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:12011:3690":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:10716:128":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:7637:3629":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:3241:3041":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:4182:2885":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"12:1118:3558":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:49568:4251":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:6219:4864":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"18:739:8053":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:10635:5557":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:11767:5697":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:11992:5373":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:11847:3630":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:3610:3219":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:3043:59434":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"12:812:3551":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:51095:7748":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:12671:5874":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:4028:3878":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:9296:5541":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:49105:3141":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:11877:3632":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:897:3717":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:2376:2826":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:1079:3503":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:542:4765":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:2933:173":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:37496:3045":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:10459:1567":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:50012:4261":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:49045:4236":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:13582:6158":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:3951:6983":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:4908:3507":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"5:5410:2839":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:3383:3890":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"5:5868:5355":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:3521:4101":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:5456:4839":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:3539:3570":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:10001:46702":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:32198:2821":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:1602:3150":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:46265:4390":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:4714:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:4276:3775":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:2727:3531":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:50028:4269":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:5898:3866":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:1736:6906":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:11422:3604":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:52245:3997":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:6644:7576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:10864:5592":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:8371:2919":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:3244:205":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:1235:4470":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:53183:4018":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5130:7211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:6468:3547":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:1630:3545":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:2171:2911":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"12:2309:6613":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:5292:7301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:3543:3971":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:8130:59452":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:12408:5831":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:11509:3609":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:7226:4888":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:49204:3154":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:15088:3519":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:45876:3535":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:3138:148":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"18:866:5249":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:1306:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:12582:5854":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:5191:7253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:46135:7709":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:12040:5750":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:52167:3990":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:13098:6041":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:4341:7129":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:5672:4847":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:4638:5351":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:13306:6083":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:6413:4714":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:5580:5035":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:1658:3550":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:9659:60537":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:7205:3547":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"12:469:60520":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:51927:4010":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:12155:5772":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:5953:7430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"12:1159:4695":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:47407:2960":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:23993:7621":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:5996:4858":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:11981:5742":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:12598:5858":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:3397:3897":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:9339:3913":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:531:6713":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:46318:4329":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:46466:4061":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:1091:5346":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:4470:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:6391:4868":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13933:6271":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:13780:6229":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:8845:4028":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:11238:3864":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:7333:4812":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:3389:3893":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:7250:4890":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:46504:7720":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:3467:2860":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:6200:7552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"12:930:3552":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"12:976:3556":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:12982:5950":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6949:5098":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:3338:5044":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:12234:5782":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:3041:5058":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:69:4450":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"9:927:44724":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:49621:4256":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:4203:7084":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:46584:4071":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:1492:3549":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:11026:2859":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:14000:3909":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:55881:4037":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:3767:3150":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:2859:168":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:46272:4391":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:53398:7805":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:9219:2962":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:12051:3825":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:13788:6230":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:47527:3067":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:9574:5139":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:4101:7057":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:45657:4102":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:7174:4883":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:3720:4048":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:12027:3691":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:4262:7088":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11834:170":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"6:4145:7080":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:53437:7806":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:3144:216":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:4745:3908":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:9689:60538":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:2460:8169":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:6366:4715":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:46495:4064":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:23957:4149":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:10236:5141":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:9368:5543":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:6116:3809":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:3357:3580":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:48656:2790":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:8447:4451":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:47603:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:48695:7741":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:8352:204":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:7626:4455":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:45813:188":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:7714:4085":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:4272:7095":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"15:0:2606":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:2437:8168":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:3533:2866":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"12:396:4701":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:6780:3472":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:6469:4079":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:4605:2500":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:6155:7528":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13258:6075":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:3313:3953":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:14052:2877":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:5414:7366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:3239:3751":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:10486:3736":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:46198:4394":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:6051:7477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:3172:5059":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:670:40118":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:3774:4055":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:10200:8073":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:677:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:1689:4467":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:13894:58868":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"12:1235:4698":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4331:7123":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:7604:4454":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:4449:7180":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:2569:126":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"17:12645:5872":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:4478:7189":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:0:265":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:5636:3483":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:4847:4182":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:3543:5375":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:0:781":{"crate_id":6,"path":["libc"],"kind":"module"},"1:15223:7910":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:8902:46648":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:10563:3562":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:10690:3747":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:24567:4300":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"14:231:4412":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:46606:4073":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:12566:3747":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:11482:5635":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:11281:7458":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:8381:3685":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:51538:3996":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:4630:2853":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:12703:4244":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:15759:2634":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:13772:6226":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:7360:183":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:12262:5787":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:13637:6173":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:8090:3131":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:56026:224":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:9237:3524":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:4395:7155":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:4052:7030":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"12:774:3067":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:4734:6319":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:3114:3748":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:5999:3800":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"12:463:60524":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:1554:6790":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:12666:4241":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:5407:4836":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:24086:4361":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:12373:5820":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:38653:2740":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:4566:2848":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:3429:4779":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:13609:6165":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8288:3603":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"}},"external_crates":{"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}