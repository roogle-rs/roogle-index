{"root":306,"crate_version":"1.5.0","includes_private":false,"index":{"0":{"id":0,"crate_id":0,"name":"read_u8","span":{"filename":"src/io.rs","begin":[55,4],"end":[59,5]},"visibility":"default","docs":"Reads an unsigned 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![2, 5]);\nassert_eq!(2, rdr.read_u8().unwrap());\nassert_eq!(5, rdr.read_u8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"73":{"id":73,"crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[348,4],"end":[348,51]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"146":{"id":146,"crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[1945,4],"end":[1947,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"219":{"id":219,"crate_id":2,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"is_mutable":true,"type":{"primitive":"u8"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":true,"is_async":false,"abi":"Rust"},"has_body":true}}},"292":{"id":292,"crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1842,33],"end":[1842,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"__H"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"$crate::hash::Hasher","id":256,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"3":{"id":3,"crate_id":0,"name":"read_u16","span":{"filename":"src/io.rs","begin":[112,4],"end":[116,5]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"76":{"id":76,"crate_id":0,"name":"write_u24","span":{"filename":"src/lib.rs","begin":[406,4],"end":[408,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"149":{"id":149,"crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[1960,4],"end":[1966,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"295":{"id":295,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,39],"end":[1842,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"path":"Ord","id":142,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[294],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"6":{"id":6,"crate_id":0,"name":"read_u24","span":{"filename":"src/io.rs","begin":[165,4],"end":[169,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"79":{"id":79,"crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[467,4],"end":[467,41]},"visibility":"default","docs":"Writes an unsigned 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"152":{"id":152,"crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[1983,4],"end":[1985,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"298":{"id":298,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"path":"PartialEq","id":143,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[297],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"9":{"id":9,"crate_id":0,"name":"read_i32","span":{"filename":"src/io.rs","begin":[243,4],"end":[247,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"82":{"id":82,"crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[526,4],"end":[526,61]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"155":{"id":155,"crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[1998,4],"end":[2009,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"228":{"id":228,"crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"U"},"trait":{"path":"TryFrom","id":229,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}}},"301":{"id":301,"crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1846,4],"end":[1848,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"12":{"id":12,"crate_id":0,"name":"read_u64","span":{"filename":"src/io.rs","begin":[321,4],"end":[325,5]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83]);\nassert_eq!(918733457491587, rdr.read_u64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"85":{"id":85,"crate_id":0,"name":"read_i32","span":{"filename":"src/lib.rs","begin":[590,4],"end":[592,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"158":{"id":158,"crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2031,4],"end":[2033,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"304":{"id":304,"crate_id":0,"name":"NetworkEndian","span":{"filename":"src/lib.rs","begin":[1880,0],"end":[1880,35]},"visibility":"public","docs":"Defines network byte order serialization.\n\nNetwork byte order is defined by [RFC 1700][1] to be big-endian, and is\nreferred to in several protocol specifications.  This type is an alias of\n[`BigEndian`].\n\n[1]: https://tools.ietf.org/html/rfc1700\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, NetworkEndian, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, NetworkEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"15":{"id":15,"crate_id":0,"name":"read_i128","span":{"filename":"src/io.rs","begin":[402,4],"end":[406,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i128::min_value(), rdr.read_i128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"88":{"id":88,"crate_id":0,"name":"read_i128","span":{"filename":"src/lib.rs","begin":[656,4],"end":[658,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"161":{"id":161,"crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2046,4],"end":[2048,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"234":{"id":234,"crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"resolved_path":{"path":"Infallible","id":235,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}},"18":{"id":18,"crate_id":0,"name":"read_uint128","span":{"filename":"src/io.rs","begin":[460,4],"end":[464,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"91":{"id":91,"crate_id":0,"name":"read_f32","span":{"filename":"src/lib.rs","begin":[725,4],"end":[727,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"f32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"164":{"id":164,"crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2061,4],"end":[2063,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"237":{"id":237,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":225,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":229,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[234,236],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"21":{"id":21,"crate_id":0,"name":"read_f64","span":{"filename":"src/io.rs","begin":[530,4],"end":[534,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian double-precision floating point number from a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n]);\nassert_eq!(f64::consts::PI, rdr.read_f64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"f64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"94":{"id":94,"crate_id":0,"name":"write_i24","span":{"filename":"src/lib.rs","begin":[792,4],"end":[794,5]},"visibility":"default","docs":"Writes a signed 24 bit integer `n` to `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"167":{"id":167,"crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2084,4],"end":[2090,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"240":{"id":240,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":38,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":241,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[238],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"24":{"id":24,"crate_id":0,"name":"read_u64_into","span":{"filename":"src/io.rs","begin":[635,4],"end":[642,5]},"visibility":"default","docs":"Reads a sequence of unsigned 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"97":{"id":97,"crate_id":0,"name":"write_i64","span":{"filename":"src/lib.rs","begin":[858,4],"end":[860,5]},"visibility":"default","docs":"Writes a signed 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"170":{"id":170,"crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2114,4],"end":[2123,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"243":{"id":243,"crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"27":{"id":27,"crate_id":0,"name":"read_i16_into","span":{"filename":"src/io.rs","begin":[747,4],"end":[754,5]},"visibility":"default","docs":"Reads a sequence of signed 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"100":{"id":100,"crate_id":0,"name":"write_int128","span":{"filename":"src/lib.rs","begin":[926,4],"end":[928,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i128"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"173":{"id":173,"crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[2128,4],"end":[2130,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"30":{"id":30,"crate_id":0,"name":"read_i128_into","span":{"filename":"src/io.rs","begin":[858,4],"end":[868,5]},"visibility":"default","docs":"Reads a sequence of signed 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"103":{"id":103,"crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[997,4],"end":[997,50]},"visibility":"default","docs":"Reads unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"176":{"id":176,"crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[2143,4],"end":[2145,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"249":{"id":249,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,16],"end":[1812,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Copy","id":137,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"33":{"id":33,"crate_id":0,"name":"read_f64_into","span":{"filename":"src/io.rs","begin":[987,4],"end":[994,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"106":{"id":106,"crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[1066,4],"end":[1066,52]},"visibility":"default","docs":"Reads unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"179":{"id":179,"crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[2164,4],"end":[2166,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"109":{"id":109,"crate_id":0,"name":"read_i64_into","span":{"filename":"src/lib.rs","begin":[1148,4],"end":[1153,5]},"visibility":"default","docs":"Reads signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"182":{"id":182,"crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[2179,4],"end":[2181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"255":{"id":255,"crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1812,33],"end":[1812,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"__H"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"$crate::hash::Hasher","id":256,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"39":{"id":39,"crate_id":0,"name":"write_u8","span":{"filename":"src/io.rs","begin":[1098,4],"end":[1100,5]},"visibility":"default","docs":"Writes an unsigned 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_u8(2).unwrap();\nwtr.write_u8(5).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u8"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"112":{"id":112,"crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/lib.rs","begin":[1242,4],"end":[1244,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f32_into` instead"},"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"185":{"id":185,"crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2204,4],"end":[2206,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"258":{"id":258,"crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1812,39],"end":[1812,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"$crate::cmp::Ordering","id":259,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"42":{"id":42,"crate_id":0,"name":"write_i16","span":{"filename":"src/io.rs","begin":[1178,4],"end":[1182,5]},"visibility":"default","docs":"Writes a signed 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i16::<BigEndian>(193).unwrap();\nwtr.write_i16::<BigEndian>(-132).unwrap();\nassert_eq!(wtr, b\"\\x00\\xc1\\xff\\x7c\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i16"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"115":{"id":115,"crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[1330,4],"end":[1330,51]},"visibility":"default","docs":"Writes unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"188":{"id":188,"crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2219,4],"end":[2221,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"261":{"id":261,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"StructuralPartialEq","id":262,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"45":{"id":45,"crate_id":0,"name":"write_u32","span":{"filename":"src/io.rs","begin":[1259,4],"end":[1263,5]},"visibility":"default","docs":"Writes an unsigned 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u32::<BigEndian>(267).unwrap();\nwtr.write_u32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\x00\\x00\\x01\\x0b\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"118":{"id":118,"crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[1399,4],"end":[1399,53]},"visibility":"default","docs":"Writes unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"191":{"id":191,"crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2234,4],"end":[2236,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"264":{"id":264,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"path":"PartialEq","id":143,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[263],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"48":{"id":48,"crate_id":0,"name":"write_i48","span":{"filename":"src/io.rs","begin":[1340,4],"end":[1344,5]},"visibility":"default","docs":"Writes a signed 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i48::<BigEndian>(-108363435763825).unwrap();\nwtr.write_i48::<BigEndian>(77).unwrap();\nassert_eq!(wtr, b\"\\x9d\\x71\\xab\\xe7\\x97\\x8f\\x00\\x00\\x00\\x00\\x00\\x4d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"121":{"id":121,"crate_id":0,"name":"write_i32_into","span":{"filename":"src/lib.rs","begin":[1484,4],"end":[1489,5]},"visibility":"default","docs":"Writes signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"194":{"id":194,"crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2253,4],"end":[2259,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"267":{"id":267,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,55],"end":[1812,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","le","gt","ge"],"trait":{"path":"PartialOrd","id":144,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[265],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"51":{"id":51,"crate_id":0,"name":"write_u128","span":{"filename":"src/io.rs","begin":[1402,4],"end":[1406,5]},"visibility":"default","docs":"Writes an unsigned 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u128"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"124":{"id":124,"crate_id":0,"name":"write_f32_into","span":{"filename":"src/lib.rs","begin":[1569,4],"end":[1574,5]},"visibility":"default","docs":"Writes IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"f32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"197":{"id":197,"crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2280,4],"end":[2289,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"270":{"id":270,"crate_id":0,"name":"BE","span":{"filename":"src/lib.rs","begin":[1824,0],"end":[1824,24]},"visibility":"public","docs":"A type alias for [`BigEndian`].\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"54":{"id":54,"crate_id":0,"name":"write_int","span":{"filename":"src/io.rs","begin":[1478,4],"end":[1486,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite signed 56 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_int::<BigEndian>(-3548172039376767, 7).unwrap();\nwtr.write_int::<BigEndian>(43, 7).unwrap();\nassert_eq!(wtr, b\"\\xf3\\x64\\xf4\\xd1\\xfd\\xb0\\x81\\x00\\x00\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"127":{"id":127,"crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[1641,4],"end":[1641,43]},"visibility":"default","docs":"Converts the given slice of unsigned 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u32(&mut numbers);\nassert_eq!(numbers, [5u32.to_be(), 65000u32.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"200":{"id":200,"crate_id":0,"name":"LittleEndian","span":{"filename":"src/lib.rs","begin":[1843,0],"end":[1843,24]},"visibility":"public","docs":"Defines little-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"has_stripped_variants":false,"variants":[],"impls":[271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,287,288,290,291,293,295,296,298,300,302,199]}}},"273":{"id":273,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":206,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"57":{"id":57,"crate_id":0,"name":"write_f32","span":{"filename":"src/io.rs","begin":[1541,4],"end":[1545,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian single-precision floating point number to a `Write`:\n\n```rust\nuse std::f32;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f32::<BigEndian>(f32::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x49\\x0f\\xdb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f32"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"130":{"id":130,"crate_id":0,"name":"from_slice_i16","span":{"filename":"src/lib.rs","begin":[1699,4],"end":[1704,5]},"visibility":"default","docs":"Converts the given slice of signed 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 6500];\nBigEndian::from_slice_i16(&mut numbers);\nassert_eq!(numbers, [5i16.to_be(), 6500i16.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"203":{"id":203,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":204,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"276":{"id":276,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":212,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"133":{"id":133,"crate_id":0,"name":"from_slice_i128","span":{"filename":"src/lib.rs","begin":[1774,4],"end":[1779,5]},"visibility":"default","docs":"Converts the given slice of signed 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i128(&mut numbers);\nassert_eq!(numbers, [5i128.to_be(), 65000i128.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"279":{"id":279,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Clone","id":136,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"CloneToUninit","id":221,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[219],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"63":{"id":63,"crate_id":0,"name":"Sealed","span":{"filename":"src/lib.rs","begin":[172,4],"end":[172,23]},"visibility":"public","docs":"Sealed stops crates other than byteorder from implementing any traits\nthat use it.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_dyn_compatible":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"209":{"id":209,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":210,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"282":{"id":282,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":229,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":233,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[228,230],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"66":{"id":66,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,34],"end":[82,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"use":{"source":"crate::io::WriteBytesExt","name":"WriteBytesExt","id":59,"is_glob":false}}},"285":{"id":285,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Clone","id":136,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"path":"ToOwned","id":246,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[242,243,244],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"69":{"id":69,"crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[269,4],"end":[269,35]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"288":{"id":288,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,16],"end":[1842,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Copy","id":137,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"72":{"id":72,"crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[328,4],"end":[328,37]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"145":{"id":145,"crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[1940,4],"end":[1942,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"291":{"id":291,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,29],"end":[1842,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"path":"Eq","id":140,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"2":{"id":2,"crate_id":0,"name":"read_i8","span":{"filename":"src/io.rs","begin":[85,4],"end":[89,5]},"visibility":"default","docs":"Reads a signed 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![0x02, 0xfb]);\nassert_eq!(2, rdr.read_i8().unwrap());\nassert_eq!(-5, rdr.read_i8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"75":{"id":75,"crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[387,4],"end":[387,41]},"visibility":"default","docs":"Writes an unsigned 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_u16(&mut buf, 1_000);\nassert_eq!(1_000, LittleEndian::read_u16(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"148":{"id":148,"crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[1955,4],"end":[1957,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"294":{"id":294,"crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1842,39],"end":[1842,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"$crate::cmp::Ordering","id":259,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"5":{"id":5,"crate_id":0,"name":"read_i16","span":{"filename":"src/io.rs","begin":[139,4],"end":[143,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0xc1, 0xff, 0x7c]);\nassert_eq!(193, rdr.read_i16::<BigEndian>().unwrap());\nassert_eq!(-132, rdr.read_i16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"78":{"id":78,"crate_id":0,"name":"write_u48","span":{"filename":"src/lib.rs","begin":[446,4],"end":[448,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"151":{"id":151,"crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[1978,4],"end":[1980,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"224":{"id":224,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":222,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":225,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[223],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"297":{"id":297,"crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"8":{"id":8,"crate_id":0,"name":"read_u32","span":{"filename":"src/io.rs","begin":[217,4],"end":[221,5]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"81":{"id":81,"crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[506,4],"end":[506,57]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"154":{"id":154,"crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[1993,4],"end":[1995,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"227":{"id":227,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":222,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[226],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"300":{"id":300,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,55],"end":[1842,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["lt","le","gt","ge"],"trait":{"path":"PartialOrd","id":144,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[299],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"11":{"id":11,"crate_id":0,"name":"read_i48","span":{"filename":"src/io.rs","begin":[295,4],"end":[299,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x9d, 0x71, 0xab, 0xe7, 0x97, 0x8f]);\nassert_eq!(-108363435763825, rdr.read_i48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"84":{"id":84,"crate_id":0,"name":"read_i24","span":{"filename":"src/lib.rs","begin":[568,4],"end":[570,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"157":{"id":157,"crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2026,4],"end":[2028,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"230":{"id":230,"crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"path":"Result","id":231,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"U"},"trait":{"path":"TryFrom","id":229,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"303":{"id":303,"crate_id":0,"name":"LE","span":{"filename":"src/lib.rs","begin":[1854,0],"end":[1854,27]},"visibility":"public","docs":"A type alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"14":{"id":14,"crate_id":0,"name":"read_u128","span":{"filename":"src/io.rs","begin":[376,4],"end":[380,5]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83,\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83\n]);\nassert_eq!(16947640962301618749969007319746179, rdr.read_u128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"87":{"id":87,"crate_id":0,"name":"read_i64","span":{"filename":"src/lib.rs","begin":[634,4],"end":[636,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"160":{"id":160,"crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2041,4],"end":[2043,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"306":{"id":306,"crate_id":0,"name":"byteorder","span":{"filename":"src/lib.rs","begin":[1,0],"end":[3975,1]},"visibility":"public","docs":"This crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].\n\nThe organization of the crate is pretty simple. A trait, [`ByteOrder`], specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]\nand [`LittleEndian`] implement these methods. Finally, [`ReadBytesExt`] and\n[`WriteBytesExt`] provide convenience methods available to all types that\nimplement [`Read`] and [`Write`].\n\nAn alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve\ncode clarity.\n\nAn additional alias, [`NativeEndian`], is provided for the endianness of the\nlocal platform. This is convenient when serializing data for use and\nconversions are not desired.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`] type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a [`Write`] type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n\n# Optional Features\n\nThis crate optionally provides support for 128 bit values (`i128` and `u128`)\nwhen built with the `i128` feature enabled.\n\nThis crate can also be used without the standard library.\n\n# Alternatives\n\nNote that as of Rust 1.32, the standard numeric types provide built-in methods\nlike `to_le_bytes` and `from_le_bytes`, which support some of the same use\ncases.\n\n[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness\n[`ByteOrder`]: trait.ByteOrder.html\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`ReadBytesExt`]: trait.ReadBytesExt.html\n[`WriteBytesExt`]: trait.WriteBytesExt.html\n[`NetworkEndian`]: type.NetworkEndian.html\n[`NativeEndian`]: type.NativeEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":["#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":[65,66,4,172,270,200,303,304,305],"is_stripped":false}}},"17":{"id":17,"crate_id":0,"name":"read_int","span":{"filename":"src/io.rs","begin":[452,4],"end":[456,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xc1, 0xff, 0x7c]);\nassert_eq!(-4063364, rdr.read_int::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"90":{"id":90,"crate_id":0,"name":"read_int128","span":{"filename":"src/lib.rs","begin":[702,4],"end":[704,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"163":{"id":163,"crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2056,4],"end":[2058,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"236":{"id":236,"crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"path":"Result","id":231,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"constraints":[]}},"self_type":{"generic":"T"},"trait":{"path":"TryFrom","id":229,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"20":{"id":20,"crate_id":0,"name":"read_f32","span":{"filename":"src/io.rs","begin":[499,4],"end":[503,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian single-precision floating point number from a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n]);\nassert_eq!(f32::consts::PI, rdr.read_f32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"f32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"93":{"id":93,"crate_id":0,"name":"write_i16","span":{"filename":"src/lib.rs","begin":[770,4],"end":[772,5]},"visibility":"default","docs":"Writes a signed 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i16"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"166":{"id":166,"crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2075,4],"end":[2081,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"23":{"id":23,"crate_id":0,"name":"read_u32_into","span":{"filename":"src/io.rs","begin":[597,4],"end":[604,5]},"visibility":"default","docs":"Reads a sequence of unsigned 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"96":{"id":96,"crate_id":0,"name":"write_i48","span":{"filename":"src/lib.rs","begin":[836,4],"end":[838,5]},"visibility":"default","docs":"Writes a signed 48 bit integer `n` to `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"169":{"id":169,"crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2102,4],"end":[2111,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"242":{"id":242,"crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"type":{"generic":"T"}}}},"26":{"id":26,"crate_id":0,"name":"read_i8_into","span":{"filename":"src/io.rs","begin":[716,4],"end":[719,5]},"visibility":"default","docs":"Reads a sequence of signed 8 bit integers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to read into a `&mut [i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `i8` individually.)\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 251, 3]);\nlet mut dst = [0; 3];\nrdr.read_i8_into(&mut dst).unwrap();\nassert_eq!([2, -5, 3], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i8"}}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"99":{"id":99,"crate_id":0,"name":"write_int","span":{"filename":"src/lib.rs","begin":[903,4],"end":[905,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"172":{"id":172,"crate_id":0,"name":"BigEndian","span":{"filename":"src/lib.rs","begin":[1813,0],"end":[1813,21]},"visibility":"public","docs":"Defines big-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 4];\nBigEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, BigEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"has_stripped_variants":false,"variants":[],"impls":[201,203,205,207,209,211,214,217,220,224,227,232,237,240,245,248,249,253,254,257,260,261,264,267,269,171]}}},"245":{"id":245,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Clone","id":136,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"path":"ToOwned","id":246,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[242,243,244],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"29":{"id":29,"crate_id":0,"name":"read_i64_into","span":{"filename":"src/io.rs","begin":[820,4],"end":[827,5]},"visibility":"default","docs":"Reads a sequence of signed 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"102":{"id":102,"crate_id":0,"name":"write_f64","span":{"filename":"src/lib.rs","begin":[972,4],"end":[974,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"f64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"175":{"id":175,"crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[2138,4],"end":[2140,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"248":{"id":248,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,9],"end":[1812,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"path":"Clone","id":136,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[247],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"32":{"id":32,"crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/io.rs","begin":[948,4],"end":[953,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\n\nReads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f32_into` instead"},"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"105":{"id":105,"crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[1043,4],"end":[1043,50]},"visibility":"default","docs":"Reads unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"178":{"id":178,"crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[2156,4],"end":[2161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"35":{"id":35,"crate_id":0,"name":"ReadBytesExt","span":{"filename":"src/io.rs","begin":[30,0],"end":[1045,1]},"visibility":"public","docs":"Extends [`Read`] with methods for reading numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`]:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_dyn_compatible":false,"items":[0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"io::Read","id":36,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[37]}}},"108":{"id":108,"crate_id":0,"name":"read_i32_into","span":{"filename":"src/lib.rs","begin":[1119,4],"end":[1124,5]},"visibility":"default","docs":"Reads signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"181":{"id":181,"crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[2174,4],"end":[2176,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"254":{"id":254,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,29],"end":[1812,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"path":"Eq","id":140,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"111":{"id":111,"crate_id":0,"name":"read_f32_into","span":{"filename":"src/lib.rs","begin":[1207,4],"end":[1213,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"184":{"id":184,"crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2194,4],"end":[2201,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"257":{"id":257,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,33],"end":[1812,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"path":"Hash","id":141,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[255],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"41":{"id":41,"crate_id":0,"name":"write_u16","span":{"filename":"src/io.rs","begin":[1151,4],"end":[1155,5]},"visibility":"default","docs":"Writes an unsigned 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\\x03\\x00\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u16"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"114":{"id":114,"crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/lib.rs","begin":[1305,4],"end":[1307,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f64_into` instead"},"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"187":{"id":187,"crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2214,4],"end":[2216,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"260":{"id":260,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,39],"end":[1812,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"path":"Ord","id":142,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[258],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"44":{"id":44,"crate_id":0,"name":"write_i24","span":{"filename":"src/io.rs","begin":[1232,4],"end":[1236,5]},"visibility":"default","docs":"Writes a signed 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i24::<BigEndian>(-34253).unwrap();\nwtr.write_i24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\xff\\x7a\\x33\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"117":{"id":117,"crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[1376,4],"end":[1376,51]},"visibility":"default","docs":"Writes unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"190":{"id":190,"crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2229,4],"end":[2231,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"263":{"id":263,"crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"primitive":"bool"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"47":{"id":47,"crate_id":0,"name":"write_u48","span":{"filename":"src/io.rs","begin":[1313,4],"end":[1317,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u48::<BigEndian>(52360336390828).unwrap();\nwtr.write_u48::<BigEndian>(541).unwrap();\nassert_eq!(wtr, b\"\\x2f\\x9f\\x17\\x40\\x3a\\xac\\x00\\x00\\x00\\x00\\x02\\x1d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"120":{"id":120,"crate_id":0,"name":"write_i16_into","span":{"filename":"src/lib.rs","begin":[1456,4],"end":[1461,5]},"visibility":"default","docs":"Writes signed 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"193":{"id":193,"crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2244,4],"end":[2250,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"50":{"id":50,"crate_id":0,"name":"write_i64","span":{"filename":"src/io.rs","begin":[1394,4],"end":[1398,5]},"visibility":"default","docs":"Writes a signed 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i64::<BigEndian>(i64::min_value()).unwrap();\nwtr.write_i64::<BigEndian>(i64::max_value()).unwrap();\nassert_eq!(wtr, b\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"123":{"id":123,"crate_id":0,"name":"write_i128_into","span":{"filename":"src/lib.rs","begin":[1540,4],"end":[1545,5]},"visibility":"default","docs":"Writes signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"196":{"id":196,"crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2271,4],"end":[2277,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"269":{"id":269,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1815,0],"end":[1819,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Default","id":139,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[268],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"53":{"id":53,"crate_id":0,"name":"write_uint","span":{"filename":"src/io.rs","begin":[1442,4],"end":[1450,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite unsigned 40 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_uint::<BigEndian>(312550384361, 5).unwrap();\nwtr.write_uint::<BigEndian>(43, 5).unwrap();\nassert_eq!(wtr, b\"\\x48\\xc5\\x74\\x62\\xe9\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"126":{"id":126,"crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[1622,4],"end":[1622,43]},"visibility":"default","docs":"Converts the given slice of unsigned 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u16(&mut numbers);\nassert_eq!(numbers, [5u16.to_be(), 65000u16.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"199":{"id":199,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2126,0],"end":[2302,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_u24","read_u48","write_u24","write_u48","read_i16","read_i24","read_i32","read_i48","read_i64","read_i128","read_int","read_int128","read_f32","read_f64","write_i16","write_i24","write_i32","write_i48","write_i64","write_i128","write_int","write_int128","write_f32","write_f64","read_i16_into","read_i32_into","read_i64_into","read_i128_into","read_f32_into","read_f32_into_unchecked","read_f64_into","read_f64_into_unchecked","write_i8_into","write_i16_into","write_i32_into","write_i64_into","write_i128_into","write_f32_into","write_f64_into","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_i128"],"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"272":{"id":272,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Sync","id":204,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"56":{"id":56,"crate_id":0,"name":"write_int128","span":{"filename":"src/io.rs","begin":[1508,4],"end":[1516,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i128"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"129":{"id":129,"crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[1679,4],"end":[1679,45]},"visibility":"default","docs":"Converts the given slice of unsigned 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u128(&mut numbers);\nassert_eq!(numbers, [5u128.to_be(), 65000u128.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"275":{"id":275,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"UnwindSafe","id":210,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"59":{"id":59,"crate_id":0,"name":"WriteBytesExt","span":{"filename":"src/io.rs","begin":[1073,0],"end":[1575,1]},"visibility":"public","docs":"Extends [`Write`] with methods for writing numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a [`Write`]:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, vec![2, 5, 3, 0]);\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_dyn_compatible":false,"items":[39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"io::Write","id":60,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[61]}}},"132":{"id":132,"crate_id":0,"name":"from_slice_i64","span":{"filename":"src/lib.rs","begin":[1749,4],"end":[1754,5]},"visibility":"default","docs":"Converts the given slice of signed 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i64(&mut numbers);\nassert_eq!(numbers, [5i64.to_be(), 65000i64.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"205":{"id":205,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Freeze","id":206,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"278":{"id":278,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":38,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":218,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[216],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"135":{"id":135,"crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[1793,4],"end":[1793,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 double-precision (8 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"281":{"id":281,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"From","id":222,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[226],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"65":{"id":65,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,20],"end":[82,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"use":{"source":"crate::io::ReadBytesExt","name":"ReadBytesExt","id":35,"is_glob":false}}},"211":{"id":211,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"RefUnwindSafe","id":212,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"284":{"id":284,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"path":"Sized","id":38,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Any","id":241,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[238],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"68":{"id":68,"crate_id":0,"name":"read_u24","span":{"filename":"src/lib.rs","begin":[248,4],"end":[250,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"214":{"id":214,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":38,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":215,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[213],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"287":{"id":287,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,9],"end":[1842,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"path":"Clone","id":136,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[286],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"71":{"id":71,"crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[309,4],"end":[309,35]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"217":{"id":217,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":38,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"BorrowMut","id":218,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[216],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"290":{"id":290,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,22],"end":[1842,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":138,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[289],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"74":{"id":74,"crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[368,4],"end":[368,55]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"147":{"id":147,"crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[1950,4],"end":[1952,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"220":{"id":220,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Clone","id":136,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"CloneToUninit","id":221,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[219],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"293":{"id":293,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,33],"end":[1842,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"path":"Hash","id":141,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[292],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"4":{"id":4,"crate_id":0,"name":"ByteOrder","span":{"filename":"src/lib.rs","begin":[212,0],"end":[1794,1]},"visibility":"public","docs":"`ByteOrder` describes types that can serialize integers as bytes.\n\nNote that `Self` does not appear anywhere in this trait's definition!\nTherefore, in order to use it, you'll need to use syntax like\n`T::read_u16(&[0, 1])` where `T` implements `ByteOrder`.\n\nThis crate provides two types that implement `ByteOrder`: [`BigEndian`]\nand [`LittleEndian`].\nThis trait is sealed and cannot be implemented for callers to avoid\nbreaking backwards compatibility when adding new derived traits.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, BigEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_dyn_compatible":false,"items":[67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"path":"Clone","id":136,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Copy","id":137,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Debug","id":138,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Default","id":139,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Eq","id":140,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Hash","id":141,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Ord","id":142,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"PartialEq","id":143,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"PartialOrd","id":144,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"private::Sealed","id":63,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[171,199]}}},"77":{"id":77,"crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[427,4],"end":[427,41]},"visibility":"default","docs":"Writes an unsigned 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"150":{"id":150,"crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[1969,4],"end":[1975,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"223":{"id":223,"crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":222},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"296":{"id":296,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"StructuralPartialEq","id":262,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"7":{"id":7,"crate_id":0,"name":"read_i24","span":{"filename":"src/io.rs","begin":[191,4],"end":[195,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"80":{"id":80,"crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[486,4],"end":[486,43]},"visibility":"default","docs":"Writes an unsigned 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"153":{"id":153,"crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[1988,4],"end":[1990,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"226":{"id":226,"crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"299":{"id":299,"crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1842,55],"end":[1842,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"$crate::option::Option","id":266,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"$crate::cmp::Ordering","id":259,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"10":{"id":10,"crate_id":0,"name":"read_u48","span":{"filename":"src/io.rs","begin":[269,4],"end":[273,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xb6, 0x71, 0x6b, 0xdc, 0x2b, 0x31]);\nassert_eq!(200598257150769, rdr.read_u48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"83":{"id":83,"crate_id":0,"name":"read_i16","span":{"filename":"src/lib.rs","begin":[546,4],"end":[548,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i16"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"156":{"id":156,"crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2012,4],"end":[2023,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"302":{"id":302,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1845,0],"end":[1849,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Default","id":139,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[301],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"13":{"id":13,"crate_id":0,"name":"read_i64","span":{"filename":"src/io.rs","begin":[347,4],"end":[351,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i64::min_value(), rdr.read_i64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"86":{"id":86,"crate_id":0,"name":"read_i48","span":{"filename":"src/lib.rs","begin":[612,4],"end":[614,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"159":{"id":159,"crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2036,4],"end":[2038,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"232":{"id":232,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"TryFrom","id":229,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryInto","id":233,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[228,230],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"305":{"id":305,"crate_id":0,"name":"NativeEndian","span":{"filename":"src/lib.rs","begin":[1891,0],"end":[1891,37]},"visibility":"public","docs":"Defines system native-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\nOn this platform, this is an alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":["#[cfg(target_endian = \"little\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"16":{"id":16,"crate_id":0,"name":"read_uint","span":{"filename":"src/io.rs","begin":[427,4],"end":[431,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0x74, 0xfa]);\nassert_eq!(8418554, rdr.read_uint::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"89":{"id":89,"crate_id":0,"name":"read_int","span":{"filename":"src/lib.rs","begin":[679,4],"end":[681,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"162":{"id":162,"crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2051,4],"end":[2053,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"19":{"id":19,"crate_id":0,"name":"read_int128","span":{"filename":"src/io.rs","begin":[468,4],"end":[472,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"92":{"id":92,"crate_id":0,"name":"read_f64","span":{"filename":"src/lib.rs","begin":[748,4],"end":[750,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"f64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"165":{"id":165,"crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2066,4],"end":[2072,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"238":{"id":238,"crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"TypeId","id":239,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"22":{"id":22,"crate_id":0,"name":"read_u16_into","span":{"filename":"src/io.rs","begin":[562,4],"end":[569,5]},"visibility":"default","docs":"Reads a sequence of unsigned 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"95":{"id":95,"crate_id":0,"name":"write_i32","span":{"filename":"src/lib.rs","begin":[814,4],"end":[816,5]},"visibility":"default","docs":"Writes a signed 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"168":{"id":168,"crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2093,4],"end":[2099,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"25":{"id":25,"crate_id":0,"name":"read_u128_into","span":{"filename":"src/io.rs","begin":[673,4],"end":[683,5]},"visibility":"default","docs":"Reads a sequence of unsigned 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"98":{"id":98,"crate_id":0,"name":"write_i128","span":{"filename":"src/lib.rs","begin":[880,4],"end":[882,5]},"visibility":"default","docs":"Writes a signed 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read n-byte `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i128"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"171":{"id":171,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1938,0],"end":[2124,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_u24","read_u48","write_u24","write_u48","read_i16","read_i24","read_i32","read_i48","read_i64","read_i128","read_int","read_int128","read_f32","read_f64","write_i16","write_i24","write_i32","write_i48","write_i64","write_i128","write_int","write_int128","write_f32","write_f64","read_i16_into","read_i32_into","read_i64_into","read_i128_into","read_f32_into","read_f32_into_unchecked","read_f64_into","read_f64_into_unchecked","write_i8_into","write_i16_into","write_i32_into","write_i64_into","write_i128_into","write_f32_into","write_f64_into","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_i128"],"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"244":{"id":244,"crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"28":{"id":28,"crate_id":0,"name":"read_i32_into","span":{"filename":"src/io.rs","begin":[782,4],"end":[789,5]},"visibility":"default","docs":"Reads a sequence of signed 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"101":{"id":101,"crate_id":0,"name":"write_f32","span":{"filename":"src/lib.rs","begin":[949,4],"end":[951,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"f32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"174":{"id":174,"crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[2133,4],"end":[2135,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"247":{"id":247,"crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1812,9],"end":[1812,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"31":{"id":31,"crate_id":0,"name":"read_f32_into","span":{"filename":"src/io.rs","begin":[902,4],"end":[909,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"104":{"id":104,"crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[1020,4],"end":[1020,50]},"visibility":"default","docs":"Reads unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"177":{"id":177,"crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[2148,4],"end":[2153,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"250":{"id":250,"crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1812,22],"end":[1812,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"$crate::fmt::Formatter","id":251,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"$crate::fmt::Result","id":252,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"34":{"id":34,"crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/io.rs","begin":[1039,4],"end":[1044,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Safety\n\nThis method is unsafe because there are no guarantees made about the\nfloating point values. In particular, this method does not check for\nsignaling NaNs, which may result in undefined behavior.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f64_into` instead"},"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"107":{"id":107,"crate_id":0,"name":"read_i16_into","span":{"filename":"src/lib.rs","begin":[1090,4],"end":[1095,5]},"visibility":"default","docs":"Reads signed 16 bit integers from `src` to `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"180":{"id":180,"crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[2169,4],"end":[2171,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"253":{"id":253,"crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,22],"end":[1812,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Debug","id":138,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[250],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"37":{"id":37,"crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1049,0],"end":[1049,48]},"visibility":"default","docs":"All types that implement `Read` get methods defined in `ReadBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"io::Read","id":36,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":38,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["read_u8","read_i8","read_u16","read_i16","read_u24","read_i24","read_u32","read_i32","read_u48","read_i48","read_u64","read_i64","read_u128","read_i128","read_uint","read_int","read_uint128","read_int128","read_f32","read_f64","read_u16_into","read_u32_into","read_u64_into","read_u128_into","read_i8_into","read_i16_into","read_i32_into","read_i64_into","read_i128_into","read_f32_into","read_f32_into_unchecked","read_f64_into","read_f64_into_unchecked"],"trait":{"path":"ReadBytesExt","id":35,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"generic":"R"},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"110":{"id":110,"crate_id":0,"name":"read_i128_into","span":{"filename":"src/lib.rs","begin":[1177,4],"end":[1182,5]},"visibility":"default","docs":"Reads signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"183":{"id":183,"crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[2184,4],"end":[2191,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"40":{"id":40,"crate_id":0,"name":"write_i8","span":{"filename":"src/io.rs","begin":[1126,4],"end":[1128,5]},"visibility":"default","docs":"Writes a signed 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_i8(2).unwrap();\nwtr.write_i8(-5).unwrap();\nassert_eq!(wtr, b\"\\x02\\xfb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i8"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"113":{"id":113,"crate_id":0,"name":"read_f64_into","span":{"filename":"src/lib.rs","begin":[1269,4],"end":[1275,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"186":{"id":186,"crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2209,4],"end":[2211,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"43":{"id":43,"crate_id":0,"name":"write_u24","span":{"filename":"src/io.rs","begin":[1205,4],"end":[1209,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u24::<BigEndian>(267).unwrap();\nwtr.write_u24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\x00\\x01\\x0b\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"116":{"id":116,"crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[1353,4],"end":[1353,51]},"visibility":"default","docs":"Writes unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"189":{"id":189,"crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2224,4],"end":[2226,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"46":{"id":46,"crate_id":0,"name":"write_i32","span":{"filename":"src/io.rs","begin":[1286,4],"end":[1290,5]},"visibility":"default","docs":"Writes a signed 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i32::<BigEndian>(-34253).unwrap();\nwtr.write_i32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\xff\\xff\\x7a\\x33\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"119":{"id":119,"crate_id":0,"name":"write_i8_into","span":{"filename":"src/lib.rs","begin":[1428,4],"end":[1433,5]},"visibility":"default","docs":"Writes signed 8 bit integers from `src` into `dst`.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to write from a `&[i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `u8` individually.)\n\n# Panics\n\nPanics when `buf.len() != src.len()`.\n\n# Examples\n\nWrite and read `i8` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian, ReadBytesExt};\n\nlet mut bytes = [0; 4];\nlet numbers_given = [1, 2, 0xf, 0xe];\nLittleEndian::write_i8_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nbytes.as_ref().read_i8_into(&mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"192":{"id":192,"crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2239,4],"end":[2241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"265":{"id":265,"crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1812,55],"end":[1812,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"$crate::option::Option","id":266,"args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"path":"$crate::cmp::Ordering","id":259,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"49":{"id":49,"crate_id":0,"name":"write_u64","span":{"filename":"src/io.rs","begin":[1367,4],"end":[1371,5]},"visibility":"default","docs":"Writes an unsigned 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u64::<BigEndian>(918733457491587).unwrap();\nwtr.write_u64::<BigEndian>(143).unwrap();\nassert_eq!(wtr, b\"\\x00\\x03\\x43\\x95\\x4d\\x60\\x86\\x83\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"122":{"id":122,"crate_id":0,"name":"write_i64_into","span":{"filename":"src/lib.rs","begin":[1512,4],"end":[1517,5]},"visibility":"default","docs":"Writes signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"i64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"195":{"id":195,"crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2262,4],"end":[2268,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"268":{"id":268,"crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1816,4],"end":[1818,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[],"output":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"52":{"id":52,"crate_id":0,"name":"write_i128","span":{"filename":"src/io.rs","begin":[1410,4],"end":[1414,5]},"visibility":"default","docs":"Writes a signed 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i128"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"125":{"id":125,"crate_id":0,"name":"write_f64_into","span":{"filename":"src/lib.rs","begin":[1598,4],"end":[1603,5]},"visibility":"default","docs":"Writes IEEE754 double-precision (8 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"f64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"198":{"id":198,"crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2292,4],"end":[2301,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"271":{"id":271,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":202,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"55":{"id":55,"crate_id":0,"name":"write_uint128","span":{"filename":"src/io.rs","begin":[1493,4],"end":[1501,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"128":{"id":128,"crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[1660,4],"end":[1660,43]},"visibility":"default","docs":"Converts the given slice of unsigned 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u64(&mut numbers);\nassert_eq!(numbers, [5u64.to_be(), 65000u64.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"201":{"id":201,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Send","id":202,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"274":{"id":274,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":208,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"58":{"id":58,"crate_id":0,"name":"write_f64","span":{"filename":"src/io.rs","begin":[1570,4],"end":[1574,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian double-precision floating point number to a `Write`:\n\n```rust\nuse std::f64;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f64::<BigEndian>(f64::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x09\\x21\\xfb\\x54\\x44\\x2d\\x18\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f64"}]],"output":{"resolved_path":{"path":"Result","id":1,"args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"ByteOrder","id":4,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"131":{"id":131,"crate_id":0,"name":"from_slice_i32","span":{"filename":"src/lib.rs","begin":[1724,4],"end":[1729,5]},"visibility":"default","docs":"Converts the given slice of signed 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i32(&mut numbers);\nassert_eq!(numbers, [5i32.to_be(), 65000i32.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"277":{"id":277,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"path":"Sized","id":38,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Borrow","id":215,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[213],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"61":{"id":61,"crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1579,0],"end":[1579,50]},"visibility":"default","docs":"All types that implement `Write` get methods defined in `WriteBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"path":"io::Write","id":60,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"path":"Sized","id":38,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"is_synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_u8","write_i8","write_u16","write_i16","write_u24","write_i24","write_u32","write_i32","write_u48","write_i48","write_u64","write_i64","write_u128","write_i128","write_uint","write_int","write_uint128","write_int128","write_f32","write_f64"],"trait":{"path":"WriteBytesExt","id":59,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"generic":"W"},"items":[],"is_negative":false,"is_synthetic":false,"blanket_impl":null}}},"134":{"id":134,"crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[1786,4],"end":[1786,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 single-precision (4 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"207":{"id":207,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"path":"Unpin","id":208,"args":{"angle_bracketed":{"args":[],"constraints":[]}}},"for":{"resolved_path":{"path":"BigEndian","id":172,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[],"is_negative":false,"is_synthetic":true,"blanket_impl":null}}},"280":{"id":280,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"From","id":222,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"Into","id":225,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[223],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"283":{"id":283,"crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"is_synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"path":"Into","id":225,"args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"constraints":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"path":"TryFrom","id":229,"args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"constraints":[]}}},"for":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"items":[234,236],"is_negative":false,"is_synthetic":false,"blanket_impl":{"generic":"T"}}}},"67":{"id":67,"crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[229,4],"end":[229,35]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":false}}},"213":{"id":213,"crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"286":{"id":286,"crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1842,9],"end":[1842,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"path":"LittleEndian","id":200,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"70":{"id":70,"crate_id":0,"name":"read_u48","span":{"filename":"src/lib.rs","begin":[288,4],"end":[290,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"216":{"id":216,"crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"generic":"T"}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}},"289":{"id":289,"crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1842,22],"end":[1842,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"sig":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"is_mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"is_mutable":true,"type":{"resolved_path":{"path":"$crate::fmt::Formatter","id":251,"args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"constraints":[]}}}}}}]],"output":{"resolved_path":{"path":"$crate::fmt::Result","id":252,"args":{"angle_bracketed":{"args":[],"constraints":[]}}}},"is_c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"is_const":false,"is_unsafe":false,"is_async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1527":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"584":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"876":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2111":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1168":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2403":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1460":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"225":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"517":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1752":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"809":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2044":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2336":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1101":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1393":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"450":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1685":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1977":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_perout_request"],"kind":"struct"},"742":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2269":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_xsk_tx_metadata_union"],"kind":"union"},"1034":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2561":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1618":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"383":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1910":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"675":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"967":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2202":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1259":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2494":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"316":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1551":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"608":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1843":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"900":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"2135":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1192":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1484":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1776":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"541":{"crate_id":1,"path":["std","sync","lazy_lock","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"2068":{"crate_id":2,"path":["core"],"kind":"module"},"833":{"crate_id":2,"path":["core","slice","private_get_many_mut_index","Sealed"],"kind":"trait"},"2360":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1125":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1417":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1709":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"474":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"766":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2001":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1058":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2293":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1350":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"407":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1642":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"699":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1934":{"crate_id":1,"path":["std","thread","spawnhook","ChildSpawnHooks"],"kind":"struct"},"2226":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"991":{"crate_id":2,"path":["core","num","niche_types","NonZeroI8Inner"],"kind":"struct"},"2518":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1283":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"340":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_hdr_variant1"],"kind":"struct"},"1575":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1867":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"632":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2159":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"924":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1216":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2451":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1508":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1800":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"565":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"857":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2092":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1149":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2384":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"206":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1441":{"crate_id":18,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"498":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1733":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"790":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2025":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2317":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1082":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1374":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"139":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1666":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"431":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1958":{"crate_id":6,"path":["libc","unix","linux_like","linux","epoll_params"],"kind":"struct"},"723":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2250":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1015":{"crate_id":2,"path":["core","num","niche_types","NonZeroI64Inner"],"kind":"struct"},"1307":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2542":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1599":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"364":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1891":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"656":{"crate_id":2,"path":["core","core_arch","x86","__m256h"],"kind":"struct"},"948":{"crate_id":2,"path":["core","mem","align_of"],"kind":"function"},"2183":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1240":{"crate_id":2,"path":["core","num","niche_types","U64NotAllOnes"],"kind":"struct"},"2475":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1532":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"589":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1824":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"881":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2116":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2408":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1173":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1465":{"crate_id":2,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1757":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"522":{"crate_id":18,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"2049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"814":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2341":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1106":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1398":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1690":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"455":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"747":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1982":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1039":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"2274":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1331":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2566":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"388":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1623":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"680":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1915":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_req3"],"kind":"struct"},"2207":{"crate_id":17,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"972":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2499":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1264":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"321":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1556":{"crate_id":18,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"1848":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"613":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2140":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"905":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1197":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"2432":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1489":{"crate_id":17,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"1781":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_priv_args"],"kind":"struct"},"546":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"838":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2073":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1130":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2365":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1422":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"479":{"crate_id":2,"path":["core","random","RandomSource"],"kind":"trait"},"1714":{"crate_id":1,"path":["std","sys","net","connection","socket","unix","Socket"],"kind":"struct"},"771":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2006":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2298":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1063":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1355":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1647":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"412":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1939":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_stats_v3"],"kind":"struct"},"704":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2231":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"996":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1288":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2523":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1580":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"345":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"637":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1872":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"929":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2164":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1221":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2456":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1513":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"570":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1805":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2097":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"862":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2389":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1154":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1446":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1738":{"crate_id":2,"path":["core","str","pattern","Utf8Pattern"],"kind":"enum"},"503":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2030":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"795":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1087":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2322":{"crate_id":17,"path":["object","read","elf","relocation","RelrIterator"],"kind":"struct"},"1379":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"144":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1671":{"crate_id":2,"path":["core","intrinsics","fallback","CarryingMulAdd"],"kind":"trait"},"436":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"728":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1963":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1020":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2255":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2547":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1312":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"369":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1604":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"661":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1896":{"crate_id":5,"path":["alloc","boxed","convert","from","StringError"],"kind":"struct"},"2188":{"crate_id":1,"path":["std","collections","hash","set","Entry"],"kind":"enum"},"953":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2480":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1245":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1537":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1829":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"594":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2121":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"886":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1178":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"2413":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1470":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"235":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1762":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"527":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"819":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2054":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1111":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2346":{"crate_id":6,"path":["libc","unix","linux_like","linux","xsk_tx_metadata_completion"],"kind":"struct"},"1403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"460":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1695":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"752":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2279":{"crate_id":18,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"1044":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2571":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1336":{"crate_id":18,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"1628":{"crate_id":17,"path":["object","elf","Relr64"],"kind":"struct"},"393":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1920":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"685":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2212":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"977":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1269":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2504":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1561":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"326":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"618":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1853":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"910":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2145":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1202":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2437":{"crate_id":2,"path":["core","pin","PinCoerceUnsized"],"kind":"trait"},"259":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1494":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"551":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1786":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2078":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"843":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"2370":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1135":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1427":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1719":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"484":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2011":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1068":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2303":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1360":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1652":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"417":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"709":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1944":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1001":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2236":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2528":{"crate_id":18,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"1293":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"350":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"1585":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"642":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1877":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2169":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"934":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2461":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1226":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1518":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1810":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"575":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2102":{"crate_id":15,"path":["addr2line"],"kind":"module"},"867":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1159":{"crate_id":1,"path":["std","sys","net","connection","socket","LookupHost"],"kind":"struct"},"2394":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1451":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"508":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1743":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"800":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2035":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1092":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2327":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1384":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"441":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1676":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1968":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"733":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2260":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1025":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2552":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1317":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1609":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"374":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1901":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"666":{"crate_id":11,"path":["hashbrown","table","IterHash"],"kind":"struct"},"958":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2193":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1250":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2485":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1542":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"307":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_michaelmicfailure"],"kind":"struct"},"599":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1834":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"891":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2126":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2418":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"enum"},"1183":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1475":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"532":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1767":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"824":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2351":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1116":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1408":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1700":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"465":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1992":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"757":{"crate_id":6,"path":["libc","unix","linux_like","linux","open_how"],"kind":"struct"},"1049":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2284":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"1341":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2576":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1633":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_missed"],"kind":"struct"},"398":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1925":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"982":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2217":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2509":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1274":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"331":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1566":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"623":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1858":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2150":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"915":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2442":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1207":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1499":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1791":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"556":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2083":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"848":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1140":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2375":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1432":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"489":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1724":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"781":{"crate_id":2,"path":["core","mem","take"],"kind":"function"},"2016":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1073":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_freq"],"kind":"struct"},"2308":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_point"],"kind":"struct"},"1365":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"422":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1657":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1949":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"714":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2241":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1006":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2533":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"63":{"crate_id":0,"path":["byteorder","private","Sealed"],"kind":"trait"},"1298":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1590":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"355":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1882":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"647":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"939":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2174":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1231":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2466":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1523":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"580":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1815":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"872":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2107":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2399":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1164":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"221":{"crate_id":2,"path":["core","clone","CloneToUninit"],"kind":"trait"},"1456":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"513":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1748":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2040":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"805":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2332":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1097":{"crate_id":1,"path":["std","sync","poison","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1389":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1681":{"crate_id":1,"path":["std","sync","poison","mutex","MappedMutexGuard"],"kind":"struct"},"446":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1973":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"738":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1030":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2265":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1322":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2557":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"379":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_req"],"kind":"struct"},"1614":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"671":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1906":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"963":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2198":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1255":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"312":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1547":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1839":{"crate_id":18,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"604":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2131":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"896":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"2423":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1188":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1480":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1772":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"537":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"829":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2064":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1121":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2356":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1413":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"470":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1705":{"crate_id":1,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"762":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1997":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","fanotify_event_info_pidfd"],"kind":"struct"},"1054":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1346":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"403":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1638":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1930":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"695":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2222":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"987":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2514":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1279":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1571":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"336":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1863":{"crate_id":18,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"628":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"920":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2155":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1212":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2447":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1504":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"561":{"crate_id":18,"path":["memchr","memchr","Memchr"],"kind":"struct"},"1796":{"crate_id":1,"path":["std","fs","exists"],"kind":"function"},"853":{"crate_id":2,"path":["core","bstr","ByteStr"],"kind":"struct"},"2088":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2380":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1145":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1437":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"202":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"494":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1729":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2021":{"crate_id":1,"path":["std","collections","hash","set","OccupiedEntry"],"kind":"struct"},"786":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1078":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1662":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"427":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1954":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"719":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1011":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2246":{"crate_id":6,"path":["libc","unix","linux_like","statx_timestamp"],"kind":"struct"},"1303":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2538":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"360":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1595":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"652":{"crate_id":5,"path":["alloc","collections","btree","set","entry","OccupiedEntry"],"kind":"struct"},"1887":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"944":{"crate_id":2,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"2179":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2471":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1236":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1528":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1820":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"585":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2112":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"877":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2404":{"crate_id":1,"path":["std","sync","mpmc","Iter"],"kind":"struct"},"1169":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1461":{"crate_id":18,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"1753":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"518":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"810":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2045":{"crate_id":6,"path":["libc","unix","linux_like","linux","iwreq"],"kind":"struct"},"1102":{"crate_id":18,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"2337":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1394":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"451":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1686":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"743":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1978":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2270":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1035":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2562":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1327":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"384":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","tcp_info"],"kind":"struct"},"1911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"676":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2203":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"968":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1260":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2495":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"317":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1844":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"609":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"901":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2136":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1193":{"crate_id":1,"path":["std"],"kind":"module"},"2428":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1485":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"542":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1777":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"834":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2069":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2361":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1126":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1418":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"475":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2002":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"767":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2294":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1059":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1351":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1643":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"408":{"crate_id":18,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"700":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1935":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"992":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2227":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1284":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2519":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"341":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1576":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"633":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1868":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2160":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"925":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2452":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1217":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1509":{"crate_id":1,"path":["std","io","pipe","PipeWriter"],"kind":"struct"},"1801":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"566":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2093":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"858":{"crate_id":2,"path":["core","range","RangeFrom"],"kind":"struct"},"2385":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_sys_offset_precise"],"kind":"struct"},"1150":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1442":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_elf32_rel"],"kind":"struct"},"1734":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"499":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"791":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2026":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1083":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2318":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1375":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"140":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1667":{"crate_id":17,"path":["object","common","RelocationFlags"],"kind":"enum"},"724":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket3_hdr"],"kind":"struct"},"1959":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2251":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1016":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2543":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1308":{"crate_id":17,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"365":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1600":{"crate_id":17,"path":["object"],"kind":"module"},"1892":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"657":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2184":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"949":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1241":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2476":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1533":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"590":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"882":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2117":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1174":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2409":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"231":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1466":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"523":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1758":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"815":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2050":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2342":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1107":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1399":{"crate_id":9,"path":["miniz_oxide","inflate","output_buffer","InputWrapper"],"kind":"struct"},"1691":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"456":{"crate_id":2,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"1983":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"748":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2275":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1040":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1332":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2567":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_rollover_stats"],"kind":"struct"},"1624":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"389":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"681":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1916":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"973":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2208":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1265":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2500":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"322":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1557":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"614":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1849":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2141":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"906":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2433":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1198":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1490":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1782":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"547":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2074":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"839":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1131":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2366":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1423":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1715":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"480":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"772":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2007":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1064":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2299":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1356":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"413":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1648":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"705":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1940":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2232":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"997":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2524":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1289":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1581":{"crate_id":1,"path":["std","sync","poison","mutex","MutexGuard"],"kind":"struct"},"346":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1873":{"crate_id":2,"path":["core","num","niche_types","UsizeNoHighBit"],"kind":"struct"},"638":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2165":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"930":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1222":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2457":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1514":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"571":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1806":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"863":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2098":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1155":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2390":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"212":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1447":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"504":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1739":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2031":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"796":{"crate_id":18,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"2323":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1088":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1380":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1672":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"437":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1964":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"729":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2256":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1021":{"crate_id":18,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"1313":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2548":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1605":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"370":{"crate_id":2,"path":["core","num","niche_types","NonZeroIsizeInner"],"kind":"struct"},"662":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"1897":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"954":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2189":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1246":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2481":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"303":{"crate_id":0,"path":["byteorder","LE"],"kind":"type_alias"},"1538":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"595":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1830":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2122":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2414":{"crate_id":5,"path":["alloc"],"kind":"module"},"1179":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"1471":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1763":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"528":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2055":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1112":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2347":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1404":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1696":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"461":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"753":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1988":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1045":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2280":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2572":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1337":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"394":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1629":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"686":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1921":{"crate_id":7,"path":["unwind"],"kind":"module"},"2213":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"978":{"crate_id":2,"path":["core","marker","variance","Variance"],"kind":"trait"},"2505":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"35":{"crate_id":0,"path":["byteorder","io","ReadBytesExt"],"kind":"trait"},"1270":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_info_fid"],"kind":"struct"},"1562":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"327":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_extts_event"],"kind":"struct"},"1854":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"619":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2146":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"911":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1203":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2438":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1495":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"552":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1787":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"844":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2079":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1136":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2371":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"1428":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"485":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1720":{"crate_id":2,"path":["core","marker","variance","PhantomInvariant"],"kind":"struct"},"2012":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"777":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2304":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1069":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1361":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1653":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"418":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1945":{"crate_id":5,"path":["alloc","alloc","alloc"],"kind":"function"},"710":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1002":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2237":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1294":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"59":{"crate_id":0,"path":["byteorder","io","WriteBytesExt"],"kind":"trait"},"2529":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1586":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"351":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"643":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1878":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"935":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2170":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2462":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1227":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1519":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"576":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1811":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2103":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"868":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2395":{"crate_id":9,"path":["miniz_oxide","inflate","core","HuffmanTable"],"kind":"struct"},"1160":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1452":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1744":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"509":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2036":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"801":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"1093":{"crate_id":2,"path":["core","mem","forget"],"kind":"function"},"2328":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1385":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"442":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sem_t"],"kind":"struct"},"734":{"crate_id":1,"path":["std","sys","net","connection","socket","TcpStream"],"kind":"struct"},"1969":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1026":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2261":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2553":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1318":{"crate_id":2,"path":["core","ops","deref","Receiver"],"kind":"trait"},"375":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1610":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1902":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"667":{"crate_id":16,"path":["gimli","read","index","IndexSectionId"],"kind":"enum"},"2194":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"959":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2486":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1251":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1543":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"308":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1835":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"600":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2127":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"892":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1184":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2419":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1476":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"241":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"533":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1768":{"crate_id":17,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"825":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2060":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1117":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2352":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1409":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"466":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1701":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1993":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"758":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2285":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1050":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2577":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1342":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1634":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"399":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1926":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","max_align_t"],"kind":"struct"},"983":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2218":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_pin_desc"],"kind":"struct"},"1275":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2510":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1567":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"332":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","clone_args"],"kind":"struct"},"1859":{"crate_id":1,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"916":{"crate_id":1,"path":["std","sync","poison","rwlock","RwLockReadGuard"],"kind":"struct"},"2151":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2443":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1208":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1500":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"557":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1792":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2084":{"crate_id":2,"path":["core","cell","lazy","force_mut","really_init_mut","PoisonOnPanic"],"kind":"struct"},"849":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2376":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1141":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1433":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1725":{"crate_id":2,"path":["core","num","niche_types","NonZeroU16Inner"],"kind":"struct"},"490":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2017":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"782":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1074":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2309":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1366":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"423":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1658":{"crate_id":3,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"715":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1950":{"crate_id":18,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"1007":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2242":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2534":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1299":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"356":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1591":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1883":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"648":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2175":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"940":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2467":{"crate_id":2,"path":["core","num","niche_types","NonZeroU64Inner"],"kind":"struct"},"1232":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1524":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1816":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_clock_time"],"kind":"struct"},"581":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"873":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2108":{"crate_id":2,"path":["core","fmt","FormattingOptions"],"kind":"struct"},"1165":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2400":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1457":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"222":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"514":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1749":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"806":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2041":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"2333":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1098":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"447":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1682":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1974":{"crate_id":2,"path":["core","marker","variance","PhantomCovariant"],"kind":"struct"},"739":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2266":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1031":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2558":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1323":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1615":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"380":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1907":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"672":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"964":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2199":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1256":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2491":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1548":{"crate_id":1,"path":["std","sys","net","connection","socket","TcpListener"],"kind":"struct"},"605":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1840":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"897":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2132":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2424":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1189":{"crate_id":2,"path":["core","core_arch","x86","__m128h"],"kind":"struct"},"246":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1481":{"crate_id":16,"path":["gimli","read","dwarf","UnitRef"],"kind":"struct"},"1773":{"crate_id":1,"path":["std","collections","hash","set","VacantEntry"],"kind":"struct"},"538":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2065":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"830":{"crate_id":2,"path":["core","core_arch","simd","u16x64"],"kind":"struct"},"2357":{"crate_id":17,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1122":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1414":{"crate_id":2,"path":["core","slice","GetManyMutIndex"],"kind":"trait"},"1706":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"471":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1998":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"763":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1055":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2290":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1347":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"404":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1639":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"696":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1931":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"988":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2223":{"crate_id":11,"path":["hashbrown","raw_entry","RawEntryBuilderMut"],"kind":"struct"},"2515":{"crate_id":17,"path":["object","read","RelocationMap"],"kind":"struct"},"1280":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"337":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1572":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"1864":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"629":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2156":{"crate_id":11,"path":["hashbrown","raw_entry","RawOccupiedEntryMut"],"kind":"struct"},"921":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2448":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1213":{"crate_id":1,"path":["std","sync","poison","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1505":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"270":{"crate_id":0,"path":["byteorder","BE"],"kind":"type_alias"},"1797":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"562":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"854":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2089":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1146":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2381":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1438":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"495":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1730":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"787":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2022":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2314":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1079":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"136":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1371":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"428":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1663":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1955":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"720":{"crate_id":6,"path":["libc","unix","linux_like","statx"],"kind":"struct"},"2247":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1012":{"crate_id":1,"path":["std","sync","poison","rwlock","RwLockWriteGuard"],"kind":"struct"},"1304":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2539":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1596":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"361":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1888":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_discarded"],"kind":"struct"},"653":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"945":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2180":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1237":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2472":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1529":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"586":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1821":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"878":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2113":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2405":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1170":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1462":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1754":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"519":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2046":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"811":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2338":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1103":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1687":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_pmkid_cand"],"kind":"struct"},"452":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"744":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1979":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1036":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2271":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1328":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2563":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"385":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1620":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"677":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1912":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2204":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"969":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2496":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1261":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_auxdata"],"kind":"struct"},"318":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1553":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_pkt"],"kind":"struct"},"1845":{"crate_id":2,"path":["core","core_arch","x86","bf16"],"kind":"struct"},"610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","fanotify_event_info_error"],"kind":"struct"},"2137":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"902":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2429":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1194":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1486":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"251":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1778":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"543":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"835":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2070":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1127":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2362":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1419":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"476":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1711":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"768":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2003":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2295":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1060":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1352":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1644":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"409":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1936":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"701":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_encode_ext"],"kind":"struct"},"2228":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"993":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1285":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2520":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1577":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"342":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1869":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"634":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"926":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2161":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1218":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2453":{"crate_id":6,"path":["libc","unix","linux_like","linux","xsk_tx_metadata_request"],"kind":"struct"},"1510":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"567":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1802":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"859":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2094":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2386":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1151":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1443":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"208":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1735":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"500":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2027":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"792":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1084":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1376":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1668":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"433":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"725":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1960":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1017":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2252":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1309":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2544":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"366":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1601":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"658":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1893":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2185":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"950":{"crate_id":1,"path":["std","sync","poison","mutex","Mutex"],"kind":"struct"},"2477":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1242":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1534":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1826":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"591":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2118":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"883":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1175":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2410":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1467":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1759":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"524":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"816":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2051":{"crate_id":2,"path":["core","intrinsics","fallback","DisjointBitOr"],"kind":"trait"},"1108":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2343":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1400":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"457":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1692":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"749":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1984":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2276":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1041":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2568":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1333":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1625":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"390":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"1917":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"682":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2209":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"974":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1266":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2501":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1558":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"323":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"615":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1850":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"907":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2142":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1199":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2434":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1491":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"256":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"548":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1783":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2075":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"840":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2367":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1132":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1424":{"crate_id":5,"path":["alloc","collections","btree","set","CursorMut"],"kind":"struct"},"1716":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"481":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2008":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"773":{"crate_id":2,"path":["core","marker","variance","PhantomContravariantLifetime"],"kind":"struct"},"2300":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1065":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1357":{"crate_id":1,"path":["std","thread","spawnhook","SpawnHooks"],"kind":"struct"},"1649":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"414":{"crate_id":18,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"706":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1941":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"998":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2233":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2525":{"crate_id":1,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"1290":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"347":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1582":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"639":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1874":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2166":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"931":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2458":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1223":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1515":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1807":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"572":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2099":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"864":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1156":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2391":{"crate_id":2,"path":["core","core_arch","simd","u32x32"],"kind":"struct"},"1448":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1740":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"505":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"797":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2032":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1089":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2324":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1381":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"438":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1673":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"730":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"1965":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2257":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1022":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2549":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1314":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1606":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"371":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1898":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"663":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2190":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"955":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2482":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1539":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"304":{"crate_id":0,"path":["byteorder","NetworkEndian"],"kind":"type_alias"},"596":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1831":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"888":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2123":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1180":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"2415":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1472":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"529":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1764":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2056":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"821":{"crate_id":5,"path":["alloc","collections","btree","set","entry","Entry"],"kind":"enum"},"2348":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1113":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1405":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1697":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"462":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1989":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"754":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2281":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1338":{"crate_id":3,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"2573":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1630":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"395":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"687":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1922":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"979":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2214":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2506":{"crate_id":11,"path":["hashbrown","raw","ProbeSeq"],"kind":"struct"},"1271":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"36":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"328":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1563":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_mlme"],"kind":"struct"},"620":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1855":{"crate_id":2,"path":["core","marker","variance","PhantomContravariant"],"kind":"struct"},"2147":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"912":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2439":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1204":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1496":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1788":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"553":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2080":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"845":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1137":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2372":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1429":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"486":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1721":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"778":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2013":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1070":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2305":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1362":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"419":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1654":{"crate_id":11,"path":["hashbrown","table","IterHashMut"],"kind":"struct"},"1946":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_pmksa"],"kind":"struct"},"711":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2238":{"crate_id":2,"path":["core","ptr","metadata","metadata"],"kind":"function"},"1003":{"crate_id":17,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"2530":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1295":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"60":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1587":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"352":{"crate_id":18,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"1879":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"644":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2171":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"936":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1228":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2463":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1520":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"577":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1812":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"869":{"crate_id":6,"path":["libc","unix","linux_like","linux","iwreq_data"],"kind":"union"},"2104":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1161":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1453":{"crate_id":2,"path":["core","random","Random"],"kind":"trait"},"218":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"510":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1745":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"2037":{"crate_id":15,"path":["addr2line","unit","LocationRangeIter"],"kind":"struct"},"802":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_param"],"kind":"struct"},"2329":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1094":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1386":{"crate_id":2,"path":["core","marker","variance","PhantomInvariantLifetime"],"kind":"struct"},"1678":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"443":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_statistics"],"kind":"struct"},"1970":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"735":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1027":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2262":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1319":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_block_desc"],"kind":"struct"},"2554":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1611":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"376":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"668":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1903":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"960":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2195":{"crate_id":1,"path":["std","sync","poison","condvar","WaitTimeoutResult"],"kind":"struct"},"2487":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1252":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1544":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"601":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1836":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2128":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2420":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1185":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"1477":{"crate_id":2,"path":["core","core_arch","simd","f16x8"],"kind":"struct"},"1769":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"534":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2061":{"crate_id":11,"path":["hashbrown","control","bitmask","BitMask"],"kind":"struct"},"826":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1118":{"crate_id":5,"path":["alloc","collections","btree","set","CursorMutKey"],"kind":"struct"},"2353":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1410":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"467":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1702":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1994":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1051":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2286":{"crate_id":2,"path":["core","marker","variance","sealed","Sealed"],"kind":"trait"},"2578":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1343":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"400":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1635":{"crate_id":1,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"1927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"692":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2219":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"984":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2511":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1276":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1568":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"333":{"crate_id":1,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"1860":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"625":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"917":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2152":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1209":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2444":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1501":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"266":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"558":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1793":{"crate_id":2,"path":["core","num","niche_types","NonZeroI32Inner"],"kind":"struct"},"850":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2085":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2377":{"crate_id":2,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"1142":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1434":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"491":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1726":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_scan_req"],"kind":"struct"},"2018":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"783":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2310":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1075":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1659":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"424":{"crate_id":10,"path":["adler2","Adler32"],"kind":"struct"},"1951":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"716":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1008":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2243":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1300":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2535":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"357":{"crate_id":18,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"1592":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"649":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1884":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket2_hdr"],"kind":"struct"},"941":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2176":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"2468":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1233":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1525":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1817":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"582":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2109":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"874":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2401":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1166":{"crate_id":10,"path":["adler2","algo","U32X4"],"kind":"struct"},"1458":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1750":{"crate_id":2,"path":["core","num","niche_types","NonZeroU128Inner"],"kind":"struct"},"515":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"2042":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"807":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1099":{"crate_id":1,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"2334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1391":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"448":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1683":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"740":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2267":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1032":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2559":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous__kernel_fsid_t"],"kind":"struct"},"1324":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"381":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1616":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1908":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"673":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2200":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"965":{"crate_id":2,"path":["core","num","niche_types","NonZeroU32Inner"],"kind":"struct"},"2492":{"crate_id":2,"path":["core","num","niche_types","NonZeroI16Inner"],"kind":"struct"},"1257":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1549":{"crate_id":2,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"314":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1841":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"606":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"898":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2133":{"crate_id":2,"path":["core","fmt","builders","FromFn"],"kind":"struct"},"1190":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2425":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1482":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"539":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1774":{"crate_id":2,"path":["core","range","iter","IterRange"],"kind":"struct"},"831":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2066":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2358":{"crate_id":2,"path":["core","core_arch","x86","__m512h"],"kind":"struct"},"1123":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1415":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"472":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1707":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1999":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2291":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1056":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1348":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1640":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"405":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1932":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"697":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2224":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1281":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2516":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"338":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1573":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"630":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1865":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"922":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2157":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2449":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1214":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_bd_header_u"],"kind":"union"},"1506":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1798":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"563":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2090":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"855":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2382":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1147":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1439":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"204":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1731":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"496":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"788":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2023":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1080":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2315":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1372":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"137":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"429":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1664":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"721":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1956":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2248":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1013":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2540":{"crate_id":2,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"1305":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"362":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1597":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1889":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"654":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_req_u"],"kind":"union"},"2181":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"946":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1238":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2473":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1530":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1822":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"587":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"879":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2114":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1171":{"crate_id":17,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"2406":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1463":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"520":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1755":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"812":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2047":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2339":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1104":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1396":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1688":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1980":{"crate_id":2,"path":["core","num","niche_types","I32NotAllOnes"],"kind":"struct"},"745":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2272":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1037":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1329":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2564":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1621":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"386":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1913":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"678":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"970":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2205":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1262":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2497":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"319":{"crate_id":18,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"1554":{"crate_id":2,"path":["core","intrinsics","disjoint_bitor"],"kind":"function"},"611":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1846":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2138":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"903":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2430":{"crate_id":5,"path":["alloc","string","IntoChars"],"kind":"struct"},"1195":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"252":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"1487":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_iwreq"],"kind":"union"},"1779":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"544":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2071":{"crate_id":2,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"836":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2363":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1128":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1420":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1712":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"477":{"crate_id":2,"path":["core","core_arch","simd","i32x32"],"kind":"struct"},"769":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2004":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1061":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2296":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1353":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"410":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1645":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"702":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1937":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2229":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"994":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2521":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1286":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"343":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1578":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1870":{"crate_id":1,"path":["std","sys","sync","once_box","OnceBox"],"kind":"struct"},"635":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2162":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"927":{"crate_id":1,"path":["std","sys","pal","unix","fs","cfm","CachedFileMetadata"],"kind":"struct"},"1219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2454":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1511":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1803":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"568":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_extts_request"],"kind":"struct"},"860":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2095":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1152":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2387":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1444":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"501":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1736":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"793":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2028":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2320":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1085":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1377":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"142":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1669":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"434":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1961":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"726":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2253":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1018":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1310":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2545":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1602":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"367":{"crate_id":11,"path":["hashbrown","control","bitmask","BitMaskIter"],"kind":"struct"},"659":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1894":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"951":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2186":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1243":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2478":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1535":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"592":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1827":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2119":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"884":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2411":{"crate_id":2,"path":["core","marker","variance","PhantomCovariantLifetime"],"kind":"struct"},"1176":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1468":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"233":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1760":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"525":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2052":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"817":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1109":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2344":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1401":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1693":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"458":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"750":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1985":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1042":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2277":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2569":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"1334":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"391":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1626":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"683":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1918":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2210":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"975":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2502":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1267":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1559":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"324":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1851":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"616":{"crate_id":2,"path":["core","slice"],"kind":"module"},"2143":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"908":{"crate_id":2,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"1200":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2435":{"crate_id":18,"path":["memchr"],"kind":"module"},"1492":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1784":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"549":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"841":{"crate_id":17,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"2076":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1133":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2368":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1425":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"482":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1717":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2009":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"774":{"crate_id":6,"path":["libc","unix","linux_like","linux","mount_attr"],"kind":"struct"},"2301":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1066":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1358":{"crate_id":11,"path":["hashbrown","raw_entry","RawEntryBuilder"],"kind":"struct"},"1650":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"415":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1942":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"707":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2234":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"999":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1291":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2526":{"crate_id":2,"path":["core","num","niche_types","NonZeroI128Inner"],"kind":"struct"},"1583":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"348":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"640":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1875":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"932":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2167":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1224":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2459":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1516":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"573":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1808":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2100":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"865":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2392":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"1157":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"1449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1741":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"506":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"2033":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"798":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1090":{"crate_id":2,"path":["core","marker","PointerLike"],"kind":"trait"},"2325":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1382":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1674":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"439":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"731":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1966":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_range"],"kind":"struct"},"1023":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2258":{"crate_id":5,"path":["alloc","collections","btree","node","drop_key_val","Dropper"],"kind":"struct"},"2550":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1315":{"crate_id":18,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"372":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1607":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_clock_caps"],"kind":"struct"},"664":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1899":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2191":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"956":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2483":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1248":{"crate_id":2,"path":["core","core_arch","simd","f16x16"],"kind":"struct"},"1540":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"305":{"crate_id":0,"path":["byteorder","NativeEndian"],"kind":"type_alias"},"1832":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"597":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2124":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"889":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1181":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2416":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1473":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"530":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1765":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","lru","Lru"],"kind":"struct"},"822":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2057":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1114":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2349":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1406":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"463":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1698":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1990":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"755":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2282":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"1047":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2574":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1339":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1631":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"396":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1923":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"688":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"980":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2215":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1272":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2507":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1564":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"329":{"crate_id":15,"path":["addr2line","line","LineLocationRangeIter"],"kind":"struct"},"621":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1856":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"913":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2148":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2440":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1205":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1497":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"262":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"554":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1789":{"crate_id":17,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"2081":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"846":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2373":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1138":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1430":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1722":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"487":{"crate_id":2,"path":["core","num","niche_types","I64NotAllOnes"],"kind":"struct"},"2014":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"779":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1071":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2306":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1363":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1655":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"420":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"712":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1947":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_hdr"],"kind":"struct"},"1004":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2239":{"crate_id":2,"path":["core","range","RangeInclusive"],"kind":"struct"},"2531":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1296":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"353":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1588":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1880":{"crate_id":2,"path":["core","ops","range","OneSidedRangeBound"],"kind":"enum"},"645":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2172":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"937":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2464":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1229":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1521":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1813":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"578":{"crate_id":2,"path":["core","str","converts","from_utf8_unchecked"],"kind":"function"},"2105":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"870":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1162":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2397":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1454":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"511":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1746":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"803":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2038":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1095":{"crate_id":2,"path":["core","num","niche_types","NonZeroUsizeInner"],"kind":"struct"},"2330":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1387":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"444":{"crate_id":17,"path":["object","elf","Relr32"],"kind":"struct"},"1679":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1971":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"736":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2263":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1028":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"2555":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1320":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1612":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"377":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1904":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"669":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"961":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2196":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1253":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2488":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1545":{"crate_id":1,"path":["std","io"],"kind":"module"},"310":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"602":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1837":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"894":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2129":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2421":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1186":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1478":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"535":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1770":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2062":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_hdr_v1"],"kind":"struct"},"827":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2354":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1119":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1411":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1703":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"468":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1995":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_elf64_rel"],"kind":"struct"},"760":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1052":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2287":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1344":{"crate_id":2,"path":["core","intrinsics","copy_nonoverlapping"],"kind":"function"},"2579":{"crate_id":18,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"401":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1636":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"693":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1928":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"985":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2220":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2512":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1277":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"334":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1569":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1861":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"626":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2153":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"918":{"crate_id":18,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"2445":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1210":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1502":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_bd_ts"],"kind":"struct"},"1794":{"crate_id":2,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"559":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"851":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2086":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1143":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2378":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1435":{"crate_id":18,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"200":{"crate_id":0,"path":["byteorder","LittleEndian"],"kind":"enum"},"492":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1727":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"784":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2019":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2311":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_elf32_rela"],"kind":"struct"},"1076":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_elf64_rela"],"kind":"struct"},"1368":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"425":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1660":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1952":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"717":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2244":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1009":{"crate_id":11,"path":["hashbrown","raw_entry","RawEntryMut"],"kind":"enum"},"2536":{"crate_id":17,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"1301":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1593":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"358":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1885":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"650":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"942":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2177":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1234":{"crate_id":18,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"2469":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1526":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"583":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1818":{"crate_id":2,"path":["core","fmt","DebugAsHex"],"kind":"enum"},"875":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2110":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2402":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1167":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1459":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1751":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"516":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2043":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"808":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2335":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1100":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1392":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1684":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"449":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1976":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"741":{"crate_id":2,"path":["core","ffi","primitives","c_char"],"kind":"type_alias"},"1033":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2268":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1325":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2560":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_sys_offset_extended"],"kind":"struct"},"382":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1617":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"674":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1909":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"966":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2201":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1258":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"315":{"crate_id":11,"path":["hashbrown","control","tag","Tag"],"kind":"struct"},"1550":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1842":{"crate_id":1,"path":["std","sync","poison","condvar","Condvar"],"kind":"struct"},"607":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2134":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"899":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2426":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1191":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1483":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1775":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"540":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"832":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2067":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1124":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2359":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1416":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"473":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1708":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"765":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2000":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2292":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1057":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1349":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"406":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1641":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1933":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"698":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"990":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1282":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"2517":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1574":{"crate_id":6,"path":["libc","unix","linux_like","linux","ptp_sys_offset"],"kind":"struct"},"339":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1866":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"631":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"923":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2158":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1215":{"crate_id":18,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"2450":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1507":{"crate_id":2,"path":["core","fmt","Sign"],"kind":"enum"},"564":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1799":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"856":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2091":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2383":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1148":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1440":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"497":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2024":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"789":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2316":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1081":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1373":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_stats"],"kind":"struct"},"138":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1665":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"430":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"722":{"crate_id":18,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"1957":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1014":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2249":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1306":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2541":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"363":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1598":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"655":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1890":{"crate_id":18,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"2182":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"947":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2474":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"4":{"crate_id":0,"path":["byteorder","ByteOrder"],"kind":"trait"},"1239":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1531":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1823":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"588":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2115":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"880":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2407":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"1172":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"229":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1756":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"521":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"813":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2048":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1105":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2340":{"crate_id":17,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"1397":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"454":{"crate_id":2,"path":["core","num","niche_types","U32NotAllOnes"],"kind":"struct"},"1689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"746":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1981":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2273":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1038":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2565":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1330":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1622":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"387":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1914":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"679":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2206":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"971":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1263":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2498":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1555":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"320":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1847":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"612":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"904":{"crate_id":18,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"2139":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1196":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2431":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1488":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"545":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1780":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"837":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2072":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"enum"},"2364":{"crate_id":18,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"1129":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1421":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1713":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"478":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2005":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2297":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1062":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1354":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1646":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"411":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"703":{"crate_id":2,"path":["core","clone","uninit","InitializingSlice"],"kind":"struct"},"1938":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"995":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2230":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1287":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2522":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"344":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_quality"],"kind":"struct"},"1579":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"636":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1871":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2163":{"crate_id":5,"path":["alloc","collections","btree","set","Cursor"],"kind":"struct"},"928":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"2455":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1220":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"1512":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1804":{"crate_id":18,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"569":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2096":{"crate_id":18,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"861":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1153":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1445":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"210":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1737":{"crate_id":2,"path":["core","mem","replace"],"kind":"function"},"502":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"794":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1086":{"crate_id":18,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"2321":{"crate_id":6,"path":["libc","unix","linux_like","linux","tpacket_versions"],"kind":"enum"},"143":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1378":{"crate_id":15,"path":["addr2line","unit","SupUnits"],"kind":"struct"},"435":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1670":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"727":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1962":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2254":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1019":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2546":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1311":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1603":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"368":{"crate_id":1,"path":["std","random","DefaultRandomSource"],"kind":"struct"},"1895":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"660":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2187":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"952":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2479":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_info_header"],"kind":"struct"},"1536":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"593":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1828":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"885":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2120":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2412":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1469":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"526":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1761":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2053":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"818":{"crate_id":5,"path":["alloc","bstr","ByteString"],"kind":"struct"},"2345":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1110":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1402":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1694":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"459":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1986":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"751":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2278":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_thrspy"],"kind":"struct"},"1043":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"1335":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2570":{"crate_id":18,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"1627":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"392":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"684":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1919":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"976":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2211":{"crate_id":2,"path":["core","range","Range"],"kind":"struct"},"1268":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2503":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"325":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1560":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"617":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1852":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2144":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"909":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2436":{"crate_id":2,"path":["core","num","niche_types","NonZeroU8Inner"],"kind":"struct"},"1201":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1493":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1785":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"550":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2077":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"842":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2369":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1426":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1718":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"483":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"775":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2010":{"crate_id":2,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"1067":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2302":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1359":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1651":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"708":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1943":{"crate_id":18,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"2235":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1000":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2527":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1292":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1584":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"349":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ptp_perout_request_1"],"kind":"union"},"1876":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"641":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2168":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"933":{"crate_id":1,"path":["std","sync","mpmc","IntoIter"],"kind":"struct"},"1225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"2460":{"crate_id":18,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"1517":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"574":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1809":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"866":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2101":{"crate_id":11,"path":["hashbrown","raw_entry","RawVacantEntryMut"],"kind":"struct"},"1158":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2393":{"crate_id":1,"path":["std","sys","net","connection","socket","UdpSocket"],"kind":"struct"},"215":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1450":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"507":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1742":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2034":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"799":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2326":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1091":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1383":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1675":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"440":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"732":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1024":{"crate_id":6,"path":["libc"],"kind":"module"},"2259":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1316":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2551":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1608":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"373":{"crate_id":5,"path":["alloc","collections","btree","set","entry","VacantEntry"],"kind":"struct"},"665":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1900":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"957":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2192":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2484":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1249":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"306":{"crate_id":0,"path":["byteorder"],"kind":"module"},"1541":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"598":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1833":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2125":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"890":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2417":{"crate_id":2,"path":["core","core_arch","x86","splat","JustOne"],"kind":"struct"},"1182":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1474":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"239":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1766":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"531":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2058":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"823":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1115":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2350":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1407":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"172":{"crate_id":0,"path":["byteorder","BigEndian"],"kind":"enum"},"464":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1699":{"crate_id":1,"path":["std","sync","mpmc","TryIter"],"kind":"struct"},"756":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1991":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1048":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2283":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2575":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1340":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"397":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1632":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1924":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"689":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2216":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"981":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2508":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1273":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"38":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1565":{"crate_id":1,"path":["std","env"],"kind":"module"},"330":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1857":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"622":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2149":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"914":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1206":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"2441":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1498":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"555":{"crate_id":2,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"1790":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"847":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2082":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1139":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2374":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1431":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"488":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1723":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2015":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"780":{"crate_id":18,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"2307":{"crate_id":1,"path":["std","sync","poison","once","OnceState"],"kind":"struct"},"1072":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1364":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1656":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"421":{"crate_id":1,"path":["std","sync","poison","once","Once"],"kind":"struct"},"1948":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"713":{"crate_id":16,"path":["gimli"],"kind":"module"},"1005":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2240":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1297":{"crate_id":18,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"2532":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1589":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"354":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"646":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1881":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"938":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ptp_perout_request_2"],"kind":"union"},"2173":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2465":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1230":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1522":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"579":{"crate_id":1,"path":["std","sync","poison","rwlock","RwLock"],"kind":"struct"},"1814":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2106":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"871":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2398":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1163":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"1455":{"crate_id":18,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"1747":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"512":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2039":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1096":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2331":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1388":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"445":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1680":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"737":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1972":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1029":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2264":{"crate_id":18,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"2556":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1321":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"378":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1613":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1905":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"670":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2197":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"962":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2489":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1254":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1546":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"311":{"crate_id":2,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"1838":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"603":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"895":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2130":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1187":{"crate_id":18,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"2422":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1479":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"536":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1771":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"828":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2063":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2355":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1120":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1412":{"crate_id":1,"path":["std","io","pipe","PipeReader"],"kind":"struct"},"469":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1704":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1996":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"761":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2288":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1053":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"1345":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2580":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1637":{"crate_id":6,"path":["libc","unix","in6_addr"],"kind":"struct"},"402":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1929":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"986":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2221":{"crate_id":2,"path":["core","num","niche_types","Nanoseconds"],"kind":"struct"},"1278":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2513":{"crate_id":2,"path":["core","core_arch","simd","f16x32"],"kind":"struct"},"335":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1570":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"627":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1862":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"919":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2154":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2446":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1211":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1503":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1795":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"560":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2087":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"852":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2379":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1144":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1728":{"crate_id":6,"path":["libc","unix","linux_like","linux","xsk_tx_metadata"],"kind":"struct"},"493":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2020":{"crate_id":11,"path":["hashbrown","control","group","sse2","Group"],"kind":"struct"},"785":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2312":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1369":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"426":{"crate_id":6,"path":["libc","unix","linux_like","linux","iw_event"],"kind":"struct"},"1661":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"718":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1953":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1010":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2245":{"crate_id":10,"path":["adler2"],"kind":"module"},"2537":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanout_args"],"kind":"struct"},"1302":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"359":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1594":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1886":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"651":{"crate_id":2,"path":["core","core_arch","simd","splat","JustOne"],"kind":"struct"},"2178":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"943":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2470":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1235":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"}},"external_crates":{"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler2","html_root_url":"https://docs.rs/adler2/2.0.0/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":39}