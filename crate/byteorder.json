{"root":"0:0:2465","crate_version":"1.5.0","includes_private":false,"index":{"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1579,0],"end":[1579,50]},"visibility":"default","docs":"All types that implement `Write` get methods defined in `WriteBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3548:2751","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_i48","write_u64","write_i8","write_u16","write_uint","write_i128","write_i64","write_u128","write_int","write_i16","write_u24","write_u32","write_u8","write_int128","write_uint128","write_i32","write_i24","write_u48","write_f64","write_f32"],"trait":{"name":"WriteBytesExt","id":"0:106:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"W"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:142:1983":{"id":"0:142:1983","crate_id":0,"name":"write_i128","span":{"filename":"src/io.rs","begin":[1410,4],"end":[1414,5]},"visibility":"default","docs":"Writes a signed 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i128"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:1887":{"id":"0:184:1887","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[328,4],"end":[328,37]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:283:2069":{"id":"0:283:2069","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2056,4],"end":[2058,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12870:26348":{"id":"2:12870:26348","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12869:26347"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:1949":{"id":"0:200:1949","crate_id":0,"name":"read_i128","span":{"filename":"src/lib.rs","begin":[656,4],"end":[658,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:689:3357":{"id":"5:689:3357","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:195:1923":{"id":"0:195:1923","crate_id":0,"name":"read_i16","span":{"filename":"src/lib.rs","begin":[546,4],"end":[548,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2747:3291":{"id":"2:2747:3291","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2721:142"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:247:2140":{"id":"0:247:2140","crate_id":0,"name":"from_slice_i128","span":{"filename":"src/lib.rs","begin":[1774,4],"end":[1779,5]},"visibility":"default","docs":"Converts the given slice of signed 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i128(&mut numbers);\nassert_eq!(numbers, [5i128.to_be(), 65000i128.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2441-0:322:1826":{"id":"b:2:2441-0:322:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:256:2166":{"id":"0:256:2166","crate_id":0,"name":"NetworkEndian","span":{"filename":"src/lib.rs","begin":[1880,0],"end":[1880,35]},"visibility":"public","docs":"Defines network byte order serialization.\n\nNetwork byte order is defined by [RFC 1700][1] to be big-endian, and is\nreferred to in several protocol specifications.  This type is an alias of\n[`BigEndian`].\n\n[1]: https://tools.ietf.org/html/rfc1700\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, NetworkEndian, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, NetworkEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:254:60":{"id":"0:254:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1846,4],"end":[1848,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:281:2063":{"id":"0:281:2063","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2046,4],"end":[2048,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:348":{"id":"0:348","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,29],"end":[1842,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2509:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12978:32853":{"id":"2:12978:32853","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4737:32853"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44642:7015","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:234:2091":{"id":"0:234:2091","crate_id":0,"name":"write_i16_into","span":{"filename":"src/lib.rs","begin":[1456,4],"end":[1461,5]},"visibility":"default","docs":"Writes signed 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"i16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,16],"end":[1812,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2961:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:102:2060":{"id":"0:102:2060","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/io.rs","begin":[1039,4],"end":[1044,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Safety\n\nThis method is unsafe because there are no guarantees made about the\nfloating point values. In particular, this method does not check for\nsignaling NaNs, which may result in undefined behavior.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f64_into` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148:1974":{"id":"0:148:1974","crate_id":0,"name":"write_int","span":{"filename":"src/io.rs","begin":[1478,4],"end":[1486,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite signed 56 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_int::<BigEndian>(-3548172039376767, 7).unwrap();\nwtr.write_int::<BigEndian>(43, 7).unwrap();\nassert_eq!(wtr, b\"\\xf3\\x64\\xf4\\xd1\\xfd\\xb0\\x81\\x00\\x00\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12866:32834":{"id":"2:12866:32834","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12112:1548","crate::ops::IndexMut":"2:3222:8613","str::slice_unchecked":"2:12865:32833"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:3037":{"id":"5:5538:3037","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:271:1911":{"id":"0:271:1911","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[1988,4],"end":[1990,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:215:1999":{"id":"0:215:1999","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[997,4],"end":[997,50]},"visibility":"default","docs":"Reads unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:243:2123":{"id":"0:243:2123","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[1679,4],"end":[1679,45]},"visibility":"default","docs":"Converts the given slice of unsigned 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u128(&mut numbers);\nassert_eq!(numbers, [5u128.to_be(), 65000u128.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:32846:244-0:322:1826":{"id":"a:2:32846:244-0:322:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:211:1974":{"id":"0:211:1974","crate_id":0,"name":"write_int","span":{"filename":"src/lib.rs","begin":[903,4],"end":[905,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:341:1825":{"id":"0:341:1825","crate_id":0,"name":"LittleEndian","span":{"filename":"src/lib.rs","begin":[1843,0],"end":[1843,24]},"visibility":"public","docs":"Defines little-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:32928:3175-0:341:1825","a:2:42553:3217-0:341:1825","a:2:2966:254-0:341:1825","a:2:42554:3216-0:341:1825","a:2:32846:244-0:341:1825","b:2:2444-0:341:1825","b:2:2748-0:341:1825","b:2:2754-0:341:1825","b:2:3560-0:341:1825","b:2:2759-0:341:1825","b:2:2441-0:341:1825","b:2:2744-0:341:1825","b:5:687-0:341:1825","0:358","0:291","0:342","0:348","0:344","0:355","0:347","0:356","0:353","0:253","0:345","0:350"]}}},"0:61:1863":{"id":"0:61:1863","crate_id":0,"name":"read_uint","span":{"filename":"src/io.rs","begin":[427,4],"end":[431,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0x74, 0xfa]);\nassert_eq!(8418554, rdr.read_uint::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12918:26359":{"id":"2:12918:26359","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,39],"end":[1842,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2540:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:354:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:237:2097":{"id":"0:237:2097","crate_id":0,"name":"write_i128_into","span":{"filename":"src/lib.rs","begin":[1540,4],"end":[1545,5]},"visibility":"default","docs":"Writes signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"i128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25:1854":{"id":"0:25:1854","crate_id":0,"name":"read_u16","span":{"filename":"src/io.rs","begin":[112,4],"end":[116,5]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:187:1902":{"id":"0:187:1902","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[387,4],"end":[387,41]},"visibility":"default","docs":"Writes an unsigned 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_u16(&mut buf, 1_000);\nassert_eq!(1_000, LittleEndian::read_u16(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:196:1928":{"id":"0:196:1928","crate_id":0,"name":"read_i24","span":{"filename":"src/lib.rs","begin":[568,4],"end":[570,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:154:1985":{"id":"0:154:1985","crate_id":0,"name":"write_int128","span":{"filename":"src/io.rs","begin":[1508,4],"end":[1516,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i128"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217:2013":{"id":"0:217:2013","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[1043,4],"end":[1043,50]},"visibility":"default","docs":"Reads unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:100:2056":{"id":"0:100:2056","crate_id":0,"name":"read_f64_into","span":{"filename":"src/io.rs","begin":[987,4],"end":[994,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:2025":{"id":"0:88:2025","crate_id":0,"name":"read_i16_into","span":{"filename":"src/io.rs","begin":[747,4],"end":[754,5]},"visibility":"default","docs":"Reads a sequence of signed 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:1904":{"id":"0:188:1904","crate_id":0,"name":"write_u24","span":{"filename":"src/lib.rs","begin":[406,4],"end":[408,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:322:1826":{"id":"b:2:2748-0:322:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:753"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:180:1862":{"id":"0:180:1862","crate_id":0,"name":"read_u24","span":{"filename":"src/lib.rs","begin":[248,4],"end":[250,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:251:60":{"id":"0:251:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1816,4],"end":[1818,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:267:1897":{"id":"0:267:1897","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[1969,4],"end":[1975,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32928:3175-0:341:1825":{"id":"a:2:32928:3175-0:341:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32928:3175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42554:3216-0:341:1825":{"id":"a:2:42554:3216-0:341:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42554:3216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:46:1939":{"id":"0:46:1939","crate_id":0,"name":"read_i48","span":{"filename":"src/io.rs","begin":[295,4],"end":[299,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x9d, 0x71, 0xab, 0xe7, 0x97, 0x8f]);\nassert_eq!(-108363435763825, rdr.read_i48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:249:2145":{"id":"0:249:2145","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[1793,4],"end":[1793,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 double-precision (8 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:359:1146":{"id":"0:359:1146","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1842,55],"end":[1842,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31592:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:248:2143":{"id":"0:248:2143","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[1786,4],"end":[1786,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 single-precision (4 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12867:26343":{"id":"2:12867:26343","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12869:26347","str::split_at_mut":"2:12868:26344"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12956:32848":{"id":"2:12956:32848","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:13966"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:13964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12959:32849":{"id":"2:12959:32849","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:13966"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12962:32850":{"id":"2:12962:32850","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:13966"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:13964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197:1934":{"id":"0:197:1934","crate_id":0,"name":"read_i32","span":{"filename":"src/lib.rs","begin":[590,4],"end":[592,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:1902":{"id":"0:269:1902","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[1978,4],"end":[1980,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2707":{"id":"0:87:2707","crate_id":0,"name":"read_i8_into","span":{"filename":"src/io.rs","begin":[716,4],"end":[719,5]},"visibility":"default","docs":"Reads a sequence of signed 8 bit integers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to read into a `&mut [i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `i8` individually.)\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 251, 3]);\nlet mut dst = [0; 3];\nrdr.read_i8_into(&mut dst).unwrap();\nassert_eq!([2, -5, 3], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:241:2115":{"id":"0:241:2115","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[1641,4],"end":[1641,43]},"visibility":"default","docs":"Converts the given slice of unsigned 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u32(&mut numbers);\nassert_eq!(numbers, [5u32.to_be(), 65000u32.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:2966:254-0:322:1826":{"id":"a:2:2966:254-0:322:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2762:135":{"id":"2:2762:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32776:2993","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:216:2007":{"id":"0:216:2007","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[1020,4],"end":[1020,50]},"visibility":"default","docs":"Reads unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:339":{"id":"0:339","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,55],"end":[1812,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["le","lt","ge","gt"],"trait":{"name":"PartialOrd","id":"2:2546:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:340:1146"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:351:790":{"id":"0:351:790","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1842,33],"end":[1842,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10211:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:2762":{"id":"0:107:2762","crate_id":0,"name":"write_u8","span":{"filename":"src/io.rs","begin":[1098,4],"end":[1100,5]},"visibility":"default","docs":"Writes an unsigned 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_u8(2).unwrap();\nwtr.write_u8(5).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12848:32830":{"id":"2:12848:32830","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240:2110":{"id":"0:240:2110","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[1622,4],"end":[1622,43]},"visibility":"default","docs":"Converts the given slice of unsigned 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u16(&mut numbers);\nassert_eq!(numbers, [5u16.to_be(), 65000u16.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12878:32835":{"id":"2:12878:32835","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44589:7128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2748-0:341:1825":{"id":"b:2:2748-0:341:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2750:753"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2441-0:341:1825":{"id":"b:2:2441-0:341:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2435:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2443:2950"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12880:26361":{"id":"2:12880:26361","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:13966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12886:26363":{"id":"2:12886:26363","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:13966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:13964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:2052":{"id":"0:98:2052","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/io.rs","begin":[948,4],"end":[953,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\n\nReads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f32_into` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:2007":{"id":"0:278:2007","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2031,4],"end":[2033,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2966:254-0:341:1825":{"id":"a:2:2966:254-0:341:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2966:254","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12930:32839":{"id":"2:12930:32839","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12541:13966","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::rmatch_indices":"2:12933:32840"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44475:7123","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1862":{"id":"0:31:1862","crate_id":0,"name":"read_u24","span":{"filename":"src/io.rs","begin":[165,4],"end":[169,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1923":{"id":"0:28:1923","crate_id":0,"name":"read_i16","span":{"filename":"src/io.rs","begin":[139,4],"end":[143,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0xc1, 0xff, 0x7c]);\nassert_eq!(193, rdr.read_i16::<BigEndian>().unwrap());\nassert_eq!(-132, rdr.read_i16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:221:2035":{"id":"0:221:2035","crate_id":0,"name":"read_i64_into","span":{"filename":"src/lib.rs","begin":[1148,4],"end":[1153,5]},"visibility":"default","docs":"Reads signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:32846":{"id":"2:12944:32846","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:13966"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12566:13963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2465":{"id":"0:0:2465","crate_id":0,"name":"byteorder","span":{"filename":"src/lib.rs","begin":[1,0],"end":[3975,1]},"visibility":"public","docs":"This crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].\n\nThe organization of the crate is pretty simple. A trait, [`ByteOrder`], specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]\nand [`LittleEndian`] implement these methods. Finally, [`ReadBytesExt`] and\n[`WriteBytesExt`] provide convenience methods available to all types that\nimplement [`Read`] and [`Write`].\n\nAn alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve\ncode clarity.\n\nAn additional alias, [`NativeEndian`], is provided for the endianness of the\nlocal platform. This is convenient when serializing data for use and\nconversions are not desired.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`] type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a [`Write`] type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n\n# Optional Features\n\nThis crate optionally provides support for 128 bit values (`i128` and `u128`)\nwhen built with the `i128` feature enabled.\n\nThis crate can also be used without the standard library.\n\n# Alternatives\n\nNote that as of Rust 1.32, the standard numeric types provide built-in methods\nlike `to_le_bytes` and `from_le_bytes`, which support some of the same use\ncases.\n\n[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness\n[`ByteOrder`]: trait.ByteOrder.html\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`ReadBytesExt`]: trait.ReadBytesExt.html\n[`WriteBytesExt`]: trait.WriteBytesExt.html\n[`NetworkEndian`]: type.NetworkEndian.html\n[`NativeEndian`]: type.NativeEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":["#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:11-0:20:1793","0:12-0:106:1794","0:178:1850","0:322:1826","0:252:2154","0:341:1825","0:255:2158","0:256:2166","0:257:2169"],"is_stripped":false}}},"2:12906:32836":{"id":"2:12906:32836","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12541:13966","str::split":"2:12897:26349","prim@char":"1:12106:458","`DoubleEndedIterator`":"2:7934:128","str::rsplit_terminator":"2:12909:32837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44375:7119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12971:26127":{"id":"2:12971:26127","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:2600":{"id":"0:21:2600","crate_id":0,"name":"read_u8","span":{"filename":"src/io.rs","begin":[55,4],"end":[59,5]},"visibility":"default","docs":"Reads an unsigned 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![2, 5]);\nassert_eq!(2, rdr.read_u8().unwrap());\nassert_eq!(5, rdr.read_u8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5544:33542":{"id":"5:5544:33542","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536":{"id":"5:5536","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5537:33540","5:5538:3037","5:5541:33541","5:5544:33542","5:5552:33543","5:5553:33544","5:5554:3130","5:5555:26123","5:5556:26124"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:133:1911":{"id":"0:133:1911","crate_id":0,"name":"write_u64","span":{"filename":"src/io.rs","begin":[1367,4],"end":[1371,5]},"visibility":"default","docs":"Writes an unsigned 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u64::<BigEndian>(918733457491587).unwrap();\nwtr.write_u64::<BigEndian>(143).unwrap();\nassert_eq!(wtr, b\"\\x00\\x03\\x43\\x95\\x4d\\x60\\x86\\x83\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:1956":{"id":"0:202:1956","crate_id":0,"name":"read_int128","span":{"filename":"src/lib.rs","begin":[702,4],"end":[704,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:347":{"id":"0:347","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,29],"end":[1842,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:32873:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:43:1873":{"id":"0:43:1873","crate_id":0,"name":"read_u48","span":{"filename":"src/io.rs","begin":[269,4],"end":[273,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xb6, 0x71, 0x6b, 0xdc, 0x2b, 0x31]);\nassert_eq!(200598257150769, rdr.read_u48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40:1934":{"id":"0:40:1934","crate_id":0,"name":"read_i32","span":{"filename":"src/io.rs","begin":[243,4],"end":[247,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:2019":{"id":"0:85:2019","crate_id":0,"name":"read_u128_into","span":{"filename":"src/io.rs","begin":[673,4],"end":[683,5]},"visibility":"default","docs":"Reads a sequence of unsigned 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:1980":{"id":"0:136:1980","crate_id":0,"name":"write_i64","span":{"filename":"src/io.rs","begin":[1394,4],"end":[1398,5]},"visibility":"default","docs":"Writes a signed 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i64::<BigEndian>(i64::min_value()).unwrap();\nwtr.write_i64::<BigEndian>(i64::max_value()).unwrap();\nassert_eq!(wtr, b\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:316:2110":{"id":"0:316:2110","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2244,4],"end":[2250,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:279:2013":{"id":"0:279:2013","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2036,4],"end":[2038,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12968:27508":{"id":"2:12968:27508","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40377:26300","Self::is_ascii":"2:12967:26121"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40377:26300","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12855:340":{"id":"2:12855:340","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12856:2027","`u8`":"1:12123:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:350":{"id":"0:350","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,33],"end":[1842,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10203:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:351:790"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12869:26347":{"id":"2:12869:26347","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12870:26348"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179:1854":{"id":"0:179:1854","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[229,4],"end":[229,35]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:2:42553:3217-0:322:1826":{"id":"a:2:42553:3217-0:322:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42553:3217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:334":{"id":"0:334","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,39],"end":[1812,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["min","clamp","max"],"trait":{"name":"Ord","id":"2:2540:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:335:469"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2744-0:341:1825":{"id":"b:2:2744-0:341:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:3291"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:342":{"id":"0:342","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,9],"end":[1842,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:343:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12893:3297":{"id":"2:12893:3297","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42427:198","prim@char":"1:12106:458","self::pattern":"2:12541:13966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:13964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284:2072":{"id":"0:284:2072","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2061,4],"end":[2063,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:1929":{"id":"0:64:1929","crate_id":0,"name":"read_int","span":{"filename":"src/io.rs","begin":[452,4],"end":[456,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xc1, 0xff, 0x7c]);\nassert_eq!(-4063364, rdr.read_int::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:2031":{"id":"0:90:2031","crate_id":0,"name":"read_i32_into","span":{"filename":"src/io.rs","begin":[782,4],"end":[789,5]},"visibility":"default","docs":"Reads a sequence of signed 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300:1902":{"id":"0:300:1902","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[2164,4],"end":[2166,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238:2099":{"id":"0:238:2099","crate_id":0,"name":"write_f32_into","span":{"filename":"src/lib.rs","begin":[1569,4],"end":[1574,5]},"visibility":"default","docs":"Writes IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"f32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:312:2063":{"id":"0:312:2063","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2224,4],"end":[2226,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32846:244-0:341:1825":{"id":"a:2:32846:244-0:341:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32846:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:357:669":{"id":"0:357:669","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:345":{"id":"0:345","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,22],"end":[1842,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9987:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:346:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:335:469":{"id":"0:335:469","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1812,39],"end":[1812,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31592:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:322:1826":{"id":"0:322:1826","crate_id":0,"name":"BigEndian","span":{"filename":"src/lib.rs","begin":[1813,0],"end":[1813,21]},"visibility":"public","docs":"Defines big-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 4];\nBigEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, BigEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:32928:3175-0:322:1826","a:2:42553:3217-0:322:1826","a:2:2966:254-0:322:1826","a:2:42554:3216-0:322:1826","a:2:32846:244-0:322:1826","b:2:2444-0:322:1826","b:2:2748-0:322:1826","b:2:2754-0:322:1826","b:2:3560-0:322:1826","b:2:2759-0:322:1826","b:2:2441-0:322:1826","b:2:2744-0:322:1826","b:5:687-0:322:1826","0:337","0:260","0:250","0:323","0:339","0:328","0:326","0:329","0:325","0:336","0:334","0:331"]}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1938,0],"end":[2124,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_u24","read_i16","write_i48","read_i128_into","read_f64","write_i128_into","write_i16_into","from_slice_i128","read_i48","from_slice_i16","read_f32_into_unchecked","write_int128","read_f32_into","write_i32","write_u48","write_i24","read_i32_into","write_i64_into","read_i16_into","write_i8_into","write_f64_into","read_i128","from_slice_i32","read_u48","read_i32","read_i24","read_f64_into","write_i128","write_i64","write_int","write_i16","write_u24","read_i64_into","read_f32","write_i32_into","read_int128","write_f32_into","read_i64","from_slice_i64","read_f64_into_unchecked","read_int","write_f64","write_f32"],"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:261:1854","0:262:1866","0:263:1880","0:264:1887","0:265:1863","0:267:1897","0:269:1902","0:270:1907","0:271:1911","0:272:1913","0:273:1905","0:275:1918","0:277:1999","0:278:2007","0:279:2013","0:280:2019","0:281:2063","0:282:2066","0:283:2069","0:284:2072","0:285:2110","0:286:2115","0:287:2119","0:288:2123","0:289:2143","0:290:2145"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:252:2154":{"id":"0:252:2154","crate_id":0,"name":"BE","span":{"filename":"src/lib.rs","begin":[1824,0],"end":[1824,24]},"visibility":"public","docs":"A type alias for [`BigEndian`].\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:319:2123":{"id":"0:319:2123","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2271,4],"end":[2277,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12856:2027":{"id":"2:12856:2027","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12123:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:30976":{"id":"2:12875:30976","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12876:31008"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44599:7129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:301:1907":{"id":"0:301:1907","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[2169,4],"end":[2171,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286:2115":{"id":"0:286:2115","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2075,4],"end":[2081,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12876:31008":{"id":"2:12876:31008","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12875:30976"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44608:7130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:322:1826":{"id":"b:2:2444-0:322:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:25186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:317:2115":{"id":"0:317:2115","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2253,4],"end":[2259,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1909":{"id":"0:127:1909","crate_id":0,"name":"write_u48","span":{"filename":"src/io.rs","begin":[1313,4],"end":[1317,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u48::<BigEndian>(52360336390828).unwrap();\nwtr.write_u48::<BigEndian>(541).unwrap();\nassert_eq!(wtr, b\"\\x2f\\x9f\\x17\\x40\\x3a\\xac\\x00\\x00\\x00\\x00\\x02\\x1d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:690:3358":{"id":"5:690:3358","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:304:1905":{"id":"0:304:1905","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[2184,4],"end":[2191,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:2769":{"id":"0:108:2769","crate_id":0,"name":"write_i8","span":{"filename":"src/io.rs","begin":[1126,4],"end":[1128,5]},"visibility":"default","docs":"Writes a signed 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_i8(2).unwrap();\nwtr.write_i8(-5).unwrap();\nassert_eq!(wtr, b\"\\x02\\xfb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i8"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:239:2101":{"id":"0:239:2101","crate_id":0,"name":"write_f64_into","span":{"filename":"src/lib.rs","begin":[1598,4],"end":[1603,5]},"visibility":"default","docs":"Writes IEEE754 double-precision (8 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"f64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:302:1911":{"id":"0:302:1911","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[2174,4],"end":[2176,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:1866":{"id":"0:37:1866","crate_id":0,"name":"read_u32","span":{"filename":"src/io.rs","begin":[217,4],"end":[221,5]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:1907":{"id":"0:270:1907","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[1983,4],"end":[1985,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282:2066":{"id":"0:282:2066","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2051,4],"end":[2053,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:193:1905":{"id":"0:193:1905","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[506,4],"end":[506,57]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:306:1918":{"id":"0:306:1918","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2194,4],"end":[2201,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:322:1826":{"id":"b:2:2759-0:322:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:346:726":{"id":"0:346:726","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1842,22],"end":[1842,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9962:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9943:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12970:26126":{"id":"2:12970:26126","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12859:26320":{"id":"2:12859:26320","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42427:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2046":{"id":"0:96:2046","crate_id":0,"name":"read_f32_into","span":{"filename":"src/io.rs","begin":[902,4],"end":[909,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:287:2119":{"id":"0:287:2119","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2084,4],"end":[2090,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12877:29664":{"id":"2:12877:29664","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44579:3102","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:228:2060":{"id":"0:228:2060","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/lib.rs","begin":[1305,4],"end":[1307,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f64_into` instead"},"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:1928":{"id":"0:34:1928","crate_id":0,"name":"read_i24","span":{"filename":"src/io.rs","begin":[191,4],"end":[195,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2754-0:322:1826":{"id":"b:2:2754-0:322:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:320:2143":{"id":"0:320:2143","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2280,4],"end":[2289,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:315:2072":{"id":"0:315:2072","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2239,4],"end":[2241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:109:1902":{"id":"0:109:1902","crate_id":0,"name":"write_u16","span":{"filename":"src/io.rs","begin":[1151,4],"end":[1155,5]},"visibility":"default","docs":"Writes an unsigned 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\\x03\\x00\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u16"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1962":{"id":"0:73:1962","crate_id":0,"name":"read_f32","span":{"filename":"src/io.rs","begin":[499,4],"end":[503,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian single-precision floating point number from a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n]);\nassert_eq!(f32::consts::PI, rdr.read_f32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"f32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1049,0],"end":[1049,48]},"visibility":"default","docs":"All types that implement `Read` get methods defined in `ReadBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3491:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["read_i128_into","read_f64","read_u8","read_u128","read_i48","read_i8_into","read_u32","read_uint","read_f32_into_unchecked","read_u16","read_f32_into","read_i32_into","read_i8","read_uint128","read_i16_into","read_u128_into","read_i128","read_u64_into","read_u32_into","read_u48","read_i32","read_i24","read_f64_into","read_i64_into","read_f32","read_int128","read_u64","read_i64","read_u16_into","read_f64_into_unchecked","read_int","read_u24","read_i16"],"trait":{"name":"ReadBytesExt","id":"0:20:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"R"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:189:1907":{"id":"0:189:1907","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[427,4],"end":[427,41]},"visibility":"default","docs":"Writes an unsigned 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:245:2132":{"id":"0:245:2132","crate_id":0,"name":"from_slice_i32","span":{"filename":"src/lib.rs","begin":[1724,4],"end":[1729,5]},"visibility":"default","docs":"Converts the given slice of signed 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i32(&mut numbers);\nassert_eq!(numbers, [5i32.to_be(), 65000i32.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2763:1629":{"id":"2:2763:1629","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42572:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:26351":{"id":"2:12900:26351","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:13966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12357:3396","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:236:2095":{"id":"0:236:2095","crate_id":0,"name":"write_i64_into","span":{"filename":"src/lib.rs","begin":[1512,4],"end":[1517,5]},"visibility":"default","docs":"Writes signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"i64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:328":{"id":"0:328","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,29],"end":[1812,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"2:32873:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2754-0:341:1825":{"id":"b:2:2754-0:341:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2724:265","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2757:135","2:2758:1631"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12950:25207":{"id":"2:12950:25207","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:13966"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290:2145":{"id":"0:290:2145","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2114,4],"end":[2123,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:33543":{"id":"5:5552:33543","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145:1905":{"id":"0:145:1905","crate_id":0,"name":"write_uint","span":{"filename":"src/io.rs","begin":[1442,4],"end":[1450,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite unsigned 40 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_uint::<BigEndian>(312550384361, 5).unwrap();\nwtr.write_uint::<BigEndian>(43, 5).unwrap();\nassert_eq!(wtr, b\"\\x48\\xc5\\x74\\x62\\xe9\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:1850":{"id":"0:178:1850","crate_id":0,"name":"ByteOrder","span":{"filename":"src/lib.rs","begin":[212,0],"end":[1794,1]},"visibility":"public","docs":"`ByteOrder` describes types that can serialize integers as bytes.\n\nNote that `Self` does not appear anywhere in this trait's definition!\nTherefore, in order to use it, you'll need to use syntax like\n`T::read_u16(&[0, 1])` where `T` implements `ByteOrder`.\n\nThis crate provides two types that implement `ByteOrder`: [`BigEndian`]\nand [`LittleEndian`].\nThis trait is sealed and cannot be implemented for callers to avoid\nbreaking backwards compatibility when adding new derived traits.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, BigEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:179:1854","0:180:1862","0:181:1866","0:182:1873","0:183:1880","0:184:1887","0:185:1863","0:186:1897","0:187:1902","0:188:1904","0:189:1907","0:190:1909","0:191:1911","0:192:1913","0:193:1905","0:194:1918","0:195:1923","0:196:1928","0:197:1934","0:198:1939","0:199:1944","0:200:1949","0:201:1929","0:202:1956","0:203:1962","0:204:1969","0:205:1971","0:206:1973","0:207:1976","0:208:1978","0:209:1980","0:210:1983","0:211:1974","0:212:1985","0:213:1987","0:214:1990","0:215:1999","0:216:2007","0:217:2013","0:218:2019","0:219:2025","0:220:2031","0:221:2035","0:222:2039","0:223:2046","0:225:2052","0:226:2056","0:228:2060","0:229:2063","0:230:2066","0:231:2069","0:232:2072","0:233:2086","0:234:2091","0:235:2093","0:236:2095","0:237:2097","0:238:2099","0:239:2101","0:240:2110","0:241:2115","0:242:2119","0:243:2123","0:244:2128","0:245:2132","0:246:2136","0:247:2140","0:248:2143","0:249:2145"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:2961:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:9987:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2509:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10203:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"2:2540:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2504:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2546:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"private::Sealed","id":"0:175:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:291","0:260"]}}},"0:343:462":{"id":"0:343:462","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1842,9],"end":[1842,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336":{"id":"0:336","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32848:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:52:1944":{"id":"0:52:1944","crate_id":0,"name":"read_i64","span":{"filename":"src/io.rs","begin":[347,4],"end":[351,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i64::min_value(), rdr.read_i64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:322:1826":{"id":"b:5:687-0:322:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:3357","5:690:3358","5:691:3359"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70:1956":{"id":"0:70:1956","crate_id":0,"name":"read_int128","span":{"filename":"src/io.rs","begin":[468,4],"end":[472,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:1976":{"id":"0:207:1976","crate_id":0,"name":"write_i32","span":{"filename":"src/lib.rs","begin":[814,4],"end":[816,5]},"visibility":"default","docs":"Writes a signed 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:226:2056":{"id":"0:226:2056","crate_id":0,"name":"read_f64_into","span":{"filename":"src/lib.rs","begin":[1269,4],"end":[1275,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:231:2069":{"id":"0:231:2069","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[1376,4],"end":[1376,51]},"visibility":"default","docs":"Writes unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:233:2086":{"id":"0:233:2086","crate_id":0,"name":"write_i8_into","span":{"filename":"src/lib.rs","begin":[1428,4],"end":[1433,5]},"visibility":"default","docs":"Writes signed 8 bit integers from `src` into `dst`.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to write from a `&[i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `u8` individually.)\n\n# Panics\n\nPanics when `buf.len() != src.len()`.\n\n# Examples\n\nWrite and read `i8` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian, ReadBytesExt};\n\nlet mut bytes = [0; 4];\nlet numbers_given = [1, 2, 0xf, 0xe];\nLittleEndian::write_i8_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nbytes.as_ref().read_i8_into(&mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"i8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:235:2093":{"id":"0:235:2093","crate_id":0,"name":"write_i32_into","span":{"filename":"src/lib.rs","begin":[1484,4],"end":[1489,5]},"visibility":"default","docs":"Writes signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"i32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310:2013":{"id":"0:310:2013","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2214,4],"end":[2216,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:265:1863":{"id":"0:265:1863","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[1960,4],"end":[1966,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:190:1909":{"id":"0:190:1909","crate_id":0,"name":"write_u48","span":{"filename":"src/lib.rs","begin":[446,4],"end":[448,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2126,0],"end":[2302,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_u24","read_i16","write_i48","read_i128_into","read_f64","write_i128_into","write_i16_into","from_slice_i128","read_i48","from_slice_i16","read_f32_into_unchecked","write_int128","read_f32_into","write_i32","write_u48","write_i24","read_i32_into","write_i64_into","read_i16_into","write_i8_into","write_f64_into","read_i128","from_slice_i32","read_u48","read_i32","read_i24","read_f64_into","write_i128","write_i64","write_int","write_i16","write_u24","read_i64_into","read_f32","write_i32_into","read_int128","write_f32_into","read_i64","from_slice_i64","read_f64_into_unchecked","read_int","write_f64","write_f32"],"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:292:1854","0:293:1866","0:294:1880","0:295:1887","0:296:1863","0:298:1897","0:300:1902","0:301:1907","0:302:1911","0:303:1913","0:304:1905","0:306:1918","0:308:1999","0:309:2007","0:310:2013","0:311:2019","0:312:2063","0:313:2066","0:314:2069","0:315:2072","0:316:2110","0:317:2115","0:318:2119","0:319:2123","0:320:2143","0:321:2145"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:185:1863":{"id":"0:185:1863","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[348,4],"end":[348,51]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:338:669":{"id":"0:338:669","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12850:32831":{"id":"2:12850:32831","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12848:32830"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12854:32832":{"id":"2:12854:32832","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:314:2069":{"id":"0:314:2069","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2234,4],"end":[2236,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:1976":{"id":"0:124:1976","crate_id":0,"name":"write_i32","span":{"filename":"src/io.rs","begin":[1286,4],"end":[1290,5]},"visibility":"default","docs":"Writes a signed 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i32::<BigEndian>(-34253).unwrap();\nwtr.write_i32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\xff\\xff\\x7a\\x33\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:1918":{"id":"0:151:1918","crate_id":0,"name":"write_uint128","span":{"filename":"src/io.rs","begin":[1493,4],"end":[1501,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:1929":{"id":"0:201:1929","crate_id":0,"name":"read_int","span":{"filename":"src/lib.rs","begin":[679,4],"end":[681,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220:2031":{"id":"0:220:2031","crate_id":0,"name":"read_i32_into","span":{"filename":"src/lib.rs","begin":[1119,4],"end":[1124,5]},"visibility":"default","docs":"Reads signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:212:1985":{"id":"0:212:1985","crate_id":0,"name":"write_int128","span":{"filename":"src/lib.rs","begin":[926,4],"end":[928,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i128"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32928:3175-0:322:1826":{"id":"a:2:32928:3175-0:322:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32928:3175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12973:27512":{"id":"2:12973:27512","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:34900"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5541:33541":{"id":"5:5541:33541","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323":{"id":"0:323","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,9],"end":[1812,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:324:462"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:294:1880":{"id":"0:294:1880","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[2138,4],"end":[2140,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:687-0:341:1825":{"id":"b:5:687-0:341:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2457:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:683:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:689:3357","5:690:3358","5:691:3359"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12967:26121":{"id":"2:12967:26121","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:219:2025":{"id":"0:219:2025","crate_id":0,"name":"read_i16_into","span":{"filename":"src/lib.rs","begin":[1090,4],"end":[1095,5]},"visibility":"default","docs":"Reads signed 16 bit integers from `src` to `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:332:790":{"id":"0:332:790","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1812,33],"end":[1812,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10211:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12845:883":{"id":"2:12845:883","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12106:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:1978":{"id":"0:208:1978","crate_id":0,"name":"write_i48","span":{"filename":"src/lib.rs","begin":[836,4],"end":[838,5]},"visibility":"default","docs":"Writes a signed 48 bit integer `n` to `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218:2019":{"id":"0:218:2019","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[1066,4],"end":[1066,52]},"visibility":"default","docs":"Reads unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:2443:2950":{"id":"2:2443:2950","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:289:2143":{"id":"0:289:2143","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2102,4],"end":[2111,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:331":{"id":"0:331","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,33],"end":[1812,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10203:150","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:332:790"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12947:32847":{"id":"2:12947:32847","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:13966"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115:1904":{"id":"0:115:1904","crate_id":0,"name":"write_u24","span":{"filename":"src/io.rs","begin":[1205,4],"end":[1209,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u24::<BigEndian>(267).unwrap();\nwtr.write_u24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\x00\\x01\\x0b\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:139:1913":{"id":"0:139:1913","crate_id":0,"name":"write_u128","span":{"filename":"src/io.rs","begin":[1402,4],"end":[1406,5]},"visibility":"default","docs":"Writes an unsigned 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u128"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2758:1631":{"id":"2:2758:1631","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42572:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:1887":{"id":"0:55:1887","crate_id":0,"name":"read_u128","span":{"filename":"src/io.rs","begin":[376,4],"end":[380,5]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83,\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83\n]);\nassert_eq!(16947640962301618749969007319746179, rdr.read_u128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12847:32829":{"id":"2:12847:32829","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2750:753":{"id":"2:2750:753","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2759-0:341:1825":{"id":"b:2:2759-0:341:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:135","2:2763:1629"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:11-0:20:1793":{"id":"0:11-0:20:1793","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,20],"end":[82,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::ReadBytesExt","name":"ReadBytesExt","id":"0:20:1793","glob":false}}},"2:12943:32845":{"id":"2:12943:32845","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:1990":{"id":"0:160:1990","crate_id":0,"name":"write_f64","span":{"filename":"src/io.rs","begin":[1570,4],"end":[1574,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian double-precision floating point number to a `Write`:\n\n```rust\nuse std::f64;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f64::<BigEndian>(f64::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x09\\x21\\xfb\\x54\\x44\\x2d\\x18\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:26123":{"id":"5:5555:26123","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12970:26126"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:232:2072":{"id":"0:232:2072","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[1399,4],"end":[1399,53]},"visibility":"default","docs":"Writes unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:313:2066":{"id":"0:313:2066","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2229,4],"end":[2231,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12861:26321":{"id":"2:12861:26321","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:324:462":{"id":"0:324:462","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1812,9],"end":[1812,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:26357":{"id":"2:12915:26357","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12106:458","str::splitn":"2:12912:26355","self::pattern":"2:12541:13966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44447:3392","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:13964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:1880":{"id":"0:49:1880","crate_id":0,"name":"read_u64","span":{"filename":"src/io.rs","begin":[321,4],"end":[325,5]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83]);\nassert_eq!(918733457491587, rdr.read_u64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:175:1824":{"id":"0:175:1824","crate_id":0,"name":"Sealed","span":{"filename":"src/lib.rs","begin":[172,4],"end":[172,23]},"visibility":"public","docs":"Sealed stops crates other than byteorder from implementing any traits\nthat use it.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:79:1999":{"id":"0:79:1999","crate_id":0,"name":"read_u16_into","span":{"filename":"src/io.rs","begin":[562,4],"end":[569,5]},"visibility":"default","docs":"Reads a sequence of unsigned 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1815,0],"end":[1819,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:251:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12874:2187":{"id":"2:12874:2187","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44311:3105","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:242:2119":{"id":"0:242:2119","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[1660,4],"end":[1660,43]},"visibility":"default","docs":"Converts the given slice of unsigned 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u64(&mut numbers);\nassert_eq!(numbers, [5u64.to_be(), 65000u64.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12883:26362":{"id":"2:12883:26362","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:13966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130:1978":{"id":"0:130:1978","crate_id":0,"name":"write_i48","span":{"filename":"src/io.rs","begin":[1340,4],"end":[1344,5]},"visibility":"default","docs":"Writes a signed 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i48::<BigEndian>(-108363435763825).unwrap();\nwtr.write_i48::<BigEndian>(77).unwrap();\nassert_eq!(wtr, b\"\\x9d\\x71\\xab\\xe7\\x97\\x8f\\x00\\x00\\x00\\x00\\x00\\x4d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213:1987":{"id":"0:213:1987","crate_id":0,"name":"write_f32","span":{"filename":"src/lib.rs","begin":[949,4],"end":[951,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"f32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12912:26355":{"id":"2:12912:26355","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:13966","str::rsplitn":"2:12915:26357"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44429:3394","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12936:32841":{"id":"2:12936:32841","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:204:1969":{"id":"0:204:1969","crate_id":0,"name":"read_f64","span":{"filename":"src/lib.rs","begin":[748,4],"end":[750,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:181:1866":{"id":"0:181:1866","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[269,4],"end":[269,35]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:298:1897":{"id":"0:298:1897","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[2156,4],"end":[2161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12975:32852":{"id":"2:12975:32852","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4739:32852"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44624:7016","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:32842":{"id":"2:12938:32842","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:1983":{"id":"0:210:1983","crate_id":0,"name":"write_i128","span":{"filename":"src/lib.rs","begin":[880,4],"end":[882,5]},"visibility":"default","docs":"Writes a signed 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read n-byte `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:1939":{"id":"0:198:1939","crate_id":0,"name":"read_i48","span":{"filename":"src/lib.rs","begin":[612,4],"end":[614,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:2035":{"id":"0:92:2035","crate_id":0,"name":"read_i64_into","span":{"filename":"src/io.rs","begin":[820,4],"end":[827,5]},"visibility":"default","docs":"Reads a sequence of signed 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:1969":{"id":"0:76:1969","crate_id":0,"name":"read_f64","span":{"filename":"src/io.rs","begin":[530,4],"end":[534,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian double-precision floating point number from a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n]);\nassert_eq!(f64::consts::PI, rdr.read_f64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"f64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12889:3337":{"id":"2:12889:3337","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42427:198","prim@char":"1:12106:458","self::pattern":"2:12541:13966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:244:2128":{"id":"0:244:2128","crate_id":0,"name":"from_slice_i16","span":{"filename":"src/lib.rs","begin":[1699,4],"end":[1704,5]},"visibility":"default","docs":"Converts the given slice of signed 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 6500];\nBigEndian::from_slice_i16(&mut numbers);\nassert_eq!(numbers, [5i16.to_be(), 6500i16.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:272:1913":{"id":"0:272:1913","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[1993,4],"end":[1995,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42554:3216-0:322:1826":{"id":"a:2:42554:3216-0:322:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42554:3216","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42553:3217-0:341:1825":{"id":"a:2:42553:3217-0:341:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42553:3217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12853:26301":{"id":"2:12853:26301","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12096:13967"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23:2607":{"id":"0:23:2607","crate_id":0,"name":"read_i8","span":{"filename":"src/io.rs","begin":[85,4],"end":[89,5]},"visibility":"default","docs":"Reads a signed 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![0x02, 0xfb]);\nassert_eq!(2, rdr.read_i8().unwrap());\nassert_eq!(-5, rdr.read_i8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12846:3298":{"id":"2:12846:3298","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:230:2066":{"id":"0:230:2066","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[1353,4],"end":[1353,51]},"visibility":"default","docs":"Writes unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:223:2046":{"id":"0:223:2046","crate_id":0,"name":"read_f32_into","span":{"filename":"src/lib.rs","begin":[1207,4],"end":[1213,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:1973":{"id":"0:118:1973","crate_id":0,"name":"write_i24","span":{"filename":"src/io.rs","begin":[1232,4],"end":[1236,5]},"visibility":"default","docs":"Writes a signed 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i24::<BigEndian>(-34253).unwrap();\nwtr.write_i24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\xff\\x7a\\x33\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12969:26125":{"id":"2:12969:26125","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:1794":{"id":"0:106:1794","crate_id":0,"name":"WriteBytesExt","span":{"filename":"src/io.rs","begin":[1073,0],"end":[1575,1]},"visibility":"public","docs":"Extends [`Write`] with methods for writing numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a [`Write`]:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, vec![2, 5, 3, 0]);\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:107:2762","0:108:2769","0:109:1902","0:112:1971","0:115:1904","0:118:1973","0:121:1907","0:124:1976","0:127:1909","0:130:1978","0:133:1911","0:136:1980","0:139:1913","0:142:1983","0:145:1905","0:148:1974","0:151:1918","0:154:1985","0:157:1987","0:160:1990"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3548:2751","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:163"]}}},"0:308:1999":{"id":"0:308:1999","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2204,4],"end":[2206,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:203:1962":{"id":"0:203:1962","crate_id":0,"name":"read_f32","span":{"filename":"src/lib.rs","begin":[725,4],"end":[727,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:691:3359":{"id":"5:691:3359","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58:1949":{"id":"0:58:1949","crate_id":0,"name":"read_i128","span":{"filename":"src/io.rs","begin":[402,4],"end":[406,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i128::min_value(), rdr.read_i128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:293:1866":{"id":"0:293:1866","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[2133,4],"end":[2135,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:1971":{"id":"0:205:1971","crate_id":0,"name":"write_i16","span":{"filename":"src/lib.rs","begin":[770,4],"end":[772,5]},"visibility":"default","docs":"Writes a signed 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2446:25186":{"id":"2:2446:25186","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:344":{"id":"0:344","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,16],"end":[1842,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2961:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:356":{"id":"0:356","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2504:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:357:669"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12844":{"id":"2:12844","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12845:883","2:12846:3298","2:12847:32829","2:12848:32830","2:12850:32831","2:12853:26301","2:12854:32832","2:12855:340","2:12856:2027","2:12857:26319","2:12859:26320","2:12861:26321","2:12863:26322","2:12865:32833","2:12866:32834","2:12867:26343","2:12868:26344","2:12869:26347","2:12870:26348","2:12872:7132","2:12873:7143","2:12874:2187","2:12875:30976","2:12876:31008","2:12877:29664","2:12878:32835","2:12879:31026","2:12880:26361","2:12883:26362","2:12886:26363","2:12889:3337","2:12893:3297","2:12897:26349","2:12900:26351","2:12903:26353","2:12906:32836","2:12909:32837","2:12912:26355","2:12915:26357","2:12918:26359","2:12921:26360","2:12924:2963","2:12927:32838","2:12930:32839","2:12933:32840","2:12936:32841","2:12938:32842","2:12940:32843","2:12942:32844","2:12943:32845","2:12944:32846","2:12947:32847","2:12950:25207","2:12953:26364","2:12956:32848","2:12959:32849","2:12962:32850","2:12965:32851","2:12967:26121","2:12968:27508","2:12969:26125","2:12970:26126","2:12971:26127","2:12972:27511","2:12973:27512","2:12974:27513","2:12975:32852","2:12977:8582","2:12978:32853"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:225:2052":{"id":"0:225:2052","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/lib.rs","begin":[1242,4],"end":[1244,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f32_into` instead"},"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:1971":{"id":"0:112:1971","crate_id":0,"name":"write_i16","span":{"filename":"src/io.rs","begin":[1178,4],"end":[1182,5]},"visibility":"default","docs":"Writes a signed 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i16::<BigEndian>(193).unwrap();\nwtr.write_i16::<BigEndian>(-132).unwrap();\nassert_eq!(wtr, b\"\\x00\\xc1\\xff\\x7c\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i16"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261:1854":{"id":"0:261:1854","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[1940,4],"end":[1942,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:296:1863":{"id":"0:296:1863","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[2148,4],"end":[2153,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2444-0:341:1825":{"id":"b:2:2444-0:341:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2438:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2446:25186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12921:26360":{"id":"2:12921:26360","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:13964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:32838":{"id":"2:12927:32838","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12541:13966","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::matches":"2:12924:2963"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44547:7127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:13964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:33544":{"id":"5:5553:33544","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:3176","`String`":"5:7544:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:3176","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:2123":{"id":"0:288:2123","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2093,4],"end":[2099,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12972:27511":{"id":"2:12972:27511","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:34900"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:255:2158":{"id":"0:255:2158","crate_id":0,"name":"LE","span":{"filename":"src/lib.rs","begin":[1854,0],"end":[1854,27]},"visibility":"public","docs":"A type alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:20:1793":{"id":"0:20:1793","crate_id":0,"name":"ReadBytesExt","span":{"filename":"src/io.rs","begin":[30,0],"end":[1045,1]},"visibility":"public","docs":"Extends [`Read`] with methods for reading numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`]:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:21:2600","0:23:2607","0:25:1854","0:28:1923","0:31:1862","0:34:1928","0:37:1866","0:40:1934","0:43:1873","0:46:1939","0:49:1880","0:52:1944","0:55:1887","0:58:1949","0:61:1863","0:64:1929","0:67:1897","0:70:1956","0:73:1962","0:76:1969","0:79:1999","0:81:2007","0:83:2013","0:85:2019","0:87:2707","0:88:2025","0:90:2031","0:92:2035","0:94:2039","0:96:2046","0:98:2052","0:100:2056","0:102:2060"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3491:2588","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:104"]}}},"0:183:1880":{"id":"0:183:1880","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[309,4],"end":[309,35]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12868:26344":{"id":"2:12868:26344","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12867:26343","str::split_at_mut_checked":"2:12870:26348"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12897:26349":{"id":"2:12897:26349","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12541:13966","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::split_whitespace":"2:12875:30976","str::rsplit":"2:12903:26353"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44325:3106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:285:2110":{"id":"0:285:2110","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2066,4],"end":[2072,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:327:726":{"id":"0:327:726","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1812,22],"end":[1812,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:9962:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9943:233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12977:8582":{"id":"2:12977:8582","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4740:8582"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44633:7007","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5556:26124":{"id":"5:5556:26124","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12971:26127"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:182:1873":{"id":"0:182:1873","crate_id":0,"name":"read_u48","span":{"filename":"src/lib.rs","begin":[288,4],"end":[290,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:303:1913":{"id":"0:303:1913","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[2179,4],"end":[2181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:257:2169":{"id":"0:257:2169","crate_id":0,"name":"NativeEndian","span":{"filename":"src/lib.rs","begin":[1891,0],"end":[1891,37]},"visibility":"public","docs":"Defines system native-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\nOn this platform, this is an alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":["#[cfg(target_endian = \"little\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:2757:135":{"id":"2:2757:135","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2728:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:3562:1644":{"id":"2:3562:1644","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40190:6878","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:358":{"id":"0:358","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,55],"end":[1842,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["le","lt","ge","gt"],"trait":{"name":"PartialOrd","id":"2:2546:209","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:359:1146"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:309:2007":{"id":"0:309:2007","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2209,4],"end":[2211,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:12-0:106:1794":{"id":"0:12-0:106:1794","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,34],"end":[82,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::WriteBytesExt","name":"WriteBytesExt","id":"0:106:1794","glob":false}}},"0:186:1897":{"id":"0:186:1897","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[368,4],"end":[368,55]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:157:1987":{"id":"0:157:1987","crate_id":0,"name":"write_f32","span":{"filename":"src/io.rs","begin":[1541,4],"end":[1545,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian single-precision floating point number to a `Write`:\n\n```rust\nuse std::f32;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f32::<BigEndian>(f32::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x49\\x0f\\xdb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:1980":{"id":"0:209:1980","crate_id":0,"name":"write_i64","span":{"filename":"src/lib.rs","begin":[858,4],"end":[860,5]},"visibility":"default","docs":"Writes a signed 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222:2039":{"id":"0:222:2039","crate_id":0,"name":"read_i128_into","span":{"filename":"src/lib.rs","begin":[1177,4],"end":[1182,5]},"visibility":"default","docs":"Reads signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12865:32833":{"id":"2:12865:32833","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12112:1548","str::slice_mut_unchecked":"2:12866:32834","crate::ops::Index":"2:40008:8612"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12909:32837":{"id":"2:12909:32837","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12541:13966","str::split":"2:12897:26349","prim@char":"1:12106:458","str::split_terminator":"2:12906:32836"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44393:7120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:13964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12863:26322":{"id":"2:12863:26322","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12965:32851":{"id":"2:12965:32851","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12502:134","`FromStr`":"2:12501:8756"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42572:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12501:8756","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12501:8756","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:33540":{"id":"5:5537:33540","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:3176","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:3176","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:321:2145":{"id":"0:321:2145","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2292,4],"end":[2301,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:355":{"id":"0:355","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32848:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12942:32844":{"id":"2:12942:32844","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191:1911":{"id":"0:191:1911","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[467,4],"end":[467,41]},"visibility":"default","docs":"Writes an unsigned 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:277:1999":{"id":"0:277:1999","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2026,4],"end":[2028,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:264:1887":{"id":"0:264:1887","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[1955,4],"end":[1957,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1897":{"id":"0:67:1897","crate_id":0,"name":"read_uint128","span":{"filename":"src/io.rs","begin":[460,4],"end":[464,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:1907":{"id":"0:121:1907","crate_id":0,"name":"write_u32","span":{"filename":"src/io.rs","begin":[1259,4],"end":[1263,5]},"visibility":"default","docs":"Writes an unsigned 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u32::<BigEndian>(267).unwrap();\nwtr.write_u32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\x00\\x00\\x01\\x0b\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:340:1146":{"id":"0:340:1146","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1812,55],"end":[1812,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31592:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:32840":{"id":"2:12933:32840","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12541:13966","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::match_indices":"2:12930:32839"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44493:7124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:13964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:3130":{"id":"5:5554:3130","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1845,0],"end":[1849,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2795:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:254:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12903:26353":{"id":"2:12903:26353","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12541:13966","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::split":"2:12897:26349"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44343:3390","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:13964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:192:1913":{"id":"0:192:1913","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[486,4],"end":[486,43]},"visibility":"default","docs":"Writes an unsigned 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12953:26364":{"id":"2:12953:26364","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:13966"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:13964","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3560-0:322:1826":{"id":"b:2:3560-0:322:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3562:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12872:7132":{"id":"2:12872:7132","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12106:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44295:7113","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:229:2063":{"id":"0:229:2063","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[1330,4],"end":[1330,51]},"visibility":"default","docs":"Writes unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:199:1944":{"id":"0:199:1944","crate_id":0,"name":"read_i64","span":{"filename":"src/lib.rs","begin":[634,4],"end":[636,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2039":{"id":"0:94:2039","crate_id":0,"name":"read_i128_into","span":{"filename":"src/io.rs","begin":[858,4],"end":[868,5]},"visibility":"default","docs":"Reads a sequence of signed 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:2007":{"id":"0:81:2007","crate_id":0,"name":"read_u32_into","span":{"filename":"src/io.rs","begin":[597,4],"end":[604,5]},"visibility":"default","docs":"Reads a sequence of unsigned 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263:1880":{"id":"0:263:1880","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[1950,4],"end":[1952,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:1905":{"id":"0:273:1905","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[1998,4],"end":[2009,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:214:1990":{"id":"0:214:1990","crate_id":0,"name":"write_f64","span":{"filename":"src/lib.rs","begin":[972,4],"end":[974,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"f64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:329":{"id":"0:329","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,29],"end":[1812,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2509:132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:354:469":{"id":"0:354:469","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1842,39],"end":[1842,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31592:203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12940:32843":{"id":"2:12940:32843","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2744-0:322:1826":{"id":"b:2:2744-0:322:1826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2721:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2718:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2747:3291"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:246:2136":{"id":"0:246:2136","crate_id":0,"name":"from_slice_i64","span":{"filename":"src/lib.rs","begin":[1749,4],"end":[1754,5]},"visibility":"default","docs":"Converts the given slice of signed 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i64(&mut numbers);\nassert_eq!(numbers, [5i64.to_be(), 65000i64.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:206:1973":{"id":"0:206:1973","crate_id":0,"name":"write_i24","span":{"filename":"src/lib.rs","begin":[792,4],"end":[794,5]},"visibility":"default","docs":"Writes a signed 24 bit integer `n` to `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:326":{"id":"0:326","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,22],"end":[1812,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:9987:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:327:726"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12857:26319":{"id":"2:12857:26319","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42427:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:292:1854":{"id":"0:292:1854","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[2128,4],"end":[2130,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12873:7143":{"id":"2:12873:7143","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12106:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44301:7114","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12879:31026":{"id":"2:12879:31026","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44617:7131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2504:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:338:669"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:275:1918":{"id":"0:275:1918","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2012,4],"end":[2023,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3560-0:341:1825":{"id":"b:2:3560-0:341:1825","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32847:2742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:341:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3562:1644"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:295:1887":{"id":"0:295:1887","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[2143,4],"end":[2145,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:2963":{"id":"2:12924:2963","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12541:13966","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::rmatches":"2:12927:32838"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44529:7126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:7783","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83:2013":{"id":"0:83:2013","crate_id":0,"name":"read_u64_into","span":{"filename":"src/io.rs","begin":[635,4],"end":[642,5]},"visibility":"default","docs":"Reads a sequence of unsigned 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3010:233","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:318:2119":{"id":"0:318:2119","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2262,4],"end":[2268,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280:2019":{"id":"0:280:2019","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2041,4],"end":[2043,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:194:1918":{"id":"0:194:1918","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[526,4],"end":[526,61]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:311:2019":{"id":"0:311:2019","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2219,4],"end":[2221,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12974:27513":{"id":"2:12974:27513","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:34900"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:262:1866":{"id":"0:262:1866","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[1945,4],"end":[1947,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:7616:6693":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:2721:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:5743:5154":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:1703:5913":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:5867:6336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:1826:7815":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:12850:4170":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:1682:5903":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8307:8682":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:22105:1824":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:4377:7828":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:46909:7201":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:4955:6204":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:11399:7601":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:7692:6711":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:9091:7876":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:44168:3372":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:42493:3385":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:13254:4295":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:12283:7121":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:16049:5008":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:14041:4445":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:10559:7576":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:621:7806":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:2971:3014":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:11395:7600":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:15374:4816":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:32929:3261":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"11:0:2854":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"11:2383:3384":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:13695:4397":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4449:5999":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:5148:7830":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:14698:4597":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:9054:7872":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:16146:5033":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:6691:6548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:41128:7032":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11194:21073":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:48637:7269":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:3049:20114":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:12112:1548":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"1:9118:25230":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:12118:807":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:15200:4769":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:6569:5090":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:3046:14209":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:12246:7116":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:5044:6258":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"16:5661:5147":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:2504:5064":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:15868:4950":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:42501:3302":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:44885:7148":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"6:596:5782":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:44393:7120":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:7343:6675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13235:4290":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:46793:7198":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:4182:3082":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:3343:3765":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:4884:6168":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:48497:7265":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:40012:6872":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:14786:4660":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:7828:5420":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:12077:8589":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:4932:6193":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:2443:3746":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"5:7644:3769":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:16062:5014":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:7610:7899":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:10701:7381":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:10455:3808":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:10988:7586":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"8:0:2851":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"9:450:19963":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:4053:5115":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:7053:28205":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:1455:3302":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"18:636:3939":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"11:396:3716":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:7708:5101":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:4417:5117":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:6467:5243":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:13167:31736":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:44157:3379":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:10984:3849":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:13922:4431":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:15671:4916":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:7792:20983":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:261:7559":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:21340:30700":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:9084:7875":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:4543:6043":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:8866:7867":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:3581:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:43451:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"11:837:7738":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:2032:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:45241:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:4366:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"18:481:3915":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:5651:3763":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:26433:273":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"18:719:3950":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:4841:6151":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:15253:4784":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:4602:3012":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:2154:6718":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:2110:3076":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:45262:214":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:33721:14196":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:7388:6688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:1537:5804":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:6879:5313":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:6456:5242":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:8632:7363":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:44429:3394":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:21555:8816":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:6017:20974":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:918:7737":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:9678:21026":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:6682:6542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:13787:4413":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:6114:6464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:15345:4809":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:16134:5030":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:15321:4805":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:16087:5022":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:7669:3842":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:10111:7881":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:5696:20972":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11256:7597":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:43697:7100":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:3019:8809":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:6037:3830":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:6263:6518":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:4388:5958":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4989:6229":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:23800:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:2418:3047":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:41231:7045":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"11:1676:3718":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:13202:4284":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:10265:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:10992:3390":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:1887:7818":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:11173:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:5992:6400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"17:10803:7580":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:9759:21038":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12474:4096":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"5:6868:3775":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:44642:7015":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:8205:20985":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4351:5931":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:951:7744":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:14359:4520":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:2670:5071":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:580:5773":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"0:255:2158":{"crate_id":0,"path":["byteorder","LE"],"kind":"type_alias"},"1:8239:3101":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:4060:8692":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:5928:6366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:5921:6362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"11:875:7743":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:3388:261":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:4334:6751":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:11590:4113":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"5:281:3176":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:43660:3026":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:6658:6525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:3600:5109":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12584:7653":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:11476:5621":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:2504:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"18:564:3927":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:4628:6088":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:47082:7207":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:2973:32585":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:46717:7196":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:4745:6098":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:7599:4058":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:4377:3008":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:4783:6118":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:6582:6757":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"11:1566:20043":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:6878:3776":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"16:6944:34086":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:44821:7146":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:8227:3100":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:6915:5093":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"10:44:5631":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:9169:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:8621:7362":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:42425:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:12357:3396":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:8396:7866":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:5648:7657":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"11:102:5608":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:14170:4485":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:44773:7145":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"11:1007:5342":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:1824:7814":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:5634:5143":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:42938:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:10102:4063":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:11444:7846":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:12501:8756":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:22718:30967":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:7342:34089":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:4497:5119":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:42899:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:9962:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:12113:1634":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11727:7623":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:48666:7272":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:15062:4736":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:3187:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:22316:8901":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:43057:7785":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:46939:7202":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:4847:6154":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:6913:6651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:2062:7762":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:4171:7774":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:45120:7172":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"16:7391:20981":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:13026:4242":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:47577:7228":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"9:52:8317":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:4947:6199":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"16:5816:5165":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:6386:5235":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:8563:8755":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:12230:4172":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:15101:4747":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"18:491:3916":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:5967:6753":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:12784:4222":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:4603:6075":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:3491:2588":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:42510:3213":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:10880:3396":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:3014:8807":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:6798:6583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:15356:4813":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8936:3302":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"11:1142:7750":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:10246:3022":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:4710:6094":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:14439:4528":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13365:4315":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:22544:6768":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:6496:7842":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:12117:702":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:7913:7852":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:12380:4193":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:15329:4806":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:13856:4420":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:44220:3386":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:41240:7046":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:7657:6702":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:4549:6046":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:11155:4086":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:14221:4490":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:8296:7862":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:3251:7569":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"11:1923:5620":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:12129:1708":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:2718:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:11364:3851":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:4766:8744":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:42326:30982":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"9:330:5670":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:4789:6121":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:46362:7182":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:5974:6388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:3903:7826":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"14:202:13980":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:119:14566":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:11631:3383":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:6813:6589":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:8239:5395":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:40988:8645":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:7651:6701":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:12566:13963":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:9918:21042":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:11141:7592":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:21549:8813":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"11:2554:34065":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:40107:221":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:10726:34093":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:6014:14486":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:6226:7681":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:45076:7169":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:12103:7637":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:2675:1824":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"11:1087:34071":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:660:7553":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:4556:6049":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:42385:7082":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:363:7804":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:21294:30693":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:15367:4814":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:6819:6590":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:10313:1515":{"crate_id":2,"path":["core","slice"],"kind":"module"},"6:6943:6666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:4773:7572":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:7905:3174":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:6425:5239":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:1486:5616":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8473:7351":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:5017:5135":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12410:4197":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:501:5725":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"15:327:8314":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"11:856:7741":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"18:0:2860":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:9891:21022":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:5005:3082":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:7450:29651":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:1650:5885":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:3346:3124":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13516:4352":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:859:3302":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:7054:5336":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:14843:4695":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:2380:5059":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:2268:7822":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:42404:7083":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:46318:7180":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:14312:4506":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:4769:8717":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:38599:14203":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:2144:3743":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"11:2569:6737":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:7326:32581":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:4108:8695":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"7:0:1698":{"crate_id":7,"path":["unwind"],"kind":"module"},"11:1910:5618":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:11294:7598":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"11:1160:7751":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:44547:7127":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:1968:8641":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:1270:5342":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:1885:7817":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"11:2498:20038":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:32959:3260":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:3557:29890":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:6171:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:7987:3173":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:8071:7855":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:12110:339":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:12459:4080":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"16:3915:5114":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:3315:5107":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:790:3727":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:4449:7777":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:533:3816":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:10374:7867":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"18:574:3917":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:9493:3844":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:6260:7841":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:21352:30697":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:4887:8702":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:10837:3106":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:12220:4170":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:4046:8690":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:34674:14202":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:3738:2390":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:2810:5077":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:10990:3850":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"9:426:19965":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:4488:6019":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:12096:13967":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:15192:4768":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:5777:3082":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:9985:7078":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:3584:7571":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:34073:14198":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:2035:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:11549:4110":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:46492:7187":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:47499:7227":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12335:4188":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:44633:7007":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:9813:21040":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:10137:4064":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12366:21167":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:15645:4907":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:22301:1824":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:40946:7024":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:44311:3105":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:1536:7761":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:4800:6128":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:7892:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:9006:8782":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:10706:7383":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:10355:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"6:569:5768":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:4449:7829":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:3159:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:4020:3746":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:41087:3103":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:3041:14208":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:40847:7014":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:7523:5402":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:6315:3830":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:0:2858":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:8081:3119":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:5140:6300":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:7651:7727":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:10724:7389":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:4434:5992":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"0:257:2169":{"crate_id":0,"path":["byteorder","NativeEndian"],"kind":"type_alias"},"11:1051:7747":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:10051:1826":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:6687:5280":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:40065:219":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:44599:7129":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:7948:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:7513:5401":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:123:14567":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"9:393:19964":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:10711:7291":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"6:5897:6353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:42554:3216":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:13336:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:44608:7130":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:23060:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:47341:7224":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:6963:3837":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:3433:13944":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:34191:14199":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:15133:4754":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:6531:5252":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:23242:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"11:1107:7749":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:8355:3502":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:12264:4182":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:8207:3132":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:13285:4299":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"14:0:2856":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:34014:8810":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:1602:5619":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:11817:21142":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:31024:3044":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:7569:7772":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:11168:21072":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:4705:6573":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:14251:4495":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:3010:3072":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:13083:4254":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:4968:6214":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:15079:4741":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:401:7560":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:4613:5123":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:40784:7008":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:44933:7157":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:6969:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:40041:217":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:903:3765":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:45072:7168":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:7477:6738":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:671:7557":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"11:2469:3765":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:14208:4489":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:4095:3082":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:14887:4700":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:727:3953":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:6742:5293":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:10746:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:11701:7618":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:22845:6798":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:12029:4162":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:3065:3961":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:12128:858":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:40927:7023":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:9179:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:10896:4077":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:2933:20112":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:15527:4877":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:44589:7128":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:7219:2179":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:7613:7726":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:0:2859":{"crate_id":17,"path":["object"],"kind":"module"},"2:45360:7179":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:12930:21047":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:44447:3392":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:22795:31000":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:7736:5410":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"16:7722:5091":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:7598:6690":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"14:160:7732":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"9:237:7100":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"5:7277:3368":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:6741:6576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:595:4058":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:4862:5130":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:40837:7013":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:15013:4725":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:588:8581":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:11755:7626":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:8884:7364":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:15224:4776":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:4808:8705":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:2969:20113":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:22706:6779":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:21958:8819":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:6053:227":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:4835:5129":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:4889:5131":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:4032:8689":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:3193:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:7558:6744":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:15087:4744":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:654:14925":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:8134:5471":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:44147:3378":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:4870:6163":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12166:7642":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:45132:14290":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:645:8584":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:4529:6035":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:11113:7590":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:1063:7747":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:5117:6293":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"16:6268:34091":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"11:299:5609":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:7015:5332":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:6100:6462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:7534:5097":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:13832:4419":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"5:7491:31007":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10471:34096":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:12180:7643":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:32823:7790":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:7935:7293":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:1604:5848":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:47129:7208":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:45347:5629":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:8167:7731":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:6901:5092":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:2959:3257":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:12119:804":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:10522:3846":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:48581:7267":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:15990:4995":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:9234:7878":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"5:3184:3384":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:46961:7203":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:6128:6469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:21306:30693":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:11590:7825":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:6927:6660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:1439:3385":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:637:7807":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:1913:15917":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:41109:7029":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:14099:4471":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:15480:4859":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:11550:7824":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:830:3730":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:10633:1824":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:1574:3384":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:14181:4486":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"18:690:3943":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:6877:8811":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:9139:7375":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"11:687:3385":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"14:165:20048":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:6363:227":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:12921:4188":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10785:34097":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:6352:8904":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:47653:7230":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:6492:7057":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:41138:7033":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"0:178:1850":{"crate_id":0,"path":["byteorder","ByteOrder"],"kind":"trait"},"2:3183:3172":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:7284:3213":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:2983:32445":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:3378:3448":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:10667:34098":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:10881:21054":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:14934:4708":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:2438:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:22666:6771":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:5941:6375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:43685:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:5859:6334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:13383:4316":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:8283:3106":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:4462:5118":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:3230:33762":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"14:40:4270":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:11426:7603":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"18:531:3922":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11714:7621":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:6415:5238":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:10476:3125":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"11:700:3302":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:4455:6001":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:32847:2742":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:7650:3840":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:10925:7366":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:47387:7225":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:11449:4006":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:15493:4865":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:10006:3001":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:12052:4163":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:48756:7278":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:6889:6641":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4977:6220":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:4303:7776":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:41622:7056":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:32812:7789":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:9987:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:44128:3376":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10716:7578":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:12541:13966":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:5878:3746":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:2228:7568":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:4755:6105":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"7:31:19949":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:11041:4096":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:22330:3056":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:11014:7588":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:6120:6467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:4981:8743":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:10852:21053":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:13491:4348":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:12126:1652":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:9651:8337":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13882:4130":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:47837:7232":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:44910:7149":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:6212:3813":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:21494:1824":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:48435:7264":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:6968:20979":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:23610:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"11:2352:7747":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:11226:7593":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:8281:5480":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:13976:4439":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:45254:234":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:13219:7787":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:11536:4109":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:42615:3384":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"5:903:3384":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:43668:7099":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:7503:5096":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:5760:20973":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:24031:243":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:12082:3446":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:41170:7039":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11743:7625":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:41671:7061":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:3265:3125":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:15631:4905":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:15566:4886":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:6499:5102":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:15384:4821":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:12153:7641":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:12091:7636":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:15160:4758":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:31620:3272":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:4776:6117":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:42564:3503":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:1115:33627":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:32846:244":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:14087:4469":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10950:7583":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:15279:4794":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:46408:7184":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:1528:5799":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:42623:3385":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:12572:7652":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:44119:3377":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:14266:4499":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13707:4399":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:3251:5620":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:0:314":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:5194:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:33535:5352":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:44325:3106":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:5481:7833":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:5067:864":{"crate_id":2,"path":["core","iter"],"kind":"module"},"18:113:25168":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:9061:25208":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:6012:6416":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:38764:14206":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:11645:4118":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:12131:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:14896:4701":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:7738:7288":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:12191:4165":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:46338:7181":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:4629:3011":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:14878:4696":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:22464:8894":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:42572:233":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:44269:7109":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:43155:2997":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:14296:4502":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:42196:7067":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:47417:7226":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5068:6265":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:4440:5994":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:47263:7211":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4902:6177":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11345:4101":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"5:40:3720":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:10957:3397":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:46985:7204":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"11:2548:5624":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:1710:5916":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:5995:5042":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:6587:3796":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:39922:3504":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:3460:7570":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:6960:7696":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:46763:7197":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4860:6159":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:9790:21039":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:8370:7862":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:32873:251":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:7544:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:7356:6736":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:15294:4798":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:11097:7365":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:2509:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:8351:7339":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:4527:5120":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"9:177:8328":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"11:832:7752":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:4183:7775":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:844:8600":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:15733:4929":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:3305:3127":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13961:4436":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"18:652:3917":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:7556:6689":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:1832:1199":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:7782:5412":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12445:7648":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:10357:3800":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:1040:5342":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:10417:3845":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"5:4866:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:11052:7578":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:12072:8339":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12387:21168":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:41415:7052":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"11:787:5616":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:12758:4221":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:1505:7736":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:14373:4521":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:14765:4652":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:43405:3006":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:15519:4874":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11932:7628":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:42543:3214":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:7306:3746":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:555:5760":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:8605:7359":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:7544:5403":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:1596:5843":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:2966:254":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:4703:6571":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:11890:3857":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:11604:4114":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:6228:6493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:16180:4305":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:6560:3710":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"5:1495:7752":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:7533:3761":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:15546:4883":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:1094:7562":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:536:5039":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:15301:4799":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:7918:7291":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:2428:5061":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:10775:25232":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:1607:5620":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"16:8154:7728":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:9198:7376":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:46462:7186":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12432:7647":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"5:1301:7745":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:42979:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:9646:32031":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:8455:3209":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:4921:5132":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12953:4232":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:4344:5116":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:3172:3107":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:7884:20984":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:6086:6451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:10282:26064":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:12121:806":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:48833:7281":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"11:2423:3302":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:40795:7009":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:11679:29913":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:16170:4300":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:13648:4385":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"16:6332:5082":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:10251:3023":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:2712:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:8270:3104":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:5306:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:10813:34095":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"16:6792:5307":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:48771:7279":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"11:2231:5621":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:45335:7178":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:12290:4183":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:7371:6678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:10482:3123":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:8001:2390":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:12797:4224":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:8912:7366":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"14:187:20055":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:34847:5361":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:8076:7856":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:4:1125":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:46615:7192":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:6136:3825":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"18:96:25167":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:16109:5024":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:4806:8703":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:2351:3056":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"5:1286:7747":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:15:2229":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:11113:3393":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:644:3917":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:12999:4236":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:5866:5173":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:43915:7107":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:4401:5968":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:15507:4871":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:3032:5104":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"11:2562:5626":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:14145:4481":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:6531:3724":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:10925:21055":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:15747:4932":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:3432:3133":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:14757:4649":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:12418:7645":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"17:10520:34101":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11469:7607":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:4566:6056":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:2457:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:1054:7745":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"14:7:7732":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:13448:4332":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13097:4255":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:4195:29622":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:2266:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:8615:3384":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:14969:4712":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"16:7768:5089":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:7896:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:43435:5439":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:48718:7276":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:4092:3385":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:12972:4235":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:10004:3000":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:1424:3384":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:2728:264":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:4854:6156":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:40823:7012":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:13297:4300":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:7507:6741":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:9998:2998":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:13633:4381":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"14:31:7732":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:12255:4181":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:4878:6167":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:11978:7631":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13121:4269":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:47031:7206":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:4252:3384":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:16160:5034":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:14778:4659":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:2703:6730":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:5403:1825":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:22107:8815":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:41221:7044":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11269:4080":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:40807:31040":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:41100:7027":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:3558:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:32816:5395":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:7441:14181":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"11:2140:7745":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:5955:6386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:1596:5618":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:12324:4186":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:1718:5920":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:43500:3007":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:12109:1162":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:5322:5139":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:22650:6770":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:7385:3302":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:5637:8761":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:3029:5356":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:3082:5357":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:13663:4390":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:12115:7638":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:6837:6601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:43169:2998":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:47160:7209":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:13684:4394":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:23151:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:44375:7119":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:2548:5066":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:1387:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:13273:4296":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:2644:5070":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:10812:3385":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:46633:7193":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:357:7803":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:3996:8688":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:13909:4429":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11459:7606":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:4297:7827":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:1900:3074":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:2197:7565":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:42362:7338":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:4806:14027":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:16098:5023":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:30990:3043":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:15212:4775":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:14122:4480":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:6804:6585":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"11:1891:3746":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:9464:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:12202:21166":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:31058:31032":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"5:1477:5615":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:7713:1824":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:40908:14034":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:6083:20084":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:3191:5618":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:1578:3302":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:46563:7190":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:1697:5912":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:45095:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:2321:5050":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:7090:5341":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:9994:2996":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:44705:13978":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:6844:5309":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:42821:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:2359:5058":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:42704:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:3315:218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:6401:5084":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"11:2304:5342":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:12120:805":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:2596:5068":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:12116:700":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:7067:5339":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:22733:6781":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:9624:21019":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:34328:14200":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:6845:3763":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:15689:4922":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:5435:5141":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"11:1903:5617":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:11675:4204":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:11991:4160":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:4054:8691":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:2031:7564":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:1507:5791":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:10191:8763":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:6532:3834":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:21547:1824":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:10892:7835":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:23515:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:1151:33628":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:5727:5152":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:22779:31025":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:5712:5149":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"0:256:2166":{"crate_id":0,"path":["byteorder","NetworkEndian"],"kind":"type_alias"},"6:5052:6260":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:11027:4051":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:7985:7854":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:12088:25226":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:5891:3823":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:44617:7131":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:8344:7338":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13322:4305":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:7102:20980":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:10315:4069":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:5808:258":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:8990:8780":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:10784:25217":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:11001:7587":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:5982:5186":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:2666:3803":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:9104:7372":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"11:2542:5623":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:43900:7106":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:10016:21020":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:7628:3765":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:12872:4227":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"13:226:5607":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11632:4117":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:5905:5176":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:2435:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:5698:3830":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11439:7604":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:15337:4808":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:928:8600":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:6204:7666":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:3797:5111":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:5705:7286":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:1795:642":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:1514:5794":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:12140:7640":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:6781:6578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:4864:3821":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:1809:666":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:483:5717":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:4454:7778":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:1639:5877":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:13935:4432":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:5030:3205":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:43919:3373":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:4195:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"0:0:2465":{"crate_id":0,"path":["byteorder"],"kind":"module"},"2:40025:220":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:7702:6713":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:6818:5308":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:6676:3835":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:48703:7275":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:2847:7773":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:14426:4527":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:4928:7573":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"17:10569:34094":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:527:5745":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:42860:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:3051:14210":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"16:2696:5072":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:21568:6767":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:9029:7371":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:48295:7262":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:12301:4184":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:574:5770":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:45048:7162":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:41256:3937":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:435:4014":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:7460:3755":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:3232:25784":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:9990:118":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:34501:14201":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:2446:8670":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:7976:7295":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"6:4535:6038":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:2526:5065":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5588:5086":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:11429:7404":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:40894:7018":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:563:5765":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"0:322:1826":{"crate_id":0,"path":["byteorder","BigEndian"],"kind":"enum"},"17:15432:4858":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:5374:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:22597:6769":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:1024:3724":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:41021:3790":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:7318:5378":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:3830:5112":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:1496:5786":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:6346:7695":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:38654:14204":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"17:10422:7574":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:0:888":{"crate_id":6,"path":["libc"],"kind":"module"},"2:40882:14033":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:3393:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:11412:7602":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:13347:4307":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:11414:7403":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:7041:5333":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:15184:4767":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"3:234:233":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:7492:5398":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:21953:1824":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:6576:6758":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:41179:7040":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:10293:3105":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:21677:6767":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:21321:30703":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:3141:13945":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:7677:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:12125:1651":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:12111:1515":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:14413:4526":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:9096:7877":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:4217:8712":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:3798:7824":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:14001:4441":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:5026:3135":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"16:7554:5098":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:1446:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:149:3708":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:32848:252":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:15855:4269":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"7:78:19956":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:12106:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:11666:4122":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:3460:3082":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:10973:3848":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:12596:7654":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:6711:6554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:45060:7165":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:44301:7114":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:13334:4306":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:4557:8718":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:13395:4319":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:5829:6309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:48646:7270":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:5447:7831":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:13145:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:6423:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"11:2326:7745":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:4774:5127":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:47623:7229":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:10440:3803":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:5121:5138":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:12546:7783":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:6666:6530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:41644:3133":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:8043:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:14057:4450":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:43707:7104":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:2972:3357":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:13754:4405":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:31592:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:12055:7902":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:2436:8665":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:14346:4519":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:14904:4702":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:7474:7719":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:7324:14188":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:8260:3103":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:4676:6091":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:3509:3091":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:5891:6352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:41615:7055":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:10962:7584":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:44137:3380":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:5146:6302":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:42213:8683":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:7582:5404":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4922:6187":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"11:434:34066":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:5023:6246":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:3607:3385":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:48657:7271":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:9996:2997":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:15244:4783":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:1990:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"11:1066:20042":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4375:5948":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:13504:4349":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:6361:5230":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:7597:34087":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:12356:4191":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:4666:6090":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:12310:4185":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:6376:20976":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"18:599:34105":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"18:538:3925":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:3155:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"11:1887:3302":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:46514:7188":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:11065:4082":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:44239:3387":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:22193:8898":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"11:883:7744":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:4473:6013":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:14989:4720":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:2256:6726":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:9943:21025":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:2806:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:22:740":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:12548:7650":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:10766:3100":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:9944:2751":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"5:266:3724":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:10510:7575":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:5130:6299":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:7377:3302":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:14324:4508":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:557:7805":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"15:0:2857":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:6169:6481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:8928:7869":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:6545:5254":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:12107:1669":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"11:1025:7745":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:5123:6296":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:2766:5075":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"11:351:34061":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:5673:5087":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:5939:5182":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:43478:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:6929:5317":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:22824:6794":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:7802:8588":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:9943:233":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"6:4808:6132":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:42179:7065":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4461:6004":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:11690:7617":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:12273:4225":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:5104:6287":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:6079:6450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:14633:4546":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:45297:7801":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"18:699:3944":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"12:0:2855":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:880:5616":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:2832:5078":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:212:3722":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:1923:3073":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:6688:3724":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13584:4356":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:2492:1792":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:11576:4112":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:4698:6093":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:3344:3123":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:11126:7591":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:2271:2228":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:10337:4070":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:9992:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:7610:6692":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:10919:3381":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:6047:6437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:4411:3082":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:4584:6065":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:1072:7751":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:4212:3082":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:21983:3450":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:22430:8895":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"4:0:2850":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:12828:4225":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:40859:7015":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:39343:14207":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:7286:3302":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:6156:5217":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:13441:3367":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:44283:7112":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:14470:4534":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"11:328:5612":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11657:4121":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:22459:8896":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:12772:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:4582:3010":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:7568:5099":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:13989:4440":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:3222:8613":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:909:7752":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:7633:6698":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:2979:32444":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:11456:7406":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:5393:3363":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:21496:8817":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:10432:34099":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"18:681:3940":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:4738:6096":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:1802:3039":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:15961:4283":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:6662:8777":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:22384:3056":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:7733:7847":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:15037:4727":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:13463:4338":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:15027:4726":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:7611:3132":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:15535:4878":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:1917:5619":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:13347:3813":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"5:3225:5617":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12614:21044":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:10643:246":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:45305:7175":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:14822:4690":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:4641:5124":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:11507:4105":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"5:3818:3765":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:42555:3252":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:8399:32034":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:10203:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:41405:3104":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:7096:3838":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:11071:3394":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:6934:6663":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:8942:7367":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:44229:3389":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:3217:5619":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:42476:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:4218:13943":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12244:4177":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:7206:29619":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:10000:2999":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:1521:5796":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:32830:3009":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:32776:2993":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:9791:3020":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"0:252:2154":{"crate_id":0,"path":["byteorder","BE"],"kind":"type_alias"},"18:614:34102":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:13724:4402":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:45244:226":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:45040:7160":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:45052:7163":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:2474:6727":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:46815:7199":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:32961:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:21284:3272":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:4444:3753":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:4806:5128":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:11527:3853":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:475:5712":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:7934:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:1674:5902":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:1570:5827":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:588:5778":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:7436:5190":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:6059:6442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:3655:3966":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:7348:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:8974:8781":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:6279:5224":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:15117:4750":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:2788:5076":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:5846:7840":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13145:4270":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:6718:6558":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:12612:13972":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:5885:6349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"18:766:25178":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:15235:4780":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:3307:3128":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:5461:7832":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:4635:8735":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:12105:1044":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:6710:240":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:42631:3302":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:10756:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:21338:30691":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:13162:4273":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:4745:5126":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:44848:7147":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:5004:6238":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:6696:5281":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:3196:33761":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:12561:13964":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:7325:14189":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:7013:3780":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:4246:8715":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:2584:3115":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:47687:7231":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:13194:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:6764:6577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:2406:5060":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:10090:7816":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:43395:7089":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:7694:5100":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:8302:7864":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:836:3384":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:3801:7825":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:14485:4188":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:41118:7030":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:2975:6723":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:893:3746":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:3753:7762":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:6189:5222":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:15125:4752":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:47183:7210":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:7038:3784":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:2546:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:44953:7158":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:7604:6691":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:15287:4797":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:542:5754":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:48741:7277":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:36723:5362":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:48692:7274":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:4528:3009":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:10682:7890":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"11:1896:3765":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"6:5111:6290":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:11083:7364":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:7360:34090":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:14282:4500":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:4914:6182":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:44295:7113":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:34132:14197":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:1632:5873":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:2744:5074":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:3418:31356":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:12486:4199":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:7714:7287":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:42242:7074":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:15710:4925":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:8115:5468":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:8872:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:945:7743":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:9730:21037":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:2339:5052":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:10209:150":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"6:1558:5819":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:3576:3095":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"18:624:34103":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:42743:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:33349:5355":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:41147:7035":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:6485:3746":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:11611:7826":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"5:634:7758":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13896:4428":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:12130:1258":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:10657:4096":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:12009:4096":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:5963:7659":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:5574:5083":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:5691:227":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:12701:4218":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:45068:7167":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:886:3732":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:44742:7141":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:4814:6134":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:8523:7100":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:14509:4544":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:11030:3391":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"14:215:5558":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:43162:2996":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:2472:5063":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:5085:6273":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:10242:4067":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:7971:7294":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:640:7809":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:2236:32582":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:15943:4273":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:511:7561":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"11:1582:7753":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:256:7558":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:7862:5424":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:10479:3127":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"18:736:25177":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:15612:4900":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:4998:6235":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:11958:4157":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:4719:5125":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:3226:30169":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:7365:6676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:11462:7407":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:22831:6797":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:2977:3820":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:4893:6171":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:9488:7852":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"5:7444:8599":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:12560:7651":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"18:80:25166":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:5830:5166":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:4225:8713":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:8216:3134":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:40778:7007":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:3003:3258":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:40377:26300":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:6136:6472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:42156:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:7622:6694":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:9559:21021":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:9142:7783":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:2864:5079":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:7993:3117":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:15680:4920":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:1789:3765":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:9860:21041":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:3229:25785":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:10207:4066":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:2536:5622":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:8352:3501":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:4428:5991":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:15557:4884":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:2728:3118":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:5015:6241":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:12104:408":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:3736:8684":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:11800:4125":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:5993:3760":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:1939:7819":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:11497:4104":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:41653:3798":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"18:590:3928":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:46384:7183":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:43176:2999":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:32837:6868":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:2353:3057":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:44756:7144":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4516:6030":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:8195:5473":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:10618:34100":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:10941:7582":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:1619:537":{"crate_id":2,"path":["core","intrinsics","copy_nonoverlapping"],"kind":"function"},"6:6868:6627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13309:4303":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:15980:4994":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:4002:8687":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:9174:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:31046:3006":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:6318:5227":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:48373:7263":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:4908:6179":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:4610:6077":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:48185:7261":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"11:742:7737":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:12684:4028":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:3190:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:8422:7341":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:5497:7834":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:2907:5081":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:40958:31007":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:12555:3946":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:23895:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:22415:1824":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:14662:4566":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:22370:8902":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:13407:4320":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:8920:3384":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12600:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:3267:3126":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:683:257":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:7859:14186":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:1315:7751":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:41199:7042":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:14156:4483":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:4764:6110":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:7787:8587":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:43423:30997":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:489:5720":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:5009:6240":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:11321:4096":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:40974:7025":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:10775:7579":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:40183:7791":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:13056:4246":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:6222:6492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:5512:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:42782:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:521:25179":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:939:7741":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6721:20978":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:21323:30688":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:41156:7036":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:2540:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:4830:6143":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5982:6393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:10907:25215":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:45064:7166":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"18:755:3958":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:1576:5829":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:5419:1826":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:849:3385":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:43460:3006":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:2574:5067":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:43715:7105":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:4988:31659":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:7340:3302":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:5969:6387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:11274:7895":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:11307:7599":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:8361:14185":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:11686:7410":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:1734:5925":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:22238:8899":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:12306:7122":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:31030:3045":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:23705:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:0:540":{"crate_id":2,"path":["core"],"kind":"module"},"1:11109:25224":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:2881:5080":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:5910:6354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:10608:7577":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:11204:7395":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"16:8050:5461":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"15:306:20068":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:22277:8900":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"2:40901:7019":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:8290:3102":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:5962:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:44343:3390":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:7639:6699":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:41280:7049":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:6485:5085":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:2275:3090":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:6606:7843":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:12124:1650":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:44068:7800":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:2450:5062":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"11:123:3712":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:2715:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:41058:3370":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:4518:3788":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:5612:5088":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:10788:3384":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:4445:228":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:3566:3092":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:2722:5073":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:482:3815":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"10:0:2853":{"crate_id":10,"path":["adler"],"kind":"module"},"2:10423:3802":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:13948:4434":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:2652:3116":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:8362:7865":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:3548:2751":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:16016:5001":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:1975:713":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:9481:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:3667:3746":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:6228:3829":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:6606:3302":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:504:3743":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:11215:4093":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"17:13869:4423":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:42665:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:16004:4999":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:1914:6747":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:1527:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"18:582:3272":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:6753:5294":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"15:394:20077":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:40204:6879":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"18:507:3917":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:14497:4537":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:41051:3136":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:41663:7059":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:41078:7793":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"11:2369:7757":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:914:7736":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:7006:7697":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:2305:20111":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:11387:7896":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:6243:7684":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:4967:426":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:507:5728":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:11563:4111":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"9:0:2852":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:1501:5788":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:6893:5315":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:11598:3382":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:48677:7273":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:1862:7816":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:48543:7266":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:5075:6268":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:1774:1791":{"crate_id":2,"path":["core","mem","align_of"],"kind":"function"},"2:40129:223":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:8181:5103":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:1516:7737":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:13742:4403":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:6352:5229":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:7671:3824":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:46532:7189":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:2618:5069":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"5:7432:6737":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:1591:5841":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"18:707:3946":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:12127:1649":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:46863:7200":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:11617:4115":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"11:2151:7747":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:5798:5160":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"10:36:5630":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:1691:5909":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:3764:5110":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:8072:5462":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:9651:21036":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:15108:4749":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:8097:5465":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:13809:4414":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:3470:13947":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:11099:3395":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:922:7738":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"11:800:3746":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:16032:5006":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:5634:6479":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:1590:5617":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:4094:8693":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:6248:6507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:10211:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:6898:6644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:7462:5397":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"9:507:5693":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:7621:20982":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:11117:7169":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:32928:3175":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:5155:3760":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"11:2403:3385":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"9:486:19962":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:7925:7292":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:8400:6558":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:13182:4283":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:41270:7048":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:13386:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:4535:8717":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:5262:1515":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"17:10915:7581":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:12510:4200":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"13:0:2849":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:14950:4711":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:46670:7195":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:41031:7792":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:9320:7817":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:44920:7153":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:40008:8612":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:12718:21045":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:3888:5113":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:1131:32589":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:5088:5137":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:7855:14187":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:12122:802":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:7759:3846":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:9256:26053":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:12123:1653":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:21995:30701":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:40085:222":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:4116:8697":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:11667:7409":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:10736:7292":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:2724:265":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:12898:21046":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:15177:4766":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:2434:8664":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:4364:5940":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:11154:7394":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:10067:4061":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:7808:8631":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:10002:213":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:14235:4493":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4480:6017":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:7660:5408":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:11693:7410":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:40190:6878":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:22857:8686":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:4496:6021":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4616:6079":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:8277:3105":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:48619:7268":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:14921:4703":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:3389:3112":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:4523:6033":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:12345:4190":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:0:1540":{"crate_id":1,"path":["std"],"kind":"module"},"17:16123:5028":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:5152:6305":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:2169:21100":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"11:774:5615":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:10974:4080":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:43676:3025":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:495:5723":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:48043:7260":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"0:341:1825":{"crate_id":0,"path":["byteorder","LittleEndian"],"kind":"enum"},"17:14021:4444":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:15659:4914":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:1664:5896":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:7645:6700":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:5812:7836":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:31222:31004":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:12322:7125":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:1203:7563":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:7908:4007":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:11085:3392":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:42640:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:548:5757":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:4557:5121":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:8378:7340":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:4686:6092":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:3687:3724":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:47007:7205":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:11767:7627":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:46430:7185":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:40151:3447":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:4233:8714":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"11:710:7736":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:3232:5049":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:5117:7830":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:45056:7164":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:4381:3753":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:5345:3724":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:14194:4488":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:2688:3108":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:6071:6449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:4724:6095":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:5033:6252":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:62:14512":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:5853:6752":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:1685:3724":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:15049:4730":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:13419:4321":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:44899:13979":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:41429:7053":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:21666:1824":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"11:2124:5342":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:9048:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:7668:6706":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:11523:4107":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:6118:3082":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:22741:6782":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:44207:3371":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12127:7639":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:6961:6669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:22328:30911":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:48794:7280":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:42553:3217":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12077:7632":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:11088:4084":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:6107:6463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:9031:3215":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:6600:20977":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:5363:5140":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:44475:7123":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:15311:4802":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:13676:4392":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:11369:4103":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:533:5748":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:1581:3746":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:7965:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:2420:8660":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11779:4123":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4939:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:6583:5256":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:14455:4530":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"15:288:20067":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:5384:20971":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:39961:13946":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:4986:5134":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:42349:7081":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:23424:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:11243:7596":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:40867:7007":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:3012:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:44624:7016":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:15842:4255":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:11381:7399":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"9:357:19978":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:45318:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6041:20975":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:1708:3082":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"18:609:7552":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"14:221:5560":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:3405:14007":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:6700:6549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:6261:7692":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"11:1603:7754":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:44249:3388":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:1585:3765":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:3399:14008":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:2048:2390":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:5682:3082":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:11485:7612":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:7824:7851":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:8961:7368":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:38709:14205":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:4237:14010":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:4104:8694":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:2961:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:2676:2994":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:7269:34092":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:43018:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:23990:6802":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:9164:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:2284:20085":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"13:110:34072":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:8898:7365":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4595:6070":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:14385:4522":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:15267:4791":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:4647:6089":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:5049:5136":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:2341:643":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:22682:6775":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:9968:21043":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:15003:4724":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:4824:6140":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:44579:3102":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"11:430:34070":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:15903:4980":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:44529:7126":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:3801:3302":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:22969:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:7128:7372":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:46652:7194":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:10884:7851":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"2:9459:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:6513:5244":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:10035:1825":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"5:7520:6743":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"11:673:3384":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:3461:5108":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:6159:6478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:13478:4344":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"11:811:3765":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"11:1883:3384":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:4972:8742":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:5819:7839":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:3010:233":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:4506:6027":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:40875:7016":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:15725:4926":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:7389:31347":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:8546:7354":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"3:0:485":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"5:5389:3362":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"11:364:3714":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:45044:7161":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:11672:2087":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:41188:7041":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:13765:4406":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:11136:7376":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:12536:7649":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:16076:5017":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:10109:7882":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"5:4050:3724":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:12066:3444":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:40941:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:14399:4523":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13436:4329":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:6609:8775":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:4810:8706":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:7679:6707":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"17:12746:4220":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:44194:3370":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:12396:4194":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:1546:5810":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:41638:7058":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:9043:7870":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:12659:21023":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:3594:3384":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:4949:5133":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:11945:7629":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:23333:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:9217:7377":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:7316:3736":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:44493:7124":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:4701:6569":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:21675:8814":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:8356:8716":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:10172:4065":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:30759:8685":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:44727:7135":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:15589:4899":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:41208:7043":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:2183:6720":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:7294:6735":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:11334:5690":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:22758:30985":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13218:4288":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"18:515:3920":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:4578:6062":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:6391:6754":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:4573:3789":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:46593:7191":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:31116:31024":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:867:5615":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:5566:7835":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:41629:7057":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:4691:8692":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:2795:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:4585:5122":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:33955:8808":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:42485:3384":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}