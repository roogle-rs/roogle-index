{"root":"0:0:2460","crate_version":"1.5.0","includes_private":false,"index":{"0:163":{"id":"0:163","crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1579,0],"end":[1579,50]},"visibility":"default","docs":"All types that implement `Write` get methods defined in `WriteBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3561:2744","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_i128","write_i64","write_u128","write_int","write_u32","write_u24","write_i16","write_int128","write_uint128","write_i32","write_i24","write_u48","write_i8","write_f64","write_f32","write_i48","write_u64","write_uint","write_u16","write_u8"],"trait":{"name":"WriteBytesExt","id":"0:106:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"W"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:55:1882":{"id":"0:55:1882","crate_id":0,"name":"read_u128","span":{"filename":"src/io.rs","begin":[376,4],"end":[380,5]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83,\n    0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83\n]);\nassert_eq!(16947640962301618749969007319746179, rdr.read_u128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:180:1857":{"id":"0:180:1857","crate_id":0,"name":"read_u24","span":{"filename":"src/lib.rs","begin":[248,4],"end":[250,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:717-0:322:1821":{"id":"b:5:717-0:322:1821","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:713:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:719:3350","5:720:3351","5:721:3352"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:271:1906":{"id":"0:271:1906","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[1988,4],"end":[1990,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:335":{"id":"0:335","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32733:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12987:33321":{"id":"2:12987:33321","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12592:14040","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::match_indices":"2:12984:33320"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44293:7184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:14038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2055":{"id":"0:102:2055","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/io.rs","begin":[1039,4],"end":[1044,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Safety\n\nThis method is unsafe because there are no guarantees made about the\nfloating point values. In particular, this method does not check for\nsignaling NaNs, which may result in undefined behavior.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f64_into` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:357:1143":{"id":"0:357:1143","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1842,55],"end":[1842,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31480:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2034":{"id":"0:94:2034","crate_id":0,"name":"read_i128_into","span":{"filename":"src/io.rs","begin":[858,4],"end":[868,5]},"visibility":"default","docs":"Reads a sequence of signed 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:719:3350":{"id":"5:719:3350","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"2:12909:333":{"id":"2:12909:333","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12910:2022","`u8`":"1:12089:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5601:34033":{"id":"5:5601:34033","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:3169","`String`":"5:7622:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:286:3169","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:331:786":{"id":"0:331:786","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1812,33],"end":[1812,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10250:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:348":{"id":"0:348","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,33],"end":[1842,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10242:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:349:786"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:154:1980":{"id":"0:154:1980","crate_id":0,"name":"write_int128","span":{"filename":"src/io.rs","begin":[1508,4],"end":[1516,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i128"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:254:60":{"id":"0:254:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1846,4],"end":[1848,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:325":{"id":"0:325","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,16],"end":[1812,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2973:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:23:2600":{"id":"0:23:2600","crate_id":0,"name":"read_i8","span":{"filename":"src/io.rs","begin":[85,4],"end":[89,5]},"visibility":"default","docs":"Reads a signed 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![0x02, 0xfb]);\nassert_eq!(2, rdr.read_i8().unwrap());\nassert_eq!(-5, rdr.read_i8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:205:1966":{"id":"0:205:1966","crate_id":0,"name":"write_i16","span":{"filename":"src/lib.rs","begin":[770,4],"end":[772,5]},"visibility":"default","docs":"Writes a signed 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2456-0:340:1820":{"id":"b:2:2456-0:340:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2458:25777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:249:2140":{"id":"0:249:2140","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[1793,4],"end":[1793,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 double-precision (8 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:3591-0:340:1820":{"id":"b:2:3591-0:340:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3589:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3593:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:112:1966":{"id":"0:112:1966","crate_id":0,"name":"write_i16","span":{"filename":"src/io.rs","begin":[1178,4],"end":[1182,5]},"visibility":"default","docs":"Writes a signed 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i16::<BigEndian>(193).unwrap();\nwtr.write_i16::<BigEndian>(-132).unwrap();\nassert_eq!(wtr, b\"\\x00\\xc1\\xff\\x7c\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i16"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:236:2090":{"id":"0:236:2090","crate_id":0,"name":"write_i64_into","span":{"filename":"src/lib.rs","begin":[1512,4],"end":[1517,5]},"visibility":"default","docs":"Writes signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"i64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:296:1858":{"id":"0:296:1858","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[2148,4],"end":[2153,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:179:1849":{"id":"0:179:1849","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[229,4],"end":[229,35]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:353":{"id":"0:353","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"2:32733:244","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:277:1994":{"id":"0:277:1994","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2026,4],"end":[2028,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:241:2110":{"id":"0:241:2110","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[1641,4],"end":[1641,43]},"visibility":"default","docs":"Converts the given slice of unsigned 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u32(&mut numbers);\nassert_eq!(numbers, [5u32.to_be(), 65000u32.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12900:3291":{"id":"2:12900:3291","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:31279":{"id":"2:12933:31279","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44417:7191","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:251:60":{"id":"0:251:60","crate_id":0,"name":"default","span":{"filename":"src/lib.rs","begin":[1816,4],"end":[1818,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12984:33320":{"id":"2:12984:33320","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12592:14040","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::rmatch_indices":"2:12987:33321"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44275:7183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2456-0:322:1821":{"id":"b:2:2456-0:322:1821","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2450:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2458:25777"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:109:1897":{"id":"0:109:1897","crate_id":0,"name":"write_u16","span":{"filename":"src/io.rs","begin":[1151,4],"end":[1155,5]},"visibility":"default","docs":"Writes an unsigned 16 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\\x03\\x00\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u16"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:300:1897":{"id":"0:300:1897","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[2164,4],"end":[2166,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:342:457":{"id":"0:342:457","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1842,9],"end":[1842,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:182:1868":{"id":"0:182:1868","crate_id":0,"name":"read_u48","span":{"filename":"src/lib.rs","begin":[288,4],"end":[290,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:303:1908":{"id":"0:303:1908","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[2179,4],"end":[2181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:330":{"id":"0:330","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,33],"end":[1812,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"2:10242:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:331:786"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:2:2771-0:340:1820":{"id":"b:2:2771-0:340:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:138","2:2775:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:221:2030":{"id":"0:221:2030","crate_id":0,"name":"read_i64_into","span":{"filename":"src/lib.rs","begin":[1148,4],"end":[1153,5]},"visibility":"default","docs":"Reads signed 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13032:33334":{"id":"2:13032:33334","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4769:33334"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44442:7074","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5602:3123":{"id":"5:5602:3123","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42367:3209-0:340:1820":{"id":"a:2:42367:3209-0:340:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42367:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:231:2064":{"id":"0:231:2064","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[1376,4],"end":[1376,51]},"visibility":"default","docs":"Writes unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 8*src.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:312:2058":{"id":"0:312:2058","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2224,4],"end":[2226,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:160:1985":{"id":"0:160:1985","crate_id":0,"name":"write_f64","span":{"filename":"src/io.rs","begin":[1570,4],"end":[1574,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian double-precision floating point number to a `Write`:\n\n```rust\nuse std::f64;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f64::<BigEndian>(f64::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x09\\x21\\xfb\\x54\\x44\\x2d\\x18\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:133:1906":{"id":"0:133:1906","crate_id":0,"name":"write_u64","span":{"filename":"src/io.rs","begin":[1367,4],"end":[1371,5]},"visibility":"default","docs":"Writes an unsigned 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u64::<BigEndian>(918733457491587).unwrap();\nwtr.write_u64::<BigEndian>(143).unwrap();\nassert_eq!(wtr, b\"\\x00\\x03\\x43\\x95\\x4d\\x60\\x86\\x83\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:341":{"id":"0:341","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,9],"end":[1842,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:342:457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:25:1849":{"id":"0:25:1849","crate_id":0,"name":"read_u16","span":{"filename":"src/io.rs","begin":[112,4],"end":[116,5]},"visibility":"default","docs":"Reads an unsigned 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u16"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:246:2131":{"id":"0:246:2131","crate_id":0,"name":"from_slice_i64","span":{"filename":"src/lib.rs","begin":[1749,4],"end":[1754,5]},"visibility":"default","docs":"Converts the given slice of signed 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i64(&mut numbers);\nassert_eq!(numbers, [5i64.to_be(), 65000i64.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:191:1906":{"id":"0:191:1906","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[467,4],"end":[467,41]},"visibility":"default","docs":"Writes an unsigned 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12963:33318":{"id":"2:12963:33318","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12592:14040","str::split":"2:12951:26549","prim@char":"1:12072:453","str::split_terminator":"2:12960:33317"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44193:7180","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:14038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:175:1819":{"id":"0:175:1819","crate_id":0,"name":"Sealed","span":{"filename":"src/lib.rs","begin":[172,4],"end":[172,23]},"visibility":"public","docs":"Sealed stops crates other than byteorder from implementing any traits\nthat use it.","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:314:2064":{"id":"0:314:2064","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2234,4],"end":[2236,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13021:26357":{"id":"2:13021:26357","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1957":{"id":"0:73:1957","crate_id":0,"name":"read_f32","span":{"filename":"src/io.rs","begin":[499,4],"end":[503,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian single-precision floating point number from a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n]);\nassert_eq!(f32::consts::PI, rdr.read_f32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"f32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:206:1968":{"id":"0:206:1968","crate_id":0,"name":"write_i24","span":{"filename":"src/lib.rs","begin":[792,4],"end":[794,5]},"visibility":"default","docs":"Writes a signed 24 bit integer `n` to `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:1994":{"id":"0:79:1994","crate_id":0,"name":"read_u16_into","span":{"filename":"src/io.rs","begin":[562,4],"end":[569,5]},"visibility":"default","docs":"Reads a sequence of unsigned 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12996:33325":{"id":"2:12996:33325","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:252:2149":{"id":"0:252:2149","crate_id":0,"name":"BE","span":{"filename":"src/lib.rs","begin":[1824,0],"end":[1824,24]},"visibility":"public","docs":"A type alias for [`BigEndian`].\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:194:1913":{"id":"0:194:1913","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[526,4],"end":[526,61]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:219:2020":{"id":"0:219:2020","crate_id":0,"name":"read_i16_into","span":{"filename":"src/lib.rs","begin":[1090,4],"end":[1095,5]},"visibility":"default","docs":"Reads signed 16 bit integers from `src` to `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:717-0:340:1820":{"id":"b:5:717-0:340:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:713:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:719:3350","5:720:3351","5:721:3352"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:181:1861":{"id":"0:181:1861","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[269,4],"end":[269,35]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:203:1957":{"id":"0:203:1957","crate_id":0,"name":"read_f32","span":{"filename":"src/lib.rs","begin":[725,4],"end":[727,5]},"visibility":"default","docs":"Reads a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"f32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32788:3168-0:322:1821":{"id":"a:2:32788:3168-0:322:1821","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32788:3168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2769:138":{"id":"2:2769:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"2:12943:3330":{"id":"2:12943:3330","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42244:191","prim@char":"1:12072:453","self::pattern":"2:12592:14040"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:2026":{"id":"0:90:2026","crate_id":0,"name":"read_i32_into","span":{"filename":"src/io.rs","begin":[782,4],"end":[789,5]},"visibility":"default","docs":"Reads a sequence of signed 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5585:34029":{"id":"5:5585:34029","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:286:3169","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:286:3169","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:26522":{"id":"2:12917:26522","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12998:33327":{"id":"2:12998:33327","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:14040"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12617:14037","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:315:2067":{"id":"0:315:2067","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2239,4],"end":[2241,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:7203":{"id":"2:12927:7203","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44101:7174","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:301:1902":{"id":"0:301:1902","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[2169,4],"end":[2171,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:286:2110":{"id":"0:286:2110","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2075,4],"end":[2081,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12899:879":{"id":"2:12899:879","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12072:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12940:26006":{"id":"2:12940:26006","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:14040"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:14038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5586:3030":{"id":"5:5586:3030","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:1789":{"id":"0:106:1789","crate_id":0,"name":"WriteBytesExt","span":{"filename":"src/io.rs","begin":[1073,0],"end":[1575,1]},"visibility":"public","docs":"Extends [`Write`] with methods for writing numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nWrite unsigned 16 bit big-endian integers to a [`Write`]:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<BigEndian>(517).unwrap();\nwtr.write_u16::<BigEndian>(768).unwrap();\nassert_eq!(wtr, vec![2, 5, 3, 0]);\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:107:2755","0:108:2762","0:109:1897","0:112:1966","0:115:1899","0:118:1968","0:121:1902","0:124:1971","0:127:1904","0:130:1973","0:133:1906","0:136:1975","0:139:1908","0:142:1978","0:145:1900","0:148:1969","0:151:1913","0:154:1980","0:157:1982","0:160:1985"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"io::Write","id":"1:3561:2744","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:163"]}}},"0:43:1868":{"id":"0:43:1868","crate_id":0,"name":"read_u48","span":{"filename":"src/io.rs","begin":[269,4],"end":[273,5]},"visibility":"default","docs":"Reads an unsigned 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xb6, 0x71, 0x6b, 0xdc, 0x2b, 0x31]);\nassert_eq!(200598257150769, rdr.read_u48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:1875":{"id":"0:49:1875","crate_id":0,"name":"read_u64","span":{"filename":"src/io.rs","begin":[321,4],"end":[325,5]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x03, 0x43, 0x95, 0x4d, 0x60, 0x86, 0x83]);\nassert_eq!(918733457491587, rdr.read_u64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:317:2110":{"id":"0:317:2110","crate_id":0,"name":"from_slice_u32","span":{"filename":"src/lib.rs","begin":[2253,4],"end":[2259,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:293:1861":{"id":"0:293:1861","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[2133,4],"end":[2135,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13010:33329":{"id":"2:13010:33329","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:14040"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:14038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13025:26353":{"id":"2:13025:26353","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:304:1900":{"id":"0:304:1900","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[2184,4],"end":[2191,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:209:1975":{"id":"0:209:1975","crate_id":0,"name":"write_i64","span":{"filename":"src/lib.rs","begin":[858,4],"end":[860,5]},"visibility":"default","docs":"Writes a signed 64 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:261:1849":{"id":"0:261:1849","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[1940,4],"end":[1942,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11-0:20:1788":{"id":"0:11-0:20:1788","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,20],"end":[82,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::ReadBytesExt","name":"ReadBytesExt","id":"0:20:1788","glob":false}}},"0:83:2008":{"id":"0:83:2008","crate_id":0,"name":"read_u64_into","span":{"filename":"src/io.rs","begin":[635,4],"end":[642,5]},"visibility":"default","docs":"Reads a sequence of unsigned 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:2030":{"id":"0:92:2030","crate_id":0,"name":"read_i64_into","span":{"filename":"src/io.rs","begin":[820,4],"end":[827,5]},"visibility":"default","docs":"Reads a sequence of signed 64 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 64 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_i64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:210:1978":{"id":"0:210:1978","crate_id":0,"name":"write_i128","span":{"filename":"src/lib.rs","begin":[880,4],"end":[882,5]},"visibility":"default","docs":"Writes a signed 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read n-byte `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1938,0],"end":[2124,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_f64_into","write_i128","write_i64","write_int","write_i16","write_u24","read_i64_into","read_f32","write_i32_into","read_int128","write_f32_into","read_i64","from_slice_i64","read_f64_into_unchecked","read_int","read_u24","read_i16","write_f32","write_f64","write_i48","read_i128_into","read_f64","write_i128_into","write_i16_into","from_slice_i128","read_i48","from_slice_i16","read_f32_into_unchecked","write_int128","read_f32_into","write_i32","write_u48","write_i24","read_i32_into","write_i64_into","read_i16_into","write_i8_into","write_f64_into","read_i128","from_slice_i32","read_u48","read_i32","read_i24"],"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:261:1849","0:262:1861","0:263:1875","0:264:1882","0:265:1858","0:267:1892","0:269:1897","0:270:1902","0:271:1906","0:272:1908","0:273:1900","0:275:1913","0:277:1994","0:278:2002","0:279:2008","0:280:2014","0:281:2058","0:282:2061","0:283:2064","0:284:2067","0:285:2105","0:286:2110","0:287:2114","0:288:2118","0:289:2138","0:290:2140"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:3593:1640":{"id":"2:3593:1640","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"2:40029:6937","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:213:1982":{"id":"0:213:1982","crate_id":0,"name":"write_f32","span":{"filename":"src/lib.rs","begin":[949,4],"end":[951,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet e = 2.71828;\nlet mut buf = [0; 4];\nLittleEndian::write_f32(&mut buf, e);\nassert_eq!(e, LittleEndian::read_f32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"f32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2760-0:340:1820":{"id":"b:2:2760-0:340:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:749"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:183:1875":{"id":"0:183:1875","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[309,4],"end":[309,35]},"visibility":"default","docs":"Reads an unsigned 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_u64(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u64(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"5:5600:34032":{"id":"5:5600:34032","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52:1939":{"id":"0:52:1939","crate_id":0,"name":"read_i64","span":{"filename":"src/io.rs","begin":[347,4],"end":[351,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 64 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i64::min_value(), rdr.read_i64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:2051":{"id":"0:100:2051","crate_id":0,"name":"read_f64_into","span":{"filename":"src/io.rs","begin":[987,4],"end":[994,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 double-precision (8 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n    0x3f, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f64_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f64::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:193:1900":{"id":"0:193:1900","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[506,4],"end":[506,57]},"visibility":"default","docs":"Writes an unsigned integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:287:2114":{"id":"0:287:2114","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2084,4],"end":[2090,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:255:2153":{"id":"0:255:2153","crate_id":0,"name":"LE","span":{"filename":"src/lib.rs","begin":[1854,0],"end":[1854,27]},"visibility":"public","docs":"A type alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:245:2127":{"id":"0:245:2127","crate_id":0,"name":"from_slice_i32","span":{"filename":"src/lib.rs","begin":[1724,4],"end":[1729,5]},"visibility":"default","docs":"Converts the given slice of signed 32 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i32(&mut numbers);\nassert_eq!(numbers, [5i32.to_be(), 65000i32.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:334:464":{"id":"0:334:464","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1812,39],"end":[1812,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31480:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:26355":{"id":"5:5604:26355","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13025:26353"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2766-0:340:1820":{"id":"b:2:2766-0:340:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2769:138","2:2770:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12981:33319":{"id":"2:12981:33319","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12592:14040","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::matches":"2:12978:2956"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44347:7187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:14038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31:1857":{"id":"0:31:1857","crate_id":0,"name":"read_u24","span":{"filename":"src/io.rs","begin":[165,4],"end":[169,5]},"visibility":"default","docs":"Reads an unsigned 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:267:1892":{"id":"0:267:1892","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[1969,4],"end":[1975,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:26561":{"id":"2:12934:26561","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:14040"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:234:2086":{"id":"0:234:2086","crate_id":0,"name":"write_i16_into","span":{"filename":"src/lib.rs","begin":[1456,4],"end":[1461,5]},"visibility":"default","docs":"Writes signed 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `buf.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0x0f, 0xee];\nLittleEndian::write_i16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"i16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:225:2047":{"id":"0:225:2047","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/lib.rs","begin":[1242,4],"end":[1244,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f32_into` instead"},"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2458:25777":{"id":"2:2458:25777","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:178:1845":{"id":"0:178:1845","crate_id":0,"name":"ByteOrder","span":{"filename":"src/lib.rs","begin":[212,0],"end":[1794,1]},"visibility":"public","docs":"`ByteOrder` describes types that can serialize integers as bytes.\n\nNote that `Self` does not appear anywhere in this trait's definition!\nTherefore, in order to use it, you'll need to use syntax like\n`T::read_u16(&[0, 1])` where `T` implements `ByteOrder`.\n\nThis crate provides two types that implement `ByteOrder`: [`BigEndian`]\nand [`LittleEndian`].\nThis trait is sealed and cannot be implemented for callers to avoid\nbreaking backwards compatibility when adding new derived traits.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, BigEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:179:1849","0:180:1857","0:181:1861","0:182:1868","0:183:1875","0:184:1882","0:185:1858","0:186:1892","0:187:1897","0:188:1899","0:189:1902","0:190:1904","0:191:1906","0:192:1908","0:193:1900","0:194:1913","0:195:1918","0:196:1923","0:197:1929","0:198:1934","0:199:1939","0:200:1944","0:201:1924","0:202:1951","0:203:1957","0:204:1964","0:205:1966","0:206:1968","0:207:1971","0:208:1973","0:209:1975","0:210:1978","0:211:1969","0:212:1980","0:213:1982","0:214:1985","0:215:1994","0:216:2002","0:217:2008","0:218:2014","0:219:2020","0:220:2026","0:221:2030","0:222:2034","0:223:2041","0:225:2047","0:226:2051","0:228:2055","0:229:2058","0:230:2061","0:231:2064","0:232:2067","0:233:2081","0:234:2086","0:235:2088","0:236:2090","0:237:2092","0:238:2094","0:239:2096","0:240:2105","0:241:2110","0:242:2114","0:243:2118","0:244:2123","0:245:2127","0:246:2131","0:247:2135","0:248:2138","0:249:2140"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:2973:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Debug","id":"2:10026:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"2:2807:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Eq","id":"2:2521:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Hash","id":"2:10242:153","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"2:2552:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2516:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2558:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"private::Sealed","id":"0:175:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:291","0:260"]}}},"2:12937:26004":{"id":"2:12937:26004","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:14040"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2978:246-0:340:1820":{"id":"a:2:2978:246-0:340:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:354":{"id":"0:354","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2516:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:355:665"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12947:3290":{"id":"2:12947:3290","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42244:191","prim@char":"1:12072:453","self::pattern":"2:12592:14040"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:14038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115:1899":{"id":"0:115:1899","crate_id":0,"name":"write_u24","span":{"filename":"src/io.rs","begin":[1205,4],"end":[1209,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u24::<BigEndian>(267).unwrap();\nwtr.write_u24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\x00\\x01\\x0b\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:189:1902":{"id":"0:189:1902","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[427,4],"end":[427,41]},"visibility":"default","docs":"Writes an unsigned 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13031:8641":{"id":"2:13031:8641","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4772:8641"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44433:7066","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:290:2140":{"id":"0:290:2140","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2114,4],"end":[2123,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:217:2008":{"id":"0:217:2008","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[1043,4],"end":[1043,50]},"visibility":"default","docs":"Reads unsigned 64 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2453-0:322:1821":{"id":"b:2:2453-0:322:1821","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2455:2943"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:2:2771-0:322:1821":{"id":"b:2:2771-0:322:1821","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2774:138","2:2775:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:21:2593":{"id":"0:21:2593","crate_id":0,"name":"read_u8","span":{"filename":"src/io.rs","begin":[55,4],"end":[59,5]},"visibility":"default","docs":"Reads an unsigned 8 bit integer from the underlying reader.\n\nNote that since this reads a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::ReadBytesExt;\n\nlet mut rdr = Cursor::new(vec![2, 5]);\nassert_eq!(2, rdr.read_u8().unwrap());\nassert_eq!(5, rdr.read_u8().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:1858":{"id":"0:61:1858","crate_id":0,"name":"read_uint","span":{"filename":"src/io.rs","begin":[427,4],"end":[431,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0x74, 0xfa]);\nassert_eq!(8418554, rdr.read_uint::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:226:2051":{"id":"0:226:2051","crate_id":0,"name":"read_f64_into","span":{"filename":"src/lib.rs","begin":[1269,4],"end":[1275,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/io.rs","begin":[1049,0],"end":[1049,48]},"visibility":"default","docs":"All types that implement `Read` get methods defined in `ReadBytesExt`\nfor free.","links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3504:2581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["read_f64_into","read_i64_into","read_i8","read_f32","read_int128","read_u64","read_i64","read_u16_into","read_f64_into_unchecked","read_int","read_u24","read_i16","read_i128_into","read_f64","read_u128","read_i48","read_u32","read_uint","read_f32_into_unchecked","read_u16","read_f32_into","read_i32_into","read_i16_into","read_u8","read_u128_into","read_uint128","read_i128","read_u64_into","read_u32_into","read_i8_into","read_u48","read_i32","read_i24"],"trait":{"name":"ReadBytesExt","id":"0:20:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"R"},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:2:32731:237-0:322:1821":{"id":"a:2:32731:237-0:322:1821","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32731:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:2:2766-0:322:1821":{"id":"b:2:2766-0:322:1821","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:2736:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2769:138","2:2770:1627"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:2:32731:237-0:340:1820":{"id":"a:2:32731:237-0:340:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:32731:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:13023:26358":{"id":"2:13023:26358","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:199:1939":{"id":"0:199:1939","crate_id":0,"name":"read_i64","span":{"filename":"src/lib.rs","begin":[634,4],"end":[636,5]},"visibility":"default","docs":"Reads a signed 64 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 8];\nLittleEndian::write_i64(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:328":{"id":"0:328","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,29],"end":[1812,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2521:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:309:2002":{"id":"0:309:2002","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2209,4],"end":[2211,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5584":{"id":"5:5584","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5585:34029","5:5586:3030","5:5589:34030","5:5592:34031","5:5600:34032","5:5601:34033","5:5602:3123","5:5603:26356","5:5604:26355"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:192:1908":{"id":"0:192:1908","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[486,4],"end":[486,43]},"visibility":"default","docs":"Writes an unsigned 128 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:190:1904":{"id":"0:190:1904","crate_id":0,"name":"write_u48","span":{"filename":"src/lib.rs","begin":[446,4],"end":[448,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `u64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_u48(&mut buf, 1_000_000_000_000);\nassert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:2978:246-0:322:1821":{"id":"a:2:2978:246-0:322:1821","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:2978:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:2:42366:3210-0:340:1820":{"id":"a:2:42366:3210-0:340:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42366:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:2770:1627":{"id":"2:2770:1627","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"2:42385:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:720:3351":{"id":"5:720:3351","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:292:1849":{"id":"0:292:1849","crate_id":0,"name":"read_u16","span":{"filename":"src/lib.rs","begin":[2128,4],"end":[2130,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87:2700":{"id":"0:87:2700","crate_id":0,"name":"read_i8_into","span":{"filename":"src/io.rs","begin":[716,4],"end":[719,5]},"visibility":"default","docs":"Reads a sequence of signed 8 bit integers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to read into a `&mut [i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `i8` individually.)\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 8 bit integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 251, 3]);\nlet mut dst = [0; 3];\nrdr.read_i8_into(&mut dst).unwrap();\nassert_eq!([2, -5, 3], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:201:1924":{"id":"0:201:1924","crate_id":0,"name":"read_int","span":{"filename":"src/lib.rs","begin":[679,4],"end":[681,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12904:33312":{"id":"2:12904:33312","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12902:33311"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:336":{"id":"0:336","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"2:2516:201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:337:665"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:212:1980":{"id":"0:212:1980","crate_id":0,"name":"write_int128","span":{"filename":"src/lib.rs","begin":[926,4],"end":[928,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then\nthis method panics.\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i128"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:248:2138":{"id":"0:248:2138","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[1786,4],"end":[1786,43]},"visibility":"default","docs":"Converts the given slice of IEEE754 single-precision (4 bytes) floating\npoint numbers to a particular endianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:264:1882":{"id":"0:264:1882","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[1955,4],"end":[1957,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:31299":{"id":"2:12930:31299","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12929:31289"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44408:7190","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:42366:3210-0:322:1821":{"id":"a:2:42366:3210-0:322:1821","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:42366:3210","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12931:30595":{"id":"2:12931:30595","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44379:3095","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13028:27755":{"id":"2:13028:27755","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:35559"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12966:26555":{"id":"2:12966:26555","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:14040","str::rsplitn":"2:12969:26557"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44229:3387","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:247:2135":{"id":"0:247:2135","crate_id":0,"name":"from_slice_i128","span":{"filename":"src/lib.rs","begin":[1774,4],"end":[1779,5]},"visibility":"default","docs":"Converts the given slice of signed 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_i128(&mut numbers);\nassert_eq!(numbers, [5i128.to_be(), 65000i128.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:322:1821":{"id":"0:322:1821","crate_id":0,"name":"BigEndian","span":{"filename":"src/lib.rs","begin":[1813,0],"end":[1813,21]},"visibility":"public","docs":"Defines big-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut buf = [0; 4];\nBigEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, BigEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:32731:237-0:322:1821","a:2:42366:3210-0:322:1821","a:2:2978:246-0:322:1821","a:2:32788:3168-0:322:1821","a:2:42367:3209-0:322:1821","b:2:2456-0:322:1821","b:2:2760-0:322:1821","b:2:2453-0:322:1821","b:2:3591-0:322:1821","b:2:2766-0:322:1821","b:2:2756-0:322:1821","b:2:2771-0:322:1821","b:5:717-0:322:1821","0:325","0:328","0:330","0:335","0:323","0:260","0:250","0:336","0:338","0:333","0:326"]}}},"0:333":{"id":"0:333","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,39],"end":[1812,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2552:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:334:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:58:1944":{"id":"0:58:1944","crate_id":0,"name":"read_i128","span":{"filename":"src/io.rs","begin":[402,4],"end":[406,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a signed 128 bit big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(i128::min_value(), rdr.read_i128::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[2126,0],"end":[2302,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["read_f64_into","write_i128","write_i64","write_int","write_i16","write_u24","read_i64_into","read_f32","write_i32_into","read_int128","write_f32_into","read_i64","from_slice_i64","read_f64_into_unchecked","read_int","read_u24","read_i16","write_f32","write_f64","write_i48","read_i128_into","read_f64","write_i128_into","write_i16_into","from_slice_i128","read_i48","from_slice_i16","read_f32_into_unchecked","write_int128","read_f32_into","write_i32","write_u48","write_i24","read_i32_into","write_i64_into","read_i16_into","write_i8_into","write_f64_into","read_i128","from_slice_i32","read_u48","read_i32","read_i24"],"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:292:1849","0:293:1861","0:294:1875","0:295:1882","0:296:1858","0:298:1892","0:300:1897","0:301:1902","0:302:1906","0:303:1908","0:304:1900","0:306:1913","0:308:1994","0:309:2002","0:310:2008","0:311:2014","0:312:2058","0:313:2061","0:314:2064","0:315:2067","0:316:2105","0:317:2110","0:318:2114","0:319:2118","0:320:2138","0:321:2140"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:12-0:106:1789":{"id":"0:12-0:106:1789","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[82,34],"end":[82,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::WriteBytesExt","name":"WriteBytesExt","id":"0:106:1789","glob":false}}},"0:279:2008":{"id":"0:279:2008","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2036,4],"end":[2038,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:218:2014":{"id":"0:218:2014","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[1066,4],"end":[1066,52]},"visibility":"default","docs":"Reads unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:294:1875":{"id":"0:294:1875","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[2138,4],"end":[2140,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:1978":{"id":"0:142:1978","crate_id":0,"name":"write_i128","span":{"filename":"src/io.rs","begin":[1410,4],"end":[1414,5]},"visibility":"default","docs":"Writes a signed 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i128"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:262:1861":{"id":"0:262:1861","crate_id":0,"name":"read_u32","span":{"filename":"src/lib.rs","begin":[1945,4],"end":[1947,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:345:722":{"id":"0:345:722","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1842,22],"end":[1842,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10001:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9982:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2759:3284":{"id":"2:2759:3284","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:2733:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12901:33310":{"id":"2:12901:33310","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12908:33313":{"id":"2:12908:33313","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12923:26547":{"id":"2:12923:26547","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12924:26548"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12957:26553":{"id":"2:12957:26553","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12592:14040","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::split":"2:12951:26549"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44143:3383","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:14038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:323":{"id":"0:323","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,9],"end":[1812,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"2:2469:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:324:457"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:313:2061":{"id":"0:313:2061","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2229,4],"end":[2231,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:33315":{"id":"2:12920:33315","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12078:1545","crate::ops::IndexMut":"2:3253:8672","str::slice_unchecked":"2:12919:33314"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:228:2055":{"id":"0:228:2055","crate_id":0,"name":"read_f64_into_unchecked","span":{"filename":"src/lib.rs","begin":[1305,4],"end":[1307,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f64_into` instead.\n\nReads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.3.0\", note = \"please use `read_f64_into` instead\")]"],"deprecation":{"since":"1.3.0","note":"please use `read_f64_into` instead"},"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:1924":{"id":"0:64:1924","crate_id":0,"name":"read_int","span":{"filename":"src/io.rs","begin":[452,4],"end":[456,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead an unsigned n-byte big-endian integer from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xc1, 0xff, 0x7c]);\nassert_eq!(-4063364, rdr.read_int::<BigEndian>(3).unwrap());","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:256:2161":{"id":"0:256:2161","crate_id":0,"name":"NetworkEndian","span":{"filename":"src/lib.rs","begin":[1880,0],"end":[1880,35]},"visibility":"public","docs":"Defines network byte order serialization.\n\nNetwork byte order is defined by [RFC 1700][1] to be big-endian, and is\nreferred to in several protocol specifications.  This type is an alias of\n[`BigEndian`].\n\n[1]: https://tools.ietf.org/html/rfc1700\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `i16` numbers in big endian order:\n\n```rust\nuse byteorder::{ByteOrder, NetworkEndian, BigEndian};\n\nlet mut buf = [0; 2];\nBigEndian::write_i16(&mut buf, -5_000);\nassert_eq!(-5_000, NetworkEndian::read_i16(&buf));\n```\n\n[`BigEndian`]: enum.BigEndian.html","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:2:42367:3209-0:322:1821":{"id":"a:2:42367:3209-0:322:1821","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:42367:3209","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12990:33322":{"id":"2:12990:33322","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:33316":{"id":"2:12932:33316","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44389:7188","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:265:1858":{"id":"0:265:1858","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[1960,4],"end":[1966,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13029:33333":{"id":"2:13029:33333","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4771:33333"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44424:7075","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:108:2762":{"id":"0:108:2762","crate_id":0,"name":"write_i8","span":{"filename":"src/io.rs","begin":[1126,4],"end":[1128,5]},"visibility":"default","docs":"Writes a signed 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_i8(2).unwrap();\nwtr.write_i8(-5).unwrap();\nassert_eq!(wtr, b\"\\x02\\xfb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i8"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13001:33328":{"id":"2:13001:33328","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:14040"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12969:26557":{"id":"2:12969:26557","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12072:453","str::splitn":"2:12966:26555","self::pattern":"2:12592:14040"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44247:3385","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:14038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:320:2138":{"id":"0:320:2138","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2280,4],"end":[2289,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5589:34030":{"id":"5:5589:34030","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:1964":{"id":"0:76:1964","crate_id":0,"name":"read_f64","span":{"filename":"src/io.rs","begin":[530,4],"end":[534,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a big-endian double-precision floating point number from a `Read`:\n\n```rust\nuse std::f64;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x09, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,\n]);\nassert_eq!(f64::consts::PI, rdr.read_f64::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"f64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:211:1969":{"id":"0:211:1969","crate_id":0,"name":"write_int","span":{"filename":"src/lib.rs","begin":[903,4],"end":[905,5]},"visibility":"default","docs":"Writes a signed integer `n` to `buf` using only `nbytes`.\n\n# Panics\n\nIf `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then\nthis method panics.\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:280:2014":{"id":"0:280:2014","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2041,4],"end":[2043,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:270:1902":{"id":"0:270:1902","crate_id":0,"name":"write_u32","span":{"filename":"src/lib.rs","begin":[1983,4],"end":[1985,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:242:2114":{"id":"0:242:2114","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[1660,4],"end":[1660,43]},"visibility":"default","docs":"Converts the given slice of unsigned 64 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u64(&mut numbers);\nassert_eq!(numbers, [5u64.to_be(), 65000u64.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:12994:33324":{"id":"2:12994:33324","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:26521":{"id":"2:12915:26521","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12992:33323":{"id":"2:12992:33323","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:352:464":{"id":"0:352:464","crate_id":0,"name":"cmp","span":{"filename":"src/lib.rs","begin":[1842,39],"end":[1842,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31480:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:311:2014":{"id":"0:311:2014","crate_id":0,"name":"read_u128_into","span":{"filename":"src/lib.rs","begin":[2219,4],"end":[2221,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:198:1934":{"id":"0:198:1934","crate_id":0,"name":"read_i48","span":{"filename":"src/lib.rs","begin":[612,4],"end":[614,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:7192":{"id":"2:12926:7192","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44095:7173","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:196:1923":{"id":"0:196:1923","crate_id":0,"name":"read_i24","span":{"filename":"src/lib.rs","begin":[568,4],"end":[570,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from `buf`, stored in i32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_i24(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i24(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2756-0:322:1821":{"id":"b:2:2756-0:322:1821","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2759:3284"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:204:1964":{"id":"0:204:1964","crate_id":0,"name":"read_f64","span":{"filename":"src/lib.rs","begin":[748,4],"end":[750,5]},"visibility":"default","docs":"Reads a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"f64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2460":{"id":"0:0:2460","crate_id":0,"name":"byteorder","span":{"filename":"src/lib.rs","begin":[1,0],"end":[3975,1]},"visibility":"public","docs":"This crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].\n\nThe organization of the crate is pretty simple. A trait, [`ByteOrder`], specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]\nand [`LittleEndian`] implement these methods. Finally, [`ReadBytesExt`] and\n[`WriteBytesExt`] provide convenience methods available to all types that\nimplement [`Read`] and [`Write`].\n\nAn alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve\ncode clarity.\n\nAn additional alias, [`NativeEndian`], is provided for the endianness of the\nlocal platform. This is convenient when serializing data for use and\nconversions are not desired.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`] type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a [`Write`] type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n\n# Optional Features\n\nThis crate optionally provides support for 128 bit values (`i128` and `u128`)\nwhen built with the `i128` feature enabled.\n\nThis crate can also be used without the standard library.\n\n# Alternatives\n\nNote that as of Rust 1.32, the standard numeric types provide built-in methods\nlike `to_le_bytes` and `from_le_bytes`, which support some of the same use\ncases.\n\n[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness\n[`ByteOrder`]: trait.ByteOrder.html\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`ReadBytesExt`]: trait.ReadBytesExt.html\n[`WriteBytesExt`]: trait.WriteBytesExt.html\n[`NetworkEndian`]: type.NetworkEndian.html\n[`NativeEndian`]: type.NativeEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html\n[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","links":{},"attrs":["#![deny(missing_docs)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:11-0:20:1788","0:12-0:106:1789","0:178:1845","0:322:1821","0:252:2149","0:340:1820","0:255:2153","0:256:2161","0:257:2164"],"is_stripped":false}}},"0:298:1892":{"id":"0:298:1892","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[2156,4],"end":[2161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12922:26544":{"id":"2:12922:26544","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12921:26543","str::split_at_mut_checked":"2:12924:26548"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13019:33332":{"id":"2:13019:33332","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12553:137","`FromStr`":"2:12552:8826"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42385:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12552:8826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12552:8826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28:1918":{"id":"0:28:1918","crate_id":0,"name":"read_i16","span":{"filename":"src/io.rs","begin":[139,4],"end":[143,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0xc1, 0xff, 0x7c]);\nassert_eq!(193, rdr.read_i16::<BigEndian>().unwrap());\nassert_eq!(-132, rdr.read_i16::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i16"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:250":{"id":"0:250","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1815,0],"end":[1819,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2807:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:251:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:40:1929":{"id":"0:40:1929","crate_id":0,"name":"read_i32","span":{"filename":"src/io.rs","begin":[243,4],"end":[247,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:200:1944":{"id":"0:200:1944","crate_id":0,"name":"read_i128","span":{"filename":"src/lib.rs","begin":[656,4],"end":[658,5]},"visibility":"default","docs":"Reads a signed 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_i128(&mut buf, -1_000_000_000);\nassert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:289:2138":{"id":"0:289:2138","crate_id":0,"name":"from_slice_f32","span":{"filename":"src/lib.rs","begin":[2102,4],"end":[2111,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:302:1906":{"id":"0:302:1906","crate_id":0,"name":"write_u64","span":{"filename":"src/lib.rs","begin":[2174,4],"end":[2176,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70:1951":{"id":"0:70:1951","crate_id":0,"name":"read_int128","span":{"filename":"src/io.rs","begin":[468,4],"end":[472,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i128"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2762:749":{"id":"2:2762:749","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12907:25885":{"id":"2:12907:25885","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12140:14041"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34:1923":{"id":"0:34:1923","crate_id":0,"name":"read_i24","span":{"filename":"src/io.rs","begin":[191,4],"end":[195,5]},"visibility":"default","docs":"Reads a signed 24 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 24 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0xff, 0x7a, 0x33]);\nassert_eq!(-34253, rdr.read_i24::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:288:2118":{"id":"0:288:2118","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2093,4],"end":[2099,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12978:2956":{"id":"2:12978:2956","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12592:14040","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::rmatches":"2:12981:33319"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44329:7186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:346":{"id":"0:346","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,29],"end":[1842,31]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"2:2521:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13013:33330":{"id":"2:13013:33330","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:14040"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:1968":{"id":"0:118:1968","crate_id":0,"name":"write_i24","span":{"filename":"src/io.rs","begin":[1232,4],"end":[1236,5]},"visibility":"default","docs":"Writes a signed 24 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 24 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i24::<BigEndian>(-34253).unwrap();\nwtr.write_i24::<BigEndian>(120111).unwrap();\nassert_eq!(wtr, b\"\\xff\\x7a\\x33\\x01\\xd5\\x2f\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12997:33326":{"id":"2:12997:33326","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:240:2105":{"id":"0:240:2105","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[1622,4],"end":[1622,43]},"visibility":"default","docs":"Converts the given slice of unsigned 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u16(&mut numbers);\nassert_eq!(numbers, [5u16.to_be(), 65000u16.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:13026:27753":{"id":"2:13026:27753","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:35559"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:319:2118":{"id":"0:319:2118","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[2271,4],"end":[2277,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603:26356":{"id":"5:5603:26356","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13024:26354"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:188:1899":{"id":"0:188:1899","crate_id":0,"name":"write_u24","span":{"filename":"src/lib.rs","begin":[406,4],"end":[408,5]},"visibility":"default","docs":"Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.\n\n# Panics\n\nPanics when `buf.len() < 3`.\n\n# Examples\n\nWrite and read 24 bit `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_u24(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u24(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:285:2105":{"id":"0:285:2105","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2066,4],"end":[2072,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:215:1994":{"id":"0:215:1994","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[997,4],"end":[997,50]},"visibility":"default","docs":"Reads unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 2*dst.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:272:1908":{"id":"0:272:1908","crate_id":0,"name":"write_u128","span":{"filename":"src/lib.rs","begin":[1993,4],"end":[1995,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:145:1900":{"id":"0:145:1900","crate_id":0,"name":"write_uint","span":{"filename":"src/io.rs","begin":[1442,4],"end":[1450,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite unsigned 40 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_uint::<BigEndian>(312550384361, 5).unwrap();\nwtr.write_uint::<BigEndian>(43, 5).unwrap();\nassert_eq!(wtr, b\"\\x48\\xc5\\x74\\x62\\xe9\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:2:32788:3168-0:340:1820":{"id":"a:2:32788:3168-0:340:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:32788:3168","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"2:12975:26560":{"id":"2:12975:26560","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:14038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:239:2096":{"id":"0:239:2096","crate_id":0,"name":"write_f64_into","span":{"filename":"src/lib.rs","begin":[1598,4],"end":[1603,5]},"visibility":"default","docs":"Writes IEEE754 double-precision (8 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 8*dst.len()`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 32];\nlet numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];\nLittleEndian::write_f64_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f64_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"f64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:351":{"id":"0:351","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,39],"end":[1842,42]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","min","clamp"],"trait":{"name":"Ord","id":"2:2552:195","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:352:464"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:233:2081":{"id":"0:233:2081","crate_id":0,"name":"write_i8_into","span":{"filename":"src/lib.rs","begin":[1428,4],"end":[1433,5]},"visibility":"default","docs":"Writes signed 8 bit integers from `src` into `dst`.\n\nNote that since each `i8` is a single byte, no byte order conversions\nare used. This method is included because it provides a safe, simple\nway for the caller to write from a `&[i8]` buffer. (Without this\nmethod, the caller would have to either use `unsafe` code or convert\neach byte to `u8` individually.)\n\n# Panics\n\nPanics when `buf.len() != src.len()`.\n\n# Examples\n\nWrite and read `i8` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian, ReadBytesExt};\n\nlet mut bytes = [0; 4];\nlet numbers_given = [1, 2, 0xf, 0xe];\nLittleEndian::write_i8_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nbytes.as_ref().read_i8_into(&mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"i8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:207:1971":{"id":"0:207:1971","crate_id":0,"name":"write_i32","span":{"filename":"src/lib.rs","begin":[814,4],"end":[816,5]},"visibility":"default","docs":"Writes a signed 32 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:237:2092":{"id":"0:237:2092","crate_id":0,"name":"write_i128_into","span":{"filename":"src/lib.rs","begin":[1540,4],"end":[1545,5]},"visibility":"default","docs":"Writes signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"i128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:1934":{"id":"0:46:1934","crate_id":0,"name":"read_i48","span":{"filename":"src/io.rs","begin":[295,4],"end":[299,5]},"visibility":"default","docs":"Reads a signed 48 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead signed 48 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x9d, 0x71, 0xab, 0xe7, 0x97, 0x8f]);\nassert_eq!(-108363435763825, rdr.read_i48::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i64"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:340:1820":{"id":"0:340:1820","crate_id":0,"name":"LittleEndian","span":{"filename":"src/lib.rs","begin":[1843,0],"end":[1843,24]},"visibility":"public","docs":"Defines little-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_u32(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u32(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"enum":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":[],"impls":["a:2:32731:237-0:340:1820","a:2:42366:3210-0:340:1820","a:2:2978:246-0:340:1820","a:2:32788:3168-0:340:1820","a:2:42367:3209-0:340:1820","b:2:2456-0:340:1820","b:2:2760-0:340:1820","b:2:2453-0:340:1820","b:2:3591-0:340:1820","b:2:2766-0:340:1820","b:2:2756-0:340:1820","b:2:2771-0:340:1820","b:5:717-0:340:1820","0:291","0:353","0:351","0:348","0:253","0:341","0:346","0:354","0:343","0:356","0:344"]}}},"2:12928:2182":{"id":"2:12928:2182","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44111:3098","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:202:1951":{"id":"0:202:1951","crate_id":0,"name":"read_int128","span":{"filename":"src/lib.rs","begin":[702,4],"end":[704,5]},"visibility":"default","docs":"Reads a signed n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read n-length signed numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_int128(&mut buf, -1_000, 3);\nassert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"i128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85:2014":{"id":"0:85:2014","crate_id":0,"name":"read_u128_into","span":{"filename":"src/io.rs","begin":[673,4],"end":[683,5]},"visibility":"default","docs":"Reads a sequence of unsigned 128 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 128 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0,\n]);\nlet mut dst = [0; 2];\nrdr.read_u128_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12929:31289":{"id":"2:12929:31289","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12930:31299"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44399:7189","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:26548":{"id":"2:12924:26548","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12923:26547"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:197:1929":{"id":"0:197:1929","crate_id":0,"name":"read_i32","span":{"filename":"src/lib.rs","begin":[590,4],"end":[592,5]},"visibility":"default","docs":"Reads a signed 32 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 4`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 4];\nLittleEndian::write_i32(&mut buf, -1_000_000);\nassert_eq!(-1_000_000, LittleEndian::read_i32(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:339:1143":{"id":"0:339:1143","crate_id":0,"name":"partial_cmp","span":{"filename":"src/lib.rs","begin":[1812,55],"end":[1812,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::option::Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"$crate::cmp::Ordering","id":"2:31480:196","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:356":{"id":"0:356","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,55],"end":[1842,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","gt","le","lt"],"trait":{"name":"PartialOrd","id":"2:2558:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:357:1143"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13004:25845":{"id":"2:13004:25845","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:14040"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:1971":{"id":"0:124:1971","crate_id":0,"name":"write_i32","span":{"filename":"src/io.rs","begin":[1286,4],"end":[1290,5]},"visibility":"default","docs":"Writes a signed 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i32::<BigEndian>(-34253).unwrap();\nwtr.write_i32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\xff\\xff\\x7a\\x33\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151:1913":{"id":"0:151:1913","crate_id":0,"name":"write_uint128","span":{"filename":"src/io.rs","begin":[1493,4],"end":[1501,5]},"visibility":"default","docs":"Writes an unsigned n-bytes integer to the underlying writer.\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 16`, this method panics.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:2775:1625":{"id":"2:2775:1625","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"2:42385:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"2:2740:256","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37:1861":{"id":"0:37:1861","crate_id":0,"name":"read_u32","span":{"filename":"src/io.rs","begin":[217,4],"end":[221,5]},"visibility":"default","docs":"Reads an unsigned 32 bit integer from the underlying reader.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0x00, 0x00, 0x01, 0x0b]);\nassert_eq!(267, rdr.read_u32::<BigEndian>().unwrap());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:187:1897":{"id":"0:187:1897","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[387,4],"end":[387,41]},"visibility":"default","docs":"Writes an unsigned 16 bit integer `n` to `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_u16(&mut buf, 1_000);\nassert_eq!(1_000, LittleEndian::read_u16(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:67:1892":{"id":"0:67:1892","crate_id":0,"name":"read_uint128","span":{"filename":"src/io.rs","begin":[460,4],"end":[464,5]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from the underlying reader.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u128"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:344":{"id":"0:344","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,22],"end":[1842,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10026:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:345:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:257:2164":{"id":"0:257:2164","crate_id":0,"name":"NativeEndian","span":{"filename":"src/lib.rs","begin":[1891,0],"end":[1891,37]},"visibility":"public","docs":"Defines system native-endian serialization.\n\nNote that this type has no value constructor. It is used purely at the\ntype level.\n\nOn this platform, this is an alias for [`LittleEndian`].\n\n[`LittleEndian`]: enum.LittleEndian.html","links":{},"attrs":["#[cfg(target_endian = \"little\")]"],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"2:2774:138":{"id":"2:2774:138","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"2:32661:2986","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:186:1892":{"id":"0:186:1892","crate_id":0,"name":"read_uint128","span":{"filename":"src/lib.rs","begin":[368,4],"end":[368,55]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 16` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint128(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:157:1982":{"id":"0:157:1982","crate_id":0,"name":"write_f32","span":{"filename":"src/io.rs","begin":[1541,4],"end":[1545,5]},"visibility":"default","docs":"Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite a big-endian single-precision floating point number to a `Write`:\n\n```rust\nuse std::f32;\n\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_f32::<BigEndian>(f32::consts::PI).unwrap();\nassert_eq!(wtr, b\"\\x40\\x49\\x0f\\xdb\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"f32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:222:2034":{"id":"0:222:2034","crate_id":0,"name":"read_i128_into","span":{"filename":"src/lib.rs","begin":[1177,4],"end":[1182,5]},"visibility":"default","docs":"Reads signed 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 16*dst.len()`.\n\n# Examples\n\nWrite and read `i128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:3591-0:322:1821":{"id":"b:2:3591-0:322:1821","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:3589:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:3593:1640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1842,16],"end":[1842,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"2:2973:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:216:2002":{"id":"0:216:2002","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[1020,4],"end":[1020,50]},"visibility":"default","docs":"Reads unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"2:2455:2943":{"id":"2:2455:2943","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:208:1973":{"id":"0:208:1973","crate_id":0,"name":"write_i48","span":{"filename":"src/lib.rs","begin":[836,4],"end":[838,5]},"visibility":"default","docs":"Writes a signed 48 bit integer `n` to `buf`, stored in i64.\n\n# Panics\n\nPanics when `buf.len() < 6`.\n\n# Examples\n\nWrite and read 48 bit `i64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 6];\nLittleEndian::write_i48(&mut buf, -1_000_000_000_000);\nassert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:321:2140":{"id":"0:321:2140","crate_id":0,"name":"from_slice_f64","span":{"filename":"src/lib.rs","begin":[2292,4],"end":[2301,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:220:2026":{"id":"0:220:2026","crate_id":0,"name":"read_i32_into","span":{"filename":"src/lib.rs","begin":[1119,4],"end":[1124,5]},"visibility":"default","docs":"Reads signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12951:26549":{"id":"2:12951:26549","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12592:14040","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::split_whitespace":"2:12929:31289","str::rsplit":"2:12957:26553"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44125:3099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:278:2002":{"id":"0:278:2002","crate_id":0,"name":"read_u32_into","span":{"filename":"src/lib.rs","begin":[2031,4],"end":[2033,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12913:26520":{"id":"2:12913:26520","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42244:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:310:2008":{"id":"0:310:2008","crate_id":0,"name":"read_u64_into","span":{"filename":"src/lib.rs","begin":[2214,4],"end":[2216,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:1902":{"id":"0:121:1902","crate_id":0,"name":"write_u32","span":{"filename":"src/io.rs","begin":[1259,4],"end":[1263,5]},"visibility":"default","docs":"Writes an unsigned 32 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 32 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u32::<BigEndian>(267).unwrap();\nwtr.write_u32::<BigEndian>(1205419366).unwrap();\nassert_eq!(wtr, b\"\\x00\\x00\\x01\\x0b\\x47\\xd9\\x3d\\x66\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u32"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:316:2105":{"id":"0:316:2105","crate_id":0,"name":"from_slice_u16","span":{"filename":"src/lib.rs","begin":[2244,4],"end":[2250,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:235:2088":{"id":"0:235:2088","crate_id":0,"name":"write_i32_into","span":{"filename":"src/lib.rs","begin":[1484,4],"end":[1489,5]},"visibility":"default","docs":"Writes signed 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `i32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_i32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_i32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"i32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2453-0:340:1820":{"id":"b:2:2453-0:340:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:32732:2735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2447:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2455:2943"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:214:1985":{"id":"0:214:1985","crate_id":0,"name":"write_f64","span":{"filename":"src/lib.rs","begin":[972,4],"end":[974,5]},"visibility":"default","docs":"Writes a IEEE754 double-precision (8 bytes) floating point number.\n\n# Panics\n\nPanics when `buf.len() < 8`.\n\n# Examples\n\nWrite and read `f64` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet phi = 1.6180339887;\nlet mut buf = [0; 8];\nLittleEndian::write_f64(&mut buf, phi);\nassert_eq!(phi, LittleEndian::read_f64(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"f64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13016:33331":{"id":"2:13016:33331","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:14040"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:14038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:324:457":{"id":"0:324:457","crate_id":0,"name":"clone","span":{"filename":"src/lib.rs","begin":[1812,9],"end":[1812,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:185:1858":{"id":"0:185:1858","crate_id":0,"name":"read_uint","span":{"filename":"src/lib.rs","begin":[348,4],"end":[348,51]},"visibility":"default","docs":"Reads an unsigned n-bytes integer from `buf`.\n\n# Panics\n\nPanics when `nbytes < 1` or `nbytes > 8` or\n`buf.len() < nbytes`\n\n# Examples\n\nWrite and read an n-byte number in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 3];\nLittleEndian::write_uint(&mut buf, 1_000_000, 3);\nassert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["nbytes",{"primitive":"usize"}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:2:2760-0:322:1821":{"id":"b:2:2760-0:322:1821","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2762:749"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:12911:26519":{"id":"2:12911:26519","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42244:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:2020":{"id":"0:88:2020","crate_id":0,"name":"read_i16_into","span":{"filename":"src/io.rs","begin":[747,4],"end":[754,5]},"visibility":"default","docs":"Reads a sequence of signed 16 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of signed 16 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_i16_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:349:786":{"id":"0:349:786","crate_id":0,"name":"hash","span":{"filename":"src/lib.rs","begin":[1842,33],"end":[1842,37]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"__H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"2:10250:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12910:2022":{"id":"2:12910:2022","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12089:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:337:665":{"id":"0:337:665","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1812,44],"end":[1812,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:1975":{"id":"0:136:1975","crate_id":0,"name":"write_i64","span":{"filename":"src/io.rs","begin":[1394,4],"end":[1398,5]},"visibility":"default","docs":"Writes a signed 64 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 64 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i64::<BigEndian>(i64::min_value()).unwrap();\nwtr.write_i64::<BigEndian>(i64::max_value()).unwrap();\nassert_eq!(wtr, b\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12972:26559":{"id":"2:12972:26559","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96:2041":{"id":"0:96:2041","crate_id":0,"name":"read_f32_into","span":{"filename":"src/io.rs","begin":[902,4],"end":[909,5]},"visibility":"default","docs":"Reads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:284:2067":{"id":"0:284:2067","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[2061,4],"end":[2063,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:2:2756-0:340:1820":{"id":"b:2:2756-0:340:1820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:2733:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:2730:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["2:2759:3284"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"2:13027:27754":{"id":"2:13027:27754","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:35559"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:273:1900":{"id":"0:273:1900","crate_id":0,"name":"write_uint","span":{"filename":"src/lib.rs","begin":[1998,4],"end":[2009,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u64"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:275:1913":{"id":"0:275:1913","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2012,4],"end":[2023,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:295:1882":{"id":"0:295:1882","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[2143,4],"end":[2145,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130:1973":{"id":"0:130:1973","crate_id":0,"name":"write_i48","span":{"filename":"src/io.rs","begin":[1340,4],"end":[1344,5]},"visibility":"default","docs":"Writes a signed 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite signed 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_i48::<BigEndian>(-108363435763825).unwrap();\nwtr.write_i48::<BigEndian>(77).unwrap();\nassert_eq!(wtr, b\"\\x9d\\x71\\xab\\xe7\\x97\\x8f\\x00\\x00\\x00\\x00\\x00\\x4d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:195:1918":{"id":"0:195:1918","crate_id":0,"name":"read_i16","span":{"filename":"src/lib.rs","begin":[546,4],"end":[548,5]},"visibility":"default","docs":"Reads a signed 16 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 2`.\n\n# Examples\n\nWrite and read `i16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 2];\nLittleEndian::write_i16(&mut buf, -1_000);\nassert_eq!(-1_000, LittleEndian::read_i16(&buf));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"i16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:253":{"id":"0:253","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1845,0],"end":[1849,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"2:2807:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:254:60"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:81:2002":{"id":"0:81:2002","crate_id":0,"name":"read_u32_into","span":{"filename":"src/io.rs","begin":[597,4],"end":[604,5]},"visibility":"default","docs":"Reads a sequence of unsigned 32 bit integers from the underlying\nreader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of unsigned 32 bit big-endian integers from a `Read`:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![0, 0, 2, 5, 0, 0, 3, 0]);\nlet mut dst = [0; 2];\nrdr.read_u32_into::<BigEndian>(&mut dst).unwrap();\nassert_eq!([517, 768], dst);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:282:2061":{"id":"0:282:2061","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[2051,4],"end":[2053,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:263:1875":{"id":"0:263:1875","crate_id":0,"name":"read_u64","span":{"filename":"src/lib.rs","begin":[1950,4],"end":[1952,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:306:1913":{"id":"0:306:1913","crate_id":0,"name":"write_uint128","span":{"filename":"src/lib.rs","begin":[2194,4],"end":[2201,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u128"}],["nbytes",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:1788":{"id":"0:20:1788","crate_id":0,"name":"ReadBytesExt","span":{"filename":"src/io.rs","begin":[30,0],"end":[1045,1]},"visibility":"public","docs":"Extends [`Read`] with methods for reading numbers. (For `std::io`.)\n\nMost of the methods defined here have an unconstrained type parameter that\nmust be explicitly instantiated. Typically, it is instantiated with either\nthe [`BigEndian`] or [`LittleEndian`] types defined in this crate.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a [`Read`]:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\n[`BigEndian`]: enum.BigEndian.html\n[`LittleEndian`]: enum.LittleEndian.html\n[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:21:2593","0:23:2600","0:25:1849","0:28:1918","0:31:1857","0:34:1923","0:37:1861","0:40:1929","0:43:1868","0:46:1934","0:49:1875","0:52:1939","0:55:1882","0:58:1944","0:61:1858","0:64:1924","0:67:1892","0:70:1951","0:73:1957","0:76:1964","0:79:1994","0:81:2002","0:83:2008","0:85:2014","0:87:2700","0:88:2020","0:90:2026","0:92:2030","0:94:2034","0:96:2041","0:98:2047","0:100:2051","0:102:2055"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"io::Read","id":"1:3504:2581","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:104"]}}},"0:139:1908":{"id":"0:139:1908","crate_id":0,"name":"write_u128","span":{"filename":"src/io.rs","begin":[1402,4],"end":[1406,5]},"visibility":"default","docs":"Writes an unsigned 128 bit integer to the underlying writer.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u128"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:26543":{"id":"2:12921:26543","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12923:26547","str::split_at_mut":"2:12922:26544"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:238:2094":{"id":"0:238:2094","crate_id":0,"name":"write_f32_into","span":{"filename":"src/lib.rs","begin":[1569,4],"end":[1574,5]},"visibility":"default","docs":"Writes IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"f32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12960:33317":{"id":"2:12960:33317","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12592:14040","str::split":"2:12951:26549","prim@char":"1:12072:453","`DoubleEndedIterator`":"2:7973:131","str::rsplit_terminator":"2:12963:33318"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44175:7179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:232:2067":{"id":"0:232:2067","crate_id":0,"name":"write_u128_into","span":{"filename":"src/lib.rs","begin":[1399,4],"end":[1399,53]},"visibility":"default","docs":"Writes unsigned 128 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 16*src.len()`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 64];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u128_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u128_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u128"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:107:2755":{"id":"0:107:2755","crate_id":0,"name":"write_u8","span":{"filename":"src/io.rs","begin":[1098,4],"end":[1100,5]},"visibility":"default","docs":"Writes an unsigned 8 bit integer to the underlying writer.\n\nNote that since this writes a single byte, no byte order conversions\nare used. It is included for completeness.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 8 bit integers to a `Write`:\n\n```rust\nuse byteorder::WriteBytesExt;\n\nlet mut wtr = Vec::new();\nwtr.write_u8(2).unwrap();\nwtr.write_u8(5).unwrap();\nassert_eq!(wtr, b\"\\x02\\x05\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u8"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:318:2114":{"id":"0:318:2114","crate_id":0,"name":"from_slice_u64","span":{"filename":"src/lib.rs","begin":[2262,4],"end":[2268,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13022:27750":{"id":"2:13022:27750","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40215:27706","Self::is_ascii":"2:13021:26357"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40215:27706","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13024:26354":{"id":"2:13024:26354","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:244:2123":{"id":"0:244:2123","crate_id":0,"name":"from_slice_i16","span":{"filename":"src/lib.rs","begin":[1699,4],"end":[1704,5]},"visibility":"default","docs":"Converts the given slice of signed 16 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 6500];\nBigEndian::from_slice_i16(&mut numbers);\nassert_eq!(numbers, [5i16.to_be(), 6500i16.to_be()]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"i16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:269:1897":{"id":"0:269:1897","crate_id":0,"name":"write_u16","span":{"filename":"src/lib.rs","begin":[1978,4],"end":[1980,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}],["n",{"primitive":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12898":{"id":"2:12898","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12899:879","2:12900:3291","2:12901:33310","2:12902:33311","2:12904:33312","2:12907:25885","2:12908:33313","2:12909:333","2:12910:2022","2:12911:26519","2:12913:26520","2:12915:26521","2:12917:26522","2:12919:33314","2:12920:33315","2:12921:26543","2:12922:26544","2:12923:26547","2:12924:26548","2:12926:7192","2:12927:7203","2:12928:2182","2:12929:31289","2:12930:31299","2:12931:30595","2:12932:33316","2:12933:31279","2:12934:26561","2:12937:26004","2:12940:26006","2:12943:3330","2:12947:3290","2:12951:26549","2:12954:26551","2:12957:26553","2:12960:33317","2:12963:33318","2:12966:26555","2:12969:26557","2:12972:26559","2:12975:26560","2:12978:2956","2:12981:33319","2:12984:33320","2:12987:33321","2:12990:33322","2:12992:33323","2:12994:33324","2:12996:33325","2:12997:33326","2:12998:33327","2:13001:33328","2:13004:25845","2:13007:26562","2:13010:33329","2:13013:33330","2:13016:33331","2:13019:33332","2:13021:26357","2:13022:27750","2:13023:26358","2:13024:26354","2:13025:26353","2:13026:27753","2:13027:27754","2:13028:27755","2:13029:33333","2:13031:8641","2:13032:33334"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:327:722":{"id":"0:327:722","crate_id":0,"name":"fmt","span":{"filename":"src/lib.rs","begin":[1812,22],"end":[1812,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"$crate::fmt::Formatter","id":"2:10001:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"$crate::fmt::Result","id":"2:9982:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:33311":{"id":"2:12902:33311","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:243:2118":{"id":"0:243:2118","crate_id":0,"name":"from_slice_u128","span":{"filename":"src/lib.rs","begin":[1679,4],"end":[1679,45]},"visibility":"default","docs":"Converts the given slice of unsigned 128 bit integers to a particular\nendianness.\n\nIf the endianness matches the endianness of the host platform, then\nthis is a no-op.\n\n# Examples\n\nConvert the host platform's endianness to big-endian:\n\n```rust\nuse byteorder::{ByteOrder, BigEndian};\n\nlet mut numbers = [5, 65000];\nBigEndian::from_slice_u128(&mut numbers);\nassert_eq!(numbers, [5u128.to_be(), 65000u128.to_be()]);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["numbers",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u128"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"5:721:3352":{"id":"5:721:3352","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:2047":{"id":"0:98:2047","crate_id":0,"name":"read_f32_into_unchecked","span":{"filename":"src/io.rs","begin":[948,4],"end":[953,5]},"visibility":"default","docs":"**DEPRECATED**.\n\nThis method is deprecated. Use `read_f32_into` instead.\n\nReads a sequence of IEEE754 single-precision (4 bytes) floating\npoint numbers from the underlying reader.\n\nThe given buffer is either filled completely or an error is returned.\nIf an error is returned, the contents of `dst` are unspecified.\n\n# Errors\n\nThis method returns the same errors as [`Read::read_exact`].\n\n[`Read::read_exact`]: https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\n\n# Examples\n\nRead a sequence of big-endian single-precision floating point number\nfrom a `Read`:\n\n```rust\nuse std::f32;\nuse std::io::Cursor;\n\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![\n    0x40, 0x49, 0x0f, 0xdb,\n    0x3f, 0x80, 0x00, 0x00,\n]);\nlet mut dst = [0.0; 2];\nrdr.read_f32_into_unchecked::<BigEndian>(&mut dst).unwrap();\nassert_eq!([f32::consts::PI, 1.0], dst);\n```","links":{},"attrs":["#[inline]","#[deprecated(since = \"1.2.0\", note = \"please use `read_f32_into` instead\")]"],"deprecation":{"since":"1.2.0","note":"please use `read_f32_into` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12954:26551":{"id":"2:12954:26551","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:14040"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12408:3389","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:230:2061":{"id":"0:230:2061","crate_id":0,"name":"write_u32_into","span":{"filename":"src/lib.rs","begin":[1353,4],"end":[1353,51]},"visibility":"default","docs":"Writes unsigned 32 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 4*src.len()`.\n\n# Examples\n\nWrite and read `u32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:326":{"id":"0:326","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,22],"end":[1812,27]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10026:121","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:327:722"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:148:1969":{"id":"0:148:1969","crate_id":0,"name":"write_int","span":{"filename":"src/io.rs","begin":[1478,4],"end":[1486,5]},"visibility":"default","docs":"Writes a signed n-bytes integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Panics\n\nIf the given integer is not representable in the given number of bytes,\nthis method panics. If `nbytes > 8`, this method panics.\n\n# Examples\n\nWrite signed 56 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_int::<BigEndian>(-3548172039376767, 7).unwrap();\nwtr.write_int::<BigEndian>(43, 7).unwrap();\nassert_eq!(wtr, b\"\\xf3\\x64\\xf4\\xd1\\xfd\\xb0\\x81\\x00\\x00\\x00\\x00\\x00\\x00\\x2b\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"i64"}],["nbytes",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:223:2041":{"id":"0:223:2041","crate_id":0,"name":"read_f32_into","span":{"filename":"src/lib.rs","begin":[1207,4],"end":[1213,5]},"visibility":"default","docs":"Reads IEEE754 single-precision (4 bytes) floating point numbers from\n`src` into `dst`.\n\n# Panics\n\nPanics when `src.len() != 4*dst.len()`.\n\n# Examples\n\nWrite and read `f32` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 16];\nlet numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];\nLittleEndian::write_f32_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0.0; 4];\nLittleEndian::read_f32_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"f32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:184:1882":{"id":"0:184:1882","crate_id":0,"name":"read_u128","span":{"filename":"src/lib.rs","begin":[328,4],"end":[328,37]},"visibility":"default","docs":"Reads an unsigned 128 bit integer from `buf`.\n\n# Panics\n\nPanics when `buf.len() < 16`.\n\n# Examples\n\nWrite and read `u128` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut buf = [0; 16];\nLittleEndian::write_u128(&mut buf, 1_000_000);\nassert_eq!(1_000_000, LittleEndian::read_u128(&buf));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["buf",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"primitive":"u128"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:283:2064":{"id":"0:283:2064","crate_id":0,"name":"write_u64_into","span":{"filename":"src/lib.rs","begin":[2056,4],"end":[2058,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13007:26562":{"id":"2:13007:26562","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:14040"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:7842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:14038","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1904":{"id":"0:127:1904","crate_id":0,"name":"write_u48","span":{"filename":"src/io.rs","begin":[1313,4],"end":[1317,5]},"visibility":"default","docs":"Writes an unsigned 48 bit integer to the underlying writer.\n\n# Errors\n\nThis method returns the same errors as [`Write::write_all`].\n\n[`Write::write_all`]: https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\n\n# Examples\n\nWrite unsigned 48 bit big-endian integers to a `Write`:\n\n```rust\nuse byteorder::{BigEndian, WriteBytesExt};\n\nlet mut wtr = Vec::new();\nwtr.write_u48::<BigEndian>(52360336390828).unwrap();\nwtr.write_u48::<BigEndian>(541).unwrap();\nassert_eq!(wtr, b\"\\x2f\\x9f\\x17\\x40\\x3a\\xac\\x00\\x00\\x00\\x00\\x02\\x1d\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["n",{"primitive":"u64"}]],"output":{"resolved_path":{"name":"Result","id":"1:3015:226","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ByteOrder","id":"0:178:1845","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:308:1994":{"id":"0:308:1994","crate_id":0,"name":"read_u16_into","span":{"filename":"src/lib.rs","begin":[2204,4],"end":[2206,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u16"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:338":{"id":"0:338","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1812,55],"end":[1812,65]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ge","gt","le","lt"],"trait":{"name":"PartialOrd","id":"2:2558:202","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BigEndian","id":"0:322:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:339:1143"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12919:33314":{"id":"2:12919:33314","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12078:1545","str::slice_mut_unchecked":"2:12920:33315","crate::ops::Index":"2:39861:8671"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:281:2058":{"id":"0:281:2058","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[2046,4],"end":[2048,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:355:665":{"id":"0:355:665","crate_id":0,"name":"eq","span":{"filename":"src/lib.rs","begin":[1842,44],"end":[1842,53]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"LittleEndian","id":"0:340:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5592:34031":{"id":"5:5592:34031","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:229:2058":{"id":"0:229:2058","crate_id":0,"name":"write_u16_into","span":{"filename":"src/lib.rs","begin":[1330,4],"end":[1330,51]},"visibility":"default","docs":"Writes unsigned 16 bit integers from `src` into `dst`.\n\n# Panics\n\nPanics when `dst.len() != 2*src.len()`.\n\n# Examples\n\nWrite and read `u16` numbers in little endian order:\n\n```rust\nuse byteorder::{ByteOrder, LittleEndian};\n\nlet mut bytes = [0; 8];\nlet numbers_given = [1, 2, 0xf00f, 0xffee];\nLittleEndian::write_u16_into(&numbers_given, &mut bytes);\n\nlet mut numbers_got = [0; 4];\nLittleEndian::read_u16_into(&bytes, &mut numbers_got);\nassert_eq!(numbers_given, numbers_got);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u16"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}}},"paths":{"2:22316:8969":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:46322:7252":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:16235:5034":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:40772:7082":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:16121:5007":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:13116:4243":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"17:12949:4171":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:6422:3706":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:13415:3809":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:4821:8773":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:4109:8763":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:42377:3497":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"9:391:20504":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:22793:31409":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:15596:4872":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:12289:4166":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:46692:7264":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:5581:7896":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:8236:3093":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:42308:3378":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:6438:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:48540:7341":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:46221:7248":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:1565:5830":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:3020:3065":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:15301:4776":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:1098:7622":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:39952:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:3832:3295":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:11153:7638":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:12107:4097":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13855:4407":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:4837:5969":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11557:7665":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:12089:1649":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:42020:7126":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:5056:3128":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:7749:7908":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"11:351:34721":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:4069:8761":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:11399:7464":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:909:7810":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:32820:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:44865:7227":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:2641:5072":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:12087:802":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:9155:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:44442:7074":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:48478:7339":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:5997:6812":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:8981:8850":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:13064:4236":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:5112:6092":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:4661:3004":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:43925:3372":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"11:844:8659":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:22807:6841":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:40627:7066":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:6292:5240":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"7:78:20496":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:2496:1787":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:42964:2990":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:47048:7284":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:10719:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:7103:34749":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:4065:3742":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:10444:3120":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"2:21753:8884":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:15376:4798":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:42291:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:6763:6524":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"1:11352:7459":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:2979:5105":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:4986:7633":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:42356:3207":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:6775:6526":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:11045:7424":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:10001:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:44845:7222":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:3221:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6320:5243":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:6244:21517":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:11042:7642":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:6597:6461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13046:4233":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:44193:7180":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:6151:3821":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:15957:4951":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:893:3742":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:3589:3088":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:15799:4926":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"16:7294:5398":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:15701:4901":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:1490:5789":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:48080:7323":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"11:0:2847":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:880:5617":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"9:481:20502":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:8224:3127":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:45055:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:6768:6525":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"0:178:1845":{"crate_id":0,"path":["byteorder","ByteOrder"],"kind":"trait"},"17:14414:4509":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:2693:3101":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:4605:3785":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:12055:25882":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:12683:7711":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"6:5200:6111":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:4787:5131":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:7971:7787":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:46646:7262":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:5636:6313":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"17:12422:4187":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:15222:4755":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:7982:7354":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:4879:3817":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:13553:4339":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6116:7743":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:40828:8704":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:14325:4494":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:13972:4131":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"19:0:1139":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:5219:6119":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:44869:7228":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:5959:20625":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5014:6063":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:30969:31373":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:11069:30214":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:12238:7699":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:45047:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:45157:7239":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"14:0:2849":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:363:7865":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:3472:3075":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:11354:7657":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:7645:7831":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13235:4271":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:3698:3742":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:3773:5113":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:44684:7208":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:14977:4701":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:14066:4440":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:928:8659":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:3354:3116":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:6068:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"11:2554:34730":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"0:256:2161":{"crate_id":0,"path":["byteorder","NetworkEndian"],"kind":"type_alias"},"16:7491:5409":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:42971:2989":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:5861:7901":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:14298:4490":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:14855:4653":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:44055:3381":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:0:2851":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:8006:6734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:3024:8877":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:6599:5294":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:46359:7254":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:2093:7820":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:16249:5035":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"11:1582:7811":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:1663:5903":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:5307:1512":{"crate_id":5,"path":["alloc","slice"],"kind":"module"},"1:7996:7915":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5557:6276":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:42513:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:11661:7470":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:5926:3742":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:42385:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:8604:7419":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:14463:4522":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:11647:4111":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12251:7700":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:15769:4921":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:3424:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:15138:4731":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"11:832:7810":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:5527:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:12072:453":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:12929:4226":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:7429:34746":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:7837:7912":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:15646:4885":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:6788:34747":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:8358:7399":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:8549:7414":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:44175:7179":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12659:7709":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:4572:8788":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:6201:5083":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:5846:7718":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:10039:2992":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:3190:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:44841:7221":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:2032:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:11799:7677":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:3051:14015":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:914:7795":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:6646:5308":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:21401:31890":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:5671:6326":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:3856:5115":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11605:4106":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:22759:6835":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:2440:8724":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:47394:7291":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:31131:31357":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:6331:5244":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:10031:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:7176:34750":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:7345:5402":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:5400:6201":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:12362:4183":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:7730:1819":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:6821:6542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:12606:3942":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"11:2231:5622":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:1510:5797":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:9048:25853":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"18:96:25758":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"7:31:20489":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:42450:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:3409:3442":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:7951:5472":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:9807:21568":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:10170:1821":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:8271:6752":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:12342:4178":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"11:328:5613":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:5794:5177":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:12039:8397":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:8923:7929":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:5346:5142":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:8298:3095":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:10855:7896":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:5050:3075":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:4911:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:44013:3364":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:5039:6076":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11214:7650":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:261:7619":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"11:2124:5343":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:6698:6502":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:8478:7411":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:7710:3820":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:8391:3495":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:4706:8762":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:2234:7628":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:11661:4112":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"14:220:5561":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:5390:6195":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:13738:4386":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:31507:3265":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:2730:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:46025:7240":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:40029:6937":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:4486:7837":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:5617:6304":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:9737:21562":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"6:1723:5926":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:10851:3378":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:12108:3437":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:42064:7133":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:8363:8786":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:5132:7891":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6230:5231":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"13:109:34732":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:5665:6324":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6908:5340":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:7070:30766":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:9503:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:44719:7213":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:1885:7878":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:7609:5413":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:15463:4817":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:46470:7257":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:44071:7169":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:5407:1109":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:16187:5024":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:13397:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:38623:14281":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:7650:3125":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:14051:4437":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:41082:3933":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:12572:4097":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:11110:3387":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:597:4059":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:11242:7652":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:1535:5811":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:4426:3749":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:3275:33066":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:44837:7220":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:13485:4320":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:11825:7682":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:1503:5795":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"11:299:5610":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:6394:5253":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:11567:7666":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:33932:14273":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:5298:21512":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:536:5040":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:46270:7250":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:5601:21513":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:46522:7259":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"11:364:3710":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:44084:7172":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11367:4081":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:5726:5167":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:6062:5223":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:1508:5616":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:15039:4712":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:10996:3390":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:10676:7351":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"2:9982:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"2:41013:7100":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:2121:3069":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:10494:3804":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:10185:4062":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:7467:29897":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:482:3811":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:11016:7641":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:4261:8785":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:11152:3386":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:44347:7187":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"11:2140:7804":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:3241:33074":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:5238:5140":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:8055:5396":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"1:11579:7887":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:1596:5619":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:3317:3121":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:5331:1821":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:15023:4709":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:39202:14282":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:7366:5098":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"13:0:2842":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:2424:8719":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"15:306:20609":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:5336:6173":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:42366:3210":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:2736:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:7392:3732":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:43243:5440":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"11:1007:5343":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:7987:7355":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"11:2369:7815":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:2365:3050":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:40925:7086":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:10218:4064":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:14545:4531":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:44541:7201":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:4123:8765":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:15822:4930":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:6445:5257":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:9150:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6141:34748":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:12085:800":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:15608:4875":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"1:8304:7923":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:2593:5070":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:5344:6174":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"2:12597:7842":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:45034:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:13272:4284":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:21418:31891":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:7565:5411":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"11:2151:7805":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:7684:5425":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:5277:6152":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:713:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:5919:21516":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:42788:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:34050:14274":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:4987:8812":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:5483:6249":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:1590:5618":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:689:3939":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:4996:8813":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:5370:6185":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:149:3704":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:5827:7897":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:44000:3363":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:6546:5281":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:8341:6769":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:4979:6044":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:6417:6360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:7611:3757":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"16:6555:5282":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:6376:5245":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:21627:8883":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:7429:6639":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:2355:5059":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:5499:5087":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:3264:7629":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:40644:7068":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:13199:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:10671:7443":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:9235:25881":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:14475:4523":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:6669:5309":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:1040:5343":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:7984:6733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13375:4300":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:2689:5074":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:12331:7181":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:7523:5101":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:14038:4435":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:14912:4691":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:40655:31390":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"11:787:5617":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13015:4189":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4952:6031":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:4491:5122":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:1809:662":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:32732:2735":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:2353:639":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:5477:6248":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:1923:5621":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:1653:5897":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:645:8643":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:5018:32351":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:3229:3377":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:1585:5844":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:43974:3365":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:10982:21596":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"18:521:25770":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:42747:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:40981:7095":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:11392:7658":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"11:2542:5624":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:6691:3831":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:12371:4226":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:16212:5029":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"1:10700:7352":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"2:3039:5357":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:40883:3363":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:44095:7173":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:22462:3049":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"6:6714:6510":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:34187:14275":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:12671:7710":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:1911:3067":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:6746:6516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"2:32661:2986":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"6:1517:5800":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:41241:7111":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:40753:14109":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:5031:6071":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:532:5755":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:15748:4915":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:22782:6839":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:0:1537":{"crate_id":1,"path":["std"],"kind":"module"},"1:6507:7116":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:4864:5992":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:7412:33078":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:4968:5137":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:12824:21587":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"18:651:3913":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:22675:6829":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11915:21684":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:5266:6144":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:11063:7644":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:3741:5112":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"6:4916:6018":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:10747:30216":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:43268:2999":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:2733:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:48288:7327":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:6636:6475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"11:1896:3761":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:45088:7861":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:3296:5621":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:32715:3002":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:7359:6615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:1547:5820":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:5225:6122":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:4075:8762":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8966:8851":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:8894:7425":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:11031:3383":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:7898:14261":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:39992:3441":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:7559:6797":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:10041:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:43259:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:15400:4803":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:3017:3350":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"18:589:3924":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:5649:6540":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"5:2517:6785":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:7976:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:11537:7664":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:8248:3094":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:11413:7907":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:44861:7226":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:7364:14264":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:8306:6760":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:2438:8723":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:11313:4094":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:8870:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:4545:5124":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"9:329:5671":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:15190:4748":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:15:2224":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:6511:7903":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:867:5616":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:14091:4442":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:7914:5466":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:44329:7186":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:820:3723":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:12408:4186":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:9181:7842":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"16:7482:7786":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"14:165:20589":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:5652:8831":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:11773:4205":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:15931:4256":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:44408:7190":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:722:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:13308:4289":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:3449:31874":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:41066:7105":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:10155:1820":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:3589:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:4720:6634":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:9690:8395":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:46867:7269":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:15168:4742":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:80:25757":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:7324:5399":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:1332:7804":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:41025:7101":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:12353:4182":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:13173:4255":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:21755:6827":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:10352:1512":{"crate_id":2,"path":["core","slice"],"kind":"module"},"5:3639:3377":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:2983:3007":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:7894:14262":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:3709:5111":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:13325:4291":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:10088:7942":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"5:3020:6781":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:2001:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:6664:6488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:40943:7089":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"4:0:2843":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:6811:6539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"10:36:5631":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:11142:4097":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:5565:6278":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:13509:4322":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12494:4195":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:13497:4321":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"9:237:7160":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:8268:3096":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:33208:5356":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:11702:4115":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:15266:4767":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:12094:854":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:5581:6283":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"11:2326:7804":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"16:7998:5104":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:44275:7183":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:6880:6554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:11635:7469":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:44035:3382":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"18:531:3918":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:13211:4270":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:7686:3838":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:5064:6089":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:12278:7702":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:7931:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"11:856:7800":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:491:5726":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:13766:4393":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:13248:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:9467:7913":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"11:1603:7812":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:9089:7432":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:4462:5121":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:7376:5404":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:11637:3369":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"6:465:5713":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:3545:5110":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:7889:5463":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:1486:3295":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"5:3783:2385":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:2279:34557":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:7426:3295":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:5278:5141":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:14876:4661":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:4203:7833":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:7414:5405":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:48204:7325":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:11341:7656":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:14372:4501":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:22406:31325":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:12092:1648":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:2375:5060":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:9196:7437":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:12454:4192":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:2995:20655":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4932:6022":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:16079:4996":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"11:811:3761":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:4718:6632":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"16:7537:5102":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:10396:3796":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"5:6764:3720":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:5434:3355":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:11075:4081":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:661:7816":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13146:4247":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:10317:4067":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:8351:7398":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:6874:6553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:42985:2992":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:7517:6796":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:6882:5334":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:47094:7285":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:15116:4727":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:8620:7422":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:10439:4071":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:38513:14279":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:1517:5617":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:10350:4068":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:40712:7066":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:10534:34753":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:6221:5230":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:41455:7116":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:4:1122":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:43306:3000":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:1686:5913":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:5146:6095":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11102:7647":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:4550:8787":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:13292:4285":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:46137:7245":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"3:0:480":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:15624:4879":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:5883:6811":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:5616:5150":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:13424:4307":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:553:5766":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:3863:3761":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:5445:6228":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:3732:3720":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:5314:6168":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:7452:21523":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:2573:5069":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:9781:21578":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:41034:7102":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:7948:7353":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:9030:7930":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:4649:5126":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:10251:4065":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:4985:6047":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:41497:7120":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:43725:3366":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:12023:7962":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:12707:7713":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:7619:21524":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:46970:7271":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:16165:5018":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"16:7551:5092":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11419:4097":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:5630:5153":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:44857:7225":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:8109:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:8394:3496":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"11:1107:7807":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:7339:6609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:10729:3093":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:22271:8968":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:42827:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:40042:6938":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:3260:5108":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:4902:8772":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:10682:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:10285:3015":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:21633:8886":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:42367:3209":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:4366:6810":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:10689:7449":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:32701:5396":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:15383:4799":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:11634:4110":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:44647:7207":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:47124:7286":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:7507:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:15273:4768":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:33991:14272":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:7442:6795":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:40856:7852":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"11:2423:3295":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"5:7402:6794":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:32788:3168":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:42552:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:14189:4472":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:3798:7820":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:6491:6399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:2104:7821":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:1628:533":{"crate_id":2,"path":["core","intrinsics","copy_nonoverlapping"],"kind":"function"},"17:16198:5025":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:14246:4484":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:11385:7463":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:2516:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"14:160:7791":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:8351:6771":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"11:742:7796":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"0:340:1820":{"crate_id":0,"path":["byteorder","LittleEndian"],"kind":"enum"},"2:44505:14052":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:14356:4500":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:5038:5139":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:10037:2991":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:44891:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:43963:3374":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:1301:5343":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:15720:4906":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:13723:4382":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:40846:3786":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:44379:3095":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:10828:34760":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:48410:7335":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:42441:3295":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:5878:5043":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:40022:7851":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:22185:8885":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:14560:4535":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:3172:14019":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:14933:4696":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:10759:4097":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:6677:8847":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:6431:5091":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"11:1887:3295":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:10887:7426":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"16:6610:5295":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:3224:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:9983:2744":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:6621:7904":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:6227:3809":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:588:8640":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:8082:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:7258:2174":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:1841:1196":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:7622:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2521:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:5541:5144":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:41448:7115":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:2671:3799":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"10:44:5632":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:11858:3853":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:7546:6705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:22355:8970":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:10090:7941":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:12851:4221":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:42004:7124":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:10045:2994":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:44915:7232":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:1862:7877":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12464:21709":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:14311:4491":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:43706:7166":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:12478:4194":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:12030:7687":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:12592:14040":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:43503:7160":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:42325:3206":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:12077:1512":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:816:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:7599:6802":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:11518:7885":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:11510:7662":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:9984:21583":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:15092:4725":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:12647:7708":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:43231:31398":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:10647:7950":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"16:5568:5148":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:40727:14108":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"14:31:7791":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:13753:4391":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:12090:1646":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:2665:5073":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:13581:4349":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:11497:7661":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:12584:7638":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:15678:4900":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:5200:3756":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:44926:14350":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:2740:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:1699:5917":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:9145:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:256:7618":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:6915:6579":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:8300:6759":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:3501:14021":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:22394:8971":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:5236:6129":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:11674:4113":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:14847:4650":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:10029:121":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:39877:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:3275:3119":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:14529:4529":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:11095:7436":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:1826:7876":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:12300:21708":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:16050:4284":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"17:14489:4524":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:12993:21588":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:13814:4403":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:44853:7224":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:40693:7073":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:45118:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"14:40:4271":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:15778:4923":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:1581:3742":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:1820:3761":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"5:4456:3075":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:7960:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:5191:6106":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:12095:1704":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"18:680:3936":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:2037:7624":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:13606:4353":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:10044:21584":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:9178:7436":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:42630:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:4942:6028":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:5712:3075":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:40683:7072":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:8282:6756":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:2203:7625":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:22073:31888":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:2399:5061":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:10887:34757":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:10230:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"11:687:3378":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:1470:3378":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:7335:5097":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:5097:860":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:14147:4451":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:6554:3742":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:725:1819":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"17:12225:7698":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:22061:3444":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:1317:7805":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"11:2548:5625":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:8285:3098":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:7706:21525":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:41489:7118":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:39914:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:12617:14037":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"9:177:8386":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:11430:7467":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:113:25759":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:8315:8741":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:1783:1786":{"crate_id":2,"path":["core","mem","align_of"],"kind":"function"},"2:44849:7223":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:46424:7256":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:6892:8881":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:2883:20653":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"5:3626:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:9858:21579":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:41004:7099":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:4924:6020":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:48373:7332":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:15281:4769":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:8400:14260":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:38458:14278":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:9035:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:22493:1819":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:5630:6310":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:1578:3295":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:10026:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:7412:6638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:5528:6259":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:13986:4429":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:5436:6222":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:42316:3295":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:5390:3720":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:4781:8814":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:30943:3038":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:12724:21586":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:14868:4660":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:15814:4927":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:15434:4810":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:5415:6207":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:9069:7935":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:2818:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"11:1917:5620":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:4250:14014":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:46069:7242":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:0:2852":{"crate_id":17,"path":["object"],"kind":"module"},"17:12863:4222":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:5645:5155":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:12124:3439":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:4409:3001":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:48463:7338":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:15151:4737":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:6052:3826":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:3830:5114":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:7400:5100":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:8012:2385":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"16:8022:21526":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:11812:7680":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:3237:29689":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:3262:5620":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"11:1566:20583":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:43721:7167":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:48384:7333":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:2727:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:8197:6747":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:10033:2989":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:10242:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:13344:4296":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:5476:7893":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:8937:7427":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:1346:7809":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"11:710:7795":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"18:598:34768":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:14503:4527":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:14599:4545":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:9041:7932":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:12328:4173":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"18:563:3923":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:44045:3380":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:2450:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:4232:8782":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:2859:7832":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:3010:3957":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:10738:30218":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:12443:4191":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:5713:3826":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:3013:3251":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"2:46714:7265":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:3017:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:10997:4078":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:48250:7326":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:12530:7706":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:21625:1819":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:4876:5995":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:12823:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:4433:5120":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:45109:7863":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"5:7704:3761":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:7595:5090":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:7480:14256":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:578:5779":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"5:7089:3776":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:22448:8972":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"18:623:34765":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:12370:7185":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:10876:3099":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:47284:7288":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:12621:4201":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"11:2498:20578":{"crate_id":11,"path":["hashbrown","Equivalent"],"kind":"trait"},"2:40670:7071":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:7754:7348":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"0:257:2164":{"crate_id":0,"path":["byteorder","NativeEndian"],"kind":"type_alias"},"17:10954:21595":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:1496:5792":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:47206:7287":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:3579:3085":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:43874:7860":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:11293:21615":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:2469:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:39781:3498":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:4269:14084":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"16:2529:5067":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:12969:4228":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:10661:7636":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:9017:7431":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:4965:6036":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:42368:3245":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:44873:7229":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:40:3716":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11230:7955":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:46115:7244":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"11:2562:5627":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:12056:4158":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:7561:6712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:933:3377":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:12070:403":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:40972:7094":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:860:3726":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:32708:7850":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:8215:3125":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:11058:7425":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:42222:7142":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:5352:6175":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:640:7870":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:47544:7292":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:8377:7923":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:6725:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:3993:5116":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:1485:5787":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:22379:1819":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:1707:5921":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:21744:1819":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:11089:7646":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:7516:6688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:12076:332":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:8631:7423":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:8915:3377":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:1692:5914":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:2749:5077":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:5580:5088":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"11:837:7797":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13774:4395":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:30958:2999":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:15655:4887":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:5006:5138":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"11:2403:3378":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:46377:7255":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:2509:5066":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:4825:8776":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:523:5749":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"18:735:25768":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:4614:3003":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:10946:3845":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:13959:4424":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:10935:3844":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:22851:31376":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:5457:6237":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:4959:6034":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:11877:4124":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:48364:7331":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:3399:3105":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"1:8090:3112":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:13797:4400":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"18:0:2853":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:4838:14102":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:4716:6630":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:21399:31885":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:7720:3765":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:3600:3962":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:11112:7454":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"2:1811:3032":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:9938:21582":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:5825:5183":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:2266:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:43934:3371":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:34533:14277":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:40746:7078":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:2724:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:43474:7159":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:3388:3761":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:1536:7795":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:8881:7424":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:9070:3208":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5677:6329":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:11595:4105":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:3218:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"18:635:3935":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:14723:4547":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:12127:4163":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:14752:4567":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"18:643:3913":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:44399:7189":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"11:800:3742":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:7314:6591":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:15426:4809":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:2175:21642":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:5020:6066":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:44101:7174":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"15:394:20618":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:10710:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"2:42978:2991":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:15249:4759":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:47750:7320":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:46300:7251":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:4909:6014":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:12093:1645":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:12264:7701":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:44555:7204":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4971:6039":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:11069:3384":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:14986:4702":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:46169:7246":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:8291:3099":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:22743:6831":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:6379:6333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:9081:7937":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:41441:7114":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:48501:7340":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:6738:6515":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:8931:3295":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"15:327:8372":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:44620:7206":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:7353:3361":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:6505:6410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13832:4404":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:1567:7819":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:4335:7835":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:34360:14276":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:6803:7755":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7152:5379":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:8247:6748":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:4870:5993":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:9830:3013":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:6478:6390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"5:6010:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:5329:6172":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"16:6929:5342":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:7225:21522":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:16032:4274":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:11865:7686":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"14:214:5559":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:26357:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:15616:4878":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:41096:7107":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:6721:6511":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:11424:7466":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:3203:3100":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:1939:7880":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:14131:4446":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:8085:7917":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:7627:7959":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:42591:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:4119:8764":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"5:3024:34527":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:8402:7927":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:8004:3110":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:7223:29556":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:2859:5082":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:12294:7176":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:48425:7336":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"11:1051:7805":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:6788:6533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:13252:4274":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:45134:7238":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:15390:4800":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:4787:5932":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:1925:6806":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:39972:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:12097:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:40953:7091":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:44526:7195":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:41106:7108":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:4047:8759":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"16:4399:5119":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:12399:4185":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:11256:4087":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:12543:7707":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:3504:2581":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:21384:31881":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"11:1910:5619":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:217:3718":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:13435:6826":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:40633:7067":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:14516:4528":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:2558:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:2729:5076":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:9964:7137":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:5546:6270":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:1607:5621":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:12408:3389":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:10958:3376":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:7984:7790":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:44143:3383":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:46789:7267":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:43491:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:16138:5009":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:4257:3075":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:883:7803":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:14994:4703":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:6737:5316":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:40963:7092":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:6254:5236":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"18:754:3954":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"14:7:7791":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:5696:5161":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:40215:27706":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:6462:21518":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:10919:3389":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:45037:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:43204:7149":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"16:2709:5075":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:7935:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:9076:7936":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:5662:21514":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:7444:7785":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:22542:8964":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"5:3236:5619":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:4061:8760":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:38568:14280":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:1181:34461":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:6099:7740":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:22815:6842":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:40876:3129":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:5906:3819":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:5052:6080":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:5046:6078":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:4824:5959":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:6941:21521":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:7348:6610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:14341:4496":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"12:0:2848":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:4907:5135":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:6895:5337":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:13877:4414":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:4126:3075":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:5134:6094":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:6965:7432":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:7635:6803":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:44709:7209":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:13024:21589":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:3916:7887":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:39892:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"6:7306:6586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:9299:7878":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"5:6167:3075":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:479:5721":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:621:7867":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:1547:7796":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:9886:21580":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:10092:21585":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:2687:1819":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:10720:34755":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6045:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10284:4066":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:11647:25850":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:16269:4306":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:14968:4697":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:9460:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"6:5472:6246":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:2363:3049":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:7575:6721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:12612:14038":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"11:1160:7809":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:6243:3825":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:1975:709":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:3419:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:9213:7938":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"11:123:3708":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:14386:4503":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"10:0:2846":{"crate_id":10,"path":["adler"],"kind":"module"},"17:12076:7690":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:47360:7290":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:8526:7160":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:43513:7164":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:7461:6650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:6624:8845":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:7434:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"11:875:7802":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:22913:6858":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:473:5718":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:44293:7184":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:9472:3840":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:8996:8852":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:11115:7648":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:4823:8775":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:22866:31371":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"18:515:3916":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:8614:3377":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"15:0:2850":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:2447:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:15197:4750":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:44417:7191":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:2748:6788":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:1593:5849":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:12089:4161":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:1585:3761":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:4560:3002":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"15:288:20608":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:33394:5353":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:31480:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11730:4118":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:48002:7322":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:9160:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:30937:3037":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:11670:3370":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:6441:6376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:7944:3167":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:46890:7270":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:2552:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:6811:21520":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:6524:6412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:8026:3166":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:48142:7324":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:9916:21581":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:2973:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:3061:14017":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:22900:6857":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:10018:21564":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:11443:4102":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"18:670:7617":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:34706:5362":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:13089:4237":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:46199:7247":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:3018:34566":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:6609:6466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:13273:7846":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:7774:3842":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:12073:1665":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:6447:6377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:2079:2385":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:21372:31881":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"7:0:1694":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11026:21597":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:2617:5071":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:6409:6358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:6519:6411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:11077:7229":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:3442:3126":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:504:3739":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:5306:6164":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:437:4013":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:4550:3784":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:1558:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:6542:6424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:5283:6155":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:46616:7261":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:3253:8672":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:7584:6724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:15313:4777":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:22924:8756":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:14235:4482":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:7802:8646":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:15734:4908":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:44247:3385":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:2284:20626":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:46045:7241":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:2978:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:12887:4223":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:9685:31900":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:7355:5403":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:5521:5089":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:5045:3198":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:12175:7691":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:42425:3377":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:11621:4108":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:22036:8889":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:12318:4171":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:2588:3108":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:11324:7653":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11467:4104":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:7926:7913":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:6650:6486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6077:7725":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:3430:14082":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:7572:31410":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:8288:6757":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"18:765:25769":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"0:255:2153":{"crate_id":0,"path":["byteorder","LE"],"kind":"type_alias"},"5:7543:3751":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:40801:31410":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:4481:7836":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11764:4123":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"2:47892:7321":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:485:5724":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:8012:6736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:10462:3798":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:13568:4345":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:13473:4317":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:5163:7891":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:7587:6800":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:10877:7639":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:4283:5117":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:40934:7088":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:11898:4126":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:15418:4807":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:286:3169":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:5102:6091":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:14449:4521":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"11:2352:7805":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:41057:7104":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:1063:7805":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:1054:3720":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:48326:7328":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:16151:5015":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:2419:5062":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:7363:14263":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:3240:29700":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:1574:3377":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:22:736":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"9:446:20503":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:15944:4270":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"16:5485:5084":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:5002:6057":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:6849:7756":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:10870:25855":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:7362:3295":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"11:1676:3714":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:12354:7182":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:8564:8825":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:40720:7075":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:6729:6512":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:14587:4538":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:1161:34519":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:11160:7455":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:44424:7075":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:6435:6373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:6621:6473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:40704:7074":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:7113:3834":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:3473:7630":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:357:7864":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:586:5783":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:6362:5103":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:21574:8887":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:5807:3075":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:11547:4005":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:43482:3018":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:6621:6817":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:15206:4751":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:5389:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:1072:7809":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:3597:7631":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:12792:4027":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:46738:7266":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:5122:6093":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:10573:34759":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:5209:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"5:7114:3780":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:4885:6000":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:13526:4330":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:945:7802":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:10672:1819":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"9:501:5694":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:545:5761":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:22537:8966":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"11:1883:3377":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:3273:3118":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:6615:6818":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:1716:3720":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:538:5758":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:15058:4713":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:6900:6568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:1968:8700":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"0:0:2460":{"crate_id":0,"path":["byteorder"],"kind":"module"},"11:2304:5343":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:40995:7098":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:42148:31370":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:7270:5191":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:2187:3739":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:12044:8648":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"16:6773:5318":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:2971:3250":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:2336:5053":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"16:3406:5109":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"11:673:3377":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"16:4733:5129":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:30905:3036":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:10952:3846":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:22728:6830":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:7389:6637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13785:4398":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:4674:5127":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:1680:5910":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:6188:5228":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:12083:698":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:14079:4441":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:11166:4083":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:32818:3253":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:5376:6187":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:6402:8974":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:2917:20654":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"18:698:3940":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:8317:6764":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:4312:7888":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:7470:3295":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:15635:4884":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:10441:3118":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:13363:4297":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"11:1142:7808":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"5:3652:3378":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:11335:3847":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:14012:4432":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:4992:6050":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:22508:8965":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:8438:31903":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"11:396:3712":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:14025:4433":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:31026:31369":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:40912:3096":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:5512:7895":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:951:7803":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:12201:7696":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:11788:7676":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:5160:6096":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:7602:6727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:11290:5691":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:11743:4119":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"5:6063:14546":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:6282:5239":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:4227:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:13594:4350":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:8954:7428":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"11:430:34729":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:10847:7912":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"6:6460:6378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:4518:5123":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:12071:1041":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:21416:31896":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:8328:6765":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:5706:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:11688:4114":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:7118:3206":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:0:884":{"crate_id":6,"path":["libc"],"kind":"module"},"2:30681:8744":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:12086:801":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:7366:6619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:859:3295":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:2459:5064":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:12388:4184":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:5588:6285":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:6944:3771":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:15760:4917":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:5296:6160":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:4572:5125":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:42300:3377":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:4800:5941":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:16093:5000":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:44572:7205":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:10710:7637":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:4017:8757":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:5720:7346":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11715:4116":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:7485:6662":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:6682:3295":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:32731:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:7931:7351":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:6215:7754":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:2439:5063":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:32697:7849":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:836:3377":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:6330:3826":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:7370:6793":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:2276:3083":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:46570:7260":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:44433:7066":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:4355:5118":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:4871:5134":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:46668:7263":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:6042:3756":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:14402:4507":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:11524:7663":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:12900:4225":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:12084:803":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:13844:4406":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:6471:6386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:16105:5002":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:12079:1630":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:16176:5023":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:6600:3720":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:7382:3742":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:41982:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:15289:4770":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:39817:14020":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:46091:7243":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:15176:4745":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:13437:4308":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:5865:5187":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:3436:14081":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"0:252:2149":{"crate_id":0,"path":["byteorder","BE"],"kind":"type_alias"},"5:2226:6778":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:15356:4792":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:7938:7352":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:15078:4721":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:6152:5225":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:6378:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:8278:3097":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:12150:4164":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:42182:7398":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"9:0:2845":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:6678:6493":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:6408:5255":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:21646:6827":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:8097:5481":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:14260:4486":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:10905:7640":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:39865:6931":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:5536:6264":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:5250:6135":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:11227:7651":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:3811:7885":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:8294:6758":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:21362:3265":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:3522:3084":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:8080:7916":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:12557:4081":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:43466:3019":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:2450:8729":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:2982:3816":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:12768:21565":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:42170:7140":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:8385:7400":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:45145:5630":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:4811:5949":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:6426:6813":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:271:3720":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:12075:1159":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:39861:8671":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:6547:3830":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:15992:4981":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"16:6745:5093":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:10769:34756":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:10419:4070":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:13525:3360":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:403:7620":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"6:7537:6702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:2035:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:42669:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:48344:7329":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:5466:6243":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:6348:5086":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:5181:6099":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:10827:3377":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:13946:4421":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"11:2536:5623":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12516:7704":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:2319:5051":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:7616:4059":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:10382:3841":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:5320:6169":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:1418:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:46500:7258":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:4240:8783":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:6689:6496":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:42708:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"11:1025:7804":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:15456:4815":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:10247:29872":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"18:613:34766":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:497:5729":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:10818:7638":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:10666:7441":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:4011:8758":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:559:5769":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:32789:3254":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:48399:7334":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:13674:4357":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:11130:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:3029:8879":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:23957:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:7330:6603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"14:202:14054":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:43521:7165":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:11124:3385":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:6657:6487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:47330:7289":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:5244:6133":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"18:718:3946":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:4210:29561":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:16069:4995":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:39932:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:1639:5886":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:3113:5358":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"9:52:8375":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:6759:5094":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"18:608:7612":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:918:7796":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:4477:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:15368:4795":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:2299:6784":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:5489:6251":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"16:4702:5128":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:14271:4487":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:557:7866":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:1621:5874":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:12091:1647":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:5759:5174":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:2688:2987":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:40739:7077":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:8864:7928":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:13538:4333":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:8369:7926":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:4392:7889":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:5502:6257":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:4650:8805":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:3561:2744":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"5:3270:5618":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:4131:8767":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:5260:6141":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12043:7688":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:4215:7834":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:7667:3836":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:415:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:7869:5462":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:15342:4785":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:6954:3772":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:4821:7632":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"11:1891:3742":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"14:187:20596":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:2819:5080":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:10248:153":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"16:5555:7716":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:8461:3202":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:15521:4859":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:5496:7894":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:48353:7330":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:6756:6523":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:1934:3066":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:4411:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:3234:30849":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:22183:1819":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:3464:14018":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:22408:3049":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"16:6579:21519":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:32733:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"13:226:5608":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:14212:4481":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:2197:6776":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:5321:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:8265:6751":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:2553:5068":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:3749:8743":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:4137:3378":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:4227:3075":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:8259:6750":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:7194:34751":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:4248:8784":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:11558:7886":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:637:7868":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:13922:4420":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:15473:4822":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:15010:4704":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:4297:3377":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:570:5774":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"18:726:3949":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:12088:798":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:1526:5805":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:11189:4085":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:9102:25784":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:46836:7268":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:6275:7902":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:7528:8658":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:12140:14041":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:15410:4806":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:41255:7112":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"5:5699:3759":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:9498:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:43285:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:32722:6927":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:10068:21567":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:41464:7117":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:3056:14016":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:6268:5085":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:7653:5421":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:44111:3098":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:42036:8742":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:1207:7623":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:44750:7218":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:533:3812":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:11138:3388":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:21572:1819":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:5423:6212":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:11841:7684":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:6134:7751":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:6421:8975":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"18:573:3913":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:44125:3099":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:1824:7875":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:15102:4726":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:6921:3759":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:3214:3165":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:10137:21561":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:44732:7217":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:15214:4753":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:6724:5314":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:4844:5133":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:9755:21560":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:22893:6854":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:849:3378":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:13412:4306":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:12663:14046":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:14177:4470":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10524:7634":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:5834:7900":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:43953:3373":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"11:1087:34731":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:14111:4445":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:7452:6646":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:44389:7188":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:939:7800":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:2443:3742":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:5083:6090":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:7973:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8428:7401":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:5462:7892":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:15836:4933":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:4897:6005":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"11:2569:6796":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:8907:7426":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:5438:3356":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:21430:31893":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:43214:2999":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:5598:6290":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:6626:3792":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:1804:638":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"17:12597:4200":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:4634:3005":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:13399:4304":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:5624:6307":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:13470:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:4761:5130":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:14788:4598":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"11:774:5616":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:12078:1545":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:16223:5031":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:11495:3849":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"11:434:34724":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"9:356:20518":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:43943:3375":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:2304:20652":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:8029:6746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:22622:6828":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:12552:8826":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:10671:34761":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:41479:3794":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:40903:7853":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:4997:421":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:7446:6644":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:1559:5828":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:3346:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:2733:3111":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:42204:7141":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:5643:6316":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11755:4122":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:3177:5050":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:40785:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"18:581:3265":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:10069:7877":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:13387:4301":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:2268:7883":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"18:481:3911":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:15333:4784":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:726:8745":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"16:2835:5081":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:6532:6417":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:42433:3378":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:11405:7659":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:6030:5218":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:44698:14053":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11128:4052":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:513:7621":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:15569:4860":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:916:3728":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:4489:3749":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"11:2383:3377":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:42474:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:903:3761":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:41231:3097":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:11714:2082":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"11:102:5609":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:7045:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:2807:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:5212:6118":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"5:5856:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:2489:5065":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:8012:5474":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:1580:5842":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:14575:4189":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:22831:31403":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:12082:696":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:10447:3116":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:9122:7435":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:11358:7956":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:41047:7103":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:10479:3799":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:2769:5078":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:6692:5310":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:7386:5099":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:5290:6157":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"18:538:3921":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:6562:6440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:10487:3842":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"11:2469:3761":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:15126:4728":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:922:7797":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:3015:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"0:322:1821":{"crate_id":0,"path":["byteorder","BigEndian"],"kind":"enum"},"17:10622:34758":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:1628:5878":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:8310:7925":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:7462:3295":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:2789:5079":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:7731:7347":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:11853:7685":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11583:7671":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:5382:6190":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"11:700:3295":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:3028:34526":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:5653:6317":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:3570:31232":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:7306:7778":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:0:536":{"crate_id":2,"path":["core"],"kind":"module"},"2:10290:3016":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"11:1903:5618":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:12096:1255":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:8253:6749":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:10399:3098":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:7467:6651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:3315:3120":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13999:4430":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"11:1066:20582":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:5713:5166":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:48448:7337":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:10035:2990":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:15445:4814":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12485:21710":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"5:1145:34460":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:10156:8833":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:42866:7844":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:40816:7084":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:5361:6179":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:3814:7886":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:36582:5363":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:42242:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:7822:8690":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"9:423:20505":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:6858:5333":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:3356:3117":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:1887:7879":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:14284:4489":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:12508:4198":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"18:507:3913":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:4784:8787":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:13221:31604":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:15582:4866":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:10250:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:16259:4301":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:1717:3075":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:4937:5136":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12189:7695":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:1671:5904":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:33873:8880":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:5174:6097":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:10612:7635":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:12808:4219":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:11574:5622":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:12433:4189":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:517:5746":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:10339:7928":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:12695:7712":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:11051:7643":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:7932:5469":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11269:21614":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:45096:7235":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:4095:3720":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:10915:34754":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:2422:3040":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:15324:4781":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:44026:3379":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:1602:5620":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"18:659:7613":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6706:6506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"18:706:3942":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:41470:3126":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:1455:3377":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:46239:7249":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:13899:4415":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:46340:7253":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:10043:2993":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:40790:7083":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:13187:4256":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:5316:1820":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:14436:4520":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:4891:6002":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:9671:21563":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"6:5515:6258":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:1526:7810":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:3200:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:564:5771":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:7921:4006":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:7816:8647":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11493:7660":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:8406:6619":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:6670:6491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:4464:7890":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:1054:7804":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:6629:6474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"8:0:2844":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:2657:3109":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:33580:14271":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:6979:3833":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"18:491:3912":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:4813:5132":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:33814:8878":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:2271:2223":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:7428:31276":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12213:7697":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:44229:3387":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:5897:21515":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:11654:7470":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:13455:4316":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:22031:1819":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}